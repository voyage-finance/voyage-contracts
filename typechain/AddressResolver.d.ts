/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AddressResolverInterface extends ethers.utils.Interface {
  functions: {
    "getLiquidityManager()": FunctionFragment;
    "getLoanManager()": FunctionFragment;
    "getVaultManager()": FunctionFragment;
    "getVoyagerAddress()": FunctionFragment;
    "setLiquidityManager(address)": FunctionFragment;
    "setLoanManager(address)": FunctionFragment;
    "setVaultManager(address)": FunctionFragment;
    "setVoyagerAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getLiquidityManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoyagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoyagerAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLiquidityManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoyagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoanManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVoyagerAddress",
    data: BytesLike
  ): Result;

  events: {
    "LiquidityManagerUpdated(address)": EventFragment;
    "LoanManagerUpdated(address)": EventFragment;
    "VaultManagerUpdated(address)": EventFragment;
    "VoyagerAddressUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoyagerAddressUpdated"): EventFragment;
}

export type LiquidityManagerUpdatedEvent = TypedEvent<
  [string] & { _liquidityManager: string }
>;

export type LoanManagerUpdatedEvent = TypedEvent<
  [string] & { _loanManager: string }
>;

export type VaultManagerUpdatedEvent = TypedEvent<
  [string] & { _vaultManager: string }
>;

export type VoyagerAddressUpdatedEvent = TypedEvent<
  [string] & { _voyager: string }
>;

export class AddressResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AddressResolverInterface;

  functions: {
    getLiquidityManager(overrides?: CallOverrides): Promise<[string]>;

    getLoanManager(overrides?: CallOverrides): Promise<[string]>;

    getVaultManager(overrides?: CallOverrides): Promise<[string]>;

    getVoyagerAddress(overrides?: CallOverrides): Promise<[string]>;

    setLiquidityManager(
      _liquidityManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLoanManager(
      _loanManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultManager(
      _vaultManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVoyagerAddress(
      _voyager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getLiquidityManager(overrides?: CallOverrides): Promise<string>;

  getLoanManager(overrides?: CallOverrides): Promise<string>;

  getVaultManager(overrides?: CallOverrides): Promise<string>;

  getVoyagerAddress(overrides?: CallOverrides): Promise<string>;

  setLiquidityManager(
    _liquidityManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLoanManager(
    _loanManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultManager(
    _vaultManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVoyagerAddress(
    _voyager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getLiquidityManager(overrides?: CallOverrides): Promise<string>;

    getLoanManager(overrides?: CallOverrides): Promise<string>;

    getVaultManager(overrides?: CallOverrides): Promise<string>;

    getVoyagerAddress(overrides?: CallOverrides): Promise<string>;

    setLiquidityManager(
      _liquidityManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLoanManager(
      _loanManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultManager(
      _vaultManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoyagerAddress(
      _voyager: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LiquidityManagerUpdated(address)"(
      _liquidityManager?: string | null
    ): TypedEventFilter<[string], { _liquidityManager: string }>;

    LiquidityManagerUpdated(
      _liquidityManager?: string | null
    ): TypedEventFilter<[string], { _liquidityManager: string }>;

    "LoanManagerUpdated(address)"(
      _loanManager?: string | null
    ): TypedEventFilter<[string], { _loanManager: string }>;

    LoanManagerUpdated(
      _loanManager?: string | null
    ): TypedEventFilter<[string], { _loanManager: string }>;

    "VaultManagerUpdated(address)"(
      _vaultManager?: string | null
    ): TypedEventFilter<[string], { _vaultManager: string }>;

    VaultManagerUpdated(
      _vaultManager?: string | null
    ): TypedEventFilter<[string], { _vaultManager: string }>;

    "VoyagerAddressUpdated(address)"(
      _voyager?: string | null
    ): TypedEventFilter<[string], { _voyager: string }>;

    VoyagerAddressUpdated(
      _voyager?: string | null
    ): TypedEventFilter<[string], { _voyager: string }>;
  };

  estimateGas: {
    getLiquidityManager(overrides?: CallOverrides): Promise<BigNumber>;

    getLoanManager(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultManager(overrides?: CallOverrides): Promise<BigNumber>;

    getVoyagerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setLiquidityManager(
      _liquidityManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLoanManager(
      _loanManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultManager(
      _vaultManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVoyagerAddress(
      _voyager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLiquidityManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVoyagerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLiquidityManager(
      _liquidityManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLoanManager(
      _loanManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultManager(
      _vaultManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVoyagerAddress(
      _voyager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
