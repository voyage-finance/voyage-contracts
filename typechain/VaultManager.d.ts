/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VaultManagerInterface extends ethers.utils.Interface {
  functions: {
    "allVaults(uint256)": FunctionFragment;
    "createAccount(address)": FunctionFragment;
    "getAllCreditAccount()": FunctionFragment;
    "getCreditAccount(address)": FunctionFragment;
    "getVault(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allVaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCreditAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditAccount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getVault", values: [string]): string;

  decodeFunctionResult(functionFragment: "allVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;

  events: {
    "VaultCreated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VaultCreated"): EventFragment;
}

export type VaultCreatedEvent = TypedEvent<
  [string, string, BigNumber] & {
    player: string;
    vault: string;
    arg2: BigNumber;
  }
>;

export class VaultManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VaultManagerInterface;

  functions: {
    allVaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    createAccount(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllCreditAccount(overrides?: CallOverrides): Promise<[string[]]>;

    getCreditAccount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVault(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  allVaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  createAccount(
    _player: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllCreditAccount(overrides?: CallOverrides): Promise<string[]>;

  getCreditAccount(_user: string, overrides?: CallOverrides): Promise<string>;

  getVault(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allVaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    createAccount(_player: string, overrides?: CallOverrides): Promise<string>;

    getAllCreditAccount(overrides?: CallOverrides): Promise<string[]>;

    getCreditAccount(_user: string, overrides?: CallOverrides): Promise<string>;

    getVault(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "VaultCreated(address,address,uint256)"(
      player?: string | null,
      vault?: null,
      undefined?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { player: string; vault: string; arg2: BigNumber }
    >;

    VaultCreated(
      player?: string | null,
      vault?: null,
      undefined?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { player: string; vault: string; arg2: BigNumber }
    >;
  };

  estimateGas: {
    allVaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAccount(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllCreditAccount(overrides?: CallOverrides): Promise<BigNumber>;

    getCreditAccount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allVaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAccount(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllCreditAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreditAccount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
