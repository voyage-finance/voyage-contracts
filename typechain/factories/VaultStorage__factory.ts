/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { VaultStorage, VaultStorageInterface } from "../VaultStorage";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vaultManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "associatedContract",
        type: "address",
      },
    ],
    name: "AssociatedContractUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "allVaults",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "associatedContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllVaults",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getVault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getVaultAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_player",
        type: "address",
      },
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
    ],
    name: "pushNewVault",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_associatedContract",
        type: "address",
      },
    ],
    name: "setAssociatedContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200103238038062001032833981810160405281019062000037919062000272565b80336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000186576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017d9062000305565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e0381604051620001f8919062000338565b60405180910390a1505062000355565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200023a826200020d565b9050919050565b6200024c816200022d565b81146200025857600080fd5b50565b6000815190506200026c8162000241565b92915050565b6000602082840312156200028b576200028a62000208565b5b60006200029b848285016200025b565b91505092915050565b600082825260208201905092915050565b7f4f776e6572206d75737420626520736574000000000000000000000000000000600082015250565b6000620002ed601183620002a4565b9150620002fa82620002b5565b602082019050919050565b600060208201905081810360008301526200032081620002de565b9050919050565b62000332816200022d565b82525050565b60006020820190506200034f600083018462000327565b92915050565b610ccd80620003656000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806397331bf91161007157806397331bf91461017b578063a3fdd98f14610199578063aefc4ccb146101c9578063e30c3978146101e7578063ef88c31e14610205578063f2fde38b14610235576100b4565b80630eb9af38146100b95780634e71e0c8146100e957806352f445ca146100f35780638da5cb5b1461010f5780638f32d59b1461012d5780639094a91e1461014b575b600080fd5b6100d360048036038101906100ce919061094e565b610251565b6040516100e0919061098a565b60405180910390f35b6100f1610284565b005b61010d6004803603810190610108919061094e565b610420565b005b6101176104e2565b604051610124919061098a565b60405180910390f35b610135610506565b60405161014291906109c0565b60405180910390f35b61016560048036038101906101609190610a11565b61055d565b604051610172919061098a565b60405180910390f35b61018361059c565b6040516101909190610afc565b60405180910390f35b6101b360048036038101906101ae9190610b1e565b61062a565b6040516101c09190610b6d565b60405180910390f35b6101d16107ab565b6040516101de919061098a565b60405180910390f35b6101ef6107d1565b6040516101fc919061098a565b60405180910390f35b61021f600480360381019061021a919061094e565b6107f7565b60405161022c919061098a565b60405180910390f35b61024f600480360381019061024a919061094e565b610860565b005b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102de57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610428610506565b610467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045e90610be5565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e03816040516104d7919061098a565b60405180910390a150565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6003818154811061056d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600380548060200260200160405190810160405280929190818152602001828054801561062057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105d6575b5050505050905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b390610c77565b60405180910390fd5b6003829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600380549050905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610868610506565b6108a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089e90610be5565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061091b826108f0565b9050919050565b61092b81610910565b811461093657600080fd5b50565b60008135905061094881610922565b92915050565b600060208284031215610964576109636108eb565b5b600061097284828501610939565b91505092915050565b61098481610910565b82525050565b600060208201905061099f600083018461097b565b92915050565b60008115159050919050565b6109ba816109a5565b82525050565b60006020820190506109d560008301846109b1565b92915050565b6000819050919050565b6109ee816109db565b81146109f957600080fd5b50565b600081359050610a0b816109e5565b92915050565b600060208284031215610a2757610a266108eb565b5b6000610a35848285016109fc565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610a7381610910565b82525050565b6000610a858383610a6a565b60208301905092915050565b6000602082019050919050565b6000610aa982610a3e565b610ab38185610a49565b9350610abe83610a5a565b8060005b83811015610aef578151610ad68882610a79565b9750610ae183610a91565b925050600181019050610ac2565b5085935050505092915050565b60006020820190508181036000830152610b168184610a9e565b905092915050565b60008060408385031215610b3557610b346108eb565b5b6000610b4385828601610939565b9250506020610b5485828601610939565b9150509250929050565b610b67816109db565b82525050565b6000602082019050610b826000830184610b5e565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610bcf602083610b88565b9150610bda82610b99565b602082019050919050565b60006020820190508181036000830152610bfe81610bc2565b9050919050565b7f4f6e6c7920746865206173736f63696174656420636f6e74726163742063616e60008201527f20706572666f726d207468697320616374696f6e000000000000000000000000602082015250565b6000610c61603483610b88565b9150610c6c82610c05565b604082019050919050565b60006020820190508181036000830152610c9081610c54565b905091905056fea2646970667358221220859d271c13a83be3f43da7674f697b3eb4d7c14f8d9a984925e7bfebd844bb5a64736f6c63430008090033";

export class VaultStorage__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _vaultManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VaultStorage> {
    return super.deploy(
      _vaultManager,
      overrides || {}
    ) as Promise<VaultStorage>;
  }
  getDeployTransaction(
    _vaultManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_vaultManager, overrides || {});
  }
  attach(address: string): VaultStorage {
    return super.attach(address) as VaultStorage;
  }
  connect(signer: Signer): VaultStorage__factory {
    return super.connect(signer) as VaultStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultStorageInterface {
    return new utils.Interface(_abi) as VaultStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VaultStorage {
    return new Contract(address, _abi, signerOrProvider) as VaultStorage;
  }
}
