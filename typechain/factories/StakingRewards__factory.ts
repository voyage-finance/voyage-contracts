/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingRewards,
  StakingRewardsInterface,
} from "../StakingRewards";

const _abi = [
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "periodFinish",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerTokenStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000600155600060025562093a8060035534801561002157600080fd5b50610334806100316000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637b0a47ee1161005b5780637b0a47ee146100ee578063c8f33c911461010c578063df136d651461012a578063ebe2b12b146101485761007d565b80630700037d14610082578063386a9525146100b257806372f702f3146100d0575b600080fd5b61009c60048036038101906100979190610223565b610166565b6040516100a99190610269565b60405180910390f35b6100ba61017e565b6040516100c79190610269565b60405180910390f35b6100d8610184565b6040516100e591906102e3565b60405180910390f35b6100f66101a8565b6040516101039190610269565b60405180910390f35b6101146101ae565b6040516101219190610269565b60405180910390f35b6101326101b4565b60405161013f9190610269565b60405180910390f35b6101506101ba565b60405161015d9190610269565b60405180910390f35b60076020528060005260406000206000915090505481565b60035481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60045481565b60055481565b60015481565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101f0826101c5565b9050919050565b610200816101e5565b811461020b57600080fd5b50565b60008135905061021d816101f7565b92915050565b600060208284031215610239576102386101c0565b5b60006102478482850161020e565b91505092915050565b6000819050919050565b61026381610250565b82525050565b600060208201905061027e600083018461025a565b92915050565b6000819050919050565b60006102a96102a461029f846101c5565b610284565b6101c5565b9050919050565b60006102bb8261028e565b9050919050565b60006102cd826102b0565b9050919050565b6102dd816102c2565b82525050565b60006020820190506102f860008301846102d4565b9291505056fea2646970667358221220c32e7be0cba420f31e2429a09d646f6286b3186bf269198b972cf95ed5dc809864736f6c63430008090033";

export class StakingRewards__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingRewards> {
    return super.deploy(overrides || {}) as Promise<StakingRewards>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StakingRewards {
    return super.attach(address) as StakingRewards;
  }
  connect(signer: Signer): StakingRewards__factory {
    return super.connect(signer) as StakingRewards__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingRewardsInterface {
    return new utils.Interface(_abi) as StakingRewardsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingRewards {
    return new Contract(address, _abi, signerOrProvider) as StakingRewards;
  }
}
