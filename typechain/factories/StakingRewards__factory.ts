/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingRewards,
  StakingRewardsInterface,
} from "../StakingRewards";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_rewardsDistribution",
        type: "address",
      },
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Recovered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "RewardAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "RewardPaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newDuration",
        type: "uint256",
      },
    ],
    name: "RewardsDurationUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "earned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRewardForDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastTimeRewardApplicable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "notifyRewardAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "periodFinish",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerTokenStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rewardsDuration",
        type: "uint256",
      },
    ],
    name: "setRewardsDuration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000600455600060055562093a806006553480156200002257600080fd5b5060405162001303380380620013038339818101604052810190620000489190620001b6565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001fd565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200017e8262000151565b9050919050565b620001908162000171565b81146200019c57600080fd5b50565b600081519050620001b08162000185565b92915050565b60008060408385031215620001d057620001cf6200014c565b5b6000620001e0858286016200019f565b9250506020620001f3858286016200019f565b9150509250929050565b6110f6806200020d6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c806380faa57d116100b8578063cd3daf9d1161007c578063cd3daf9d1461031b578063d1af0c7d14610339578063df136d6514610357578063e30c397814610375578063ebe2b12b14610393578063f2fde38b146103b157610136565b806380faa57d146102875780638da5cb5b146102a55780638f32d59b146102c3578063c8f33c91146102e1578063cc1a378f146102ff57610136565b80633c6b16ab116100ff5780633c6b16ab146101f55780634e71e0c81461021157806370a082311461021b57806372f702f31461024b5780637b0a47ee1461026957610136565b80628cc2621461013b5780630700037d1461016b57806318160ddd1461019b5780631c1f78eb146101b9578063386a9525146101d7575b600080fd5b61015560048036038101906101509190610c84565b6103cd565b6040516101629190610cca565b60405180910390f35b61018560048036038101906101809190610c84565b6104eb565b6040516101929190610cca565b60405180910390f35b6101a3610503565b6040516101b09190610cca565b60405180910390f35b6101c161050d565b6040516101ce9190610cca565b60405180910390f35b6101df61052b565b6040516101ec9190610cca565b60405180910390f35b61020f600480360381019061020a9190610d11565b610531565b005b6102196106fe565b005b61023560048036038101906102309190610c84565b61089a565b6040516102429190610cca565b60405180910390f35b6102536108e3565b6040516102609190610d9d565b60405180910390f35b610271610909565b60405161027e9190610cca565b60405180910390f35b61028f61090f565b60405161029c9190610cca565b60405180910390f35b6102ad610929565b6040516102ba9190610dc7565b60405180910390f35b6102cb61094d565b6040516102d89190610dfd565b60405180910390f35b6102e96109a4565b6040516102f69190610cca565b60405180910390f35b61031960048036038101906103149190610d11565b6109aa565b005b610323610a78565b6040516103309190610cca565b60405180910390f35b610341610b06565b60405161034e9190610cca565b60405180910390f35b61035f610b0c565b60405161036c9190610cca565b60405180910390f35b61037d610b12565b60405161038a9190610dc7565b60405180910390f35b61039b610b38565b6040516103a89190610cca565b60405180910390f35b6103cb60048036038101906103c69190610c84565b610b3e565b005b60006104e4600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104d6670de0b6b3a76400006104c861047a600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461046c610a78565b610bc990919063ffffffff16565b600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bdf90919063ffffffff16565b610bf590919063ffffffff16565b610c0b90919063ffffffff16565b9050919050565b600a6020528060005260406000206000915090505481565b6000600b54905090565b6000610526600654600554610bdf90919063ffffffff16565b905090565b60065481565b600061053b610a78565b60088190555061054961090f565b600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106165761058c816103cd565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600454421061063f5761063460065483610bf590919063ffffffff16565b6005819055506106a1565b600061065642600454610bc990919063ffffffff16565b9050600061066f60055483610bdf90919063ffffffff16565b905061069860065461068a8387610c0b90919063ffffffff16565b610bf590919063ffffffff16565b60058190555050505b426007819055506106bd60065442610c0b90919063ffffffff16565b6004819055507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d826040516106f29190610cca565b60405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461075857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6000600454421061092257600454610924565b425b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60075481565b6109b261094d565b6109f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e890610e75565b60405180910390fd5b6004544211610a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2c90610f2d565b60405180910390fd5b806006819055507ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d3600654604051610a6d9190610cca565b60405180910390a150565b600080600b541415610a8e576008549050610b03565b610b00610aef600b54610ae1670de0b6b3a7640000610ad3600554610ac5600754610ab761090f565b610bc990919063ffffffff16565b610bdf90919063ffffffff16565b610bdf90919063ffffffff16565b610bf590919063ffffffff16565b600854610c0b90919063ffffffff16565b90505b90565b60035481565b60085481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b610b4661094d565b610b85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7c90610e75565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008183610bd79190610f7c565b905092915050565b60008183610bed9190610fb0565b905092915050565b60008183610c039190611039565b905092915050565b60008183610c19919061106a565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c5182610c26565b9050919050565b610c6181610c46565b8114610c6c57600080fd5b50565b600081359050610c7e81610c58565b92915050565b600060208284031215610c9a57610c99610c21565b5b6000610ca884828501610c6f565b91505092915050565b6000819050919050565b610cc481610cb1565b82525050565b6000602082019050610cdf6000830184610cbb565b92915050565b610cee81610cb1565b8114610cf957600080fd5b50565b600081359050610d0b81610ce5565b92915050565b600060208284031215610d2757610d26610c21565b5b6000610d3584828501610cfc565b91505092915050565b6000819050919050565b6000610d63610d5e610d5984610c26565b610d3e565b610c26565b9050919050565b6000610d7582610d48565b9050919050565b6000610d8782610d6a565b9050919050565b610d9781610d7c565b82525050565b6000602082019050610db26000830184610d8e565b92915050565b610dc181610c46565b82525050565b6000602082019050610ddc6000830184610db8565b92915050565b60008115159050919050565b610df781610de2565b82525050565b6000602082019050610e126000830184610dee565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610e5f602083610e18565b9150610e6a82610e29565b602082019050919050565b60006020820190508181036000830152610e8e81610e52565b9050919050565b7f50726576696f7573207265776172647320706572696f64206d7573742062652060008201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260208201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000604082015250565b6000610f17605883610e18565b9150610f2282610e95565b606082019050919050565b60006020820190508181036000830152610f4681610f0a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f8782610cb1565b9150610f9283610cb1565b925082821015610fa557610fa4610f4d565b5b828203905092915050565b6000610fbb82610cb1565b9150610fc683610cb1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fff57610ffe610f4d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061104482610cb1565b915061104f83610cb1565b92508261105f5761105e61100a565b5b828204905092915050565b600061107582610cb1565b915061108083610cb1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110b5576110b4610f4d565b5b82820190509291505056fea264697066735822122089ddbaf3fa19fbf7925e8108c61bf6392ab04b3536a4ec715bfa8ba80be29ed264736f6c63430008090033";

export class StakingRewards__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _rewardsDistribution: string,
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingRewards> {
    return super.deploy(
      _rewardsDistribution,
      _stakingToken,
      overrides || {}
    ) as Promise<StakingRewards>;
  }
  getDeployTransaction(
    _rewardsDistribution: string,
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _rewardsDistribution,
      _stakingToken,
      overrides || {}
    );
  }
  attach(address: string): StakingRewards {
    return super.attach(address) as StakingRewards;
  }
  connect(signer: Signer): StakingRewards__factory {
    return super.connect(signer) as StakingRewards__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingRewardsInterface {
    return new utils.Interface(_abi) as StakingRewardsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingRewards {
    return new Contract(address, _abi, signerOrProvider) as StakingRewards;
  }
}
