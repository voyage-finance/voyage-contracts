/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingRewards,
  StakingRewardsInterface,
} from "../StakingRewards";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_rewardsDistribution",
        type: "address",
      },
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Recovered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "RewardAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "RewardPaid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newDuration",
        type: "uint256",
      },
    ],
    name: "RewardsDurationUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "earned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRewardForDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastTimeRewardApplicable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "notifyRewardAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "periodFinish",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerTokenStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000600455600060055562093a806006553480156200002257600080fd5b5060405162001156380380620011568339818101604052810190620000489190620001b6565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001fd565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200017e8262000151565b9050919050565b620001908162000171565b81146200019c57600080fd5b50565b600081519050620001b08162000185565b92915050565b60008060408385031215620001d057620001cf6200014c565b5b6000620001e0858286016200019f565b9250506020620001f3858286016200019f565b9150509250929050565b610f49806200020d6000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c806380faa57d116100ad578063d1af0c7d11610071578063d1af0c7d14610312578063df136d6514610330578063e30c39781461034e578063ebe2b12b1461036c578063f2fde38b1461038a5761012b565b806380faa57d1461027c5780638da5cb5b1461029a5780638f32d59b146102b8578063c8f33c91146102d6578063cd3daf9d146102f45761012b565b80633c6b16ab116100f45780633c6b16ab146101ea5780634e71e0c81461020657806370a082311461021057806372f702f3146102405780637b0a47ee1461025e5761012b565b80628cc262146101305780630700037d1461016057806318160ddd146101905780631c1f78eb146101ae578063386a9525146101cc575b600080fd5b61014a60048036038101906101459190610b8f565b6103a6565b6040516101579190610bd5565b60405180910390f35b61017a60048036038101906101759190610b8f565b6104c4565b6040516101879190610bd5565b60405180910390f35b6101986104dc565b6040516101a59190610bd5565b60405180910390f35b6101b66104e6565b6040516101c39190610bd5565b60405180910390f35b6101d4610504565b6040516101e19190610bd5565b60405180910390f35b61020460048036038101906101ff9190610c1c565b61050a565b005b61020e6106d7565b005b61022a60048036038101906102259190610b8f565b610873565b6040516102379190610bd5565b60405180910390f35b6102486108bc565b6040516102559190610ca8565b60405180910390f35b6102666108e2565b6040516102739190610bd5565b60405180910390f35b6102846108e8565b6040516102919190610bd5565b60405180910390f35b6102a2610902565b6040516102af9190610cd2565b60405180910390f35b6102c0610926565b6040516102cd9190610d08565b60405180910390f35b6102de61097d565b6040516102eb9190610bd5565b60405180910390f35b6102fc610983565b6040516103099190610bd5565b60405180910390f35b61031a610a11565b6040516103279190610bd5565b60405180910390f35b610338610a17565b6040516103459190610bd5565b60405180910390f35b610356610a1d565b6040516103639190610cd2565b60405180910390f35b610374610a43565b6040516103819190610bd5565b60405180910390f35b6103a4600480360381019061039f9190610b8f565b610a49565b005b60006104bd600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104af670de0b6b3a76400006104a1610453600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610445610983565b610ad490919063ffffffff16565b600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610aea90919063ffffffff16565b610b0090919063ffffffff16565b610b1690919063ffffffff16565b9050919050565b600a6020528060005260406000206000915090505481565b6000600b54905090565b60006104ff600654600554610aea90919063ffffffff16565b905090565b60065481565b6000610514610983565b6008819055506105226108e8565b600781905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105ef57610565816103a6565b600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600854600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60045442106106185761060d60065483610b0090919063ffffffff16565b60058190555061067a565b600061062f42600454610ad490919063ffffffff16565b9050600061064860055483610aea90919063ffffffff16565b90506106716006546106638387610b1690919063ffffffff16565b610b0090919063ffffffff16565b60058190555050505b4260078190555061069660065442610b1690919063ffffffff16565b6004819055507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d826040516106cb9190610bd5565b60405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073157600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600060045442106108fb576004546108fd565b425b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60075481565b600080600b541415610999576008549050610a0e565b610a0b6109fa600b546109ec670de0b6b3a76400006109de6005546109d06007546109c26108e8565b610ad490919063ffffffff16565b610aea90919063ffffffff16565b610aea90919063ffffffff16565b610b0090919063ffffffff16565b600854610b1690919063ffffffff16565b90505b90565b60035481565b60085481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b610a51610926565b610a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8790610d80565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008183610ae29190610dcf565b905092915050565b60008183610af89190610e03565b905092915050565b60008183610b0e9190610e8c565b905092915050565b60008183610b249190610ebd565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5c82610b31565b9050919050565b610b6c81610b51565b8114610b7757600080fd5b50565b600081359050610b8981610b63565b92915050565b600060208284031215610ba557610ba4610b2c565b5b6000610bb384828501610b7a565b91505092915050565b6000819050919050565b610bcf81610bbc565b82525050565b6000602082019050610bea6000830184610bc6565b92915050565b610bf981610bbc565b8114610c0457600080fd5b50565b600081359050610c1681610bf0565b92915050565b600060208284031215610c3257610c31610b2c565b5b6000610c4084828501610c07565b91505092915050565b6000819050919050565b6000610c6e610c69610c6484610b31565b610c49565b610b31565b9050919050565b6000610c8082610c53565b9050919050565b6000610c9282610c75565b9050919050565b610ca281610c87565b82525050565b6000602082019050610cbd6000830184610c99565b92915050565b610ccc81610b51565b82525050565b6000602082019050610ce76000830184610cc3565b92915050565b60008115159050919050565b610d0281610ced565b82525050565b6000602082019050610d1d6000830184610cf9565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610d6a602083610d23565b9150610d7582610d34565b602082019050919050565b60006020820190508181036000830152610d9981610d5d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dda82610bbc565b9150610de583610bbc565b925082821015610df857610df7610da0565b5b828203905092915050565b6000610e0e82610bbc565b9150610e1983610bbc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5257610e51610da0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e9782610bbc565b9150610ea283610bbc565b925082610eb257610eb1610e5d565b5b828204905092915050565b6000610ec882610bbc565b9150610ed383610bbc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f0857610f07610da0565b5b82820190509291505056fea2646970667358221220f7ac7f421f7540495ec31950bea4b06bc8252dfcc59e5cd1ed8d59fcd1482a5264736f6c63430008090033";

export class StakingRewards__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _rewardsDistribution: string,
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingRewards> {
    return super.deploy(
      _rewardsDistribution,
      _stakingToken,
      overrides || {}
    ) as Promise<StakingRewards>;
  }
  getDeployTransaction(
    _rewardsDistribution: string,
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _rewardsDistribution,
      _stakingToken,
      overrides || {}
    );
  }
  attach(address: string): StakingRewards {
    return super.attach(address) as StakingRewards;
  }
  connect(signer: Signer): StakingRewards__factory {
    return super.connect(signer) as StakingRewards__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingRewardsInterface {
    return new utils.Interface(_abi) as StakingRewardsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingRewards {
    return new Contract(address, _abi, signerOrProvider) as StakingRewards;
  }
}
