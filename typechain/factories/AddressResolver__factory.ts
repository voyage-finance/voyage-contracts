/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AddressResolver,
  AddressResolverInterface,
} from "../AddressResolver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_voyager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_liquidityManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_vaultManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_loadManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_liquidityManager",
        type: "address",
      },
    ],
    name: "LiquidityManagerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_loanManager",
        type: "address",
      },
    ],
    name: "LoanManagerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_vaultManager",
        type: "address",
      },
    ],
    name: "VaultManagerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_voyager",
        type: "address",
      },
    ],
    name: "VoyagerAddressUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "getLiquidityManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLoanManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVaultManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVoyagerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_liquidityManager",
        type: "address",
      },
    ],
    name: "setLiquidityManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_loanManager",
        type: "address",
      },
    ],
    name: "setLoanManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_vaultManager",
        type: "address",
      },
    ],
    name: "setVaultManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_voyager",
        type: "address",
      },
    ],
    name: "setVoyagerAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109f33803806109f3833981810160405281019061003291906101a1565b836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050610208565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061016e82610143565b9050919050565b61017e81610163565b811461018957600080fd5b50565b60008151905061019b81610175565b92915050565b600080600080608085870312156101bb576101ba61013e565b5b60006101c98782880161018c565b94505060206101da8782880161018c565b93505060406101eb8782880161018c565b92505060606101fc8782880161018c565b91505092959194509250565b6107dc806102176000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b543503e1161005b578063b543503e146100ff578063b9bbb6f51461011b578063dc6e3f4b14610139578063e3e24cca1461015757610088565b80632144a42c1461008d5780633c1624d4146100ab5780635772ae70146100c7578063b3e6698c146100e3575b600080fd5b610095610175565b6040516100a291906106b0565b60405180910390f35b6100c560048036038101906100c091906106fc565b61019e565b005b6100e160048036038101906100dc91906106fc565b6102b3565b005b6100fd60048036038101906100f891906106fc565b6103c8565b005b610119600480360381019061011491906106fc565b6104dc565b005b6101236105f1565b60405161013091906106b0565b60405180910390f35b61014161061b565b60405161014e91906106b0565b60405180910390f35b61015f610645565b60405161016c91906106b0565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461022c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022390610786565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fb3bd6eab25248b82819a9b33f4c932582d869aa56eae111849878aacb78e188460405160405180910390a250565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890610786565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f1dc4f84ee7313043091b27f406c2494a0c94127ded69968d246cb341249d5f1660405160405180910390a250565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90610786565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fa09d20e15b1420e0451badec1e3ba37659efc1c5bbcfe91e749828ba23fea9b060405160405180910390a250565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056190610786565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fcdba42b90a1db6ef05bf5758b36301b44ac50226364e050628807a6ceef24bc260405160405180910390a250565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061069a8261066f565b9050919050565b6106aa8161068f565b82525050565b60006020820190506106c560008301846106a1565b92915050565b600080fd5b6106d98161068f565b81146106e457600080fd5b50565b6000813590506106f6816106d0565b92915050565b600060208284031215610712576107116106cb565b5b6000610720848285016106e7565b91505092915050565b600082825260208201905092915050565b7f5468652063616c6c6572206d757374206265206120766f796167657200000000600082015250565b6000610770601c83610729565b915061077b8261073a565b602082019050919050565b6000602082019050818103600083015261079f81610763565b905091905056fea2646970667358221220db89762acead49d6c4440f637d951e72f665e4e237dbba36211486ffc6ae3b2264736f6c63430008090033";

export class AddressResolver__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _voyager: string,
    _liquidityManager: string,
    _vaultManager: string,
    _loadManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AddressResolver> {
    return super.deploy(
      _voyager,
      _liquidityManager,
      _vaultManager,
      _loadManager,
      overrides || {}
    ) as Promise<AddressResolver>;
  }
  getDeployTransaction(
    _voyager: string,
    _liquidityManager: string,
    _vaultManager: string,
    _loadManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _voyager,
      _liquidityManager,
      _vaultManager,
      _loadManager,
      overrides || {}
    );
  }
  attach(address: string): AddressResolver {
    return super.attach(address) as AddressResolver;
  }
  connect(signer: Signer): AddressResolver__factory {
    return super.connect(signer) as AddressResolver__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressResolverInterface {
    return new utils.Interface(_abi) as AddressResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressResolver {
    return new Contract(address, _abi, signerOrProvider) as AddressResolver;
  }
}
