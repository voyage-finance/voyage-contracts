/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VaultManagerProxy,
  VaultManagerProxyInterface,
} from "../VaultManagerProxy";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract Proxyable",
        name: "newTarget",
        type: "address",
      },
    ],
    name: "TargetUpdated",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "numTopics",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "topic1",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "topic2",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "topic3",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "topic4",
        type: "bytes32",
      },
    ],
    name: "_emit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract Proxyable",
        name: "_target",
        type: "address",
      },
    ],
    name: "setTarget",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "target",
    outputs: [
      {
        internalType: "contract Proxyable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3610bf1806100db6000396000f3fe60806040526004361061007f5760003560e01c8063907dff971161004e578063907dff97146101c8578063d4b83992146101f1578063e30c39781461021c578063f2fde38b1461024757610080565b80634e71e0c814610132578063776d1a01146101495780638da5cb5b146101725780638f32d59b1461019d57610080565b5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc67f832336040518263ffffffff1660e01b81526004016100db91906107b9565b600060405180830381600087803b1580156100f557600080fd5b505af1158015610109573d6000803e3d6000fd5b5050505060405136600082376000803683346002545af13d6000833e8061012e573d82fd5b3d82f35b34801561013e57600080fd5b50610147610270565b005b34801561015557600080fd5b50610170600480360381019061016b919061081c565b61040c565b005b34801561017e57600080fd5b506101876104ce565b60405161019491906107b9565b60405180910390f35b3480156101a957600080fd5b506101b26104f2565b6040516101bf9190610864565b60405180910390f35b3480156101d457600080fd5b506101ef60048036038101906101ea9190610950565b610549565b005b3480156101fd57600080fd5b506102066106a1565b6040516102139190610a5e565b60405180910390f35b34801561022857600080fd5b506102316106c7565b60405161023e91906107b9565b60405180910390f35b34801561025357600080fd5b5061026e60048036038101906102699190610aa5565b6106ed565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ca57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6104146104f2565b610453576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044a90610b2f565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f814250a3b8c79fcbe2ead2c131c952a278491c8f4322a79fe84b5040a810373e816040516104c39190610a5e565b60405180910390a150565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090610b9b565b60405180910390fd5b6000878790509050600088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905086600081146106585760018114610663576002811461066f576003811461067c576004811461068a57610695565b8260208301a0610695565b868360208401a1610695565b85878460208501a2610695565b8486888560208601a3610695565b838587898660208701a45b50505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106f56104f2565b610734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072b90610b2f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107a382610778565b9050919050565b6107b381610798565b82525050565b60006020820190506107ce60008301846107aa565b92915050565b600080fd5b600080fd5b60006107e982610798565b9050919050565b6107f9816107de565b811461080457600080fd5b50565b600081359050610816816107f0565b92915050565b600060208284031215610832576108316107d4565b5b600061084084828501610807565b91505092915050565b60008115159050919050565b61085e81610849565b82525050565b60006020820190506108796000830184610855565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126108a4576108a361087f565b5b8235905067ffffffffffffffff8111156108c1576108c0610884565b5b6020830191508360018202830111156108dd576108dc610889565b5b9250929050565b6000819050919050565b6108f7816108e4565b811461090257600080fd5b50565b600081359050610914816108ee565b92915050565b6000819050919050565b61092d8161091a565b811461093857600080fd5b50565b60008135905061094a81610924565b92915050565b600080600080600080600060c0888a03121561096f5761096e6107d4565b5b600088013567ffffffffffffffff81111561098d5761098c6107d9565b5b6109998a828b0161088e565b975097505060206109ac8a828b01610905565b95505060406109bd8a828b0161093b565b94505060606109ce8a828b0161093b565b93505060806109df8a828b0161093b565b92505060a06109f08a828b0161093b565b91505092959891949750929550565b6000819050919050565b6000610a24610a1f610a1a84610778565b6109ff565b610778565b9050919050565b6000610a3682610a09565b9050919050565b6000610a4882610a2b565b9050919050565b610a5881610a3d565b82525050565b6000602082019050610a736000830184610a4f565b92915050565b610a8281610798565b8114610a8d57600080fd5b50565b600081359050610a9f81610a79565b92915050565b600060208284031215610abb57610aba6107d4565b5b6000610ac984828501610a90565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610b19602083610ad2565b9150610b2482610ae3565b602082019050919050565b60006020820190508181036000830152610b4881610b0c565b9050919050565b7f4d7573742062652070726f787920746172676574000000000000000000000000600082015250565b6000610b85601483610ad2565b9150610b9082610b4f565b602082019050919050565b60006020820190508181036000830152610bb481610b78565b905091905056fea26469706673582212208054be562e005ead2075245e46616ee5bd31f4ad27e87779dbda9b31138f746464736f6c63430008090033";

export class VaultManagerProxy__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VaultManagerProxy> {
    return super.deploy(overrides || {}) as Promise<VaultManagerProxy>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VaultManagerProxy {
    return super.attach(address) as VaultManagerProxy;
  }
  connect(signer: Signer): VaultManagerProxy__factory {
    return super.connect(signer) as VaultManagerProxy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultManagerProxyInterface {
    return new utils.Interface(_abi) as VaultManagerProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VaultManagerProxy {
    return new Contract(address, _abi, signerOrProvider) as VaultManagerProxy;
  }
}
