{
  "address": "0x568133D74EAa2d77e1B050d5DA894c42f240fC2E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableBorrowRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityIndex",
          "type": "uint256"
        }
      ],
      "name": "ReserveDataUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "tranche",
          "type": "ReserveLogic.Tranche"
        }
      ],
      "name": "trancheToBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe9ec55e0742c64b9187bff0172f498a01cc1c1a42d7c0d678bb8f7605111a660",
  "receipt": {
    "to": null,
    "from": "0x4C616d9377Fa8d928385F0b11Ab16D4bf0f2d544",
    "contractAddress": "0x568133D74EAa2d77e1B050d5DA894c42f240fC2E",
    "transactionIndex": 0,
    "gasUsed": "692022",
    "logsBloom": "0x
    "blockHash": "0x9cb9c46cf8538c01c71849a4bc2a03fccf7020453e3ade95c6b1d660fe1de36e",
    "transactionHash": "0xe9ec55e0742c64b9187bff0172f498a01cc1c1a42d7c0d678bb8f7605111a660",
    "logs": [],
    "blockNumber": 46134,
    "cumulativeGasUsed": "692022",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "36c545191a21c01ad4cdfe8c379680b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"}],\"name\":\"ReserveDataUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"tranche\",\"type\":\"ReserveLogic.Tranche\"}],\"name\":\"trancheToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Voyager\",\"events\":{\"ReserveDataUpdated(address,uint256,uint256,uint256)\":{\"details\":\"Emitted when the state of a reserve is updated\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"liquidityIndex\":\"The new liquidity index*\",\"liquidityRate\":\"The new liquidity rate\",\"stableBorrowRate\":\"The new stable borrow rate\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"ReserveLogic library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Implements the logic to update the reserves state*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/logic/ReserveLogic.sol\":\"ReserveLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/component/liquiditymanager/DefaultReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IReserveInterestRateStrategy.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    /**\\n     * this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates\\n     * Expressed in RAY\\n     **/\\n    uint256 public immutable OPTIMAL_UTILIZATION_RATE;\\n\\n    // Base interest rate set by governance. Expressed in ray\\n    uint256 internal immutable baseBorrowRate;\\n\\n    // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope1;\\n\\n    // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope2;\\n\\n    constructor(\\n        uint256 _optimalUtilizationRate,\\n        uint256 _stableRateSlope1,\\n        uint256 _stableRateSlope2,\\n        uint256 _baseBorrowRate\\n    ) public {\\n        OPTIMAL_UTILIZATION_RATE = _optimalUtilizationRate;\\n        baseBorrowRate = _baseBorrowRate;\\n        stableRateSlope1 = _stableRateSlope1;\\n        stableRateSlope2 = _stableRateSlope2;\\n    }\\n\\n    struct CalcInterestRatesLocalVars {\\n        uint256 totalDebt;\\n        uint256 currentStableBorrowRate;\\n        uint256 currentLiquidityRate;\\n        uint256 utilizationRate;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configuration\\n     * @param reserve The address of the reserve\\n     * @param juniorDepositToken The address of junior deposit token\\n     * @param seniorDepositToken The address of senior deposit token\\n     * @param liquidityAdded The liquidity added during the operation\\n     * @param liquidityTaken The liquidity taken during the operation\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256) {\\n        uint256 availableJuniorLiquidity = IERC20(reserve).balanceOf(\\n            juniorDepositToken\\n        );\\n        uint256 availableSeniorLiquidity = IERC20(reserve).balanceOf(\\n            seniorDepositToken\\n        );\\n        uint256 availableLiquidity = availableJuniorLiquidity.add(\\n            availableSeniorLiquidity\\n        );\\n        availableLiquidity = availableLiquidity.add(liquidityAdded).sub(\\n            liquidityTaken\\n        );\\n        return\\n            calculateInterestRates(\\n                reserve,\\n                availableLiquidity,\\n                totalStableDebt,\\n                averageBorrowRate\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * @param reserve The address of the reserve\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @return The liquidity rate, the stable borrow rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) public view returns (uint256, uint256) {\\n        CalcInterestRatesLocalVars memory vars;\\n\\n        vars.totalDebt = totalStableDebt;\\n        vars.currentStableBorrowRate = baseBorrowRate;\\n        vars.currentLiquidityRate = 0;\\n\\n        vars.utilizationRate = vars.totalDebt == 0\\n            ? 0\\n            : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\\n\\n        if (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n            vars.currentStableBorrowRate = vars\\n                .currentStableBorrowRate\\n                .add(stableRateSlope1)\\n                .add(\\n                    stableRateSlope2\\n                        .rayMul(\\n                            vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE)\\n                        )\\n                        .rayDiv(WadRayMath.Ray().sub(OPTIMAL_UTILIZATION_RATE))\\n                );\\n        } else {\\n            vars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\\n                stableRateSlope1.rayMul(vars.utilizationRate).rayDiv(\\n                    OPTIMAL_UTILIZATION_RATE\\n                )\\n            );\\n        }\\n\\n        vars.currentLiquidityRate = averageBorrowRate.rayMul(\\n            vars.utilizationRate\\n        );\\n        return (vars.currentLiquidityRate, vars.currentStableBorrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0x501b0d30efd4654196b7940e1b24d0c44a4dcd82c32288da095e9c63625bd9c6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IStableDebtToken {\\n    /**\\n     * @dev Emitted when new stable debt is minted\\n     * @param user The address of the user who triggered the minting\\n     * @param amount The amount minted (user entered amount + balance increase from interest)\\n     * @param currentBalance The current balance of the user\\n     * @param balanceIncrease The increase in balance since the last action of the user\\n     * @param newRate The rate of the debt after the minting\\n     * @param avgStableRate The next average stable rate after the minting\\n     * @param newTotalSupply The next total supply of the stable debt token after the action\\n     **/\\n    event Mint(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 currentBalance,\\n        uint256 balanceIncrease,\\n        uint256 newRate,\\n        uint256 avgStableRate,\\n        uint256 newTotalSupply\\n    );\\n\\n    function getAverageStableRate() external view returns (uint256);\\n\\n    function getTotalSupplyAndAvgRate()\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getAggregateOptimalRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAggregateActualRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xe2f108067bebe79426ae636585fd801a5e0c0efcb97e2116ba5ec57d167be796\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n@title IReserveInterestRateStrategyInterface interface\\n@notice Interface for the calculation of the interest rates.\\n*/\\n\\ninterface IReserveInterestRateStrategy {\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xb45b6fadbd52886b83832ccf42a5f2e3f41aaee4f5132f9ad1b19fad2070b57e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors library\\n * @author Voyager\\n * @notice Defines the error messages emitted by the different contracts of the Voyager protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - LM = LiquidityManager\\n *  - LOM = LoanManager\\n *  - CT = Common errors between tokens\\n *  - RL = ReserveLogic\\n */\\nlibrary Errors {\\n    string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n    string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n    string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL = '20';\\n    string public constant CT_CALLER_MUST_BE_LOAN_MANAGER = '21';\\n    string public constant CT_INVALID_MINT_AMOUNT = '21';\\n    string public constant CT_INVALID_BURN_AMOUNT = '22';\\n    string public constant LM_NOT_CONTRACT = '60';\\n    string public constant LP_IS_PAUSED = '61'; // 'Pool is paused'\\n    string public constant LOM_RESERVE_NOT_SUFFICIENT = '70';\\n    string public constant LOM_CREDIT_NOT_SUFFICIENT = '71';\\n    string public constant LOM_HEALTH_RISK_BELOW_ONE = '71';\\n    string public constant LOM_NOT_VAULT_OWNER = '72';\\n    string public constant RL_LIQUIDITY_RATE_OVERFLOW = '80'; //  Liquidity rate overflows uint128\\n    string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '81'; //  Stable borrow rate overflows uint128\\n}\\n\",\"keccak256\":\"0x99c4bd1d0e99adf35c543608d5ac127fd65983ad861424b1e30d8674671960bd\",\"license\":\"agpl-3.0\"},\"contracts/libraries/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport '../math/WadRayMath.sol';\\nimport '../math/MathUtils.sol';\\nimport '../types/DataTypes.sol';\\nimport '../helpers/Errors.sol';\\nimport '../../interfaces/IDebtToken.sol';\\nimport '../../component/liquiditymanager/DefaultReserveInterestRateStrategy.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author Voyager\\n * @notice Implements the logic to update the reserves state\\n **/\\nlibrary ReserveLogic {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    using ReserveLogic for DataTypes.ReserveData;\\n\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed asset,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 liquidityIndex\\n    );\\n\\n    function init(\\n        DataTypes.ReserveData storage reserve,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress\\n    ) external {\\n        reserve.juniorLiquidityIndex = WadRayMath.ray();\\n        reserve.seniorLiquidityIndex = WadRayMath.ray();\\n        reserve.juniorDepositTokenAddress = _juniorDepositTokenAddress;\\n        reserve.seniorDepositTokenAddress = _seniorDepositTokenAddress;\\n        //reserve.currentOverallLiquidityRate = WadRayMath.ray();\\n        reserve.currentJuniorIncomeAllocation = _juniorIncomeAllocation;\\n        reserve.currentSeniorIncomeAllocation = _seniorIncomeAllocation;\\n        reserve.stableDebtAddress = _stableDebtAddress;\\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\\n        reserve.healthStrategyAddress = _healthStrategyAddress;\\n    }\\n\\n    function updateState(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public {\\n        _updateIndexes(reserve, _tranche);\\n    }\\n\\n    function getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public view returns (uint256) {\\n        return reserve._getLiquidityRate(_tranche);\\n    }\\n\\n    struct UpdateInterestRatesLocalVars {\\n        address stableDebtTokenAddress;\\n        uint256 availableLiquidity;\\n        uint256 totalStableDebt;\\n        uint256 newLiquidityRate;\\n        uint256 newStableRate;\\n        uint256 avgStableRate;\\n    }\\n\\n    function updateInterestRates(\\n        DataTypes.ReserveData storage _reserve,\\n        address _reserveAddress,\\n        uint256 _juniorLiquidityAdded,\\n        uint256 _juniorLiquidityTaken,\\n        uint256 _seniorLiquidityAdded,\\n        uint256 _seniorLiquidityTaken\\n    ) public {\\n        UpdateInterestRatesLocalVars memory vars;\\n\\n        vars.stableDebtTokenAddress = _reserve.stableDebtAddress;\\n        uint256 liquidityAdded = _juniorLiquidityAdded.add(\\n            _seniorLiquidityAdded\\n        );\\n        uint256 liquidityTaken = _juniorLiquidityTaken.add(\\n            _seniorLiquidityTaken\\n        );\\n\\n        (vars.totalStableDebt, vars.avgStableRate) = IStableDebtToken(\\n            _reserve.stableDebtAddress\\n        ).getTotalSupplyAndAvgRate();\\n\\n        (\\n            vars.newLiquidityRate,\\n            vars.newStableRate\\n        ) = IReserveInterestRateStrategy(_reserve.interestRateStrategyAddress)\\n            .calculateInterestRates(\\n                _reserveAddress,\\n                _reserve.juniorDepositTokenAddress,\\n                _reserve.seniorDepositTokenAddress,\\n                liquidityAdded,\\n                liquidityTaken,\\n                _reserve.totalBorrows,\\n                vars.avgStableRate\\n            );\\n        require(\\n            vars.newLiquidityRate <= type(uint128).max,\\n            Errors.RL_LIQUIDITY_RATE_OVERFLOW\\n        );\\n        require(\\n            vars.newStableRate <= type(uint128).max,\\n            Errors.RL_STABLE_BORROW_RATE_OVERFLOW\\n        );\\n        _reserve.currentOverallLiquidityRate = vars.newLiquidityRate;\\n        _reserve.currentBorrowRate = vars.newStableRate;\\n\\n        emit ReserveDataUpdated(\\n            _reserveAddress,\\n            vars.newLiquidityRate,\\n            vars.newStableRate,\\n            vars.newLiquidityRate\\n        );\\n    }\\n\\n    function getNormalizedIncome(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        uint40 timestamp;\\n        uint256 liquidityIndex;\\n        if (_tranche == Tranche.JUNIOR) {\\n            timestamp = reserve.juniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.juniorLiquidityIndex;\\n        } else {\\n            timestamp = reserve.seniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.seniorLiquidityIndex;\\n        }\\n\\n        //solium-disable-next-line\\n        if (timestamp == uint40(block.timestamp)) {\\n            return liquidityIndex;\\n        }\\n\\n        uint256 cumulated = MathUtils\\n            .calculateLinearInterest(\\n                reserve._getLiquidityRate(_tranche),\\n                timestamp\\n            )\\n            .rayMul(liquidityIndex);\\n        return cumulated;\\n    }\\n\\n    function _getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        uint256 totalAllocationInRay = reserve\\n            .currentJuniorIncomeAllocation\\n            .add(reserve.currentSeniorIncomeAllocation);\\n        if (_tranche == Tranche.JUNIOR) {\\n            return\\n                reserve.currentOverallLiquidityRate.rayMul(\\n                    reserve.currentJuniorIncomeAllocation.rayDiv(\\n                        totalAllocationInRay\\n                    )\\n                );\\n        } else {\\n            return\\n                reserve.currentOverallLiquidityRate.rayMul(\\n                    reserve.currentSeniorIncomeAllocation.rayDiv(\\n                        totalAllocationInRay\\n                    )\\n                );\\n        }\\n    }\\n\\n    function _updateIndexes(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal {\\n        if (_tranche == Tranche.JUNIOR) {\\n            uint256 previousJuniorLiquidityIndex = reserve.juniorLiquidityIndex;\\n            uint256 lastJuniorUpdatedTimestamp = reserve\\n                .juniorLastUpdateTimestamp;\\n            reserve._updateJuniorLiquidityIndex(\\n                previousJuniorLiquidityIndex,\\n                uint40(lastJuniorUpdatedTimestamp)\\n            );\\n        } else {\\n            uint256 previousSeniorLiquidityIndex = reserve.seniorLiquidityIndex;\\n            uint256 lastSeniorUpdatedTimestamp = reserve\\n                .seniorLastUpdateTimestamp;\\n            reserve._updateSeniorLiquidityIndex(\\n                previousSeniorLiquidityIndex,\\n                uint40(lastSeniorUpdatedTimestamp)\\n            );\\n        }\\n    }\\n\\n    function _updateJuniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 juniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 juniorLiquidityRate = reserve._getLiquidityRate(Tranche.JUNIOR);\\n        uint256 newJuniorLiquidityIndex = juniorLiquidityIndex;\\n\\n        // only cumulating if there is any income being produced\\n        if (juniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(juniorLiquidityRate, timestamp);\\n            newJuniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                juniorLiquidityIndex\\n            );\\n            reserve.juniorLiquidityIndex = newJuniorLiquidityIndex;\\n        }\\n\\n        reserve.juniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newJuniorLiquidityIndex;\\n    }\\n\\n    function _updateSeniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 seniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 seniorLiquidityRate = reserve._getLiquidityRate(Tranche.SENIOR);\\n        uint256 newSeniorLiquidityIndex = seniorLiquidityIndex;\\n\\n        if (seniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(seniorLiquidityRate, timestamp);\\n            newSeniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                seniorLiquidityIndex\\n            );\\n            reserve.seniorLiquidityIndex = newSeniorLiquidityIndex;\\n        }\\n        reserve.seniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newSeniorLiquidityIndex;\\n    }\\n\\n    function trancheToBytes32(Tranche tranche) public view returns (bytes32) {\\n        return bytes32(uint256(tranche));\\n    }\\n}\\n\",\"keccak256\":\"0x4c7ec9dcbc3ee530e105daa2ae8db9bb209b47ead635af0d3d7705b38a6902b0\",\"license\":\"GPL-3.0\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(\\n            uint256(lastUpdateTimestamp)\\n        );\\n\\n        return\\n            (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n     * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        if (exp == 0) {\\n            return WadRayMath.ray();\\n        }\\n\\n        uint256 expMinusOne = exp - 1;\\n\\n        uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n        uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n        uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n        uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n        uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n        uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(\\n            basePowerThree\\n        ) / 6;\\n\\n        return\\n            WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(\\n                thirdTerm\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xeb644d3d04ac6c043657b2b835fbf71d1f2795f1f713b900cc43582158f31eac\",\"license\":\"agpl-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87bc93b45f82b290b2b6a9f00ce09f8c5c2b758931a85b37fb5d117a79031d3f\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary DataTypes {\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        // for calculating overall interested accumulated\\n        // then split it into two indexs base on two allocations\\n        uint256 currentOverallLiquidityRate;\\n        // Expressed in ray\\n        uint256 currentSeniorIncomeAllocation;\\n        // Expressed in ray\\n        uint256 currentJuniorIncomeAllocation;\\n        uint256 juniorLiquidityIndex;\\n        uint256 seniorLiquidityIndex;\\n        uint256 totalBorrows;\\n        uint256 currentBorrowRate;\\n        // Expressed in ray\\n        uint256 securityRequirement;\\n        //the decimals of the reserve asset\\n        uint256 decimals;\\n        address interestRateStrategyAddress;\\n        address healthStrategyAddress;\\n        address juniorDepositTokenAddress;\\n        address seniorDepositTokenAddress;\\n        address stableDebtAddress;\\n        uint40 juniorLastUpdateTimestamp;\\n        uint40 seniorLastUpdateTimestamp;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: Liquidate bonus\\n        //bit 16-23: Decimals\\n        //bit 24: Reserve is active\\n        //bit 25: reserve is frozen\\n        //bit 26: borrowing is enabled\\n        //bit 27-30: reserved\\n        //bit 31-46: reserve factor\\n        //bit 47-62: lock up period in seconds\\n        uint256 data;\\n    }\\n\\n    struct FungibleTokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    struct BorrowData {\\n        uint256 drawDownNumber;\\n        uint256 totalDebt;\\n        mapping(uint256 => DrawDown) drawDowns;\\n        mapping(uint256 => Repayment) repayments;\\n    }\\n\\n    struct DrawDown {\\n        uint256 amount;\\n        uint256 tenure;\\n        uint40 timestamp;\\n        uint256 borrowRate;\\n        Repayment repayment;\\n    }\\n\\n    struct Repayment {\\n        uint256 totalPaid;\\n        // tenure => amount\\n        // todo wrapper this in the future\\n        mapping(uint256 => uint256) repayment;\\n    }\\n\\n    // tmp struct to avoid stack too long\\n\\n    struct DepositAndDebt {\\n        uint256 juniorDepositAmount;\\n        uint256 seniorDepositAmount;\\n        uint256 totalDebt;\\n    }\\n\\n    struct HealthRiskParameter {\\n        uint256 securityDeposit;\\n        uint256 currentBorrowRate;\\n        uint256 compoundedDebt;\\n        uint256 grossAssetValue;\\n        uint256 aggregateOptimalRepaymentRate;\\n        uint256 aggregateActualRepaymentRate;\\n    }\\n}\\n\",\"keccak256\":\"0x2475d0cacc4f46847d0f7c21081a6957410f0bfe47a4c4e919d97f4b8fd1cb73\",\"license\":\"GPL-3.0\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610b9e61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c80636a2da27e1161005a5780636a2da27e1461017c578063a4c88c071461019c578063bb43fb80146101bc57600080fd5b80630c6e37411461007657806310a01f1a14610157575b600080fd5b81801561008257600080fd5b506101556100913660046108f1565b6b033b2e3c9fd0803ce800000060048901556b033b2e3c9fd0803ce80000006005890155600c880180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff998a1617909155600d8901805482169789169790971790965560038801949094556002870192909255600e860180548516918616919091179055600a850180548416918516919091179055600b909301805490911692909116919091179055565b005b61016a610165366004610982565b6101cf565b60405190815260200160405180910390f35b81801561018857600080fd5b5061015561019736600461099d565b6101e9565b8180156101a857600080fd5b506101556101b73660046109eb565b610597565b61016a6101ca3660046109eb565b6105a5565b60008160018111156101e3576101e3610a17565b92915050565b6102386040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081525090565b600e87015473ffffffffffffffffffffffffffffffffffffffff168152600061026186856105b8565b9050600061026f86856105b8565b600e8a0154604080517ff731e9be000000000000000000000000000000000000000000000000000000008152815193945073ffffffffffffffffffffffffffffffffffffffff9092169263f731e9be926004808201939291829003018186803b1580156102db57600080fd5b505afa1580156102ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103139190610a2d565b60a08501819052604080860192909252600a8b0154600c8c0154600d8d015460068e015494517f80a5f70f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e8116600483015292831660248201529082166044820152606481018790526084810186905260a481019490945260c484019290925216906380a5f70f9060e401604080518083038186803b1580156103c957600080fd5b505afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104019190610a2d565b60808501526060840181905260408051808201909152600281527f38300000000000000000000000000000000000000000000000000000000000006020820152906fffffffffffffffffffffffffffffffff1015610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048c9190610a51565b60405180910390fd5b50608083015160408051808201909152600281527f38310000000000000000000000000000000000000000000000000000000000006020820152906fffffffffffffffffffffffffffffffff101561051a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048c9190610a51565b5060608381015160018b01819055608085015160078c0181905560408051838152602081019290925281019190915273ffffffffffffffffffffffffffffffffffffffff8a16917f51eedbe668e048aec37e4dc0104031dbf295c9f3b35bfd9cb73a217b6ff81259910160405180910390a2505050505050505050565b6105a182826105c4565b5050565b60006105b18383610652565b9392505050565b60006105b18284610ada565b60008160018111156105d8576105d8610a17565b1415610619576004820154600e83015474010000000000000000000000000000000000000000900464ffffffffff166106128483836106c5565b5050505050565b6005820154600e830154790100000000000000000000000000000000000000000000000000900464ffffffffff16610612848383610753565b600080610670846002015485600301546105b890919063ffffffff16565b9050600083600181111561068657610686610a17565b14156106b25760038401546106aa9061069f90836107e7565b600186015490610829565b9150506101e3565b60028401546106aa9061069f90836107e7565b6000806106d28582610652565b90508381156106fe5760006106e78386610865565b90506106f38187610829565b600488018190559150505b600e9590950180547fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000004264ffffffffff160217905550929392505050565b600080610761856001610652565b905083811561078d5760006107768386610865565b90506107828187610829565b600588018190559150505b600e9590950180547fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff167901000000000000000000000000000000000000000000000000004264ffffffffff160217905550929392505050565b6000806107f5600284610af2565b90506108218361081b610814876b033b2e3c9fd0803ce80000006108a4565b84906105b8565b906108b0565b949350505050565b60006105b16b033b2e3c9fd0803ce800000061081b61084886866108a4565b61085f60026b033b2e3c9fd0803ce8000000610af2565b906105b8565b6000806108794264ffffffffff85166108bc565b90506108216b033b2e3c9fd0803ce80000006301e1338061089a87856108a4565b61085f9190610af2565b60006105b18284610b14565b60006105b18284610af2565b60006105b18284610b51565b803573ffffffffffffffffffffffffffffffffffffffff811681146108ec57600080fd5b919050565b600080600080600080600080610100898b03121561090e57600080fd5b8835975061091e60208a016108c8565b965061092c60408a016108c8565b9550606089013594506080890135935061094860a08a016108c8565b925061095660c08a016108c8565b915061096460e08a016108c8565b90509295985092959890939650565b8035600281106108ec57600080fd5b60006020828403121561099457600080fd5b6105b182610973565b60008060008060008060c087890312156109b657600080fd5b863595506109c6602088016108c8565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080604083850312156109fe57600080fd5b82359150610a0e60208401610973565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b60008060408385031215610a4057600080fd5b505080516020909101519092909150565b600060208083528351808285015260005b81811015610a7e57858101830151858201604001528201610a62565b81811115610a90576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610aed57610aed610ac4565b500190565b600082610b0f57634e487b7160e01b600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b4c57610b4c610ac4565b500290565b600082821015610b6357610b63610ac4565b50039056fea2646970667358221220d1ef8a25aef99893bacaaeb20ac2ddb28e64180a106f9592e90117cff617890864736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c80636a2da27e1161005a5780636a2da27e1461017c578063a4c88c071461019c578063bb43fb80146101bc57600080fd5b80630c6e37411461007657806310a01f1a14610157575b600080fd5b81801561008257600080fd5b506101556100913660046108f1565b6b033b2e3c9fd0803ce800000060048901556b033b2e3c9fd0803ce80000006005890155600c880180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff998a1617909155600d8901805482169789169790971790965560038801949094556002870192909255600e860180548516918616919091179055600a850180548416918516919091179055600b909301805490911692909116919091179055565b005b61016a610165366004610982565b6101cf565b60405190815260200160405180910390f35b81801561018857600080fd5b5061015561019736600461099d565b6101e9565b8180156101a857600080fd5b506101556101b73660046109eb565b610597565b61016a6101ca3660046109eb565b6105a5565b60008160018111156101e3576101e3610a17565b92915050565b6102386040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081525090565b600e87015473ffffffffffffffffffffffffffffffffffffffff168152600061026186856105b8565b9050600061026f86856105b8565b600e8a0154604080517ff731e9be000000000000000000000000000000000000000000000000000000008152815193945073ffffffffffffffffffffffffffffffffffffffff9092169263f731e9be926004808201939291829003018186803b1580156102db57600080fd5b505afa1580156102ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103139190610a2d565b60a08501819052604080860192909252600a8b0154600c8c0154600d8d015460068e015494517f80a5f70f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e8116600483015292831660248201529082166044820152606481018790526084810186905260a481019490945260c484019290925216906380a5f70f9060e401604080518083038186803b1580156103c957600080fd5b505afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104019190610a2d565b60808501526060840181905260408051808201909152600281527f38300000000000000000000000000000000000000000000000000000000000006020820152906fffffffffffffffffffffffffffffffff1015610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048c9190610a51565b60405180910390fd5b50608083015160408051808201909152600281527f38310000000000000000000000000000000000000000000000000000000000006020820152906fffffffffffffffffffffffffffffffff101561051a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048c9190610a51565b5060608381015160018b01819055608085015160078c0181905560408051838152602081019290925281019190915273ffffffffffffffffffffffffffffffffffffffff8a16917f51eedbe668e048aec37e4dc0104031dbf295c9f3b35bfd9cb73a217b6ff81259910160405180910390a2505050505050505050565b6105a182826105c4565b5050565b60006105b18383610652565b9392505050565b60006105b18284610ada565b60008160018111156105d8576105d8610a17565b1415610619576004820154600e83015474010000000000000000000000000000000000000000900464ffffffffff166106128483836106c5565b5050505050565b6005820154600e830154790100000000000000000000000000000000000000000000000000900464ffffffffff16610612848383610753565b600080610670846002015485600301546105b890919063ffffffff16565b9050600083600181111561068657610686610a17565b14156106b25760038401546106aa9061069f90836107e7565b600186015490610829565b9150506101e3565b60028401546106aa9061069f90836107e7565b6000806106d28582610652565b90508381156106fe5760006106e78386610865565b90506106f38187610829565b600488018190559150505b600e9590950180547fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000004264ffffffffff160217905550929392505050565b600080610761856001610652565b905083811561078d5760006107768386610865565b90506107828187610829565b600588018190559150505b600e9590950180547fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff167901000000000000000000000000000000000000000000000000004264ffffffffff160217905550929392505050565b6000806107f5600284610af2565b90506108218361081b610814876b033b2e3c9fd0803ce80000006108a4565b84906105b8565b906108b0565b949350505050565b60006105b16b033b2e3c9fd0803ce800000061081b61084886866108a4565b61085f60026b033b2e3c9fd0803ce8000000610af2565b906105b8565b6000806108794264ffffffffff85166108bc565b90506108216b033b2e3c9fd0803ce80000006301e1338061089a87856108a4565b61085f9190610af2565b60006105b18284610b14565b60006105b18284610af2565b60006105b18284610b51565b803573ffffffffffffffffffffffffffffffffffffffff811681146108ec57600080fd5b919050565b600080600080600080600080610100898b03121561090e57600080fd5b8835975061091e60208a016108c8565b965061092c60408a016108c8565b9550606089013594506080890135935061094860a08a016108c8565b925061095660c08a016108c8565b915061096460e08a016108c8565b90509295985092959890939650565b8035600281106108ec57600080fd5b60006020828403121561099457600080fd5b6105b182610973565b60008060008060008060c087890312156109b657600080fd5b863595506109c6602088016108c8565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080604083850312156109fe57600080fd5b82359150610a0e60208401610973565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b60008060408385031215610a4057600080fd5b505080516020909101519092909150565b600060208083528351808285015260005b81811015610a7e57858101830151858201604001528201610a62565b81811115610a90576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610aed57610aed610ac4565b500190565b600082610b0f57634e487b7160e01b600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b4c57610b4c610ac4565b500290565b600082821015610b6357610b63610ac4565b50039056fea2646970667358221220d1ef8a25aef99893bacaaeb20ac2ddb28e64180a106f9592e90117cff617890864736f6c63430008090033",
  "devdoc": {
    "author": "Voyager",
    "events": {
      "ReserveDataUpdated(address,uint256,uint256,uint256)": {
        "details": "Emitted when the state of a reserve is updated",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "liquidityIndex": "The new liquidity index*",
          "liquidityRate": "The new liquidity rate",
          "stableBorrowRate": "The new stable borrow rate"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "title": "ReserveLogic library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Implements the logic to update the reserves state*",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}