{
  "address": "0x916C2fD49A4D3081C356EFb31B4F59195a8ef98a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "createVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2affecb58e69cfea62b5182aafaba342d1cfbd432b68d1dd4b592d380b0428bd",
  "receipt": {
    "to": null,
    "from": "0x4C616d9377Fa8d928385F0b11Ab16D4bf0f2d544",
    "contractAddress": "0x916C2fD49A4D3081C356EFb31B4F59195a8ef98a",
    "transactionIndex": 0,
    "gasUsed": "4691270",
    "logsBloom": "0x
    "blockHash": "0xed4f1fe48e0db640d05b5cb4b68e3f7385cbc5159fa8dcf572e0e698316616cb",
    "transactionHash": "0x2affecb58e69cfea62b5182aafaba342d1cfbd432b68d1dd4b592d380b0428bd",
    "logs": [],
    "blockNumber": 792471,
    "cumulativeGasUsed": "4691270",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5581b7bd0906416eb346441aec54c4cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/component/vault/VaultFactory.sol\":\"VaultFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/component/Voyager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/access/AccessControl.sol';\\nimport '../libraries/acl/ExtCallACL.sol';\\nimport '../libraries/acl/ExtCallACLProxy.sol';\\nimport '../libraries/ownership/Ownable.sol';\\nimport '../libraries/types/DataTypes.sol';\\nimport '../libraries/logic/ReserveLogic.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport '../component/vault/VaultManager.sol';\\nimport '../component/vault/VaultManagerProxy.sol';\\nimport '../component/liquidity/LiquidityManager.sol';\\nimport '../component/loan/LoanManager.sol';\\nimport '../interfaces/IACLManager.sol';\\nimport './infra/MessageBus.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract Voyager is MessageBus {\\n    modifier onlyWhitelisted(bytes32 func) {\\n        require(\\n            ExtCallACL(getExtCallACLProxyAddress()).isWhitelistedAddress(\\n                msg.sender\\n            ),\\n            'Voyager: not whitelisted address'\\n        );\\n        require(\\n            ExtCallACL(getExtCallACLProxyAddress()).isWhitelistedFunction(func),\\n            'Voyager: not whitelisted functions'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyProtocolManager() {\\n        _requireCallerAdmin();\\n        _;\\n    }\\n\\n    event CallResult(bool, bytes);\\n\\n    /************************************** HouseKeeping Interfaces **************************************/\\n    /**\\n     * @dev Update addressResolver contract address\\n     * @param _addressResolver address of the resolver contract\\n     **/\\n    function setAddressResolverAddress(address _addressResolver)\\n        external\\n        onlyOwner\\n    {\\n        addressResolver = AddressResolver(_addressResolver);\\n    }\\n\\n    function whitelistAddress(address[] calldata _address)\\n        external\\n        onlyProtocolManager\\n    {\\n        ExtCallACL extCallACL = ExtCallACL(getExtCallACLProxyAddress());\\n        extCallACL.whitelistAddress(_address);\\n    }\\n\\n    function whitelistFunction(bytes32[] calldata _function)\\n        external\\n        onlyProtocolManager\\n    {\\n        ExtCallACL extCallACL = ExtCallACL(getExtCallACLProxyAddress());\\n        extCallACL.whitelistFunction(_function);\\n    }\\n\\n    /************************************** Liquidity Manager Interfaces **************************************/\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying tokens: Either\\n     * Junior Deposit Token or Senior Deposit token\\n     * @param _asset The address of the underlying asset to deposit\\n     * @param _tranche The tranche of the liquidity pool the user wants to deposit to\\n     * @param _amount The amount to be deposited\\n     **/\\n    function deposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount\\n    ) external {\\n        LiquidityManager(getLiquidityManagerProxyAddress()).deposit(\\n            _asset,\\n            _tranche,\\n            _amount,\\n            msg.sender\\n        );\\n    }\\n\\n    function withdraw(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount\\n    ) external {\\n        LiquidityManager(getLiquidityManagerProxyAddress()).withdraw(\\n            _asset,\\n            _tranche,\\n            _amount,\\n            payable(msg.sender)\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the normalized income per unit of asset\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @param _tranche The tranche of the reserve, either Junior or Senior\\n     * @return The reserve's normalized income\\n     **/\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress())\\n                .getReserveNormalizedIncome(_asset, _tranche);\\n    }\\n\\n    /**\\n     * @dev Returns the reserve flags\\n     * @param _asset The address of asset\\n     * @return The state flags representing active, frozen, borrowing enabled\\n     **/\\n    function getReserveFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress()).getFlags(\\n                _asset\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getConfiguration(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress())\\n                .getConfiguration(_asset);\\n    }\\n\\n    /**\\n     * @dev Get current liquidity rate for a specific reserve for it junior tranche or senior tranche\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @param _tranche Either junior tranche or senior tranche\\n     **/\\n    function liquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress())\\n                .getLiquidityRate(_asset, _tranche);\\n    }\\n\\n    /************************************** Loan Manager Interfaces **************************************/\\n\\n    // todo remove _grossAssetValue\\n    function borrow(\\n        address _asset,\\n        uint256 _amount,\\n        address payable _vault,\\n        uint256 _grossAssetValue\\n    ) external onlyWhitelisted('borrow') {\\n        LoanManager(addressResolver.getLoanManagerProxy()).borrow(\\n            msg.sender,\\n            _asset,\\n            _amount,\\n            _vault,\\n            _grossAssetValue\\n        );\\n    }\\n\\n    function repay(\\n        address _asset,\\n        uint256 _drawDownIdx,\\n        address payable _vault\\n    ) external {\\n        LoanManager(addressResolver.getLoanManagerProxy()).repay(\\n            msg.sender,\\n            _asset,\\n            _drawDownIdx,\\n            _vault\\n        );\\n    }\\n\\n    /************************************** Vault Manager Interfaces **************************************/\\n\\n    /**\\n     * @dev Create an empty Vault for msg.sender, in addition to this, a vault also deploy\\n     * a SecurityDepositEscrow contract which the fund will be held in\\n     \\u00d7 @return address of Vault\\n     **/\\n    function createVault(\\n        address _to,\\n        address _reserve,\\n        bytes32 _salt\\n    ) external onlyWhitelisted('createVault') returns (address) {\\n        address vaultManagerProxy = getVaultManagerProxyAddress();\\n        VaultManager vaultManager = VaultManager(vaultManagerProxy);\\n        return vaultManager.createVault(_to, _reserve, _salt);\\n    }\\n\\n    function initVault(address _vault, address _reserve) external {\\n        address vaultManagerProxy = getVaultManagerProxyAddress();\\n        VaultManager vaultManager = VaultManager(vaultManagerProxy);\\n        vaultManager.initVault(_vault, _reserve);\\n    }\\n\\n    /**\\n     * @dev Deposit specific amount of security deposit to user owned Vault\\n     * @param _vaultUser the user address that will be sponsored\\n     * @param _reserve address of reserve\\n     * @param _amount deposit amount\\n     **/\\n    function depositMargin(\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyWhitelisted('depositMargin') {\\n        VaultManager(getVaultManagerProxyAddress()).depositMargin(\\n            msg.sender,\\n            _vaultUser,\\n            _reserve,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Redeem specific amount of security deposit to user owned Vault\\n     * @param _vaultUser the user address that has be sponsored\\n     * @param _reserve address of reserve\\n     * @param _amount deposit amount\\n     **/\\n    function redeemMargin(\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyWhitelisted('redeemMargin') {\\n        VaultManager(getVaultManagerProxyAddress()).redeemMargin(\\n            payable(msg.sender),\\n            _vaultUser,\\n            _reserve,\\n            _amount\\n        );\\n    }\\n\\n    // todo placeholder functions, more detail should be impl in the future\\n    function slash(\\n        address _vaultUser,\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) external {\\n        VaultManager(getVaultManagerProxyAddress()).slash(\\n            _vaultUser,\\n            _reserve,\\n            _to,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Get maximum reserve amount the use can borrow\\n     * @param _user user address\\n     * @param _reserve reserve contract address\\n     **/\\n    function getCreditLimit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            VaultManagerProxy(getVaultManagerProxyAddress()).getCreditLimit(\\n                _user,\\n                _reserve\\n            );\\n    }\\n\\n    /**\\n     * @dev Get available credit\\n     * @param _user user address\\n     * @param _reserve address of reserve\\n     **/\\n    function getAvailableCredit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            VaultManagerProxy(getVaultManagerProxyAddress()).getAvailableCredit(\\n                _user,\\n                _reserve\\n            );\\n    }\\n\\n    // deprecated\\n    function eligibleAmount(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256) {\\n        return\\n            VaultManager(getVaultManagerProxyAddress()).getWithdrawableDeposit(\\n                _vaultUser,\\n                _reserve,\\n                _sponsor\\n            );\\n    }\\n\\n    /************************************** View Interfaces **************************************/\\n\\n    /**\\n     * @dev Get ExtCallACLProxy contract address\\n     **/\\n    function getExtCallACLProxyAddress() public view returns (address payable) {\\n        address extCallACLProxyAddress = AddressResolver(addressResolver)\\n            .getExtCallProxy();\\n        return payable(extCallACLProxyAddress);\\n    }\\n\\n    /************************************** Internal Interfaces **************************************/\\n\\n    function _requireCallerAdmin() internal view {\\n        IACLManager aclManager = IACLManager(addressResolver.getAclManager());\\n        require(aclManager.isProtocolManager(tx.origin), 'Not vault admin');\\n    }\\n}\\n\",\"keccak256\":\"0xed4a60887231296d31ecd12c4f0c8a17c24fdead8fe69f126fc9c6b0ce7d4866\",\"license\":\"GPL-3.0\"},\"contracts/component/infra/AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../interfaces/IAddressResolver.sol';\\nimport '../../libraries/ownership/Ownable.sol';\\n\\ncontract AddressResolver is IAddressResolver, Ownable {\\n    bytes32 public constant voyageName = 'voyager';\\n    bytes32 public constant aclManagerName = 'aclManager';\\n    bytes32 public constant liquidityManagerProxyName = 'liquidityManagerProxy';\\n    bytes32 public constant liquidityManagerName = 'liquidityManager';\\n    bytes32 public constant liquidityManagerStorageName =\\n        'liquidityManagerStorage';\\n    bytes32 public constant liquidityDepositEscrowName =\\n        'liquidityDepositEscrow';\\n    bytes32 public constant loanManagerProxyName = 'loanManagerProxy';\\n    bytes32 public constant loanManagerName = 'loanManager';\\n    bytes32 public constant vaultManagerProxyName = 'vaultManagerProxy';\\n    bytes32 public constant vaultManagerName = 'vaultManager';\\n    bytes32 public constant vaultStorageName = 'vaultStorage';\\n    bytes32 public constant juniorDepositTokenName = 'juniorDepositToken';\\n    bytes32 public constant seniorDepositTokenName = 'seniorDepositToken';\\n    bytes32 public constant securityDepositTokenName = 'securityDepositToken';\\n    bytes32 public constant extCallACLProxyName = 'extCallACLProxy';\\n    bytes32 public constant priceOracleName = 'priceOracle';\\n\\n    mapping(bytes32 => address) public repository;\\n\\n    function importAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external onlyOwner {\\n        require(\\n            names.length == destinations.length,\\n            'Input lengths must match'\\n        );\\n\\n        for (uint256 i = 0; i < names.length; i++) {\\n            bytes32 name = names[i];\\n            address destination = destinations[i];\\n            repository[name] = destination;\\n            emit AddressImported(name, destination);\\n        }\\n    }\\n\\n    function getVoyage() external view returns (address) {\\n        return repository[voyageName];\\n    }\\n\\n    function getLiquidityManagerProxy() external view returns (address) {\\n        return repository[liquidityManagerProxyName];\\n    }\\n\\n    function getLiquidityManagerStorage() external view returns (address) {\\n        return repository[liquidityManagerStorageName];\\n    }\\n\\n    function getLoanManagerProxy() external view returns (address) {\\n        return repository[loanManagerProxyName];\\n    }\\n\\n    function getLoanManager() external view returns (address) {\\n        return repository[loanManagerName];\\n    }\\n\\n    function getVaultManagerProxy() external view returns (address) {\\n        return repository[vaultManagerProxyName];\\n    }\\n\\n    function getVaultManager() external view returns (address) {\\n        return repository[vaultManagerName];\\n    }\\n\\n    function getVaultStorage() external view returns (address) {\\n        return repository[vaultStorageName];\\n    }\\n\\n    function getJuniorDepositToken() external view returns (address) {\\n        return repository[juniorDepositTokenName];\\n    }\\n\\n    function getSeniorDepositToken() external view returns (address) {\\n        return repository[seniorDepositTokenName];\\n    }\\n\\n    function getExtCallProxy() external view returns (address) {\\n        return repository[extCallACLProxyName];\\n    }\\n\\n    function getAclManager() external view returns (address) {\\n        return repository[aclManagerName];\\n    }\\n\\n    function getPriceOracle() external view returns (address) {\\n        return repository[priceOracleName];\\n    }\\n\\n    function getAddress(bytes32 name) external view returns (address) {\\n        return repository[name];\\n    }\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address)\\n    {\\n        address _foundAddress = repository[name];\\n        require(_foundAddress != address(0), reason);\\n        return _foundAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x8c80c1fdc896ccfd722a33a2a8ec4bc7857815c5c8bf46d793d34b56f53914ed\",\"license\":\"GPL-3.0\"},\"contracts/component/infra/MessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './AddressResolver.sol';\\nimport '../../interfaces/IMessageBus.sol';\\nimport '../../interfaces/IVaultManager.sol';\\nimport '../../libraries/ownership/Ownable.sol';\\nimport '../../libraries/types/DataTypes.sol';\\nimport '../../libraries/helpers/Errors.sol';\\nimport '../liquidity/LiquidityManager.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\nimport '../vault/VaultManager.sol';\\nimport '../vault/VaultManagerProxy.sol';\\n\\n/**\\n * todo it might be a bad name here, it actually performs as the centralise place\\n * for querying each other among the internal components\\n **/\\ncontract MessageBus is IMessageBus, Ownable {\\n    AddressResolver public addressResolver;\\n\\n    /**\\n     * @dev Get addressResolver contract address\\n     * @return address of the resolver contract\\n     **/\\n    function getAddressResolverAddress() external view returns (address) {\\n        return address(addressResolver);\\n    }\\n\\n    /************************************** LiquidityManager Functions **************************************/\\n\\n    /**\\n     * @dev Get LiquidityManagerProxy contract address\\n     **/\\n    function getLiquidityManagerProxyAddress()\\n        public\\n        view\\n        returns (address payable)\\n    {\\n        address liquidityManagerProxyAddress = addressResolver\\n            .getLiquidityManagerProxy();\\n        return payable(liquidityManagerProxyAddress);\\n    }\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress()).getReserveData(\\n                _asset\\n            );\\n    }\\n\\n    /************************************** Vault Functions **************************************/\\n\\n    function getVaultConfig(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.VaultConfig memory)\\n    {\\n        require(Address.isContract(_reserve), Errors.LM_NOT_CONTRACT);\\n        return\\n            VaultManagerProxy(getVaultManagerProxyAddress()).getVaultConfig(\\n                _reserve\\n            );\\n    }\\n\\n    /**\\n     * @dev Get vault address\\n     * @param _user The owner of the vault\\n     **/\\n    function getVault(address _user) external view returns (address) {\\n        return VaultManagerProxy(getVaultManagerProxyAddress()).getVault(_user);\\n    }\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 amt = VaultManagerProxy(getVaultManagerProxyAddress())\\n            .getSecurityDeposit(_user, _reserve);\\n        return amt;\\n    }\\n\\n    /**\\n     * @dev Get VaultManagerProxy contract address\\n     * @return address of the VaultManager\\n     **/\\n    function getVaultManagerProxyAddress()\\n        public\\n        view\\n        returns (address payable)\\n    {\\n        address vaultManagerProxyAddress = addressResolver\\n            .getVaultManagerProxy();\\n        return payable(vaultManagerProxyAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x45c7414bd57ba947f2a91b6d086f30be0267cf02c10b9bb49eb0ca3b51a37ae1\",\"license\":\"GPL-3.0\"},\"contracts/component/liquidity/DefaultReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IReserveInterestRateStrategy.sol';\\nimport '../../tokenization/InitializableDepositToken.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    /**\\n     * this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates\\n     * Expressed in RAY\\n     **/\\n    uint256 public immutable OPTIMAL_UTILIZATION_RATE;\\n\\n    // Base interest rate set by governance. Expressed in ray\\n    uint256 internal immutable baseBorrowRate;\\n\\n    // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope1;\\n\\n    // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope2;\\n\\n    constructor(\\n        uint256 _optimalUtilizationRate,\\n        uint256 _stableRateSlope1,\\n        uint256 _stableRateSlope2,\\n        uint256 _baseBorrowRate\\n    ) public {\\n        OPTIMAL_UTILIZATION_RATE = _optimalUtilizationRate;\\n        baseBorrowRate = _baseBorrowRate;\\n        stableRateSlope1 = _stableRateSlope1;\\n        stableRateSlope2 = _stableRateSlope2;\\n    }\\n\\n    struct CalcInterestRatesLocalVars {\\n        uint256 totalDebt;\\n        uint256 currentStableBorrowRate;\\n        uint256 currentLiquidityRate;\\n        uint256 utilizationRate;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configuration\\n     * @param reserve The address of the reserve\\n     * @param seniorDepositTokenAddress The address of senior deposit token\\n     * @param liquidityAdded The liquidity added during the operation\\n     * @param liquidityTaken The liquidity taken during the operation\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        address seniorDepositTokenAddress,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256) {\\n        uint256 totalPendingWithdrawal = InitializableDepositToken(\\n            seniorDepositTokenAddress\\n        ).totalPendingWithdrawal();\\n\\n        uint256 availableLiquidity = IERC20(reserve).balanceOf(\\n            seniorDepositTokenAddress\\n        ) - totalPendingWithdrawal;\\n\\n        availableLiquidity = availableLiquidity.add(liquidityAdded).sub(\\n            liquidityTaken\\n        );\\n        return\\n            calculateInterestRates(\\n                reserve,\\n                availableLiquidity,\\n                totalStableDebt,\\n                averageBorrowRate\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * @param reserve The address of the reserve\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @param averageBorrowRate The current average borrow rate\\n     * @return The liquidity rate, the stable borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) public view returns (uint256, uint256) {\\n        CalcInterestRatesLocalVars memory vars;\\n\\n        vars.totalDebt = totalStableDebt;\\n        vars.currentStableBorrowRate = baseBorrowRate;\\n        vars.currentLiquidityRate = 0;\\n\\n        vars.utilizationRate = vars.totalDebt == 0\\n            ? 0\\n            : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\\n\\n        if (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n            vars.currentStableBorrowRate = vars\\n                .currentStableBorrowRate\\n                .add(stableRateSlope1)\\n                .add(\\n                    stableRateSlope2\\n                        .rayMul(\\n                            vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE)\\n                        )\\n                        .rayDiv(WadRayMath.Ray().sub(OPTIMAL_UTILIZATION_RATE))\\n                );\\n        } else {\\n            vars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\\n                stableRateSlope1.rayMul(vars.utilizationRate).rayDiv(\\n                    OPTIMAL_UTILIZATION_RATE\\n                )\\n            );\\n        }\\n\\n        vars.currentLiquidityRate = averageBorrowRate.rayMul(\\n            vars.utilizationRate\\n        );\\n        return (vars.currentLiquidityRate, vars.currentStableBorrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0x41bc982339694d36d9d910f9b2262b5565ab2354759010d37f3b0bf94916abfd\",\"license\":\"GPL-3.0\"},\"contracts/component/liquidity/LiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './ReserveManager.sol';\\nimport '../../libraries/helpers/Errors.sol';\\nimport '../../libraries/logic/ReserveLogic.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../../interfaces/IReserveManager.sol';\\nimport '../../interfaces/ILiquidityManager.sol';\\nimport '../../tokenization/InitializableDepositToken.sol';\\nimport '../../tokenization/JuniorDepositToken.sol';\\nimport '../../tokenization/SeniorDepositToken.sol';\\n\\ncontract LiquidityManager is ReserveManager, ILiquidityManager {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address payable _proxy, address _voyager)\\n        ReserveManager(_proxy, _voyager)\\n    {}\\n\\n    /************************************** User Functions **************************************/\\n\\n    function deposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address _user\\n    ) external onlyProxy {\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        DataTypes.ReserveData memory reserve = getReserveData(_asset);\\n        DataTypes.BorrowStat memory borrowStat = lms.getBorrowStat(_asset);\\n        uint256 totalDebt = borrowStat.totalDebt.add(borrowStat.totalInterest);\\n        uint256 avgBorrowRate = borrowStat.avgBorrowRate;\\n\\n        lms.updateStateOnDeposit(\\n            _asset,\\n            _tranche,\\n            _amount,\\n            totalDebt,\\n            avgBorrowRate\\n        );\\n\\n        address vToken;\\n        uint256 liquidityIndex;\\n\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            vToken = reserve.juniorDepositTokenAddress;\\n            liquidityIndex = getJuniorLiquidityIndex(_asset);\\n        } else {\\n            vToken = reserve.seniorDepositTokenAddress;\\n            liquidityIndex = getSeniorLiquidityIndex(_asset);\\n        }\\n        IVToken(vToken).mint(_user, _amount, liquidityIndex);\\n        IERC20(_asset).safeTransferFrom(_user, vToken, _amount);\\n        emitDeposit(_asset, _user, _tranche, _amount);\\n    }\\n\\n    function withdraw(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address payable _user\\n    ) external onlyProxy {\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        DataTypes.ReserveData memory reserve = getReserveData(_asset);\\n\\n        address vToken;\\n        uint256 liquidityIndex;\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            vToken = reserve.juniorDepositTokenAddress;\\n            liquidityIndex = getJuniorLiquidityIndex(_asset);\\n        } else {\\n            vToken = reserve.seniorDepositTokenAddress;\\n            liquidityIndex = getSeniorLiquidityIndex(_asset);\\n        }\\n\\n        uint256 userBalance = IERC20(vToken).balanceOf(_user);\\n\\n        uint256 amountToWithdraw = _amount;\\n\\n        if (_amount == type(uint256).max) {\\n            amountToWithdraw = userBalance;\\n        }\\n        DataTypes.BorrowStat memory borrowStat = lms.getBorrowStat(_asset);\\n        uint256 totalDebt = borrowStat.totalDebt.add(borrowStat.totalInterest);\\n        uint256 avgBorrowRate = borrowStat.avgBorrowRate;\\n        IVToken(vToken).burn(_user, amountToWithdraw, liquidityIndex);\\n        lms.updateStateOnWithdraw(\\n            _asset,\\n            _tranche,\\n            amountToWithdraw,\\n            totalDebt,\\n            avgBorrowRate\\n        );\\n\\n        emitWithdraw(_asset, _user, _tranche, _amount);\\n    }\\n\\n    /************************************** View Functions **************************************/\\n\\n    // todo @ian @xiaohuo this case, total balance should be the same as withdrawable amount\\n    function withdrawAbleAmount(\\n        address _reserve,\\n        address _user,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        DataTypes.ReserveData memory reserve = getReserveData(_reserve);\\n        address vToken;\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            vToken = reserve.juniorDepositTokenAddress;\\n        } else {\\n            vToken = reserve.seniorDepositTokenAddress;\\n        }\\n        return IERC20(vToken).balanceOf(_user);\\n    }\\n\\n    function balance(\\n        address _reserve,\\n        address _user,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        DataTypes.ReserveData memory reserve = getReserveData(_reserve);\\n        address vToken;\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            vToken = reserve.juniorDepositTokenAddress;\\n        } else {\\n            vToken = reserve.seniorDepositTokenAddress;\\n        }\\n        return IERC20(vToken).balanceOf(_user);\\n    }\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getReserveNormalizedIncome(_asset, _tranche);\\n    }\\n\\n    function utilizationRate(address _reserve) external view returns (uint256) {\\n        DataTypes.ReserveData memory reserve = getReserveData(_reserve);\\n\\n        uint256 totalPrincipal;\\n        uint256 totalInterest;\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        (totalPrincipal, totalInterest) = lms.getTotalDebt(_reserve);\\n        uint256 totalDebt = totalPrincipal.add(totalInterest);\\n\\n        uint256 totalPendingWithdrawal = InitializableDepositToken(\\n            reserve.seniorDepositTokenAddress\\n        ).totalPendingWithdrawal();\\n\\n        uint256 availableLiquidity = IERC20(_reserve).balanceOf(\\n            reserve.seniorDepositTokenAddress\\n        ) - totalPendingWithdrawal;\\n\\n        uint256 utilizationRate = totalDebt == 0\\n            ? 0\\n            : totalDebt.rayDiv(availableLiquidity.add(totalDebt));\\n\\n        return utilizationRate;\\n    }\\n\\n    /******************************************** Events *******************************************/\\n\\n    function trancheToBytes32(ReserveLogic.Tranche tranche)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return ReserveLogic.trancheToBytes32(tranche);\\n    }\\n\\n    event Deposit(\\n        address indexed asset,\\n        address indexed user,\\n        uint8 indexed tranche,\\n        uint256 amount\\n    );\\n\\n    bytes32 internal constant DEPOSIT_SIG =\\n        keccak256('Deposit(address,address,uint8,uint256)');\\n\\n    bytes32 internal constant WITHDRAW_SIG =\\n        keccak256('Withdraw(address,address,uint8,uint256)');\\n\\n    function emitDeposit(\\n        address asset,\\n        address user,\\n        ReserveLogic.Tranche tranche,\\n        uint256 amount\\n    ) internal {\\n        proxy._emit(\\n            abi.encode(amount),\\n            4,\\n            DEPOSIT_SIG,\\n            addressToBytes32(asset),\\n            addressToBytes32(user),\\n            trancheToBytes32(tranche)\\n        );\\n    }\\n\\n    function emitWithdraw(\\n        address asset,\\n        address user,\\n        ReserveLogic.Tranche tranche,\\n        uint256 amount\\n    ) internal {\\n        proxy._emit(\\n            abi.encode(amount),\\n            4,\\n            WITHDRAW_SIG,\\n            addressToBytes32(asset),\\n            addressToBytes32(user),\\n            trancheToBytes32(tranche)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4d5e29f90019a874a3a3f0f3e7b439398329b376bf586a53e433956f8ea768d1\",\"license\":\"GPL-3.0\"},\"contracts/component/liquidity/LiquidityManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/proxy/Proxy.sol';\\nimport '../../interfaces/IReserveManager.sol';\\nimport '../../interfaces/ILiquidityManager.sol';\\nimport '../../interfaces/ILiquidityManagerProxy.sol';\\nimport '../../interfaces/IVoyagerComponent.sol';\\nimport '../../libraries/logic/ReserveLogic.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract LiquidityManagerProxy is Proxy, ILiquidityManagerProxy {\\n    function getLiquidityRate(address _reserve, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IReserveManager(address(target)).getLiquidityRate(\\n                _reserve,\\n                _tranche\\n            );\\n    }\\n\\n    function getReserveData(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        return IReserveManager(address(target)).getReserveData(_reserve);\\n    }\\n\\n    function getLiquidityAndDebt(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.DepositAndDebt memory)\\n    {\\n        return IVoyagerComponent(address(target)).getDepositAndDebt(_reserve);\\n    }\\n\\n    function getReserveList() external view returns (address[] memory) {\\n        return IReserveManager(address(target)).getReserveList();\\n    }\\n\\n    function getConfiguration(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        return IReserveManager(address(target)).getConfiguration(_reserve);\\n    }\\n\\n    function getFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return IReserveManager(address(target)).getFlags(_asset);\\n    }\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        return\\n            ILiquidityManager(address(target)).getReserveNormalizedIncome(\\n                _asset,\\n                _tranche\\n            );\\n    }\\n\\n    function withdrawAbleAmount(\\n        address _reserve,\\n        address _user,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        return\\n            ILiquidityManager(address(target)).withdrawAbleAmount(\\n                _reserve,\\n                _user,\\n                _tranche\\n            );\\n    }\\n\\n    function balance(\\n        address _reserve,\\n        address _user,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        return\\n            ILiquidityManager(address(target)).balance(\\n                _reserve,\\n                _user,\\n                _tranche\\n            );\\n    }\\n\\n    function utilizationRate(address _reserve) external view returns (uint256) {\\n        return ILiquidityManager(address(target)).utilizationRate(_reserve);\\n    }\\n}\\n\",\"keccak256\":\"0x9a9e928c3fce856032915c8357584bb5f2df05c0d47f4de2afdcdb112d4cad09\",\"license\":\"GPL-3.0\"},\"contracts/component/liquidity/ReserveManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../Voyager.sol';\\nimport '../../libraries/helpers/Errors.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Address.sol';\\nimport '../shared/storage/LiquidityManagerStorage.sol';\\nimport '../infra/AddressResolver.sol';\\nimport '../../libraries/proxy/Proxyable.sol';\\nimport '../../libraries/logic/ReserveLogic.sol';\\nimport '../../interfaces/IReserveManager.sol';\\nimport '../../interfaces/IVoyagerComponent.sol';\\nimport '../../interfaces/IACLManager.sol';\\n\\nabstract contract ReserveManager is Proxyable, IReserveManager {\\n    constructor(address payable _proxy, address _voyager) Proxyable(_proxy) {\\n        voyager = Voyager(_voyager);\\n    }\\n\\n    modifier onlyAdmin() {\\n        _requireCallerAdmin();\\n        _;\\n    }\\n\\n    /************************************** HouseKeeping Functions **************************************/\\n\\n    /**\\n     * @dev Pause the protocol\\n     **/\\n    function pause() external onlyProxy onlyAdmin {\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).pause();\\n    }\\n\\n    /**\\n     * @dev UnPause the protocol\\n     **/\\n    function unPause() external onlyProxy onlyAdmin {\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).unPause();\\n    }\\n\\n    /**\\n     * @dev Initializes a reserve, activating it, assigning two deposit tokens and an interest rate strategy\\n     * Only callable by protocol operator\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @param _juniorDepositTokenAddress The address of the junior deposit token that will be assigned to the reserve\\n     * @param _seniorDepositTokenAddress The address of the senior deposit token that will be assigned to the reserve\\n     * @param _interestRateStrategyAddress The address of the interest rate strategy contract\\n     * @param _optimalIncomeRatio The ratio of income ratio\\n     **/\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress,\\n        address _loanStrategyAddress,\\n        uint256 _optimalIncomeRatio\\n    ) external onlyProxy onlyAdmin {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).initReserve(\\n            _asset,\\n            _juniorDepositTokenAddress,\\n            _seniorDepositTokenAddress,\\n            _interestRateStrategyAddress,\\n            _healthStrategyAddress,\\n            _loanStrategyAddress,\\n            _optimalIncomeRatio\\n        );\\n        emitReserveInitialized(\\n            _asset,\\n            _juniorDepositTokenAddress,\\n            _seniorDepositTokenAddress,\\n            _interestRateStrategyAddress,\\n            _healthStrategyAddress,\\n            _optimalIncomeRatio\\n        );\\n    }\\n\\n    /**\\n     * @dev Active a reserve for borrowing\\n     * @param _asset The address of the reserve\\n     **/\\n    function activeReserve(address _asset) external onlyProxy onlyAdmin {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).activeReserve(\\n                _asset\\n            );\\n        emitReserveActivated(_asset);\\n    }\\n\\n    /************************************** View Functions **************************************/\\n\\n    function getReserveData(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getReserveData(_asset);\\n    }\\n\\n    function getReserveList() external view returns (address[] memory) {\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getReserveList();\\n    }\\n\\n    function getConfiguration(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getConfiguration(_asset);\\n    }\\n\\n    function getFlags(address _asset)\\n        public\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress()).getFlags(\\n                _asset\\n            );\\n    }\\n\\n    function getLiquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getLiquidityRate(_asset, _tranche);\\n    }\\n\\n    function getJuniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getJuniorLiquidityIndex(_asset);\\n    }\\n\\n    function getSeniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getSeniorLiquidityIndex(_asset);\\n    }\\n\\n    /************************************** Private Functions **************************************/\\n\\n    function _requireCallerAdmin() internal {\\n        Voyager v = Voyager(voyager);\\n        AddressResolver addressResolver = v.addressResolver();\\n        address aclAddress = addressResolver.getAclManager();\\n        IACLManager aclManager = IACLManager(aclAddress);\\n        require(\\n            aclManager.isLiquidityManager(messageSender),\\n            'Not vault admin'\\n        );\\n    }\\n\\n    /******************************************** Events *******************************************/\\n\\n    function addressToBytes32(address input) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(input)));\\n    }\\n\\n    event ReserveInitialized(\\n        address indexed _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress,\\n        uint256 _optimalIncomeRatio\\n    );\\n    bytes32 internal constant RESERVE_INITIALIZED_SIG =\\n        keccak256(\\n            'ReserveInitialized(address,address,address,address,address,uint256)'\\n        );\\n\\n    function emitReserveInitialized(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress,\\n        uint256 _optimalIncomeRatio\\n    ) internal {\\n        proxy._emit(\\n            abi.encode(\\n                _juniorDepositTokenAddress,\\n                _seniorDepositTokenAddress,\\n                _interestRateStrategyAddress,\\n                _healthStrategyAddress,\\n                _optimalIncomeRatio\\n            ),\\n            2,\\n            RESERVE_INITIALIZED_SIG,\\n            addressToBytes32(_asset),\\n            0,\\n            0\\n        );\\n    }\\n\\n    event ReserveActivated(address indexed _asset);\\n    bytes32 internal constant RESERVE_ACTIVATED_SIG =\\n        keccak256('ReserveActivated(address)');\\n\\n    function emitReserveActivated(address _asset) internal {\\n        bytes memory data;\\n        proxy._emit(\\n            data,\\n            2,\\n            RESERVE_ACTIVATED_SIG,\\n            addressToBytes32(_asset),\\n            0,\\n            0\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5328c046778e9ba99433920f89da9a9bc6078bfb2b5f3fb00d107796e9500e0c\",\"license\":\"GPL-3.0\"},\"contracts/component/loan/LoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../../libraries/proxy/Proxyable.sol';\\nimport '../../interfaces/IVoyagerComponent.sol';\\nimport '../../libraries/helpers/Errors.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../libraries/types/DataTypes.sol';\\nimport '../../interfaces/IMessageBus.sol';\\nimport '../../interfaces/IHealthStrategy.sol';\\nimport '../../interfaces/ILoanStrategy.sol';\\nimport '../../interfaces/IVault.sol';\\nimport '../../interfaces/IVToken.sol';\\nimport '../Voyager.sol';\\nimport 'hardhat/console.sol';\\nimport '../../interfaces/ILoanManager.sol';\\n\\ncontract LoanManager is Proxyable, ILoanManager {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address payable _proxy, address _voyager) Proxyable(_proxy) {\\n        voyager = Voyager(_voyager);\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        uint256 amount;\\n        uint256 term;\\n        uint256 epoch;\\n        uint256 liquidityRate;\\n        uint256 borrowRate;\\n    }\\n\\n    function borrow(\\n        address _user,\\n        address _asset,\\n        uint256 _amount,\\n        address payable _vault,\\n        uint256 _grossAssetValue\\n    ) external requireNotPaused onlyProxy {\\n        ExecuteBorrowParams memory executeBorrowParams;\\n        // todo use min security deposit\\n        require(_amount >= 1e19, Errors.LOM_INVALID_AMOUNT);\\n\\n        // 0. check if the user owns the vault\\n        require(voyager.getVault(_user) == _vault, Errors.LOM_NOT_VAULT_OWNER);\\n\\n        // 1. check if pool liquidity is sufficient\\n        DataTypes.ReserveData memory reserveData = voyager.getReserveData(\\n            _asset\\n        );\\n\\n        uint256 availableSeniorLiquidity = IERC20(_asset).balanceOf(\\n            reserveData.seniorDepositTokenAddress\\n        );\\n        require(\\n            availableSeniorLiquidity >= _amount,\\n            Errors.LOM_RESERVE_NOT_SUFFICIENT\\n        );\\n\\n        // 2. check HF\\n        //        IHealthStrategy healthStrategy = IHealthStrategy(\\n        //            reserveData.healthStrategyAddress\\n        //        );\\n\\n        // 3. check credit limit\\n        uint256 availableCreditLimit = voyager.getAvailableCredit(\\n            _user,\\n            _asset\\n        );\\n\\n        require(\\n            availableCreditLimit >= _amount,\\n            Errors.LOM_CREDIT_NOT_SUFFICIENT\\n        );\\n\\n        // 4. update debt logic\\n        executeBorrowParams.term = ILoanStrategy(\\n            reserveData.loanStrategyAddress\\n        ).getTerm();\\n        executeBorrowParams.epoch = ILoanStrategy(\\n            reserveData.loanStrategyAddress\\n        ).getEpoch();\\n\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n\\n        // 5. update liquidity index and interest rate\\n        DataTypes.BorrowStat memory borrowStat = lms.getBorrowStat(_asset);\\n        (\\n            executeBorrowParams.liquidityRate,\\n            executeBorrowParams.borrowRate\\n        ) = IReserveInterestRateStrategy(\\n            reserveData.interestRateStrategyAddress\\n        ).calculateInterestRates(\\n                _asset,\\n                reserveData.seniorDepositTokenAddress,\\n                0,\\n                _amount,\\n                borrowStat.totalDebt,\\n                borrowStat.avgBorrowRate\\n            );\\n        lms.updateStateOnBorrow(\\n            _asset,\\n            _amount,\\n            borrowStat.totalDebt.add(borrowStat.totalInterest),\\n            executeBorrowParams.borrowRate\\n        );\\n\\n        lms.insertDebt(\\n            _asset,\\n            _vault,\\n            _amount,\\n            executeBorrowParams.term,\\n            executeBorrowParams.epoch,\\n            executeBorrowParams.borrowRate\\n        );\\n\\n        IVToken(reserveData.seniorDepositTokenAddress).transferUnderlyingTo(\\n            _vault,\\n            _amount\\n        );\\n    }\\n\\n    function repay(\\n        address _user,\\n        address _asset,\\n        uint256 _drawDown,\\n        address payable _vault\\n    ) external requireNotPaused onlyProxy {\\n        // 0. check if the user owns the vault\\n        require(voyager.getVault(_user) == _vault, Errors.LOM_NOT_VAULT_OWNER);\\n\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n\\n        // 1. check draw down to get principal and interest\\n        uint256 principal;\\n        uint256 interest;\\n        (principal, interest) = lms.getPMT(_asset, _vault, _drawDown);\\n        require(principal.add(interest) != 0, Errors.LOM_INVALID_DEBT);\\n\\n        // 2. update liquidity index and interest rate\\n        DataTypes.BorrowStat memory borrowStat = lms.getBorrowStat(_asset);\\n        uint256 totalDebt = borrowStat.totalDebt.add(borrowStat.totalInterest);\\n        uint256 avgBorrowRate = borrowStat.avgBorrowRate;\\n        lms.updateStateOnRepayment(\\n            _asset,\\n            principal.add(interest),\\n            totalDebt,\\n            avgBorrowRate\\n        );\\n\\n        // 3. update repay data\\n        lms.repay(_asset, _vault, _drawDown, principal, interest);\\n\\n        // 4. transfer underlying asset\\n        DataTypes.ReserveData memory reserveData = voyager.getReserveData(\\n            _asset\\n        );\\n\\n        uint256 bal = IERC20(_asset).balanceOf(\\n            reserveData.seniorDepositTokenAddress\\n        );\\n        IERC20(_asset).safeTransferFrom(\\n            _user,\\n            reserveData.seniorDepositTokenAddress,\\n            principal.add(interest)\\n        );\\n    }\\n\\n    function getVaultDebt(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        return lms.getVaultDebt(_reserve, _vault);\\n    }\\n\\n    function getDrawDownList(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        return lms.getDrawDownList(_reserve, _vault);\\n    }\\n\\n    function getDrawDownDetail(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDownId\\n    ) external view returns (DataTypes.DebtDetail memory) {\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        return lms.getDrawDownDetail(_reserve, _vault, _drawDownId);\\n    }\\n}\\n\",\"keccak256\":\"0xac45d34506291e0d41bbad09c19d6d1d43355bff19a457ca0c78d9e69519e1c0\",\"license\":\"GPL-3.0\"},\"contracts/component/loan/LoanManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/proxy/Proxy.sol';\\nimport './LoanManager.sol';\\nimport '../../interfaces/ILoanManagerProxy.sol';\\n\\ncontract LoanManagerProxy is ILoanManagerProxy, Proxy {\\n    function getVaultDebt(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return LoanManager(address(target)).getVaultDebt(_reserve, _vault);\\n    }\\n\\n    function getDrawDownList(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return LoanManager(address(target)).getDrawDownList(_reserve, _vault);\\n    }\\n\\n    function getDrawDownDetail(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDownId\\n    ) external view returns (DataTypes.DebtDetail memory) {\\n        return\\n            LoanManager(address(target)).getDrawDownDetail(\\n                _reserve,\\n                _vault,\\n                _drawDownId\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x6007c7cc7a1a6e60c27ca0f1945709db35d5dbdf844a9a759dc383d46c4ef4bf\",\"license\":\"GPL-3.0\"},\"contracts/component/shared/storage/LiquidityManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../../libraries/state/State.sol';\\nimport '../../../libraries/types/DataTypes.sol';\\nimport '../../../libraries/logic/ReserveLogic.sol';\\nimport '../../../libraries/logic/DebtLogic.sol';\\nimport '../../../libraries/logic/ValidationLogic.sol';\\nimport '../../../libraries/configuration/ReserveConfiguration.sol';\\nimport '../../../libraries/math/WadRayMath.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\ncontract LiquidityManagerStorage is State {\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using DebtLogic for DataTypes.BorrowData;\\n    using DebtLogic for DataTypes.BorrowStat;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    mapping(address => DataTypes.ReserveData) internal _reserves;\\n\\n    // asset => vault address => borrow data\\n    mapping(address => mapping(address => DataTypes.BorrowData))\\n        internal _borrowData;\\n\\n    mapping(address => DataTypes.BorrowStat) internal _borrowStat;\\n\\n    // List of reserves as a map (reserveId => reserve)\\n    mapping(uint256 => address) internal _reserveList;\\n\\n    // Maximum number of active reserves there have been in the protocol. It is the upper bound of the reserves list\\n    uint16 internal _reservesCount;\\n\\n    bool internal _paused;\\n\\n    constructor(address _liquidityManager) State(_liquidityManager) {}\\n\\n    function insertDebt(\\n        address _reserve,\\n        address _vault,\\n        uint256 _principal,\\n        uint256 _term,\\n        uint256 _epoch,\\n        uint256 _apr\\n    ) external onlyAssociatedContract {\\n        _borrowData[_reserve][_vault].insertDrawDown(\\n            _borrowStat[_reserve],\\n            _principal,\\n            _term,\\n            _epoch,\\n            _apr\\n        );\\n    }\\n\\n    function repay(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDownNumber,\\n        uint256 _principal,\\n        uint256 _interest\\n    ) external onlyAssociatedContract {\\n        _borrowData[_reserve][_vault].repay(\\n            _borrowStat[_reserve],\\n            _drawDownNumber,\\n            _principal,\\n            _interest\\n        );\\n    }\\n\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress,\\n        address _loanStrategyAddress,\\n        uint256 _optimalIncomeRatio\\n    ) external onlyAssociatedContract {\\n        _reserves[_asset].init(\\n            _juniorDepositTokenAddress,\\n            _seniorDepositTokenAddress,\\n            _interestRateStrategyAddress,\\n            _healthStrategyAddress,\\n            _loanStrategyAddress,\\n            _optimalIncomeRatio\\n        );\\n\\n        _reserveList[_reservesCount] = _asset;\\n        _reservesCount++;\\n    }\\n\\n    function updateStateOnDeposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        uint256 _totalDebt,\\n        uint256 _avgBorrowRate\\n    ) public onlyAssociatedContract {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        ValidationLogic.validateDeposit(reserve, _amount);\\n        reserve.updateState(_tranche);\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            reserve.updateInterestRates(\\n                _asset,\\n                reserve.juniorDepositTokenAddress,\\n                reserve.seniorDepositTokenAddress,\\n                _amount,\\n                0,\\n                0,\\n                0,\\n                _totalDebt,\\n                _avgBorrowRate\\n            );\\n        } else {\\n            reserve.updateInterestRates(\\n                _asset,\\n                reserve.juniorDepositTokenAddress,\\n                reserve.seniorDepositTokenAddress,\\n                0,\\n                0,\\n                _amount,\\n                0,\\n                _totalDebt,\\n                _avgBorrowRate\\n            );\\n        }\\n    }\\n\\n    function updateStateOnWithdraw(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        uint256 _totalDebt,\\n        uint256 _avgBorrowRate\\n    ) public onlyAssociatedContract {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        reserve.updateState(_tranche);\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            reserve.updateInterestRates(\\n                _asset,\\n                reserve.juniorDepositTokenAddress,\\n                reserve.seniorDepositTokenAddress,\\n                0,\\n                _amount,\\n                0,\\n                0,\\n                _totalDebt,\\n                _avgBorrowRate\\n            );\\n        } else {\\n            reserve.updateInterestRates(\\n                _asset,\\n                reserve.juniorDepositTokenAddress,\\n                reserve.seniorDepositTokenAddress,\\n                0,\\n                0,\\n                0,\\n                0,\\n                _totalDebt,\\n                _avgBorrowRate\\n            );\\n        }\\n    }\\n\\n    function updateStateOnBorrow(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _totalDebt,\\n        uint256 _avgBorrowRate\\n    ) public onlyAssociatedContract {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        reserve.updateState(ReserveLogic.Tranche.SENIOR);\\n        reserve.updateInterestRates(\\n            _asset,\\n            reserve.juniorDepositTokenAddress,\\n            reserve.seniorDepositTokenAddress,\\n            0,\\n            0,\\n            0,\\n            _amount,\\n            _totalDebt,\\n            _avgBorrowRate\\n        );\\n    }\\n\\n    function updateStateOnRepayment(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _totalDebt,\\n        uint256 _avgBorrowRate\\n    ) public onlyAssociatedContract {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        reserve.updateState(ReserveLogic.Tranche.SENIOR);\\n        reserve.updateInterestRates(\\n            _asset,\\n            reserve.juniorDepositTokenAddress,\\n            reserve.seniorDepositTokenAddress,\\n            0,\\n            0,\\n            _amount,\\n            0,\\n            _totalDebt,\\n            _avgBorrowRate\\n        );\\n    }\\n\\n    function activeReserve(address _asset) public onlyAssociatedContract {\\n        DataTypes.ReserveConfigurationMap\\n            memory currentConfig = getConfiguration(_asset);\\n        currentConfig.setActive(true);\\n        setConfiguration(_asset, currentConfig.data);\\n    }\\n\\n    function pause() public onlyAssociatedContract {\\n        _paused = true;\\n    }\\n\\n    function unPause() public onlyAssociatedContract {\\n        _paused = false;\\n    }\\n\\n    /*********************************************** View functions ***********************************************/\\n\\n    function getFlags(address _asset)\\n        public\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        DataTypes.ReserveConfigurationMap\\n            memory currentConfig = getConfiguration(_asset);\\n        return currentConfig.getFlags();\\n    }\\n\\n    function getReserveData(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        return _reserves[_asset];\\n    }\\n\\n    function getReserveList() public view returns (address[] memory) {\\n        address[] memory reserveList = new address[](_reservesCount);\\n        for (uint256 i = 0; i < _reservesCount; i++) {\\n            reserveList[i] = _reserveList[i];\\n        }\\n        return reserveList;\\n    }\\n\\n    function getConfiguration(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        return _reserves[_asset].configuration;\\n    }\\n\\n    function setConfiguration(address _asset, uint256 configuration) internal {\\n        _reserves[_asset].configuration.data = configuration;\\n    }\\n\\n    function getLiquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].getLiquidityRate(_tranche);\\n    }\\n\\n    function getJuniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].juniorLiquidityIndex;\\n    }\\n\\n    function getSeniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].seniorLiquidityIndex;\\n    }\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) public view returns (uint256) {\\n        return _reserves[_asset].getNormalizedIncome(_tranche);\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    function getDepositAndDebt(address _reserve)\\n        public\\n        view\\n        returns (DataTypes.DepositAndDebt memory)\\n    {\\n        DataTypes.ReserveData storage reserve = _reserves[_reserve];\\n        DataTypes.BorrowStat storage borrowStat = _borrowStat[_reserve];\\n        DataTypes.DepositAndDebt memory res;\\n        res.juniorDepositAmount = IERC20(reserve.juniorDepositTokenAddress)\\n            .totalSupply();\\n        res.seniorDepositAmount = IERC20(reserve.seniorDepositTokenAddress)\\n            .totalSupply();\\n        (res.totalDebt, res.totalInterest, res.avgBorrowRate) = (\\n            borrowStat.totalDebt,\\n            borrowStat.totalInterest,\\n            borrowStat.avgBorrowRate\\n        );\\n        return res;\\n    }\\n\\n    function getPMT(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDown\\n    ) public view returns (uint256, uint256) {\\n        DataTypes.DrawDown storage dd = _borrowData[_reserve][_vault].drawDowns[\\n            _drawDown\\n        ];\\n        return (dd.pmt.principal, dd.pmt.interest);\\n    }\\n\\n    function getVaultDebt(address _reserve, address _vault)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        DataTypes.BorrowData storage borrowData = _borrowData[_reserve][_vault];\\n        return (borrowData.totalPrincipal, borrowData.totalInterest);\\n    }\\n\\n    function getTotalDebt(address _reserve)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        DataTypes.BorrowStat storage borrowStat = _borrowStat[_reserve];\\n        return (borrowStat.totalDebt, borrowStat.totalInterest);\\n    }\\n\\n    function getBorrowStat(address _reserve)\\n        public\\n        view\\n        returns (DataTypes.BorrowStat memory)\\n    {\\n        return _borrowStat[_reserve];\\n    }\\n\\n    function getDrawDownList(address _reserve, address _vault)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        DataTypes.BorrowData storage borrowData = _borrowData[_reserve][_vault];\\n        return (borrowData.paidDrawDownNumber, borrowData.nextDrawDownNumber);\\n    }\\n\\n    function getDrawDownDetail(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDownId\\n    ) public view returns (DataTypes.DebtDetail memory) {\\n        DataTypes.BorrowData storage borrowData = _borrowData[_reserve][_vault];\\n        return borrowData.getDrawDownDetail(_drawDownId);\\n    }\\n}\\n\",\"keccak256\":\"0xb06eda397b1bc531e51f186884632ea007bca035cb7a395829ba4ad9643b2fbb\",\"license\":\"GPL-3.0\"},\"contracts/component/staking/RewardsDistributionRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/ownership/Ownable.sol';\\n\\nabstract contract RewardsDistributionRecipient is Ownable {\\n    address public rewardsDistribution;\\n\\n    function notifyRewardAmount(uint256 reward) external virtual;\\n\\n    modifier onlyRewardsDistribution() {\\n        require(\\n            msg.sender == rewardsDistribution,\\n            'Caller is not RewardsDistribution contract'\\n        );\\n        _;\\n    }\\n\\n    function setRewardsDistribution(address _rewardsDistribution)\\n        external\\n        onlyOwner\\n    {\\n        rewardsDistribution = _rewardsDistribution;\\n    }\\n}\\n\",\"keccak256\":\"0x0ada077c7d1b5ed5f6786d032e0a6ebeccae5460cd08dcadc06f62ec4db0bfda\",\"license\":\"GPL-3.0\"},\"contracts/component/staking/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../../libraries/helpers/Pausable.sol';\\nimport 'openzeppelin-solidity/contracts/security/ReentrancyGuard.sol';\\nimport './RewardsDistributionRecipient.sol';\\n\\ncontract StakingRewards is\\n    ReentrancyGuard,\\n    RewardsDistributionRecipient,\\n    Pausable\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public stakingToken;\\n    IERC20 public rewardsToken;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardsDuration = 7 days;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    constructor(address _stakingToken, address _rewardsToken) {\\n        stakingToken = IERC20(_stakingToken);\\n        rewardsToken = IERC20(_rewardsToken);\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function stake(uint256 amount)\\n        external\\n        nonReentrant\\n        notPaused\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, 'Cannot stake 0');\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, 'Cannot withdraw 0');\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            _balances[account]\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(rewardsDuration);\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlyRewardsDistribution\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardsToken.balanceOf(address(this));\\n        require(\\n            rewardRate <= balance.div(rewardsDuration),\\n            'Provided reward too high'\\n        );\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n        require(\\n            block.timestamp > periodFinish,\\n            'Previous rewards period must be complete before changing the duration for the new period'\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n}\\n\",\"keccak256\":\"0xe1f5684233b7b5d2fb7eae0bbf0da879236e494aa3b654d58a2634cf1b182a39\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/BaseSecurityEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/Address.sol';\\nimport 'openzeppelin-solidity/contracts/security/ReentrancyGuard.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../../libraries/EthAddressLib.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract BaseSecurityEscrow is ReentrancyGuard {\\n    using Address for address payable;\\n    using SafeERC20 for ERC20;\\n\\n    struct Deposit {\\n        uint256 amount;\\n        uint40 depositTime;\\n    }\\n\\n    event Deposited(address indexed payee, address token, uint256 amount);\\n    event Withdrawn(address indexed payee, address token, uint256 amount);\\n\\n    // reserve address => amount\\n    mapping(address => uint256) private _deposits;\\n    // reserve address => user address => deposit record\\n    mapping(address => mapping(address => Deposit[])) private _depositRecords;\\n\\n    uint40 private _lockupTimeInSeconds = 7 days;\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param _reserve the asset address\\n     * @param _user user address who deposit to this escrow\\n     * @param _amount token amount need to transfer\\n     */\\n    function _deposit(\\n        address _reserve,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        if (_reserve != EthAddressLib.ethAddress()) {\\n            require(\\n                msg.value == 0,\\n                'User is sending ETH along with the ERC20 transfer.'\\n            );\\n            ERC20(_reserve).safeTransferFrom(_user, address(this), _amount);\\n        } else {\\n            require(\\n                msg.value == _amount,\\n                'The amount and the value sent to deposit do not match'\\n            );\\n        }\\n        _deposits[_reserve] += _amount;\\n        Deposit memory deposit = Deposit(_amount, uint40(block.timestamp));\\n        _depositRecords[_reserve][_user].push(deposit);\\n        emit Deposited(_user, _reserve, _amount);\\n    }\\n\\n    function eligibleAmount(address _reserve, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Deposit[] storage deposits = _depositRecords[_reserve][_user];\\n        uint256 eligibleAmount = 0;\\n        for (uint256 i = 0; i < deposits.length; i++) {\\n            if (\\n                uint40(block.timestamp) - deposits[i].depositTime >\\n                _lockupTimeInSeconds\\n            ) {\\n                eligibleAmount += deposits[i].amount;\\n            }\\n        }\\n        return eligibleAmount;\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, only beyond _lockupTimeInSeconds\\n     * @param _reserve the asset address\\n     * @param _user user address who deposit to this escrow\\n     */\\n    function _withdraw(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) internal {\\n        Deposit[] storage deposits = _depositRecords[_reserve][_user];\\n        uint256 eligibleAmount = 0;\\n        uint40 lastUpdateTime;\\n        for (uint256 i = 0; i < deposits.length; i++) {\\n            if (\\n                uint40(block.timestamp) - deposits[i].depositTime >\\n                _lockupTimeInSeconds\\n            ) {\\n                eligibleAmount += deposits[i].amount;\\n                lastUpdateTime = deposits[i].depositTime;\\n                delete deposits[i];\\n            }\\n        }\\n\\n        require(\\n            eligibleAmount >= _amount,\\n            'Do not have enough amount to withdraw'\\n        );\\n        // todo check borrow amount\\n        // if there is any amount left from eligible amount, push it back\\n        if (eligibleAmount > _amount) {\\n            uint256 leftAmount = eligibleAmount - _amount;\\n            Deposit memory leftDeposit = Deposit(leftAmount, lastUpdateTime);\\n            _depositRecords[_reserve][_user].push(leftDeposit);\\n        }\\n\\n        _deposits[_reserve] -= _amount;\\n        transferToUser(_reserve, _user, _amount);\\n        emit Withdrawn(_user, _reserve, _amount);\\n    }\\n\\n    /**\\n     * @dev get accumulated amount of deposit.\\n     * @param _reserve the address of the reserve where the transfer is happening\\n     * @return accumulated deposit amount\\n     **/\\n    function getDepositAmount(address _reserve) public view returns (uint256) {\\n        return _deposits[_reserve];\\n    }\\n\\n    /**\\n     * @dev get all records of deposit.\\n     * @param _reserve the address of the reserve where the transfer is happening\\n     * @param _user the address of the user receiving the transfer\\n     * @return deposit records\\n     **/\\n    function getDepositRecords(address _reserve, address _user)\\n        public\\n        view\\n        returns (Deposit[] memory)\\n    {\\n        Deposit[] storage deposits = _depositRecords[_reserve][_user];\\n        return deposits;\\n    }\\n\\n    /**\\n     * @dev transfers to the user a specific amount from the reserve.\\n     * @param _reserve the address of the reserve where the transfer is happening\\n     * @param _user the address of the user receiving the transfer\\n     * @param _amount the amount being transferred\\n     **/\\n    function transferToUser(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) internal {\\n        if (_reserve != EthAddressLib.ethAddress()) {\\n            ERC20(_reserve).safeTransfer(_user, _amount);\\n        } else {\\n            //solium-disable-next-line\\n            (bool result, ) = _user.call{value: _amount}('');\\n            require(result, 'Transfer of ETH failed');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1d8511b81c3c13d9176832043671321537cac11101c2f4102f47cc5883d9e2a\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/SecurityDepositEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/ownership/Ownable.sol';\\nimport './BaseSecurityEscrow.sol';\\n\\ncontract SecurityDepositEscrow is BaseSecurityEscrow {\\n    address public vault;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == vault, 'Not vault');\\n        _;\\n    }\\n\\n    constructor(address _vault) {\\n        vault = _vault;\\n    }\\n\\n    function getVersion() external view returns (string memory) {\\n        string memory version = 'SecurityDepositEscrow 0.0.1';\\n        return version;\\n    }\\n\\n    // placeholder function\\n    function slash(\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) public payable nonReentrant onlyOwner {\\n        transferToUser(_reserve, _to, _amount);\\n    }\\n\\n    function deposit(\\n        address _reserve,\\n        address _user,\\n        uint256 _amount\\n    ) public payable nonReentrant onlyOwner {\\n        _deposit(_reserve, _user, _amount);\\n    }\\n\\n    function withdraw(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        _withdraw(_reserve, _user, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa73cc51f6bece11daea3a57055cdca9299c98d5e7c6f7f899fe8184d75dec289\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/security/ReentrancyGuard.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport './SecurityDepositEscrow.sol';\\nimport '../infra/AddressResolver.sol';\\nimport '../Voyager.sol';\\nimport './VaultManager.sol';\\nimport '../staking/StakingRewards.sol';\\nimport '../loan/LoanManagerProxy.sol';\\nimport '../../tokenization/SecurityDepositToken.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IACLManager.sol';\\nimport '../../interfaces/IVault.sol';\\nimport '../../interfaces/IVaultManagerProxy.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract Vault is ReentrancyGuard, IVault {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    bytes32 public constant BORROWER = keccak256('BORROWER');\\n\\n    address public voyager;\\n    address[] public players;\\n    bool public initialized;\\n    SecurityDepositEscrow public securityDepositEscrow;\\n    SecurityDepositToken public securityDepositToken;\\n    StakingRewards public stakingContract;\\n\\n    //    uint256 public totalDebt;\\n    // todo oracle\\n    uint256 public gav;\\n\\n    modifier onlyLoanManager() {\\n        _requireCallerLoanManager();\\n        _;\\n    }\\n\\n    modifier onlyVaultManager() {\\n        _requireVaultManager();\\n        _;\\n    }\\n\\n    modifier onlyVaultManagerContract() {\\n        _requireCallerLoanManagerContract();\\n        _;\\n    }\\n\\n    function initialize(\\n        address _voyager,\\n        SecurityDepositEscrow _securityDepositEscrow\\n    ) external {\\n        if (!initialized) {\\n            voyager = _voyager;\\n            securityDepositEscrow = _securityDepositEscrow;\\n            initialized = true;\\n        }\\n    }\\n\\n    function initSecurityDepositToken(address _reserve)\\n        external\\n        onlyVaultManager\\n    {\\n        require(\\n            address(securityDepositToken) == address(0),\\n            'Vault: security deposit token has been initialized'\\n        );\\n        ERC20 token = ERC20(_reserve);\\n        securityDepositToken = new SecurityDepositToken(\\n            _reserve,\\n            token.decimals(),\\n            token.name(),\\n            token.symbol()\\n        );\\n    }\\n\\n    function initStakingContract(address _reserve) external onlyVaultManager {\\n        require(\\n            address(stakingContract) == address(0),\\n            'Vault: staking contract has been initialized'\\n        );\\n        require(\\n            address(securityDepositToken) != address(0),\\n            'Vault: security deposit token has not been initialized'\\n        );\\n        stakingContract = new StakingRewards(\\n            address(securityDepositToken),\\n            _reserve\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer some deposit security\\n     * @param _sponsor user address who deposit to this escrow\\n     * @param _reserve reserve address\\n     * @param _amount deposit amount\\n     **/\\n    function depositMargin(\\n        address _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable nonReentrant onlyVaultManager {\\n        address vmp = Voyager(voyager).addressResolver().getVaultManagerProxy();\\n        IVaultManagerProxy vaultManagerProxy = IVaultManagerProxy(vmp);\\n        DataTypes.VaultConfig memory vaultConfig = vaultManagerProxy\\n            .getVaultConfig(_reserve);\\n\\n        // check max security deposit amount for this _reserve\\n        uint256 maxAllowedAmount = vaultConfig.maxSecurityDeposit;\\n        uint256 depositedAmount = securityDepositEscrow.getDepositAmount(\\n            _reserve\\n        );\\n        require(\\n            depositedAmount + _amount < maxAllowedAmount,\\n            'Vault: deposit amount exceed'\\n        );\\n\\n        // check min security deposit amount for this _reserve\\n        uint256 minAllowedAmount = vaultConfig.minSecurityDeposit;\\n        require(minAllowedAmount <= _amount, 'Vault: deposit too small');\\n\\n        securityDepositEscrow.deposit(_reserve, _sponsor, _amount);\\n        securityDepositToken.mintOnDeposit(_sponsor, _amount);\\n    }\\n\\n    /**\\n     * @dev Redeem underlying reserve\\n     * @param _sponsor sponsor address\\n     * @param _reserve reserve address\\n     * @param _amount redeem amount\\n     **/\\n    function redeemMargin(\\n        address payable _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable nonReentrant onlyVaultManager {\\n        require(\\n            _amount <= _getWithdrawableDeposit(_sponsor, _reserve),\\n            'Vault: cannot redeem more than withdrawable deposit amount'\\n        );\\n        securityDepositEscrow.withdraw(\\n            _reserve,\\n            _sponsor,\\n            _underlyingBalance(_sponsor, _reserve)\\n        );\\n        securityDepositToken.burnOnRedeem(_sponsor, _amount);\\n    }\\n\\n    // placeholder function\\n    function slash(\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) external nonReentrant onlyVaultManager {\\n        securityDepositEscrow.slash(_reserve, _to, _amount);\\n    }\\n\\n    /************************************** View Functions **************************************/\\n\\n    /**\\n     * @dev get current security amount\\n     * @param _reserve underlying asset address\\n     **/\\n    function getCurrentSecurityDeposit(address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return securityDepositEscrow.getDepositAmount(_reserve);\\n    }\\n\\n    function getActualSecurityDeposit(address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return ERC20(_reserve).balanceOf(address(securityDepositEscrow));\\n    }\\n\\n    function getGav() external view returns (uint256) {\\n        return gav;\\n    }\\n\\n    function getWithdrawableDeposit(address _sponsor, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getWithdrawableDeposit(_sponsor, _reserve);\\n    }\\n\\n    function underlyingBalance(address _sponsor, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _underlyingBalance(_sponsor, _reserve);\\n    }\\n\\n    function getSecurityDepositTokenAddress() external view returns (address) {\\n        return address(securityDepositToken);\\n    }\\n\\n    function getStakingContractAddress() external view returns (address) {\\n        return address(stakingContract);\\n    }\\n\\n    /**\\n     * @dev Get SecurityDepositEscrow contract address\\n     * @return address\\n     **/\\n    function getMarginDepositEscrowAddress() external view returns (address) {\\n        return address(securityDepositEscrow);\\n    }\\n\\n    function getVersion() external view returns (string memory) {\\n        string memory version = 'Vault 0.0.1';\\n        return version;\\n    }\\n\\n    /************************************** Internal Functions **************************************/\\n\\n    function _requireCallerLoanManager() internal {\\n        Voyager v = Voyager(voyager);\\n        IACLManager aclManager = IACLManager(\\n            v.addressResolver().getAclManager()\\n        );\\n        require(\\n            aclManager.isLoanManager(msg.sender),\\n            'Not loan manager contract'\\n        );\\n    }\\n\\n    function _requireCallerLoanManagerContract() internal {\\n        Voyager v = Voyager(voyager);\\n        IACLManager aclManager = IACLManager(\\n            v.addressResolver().getAclManager()\\n        );\\n        require(\\n            aclManager.isLoanManagerContract(msg.sender),\\n            'Not loan manager'\\n        );\\n    }\\n\\n    function _requireVaultManager() internal {\\n        Voyager v = Voyager(voyager);\\n        IACLManager aclManager = IACLManager(\\n            v.addressResolver().getAclManager()\\n        );\\n        require(\\n            aclManager.isVaultManagerContract(msg.sender),\\n            'Not vault manager contract'\\n        );\\n    }\\n\\n    function _getVaultManagerAddress() internal view returns (address) {\\n        Voyager v = Voyager(voyager);\\n        return v.addressResolver().getVaultManager();\\n    }\\n\\n    function _underlyingBalance(address _sponsor, address _reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 amountToRedeemInRay = securityDepositToken\\n            .balanceOf(_sponsor)\\n            .wadToRay()\\n            .rayDiv(securityDepositToken.totalSupply().wadToRay())\\n            .rayMul(getActualSecurityDeposit(_reserve).wadToRay());\\n        return amountToRedeemInRay.rayToWad();\\n    }\\n\\n    function getVaultManagerProxyAddress() private view returns (address) {\\n        Voyager voyager = Voyager(voyager);\\n        address addressResolver = voyager.getAddressResolverAddress();\\n        return AddressResolver(addressResolver).getVaultManagerProxy();\\n    }\\n\\n    function getLoanManagerProxyAddress() private view returns (address) {\\n        Voyager voyager = Voyager(voyager);\\n        address addressResolver = voyager.getAddressResolverAddress();\\n        return AddressResolver(addressResolver).getLoanManagerProxy();\\n    }\\n\\n    function _getUnusedDeposits(address _sponsor, address _reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        address vmp = Voyager(voyager).addressResolver().getVaultManagerProxy();\\n        IVaultManagerProxy vaultManagerProxy = IVaultManagerProxy(vmp);\\n        DataTypes.VaultConfig memory vaultConfig = vaultManagerProxy\\n            .getVaultConfig(_reserve);\\n\\n        uint256 securityRequirement = vaultConfig.securityDepositRequirement;\\n        uint256 principal;\\n        uint256 interest;\\n        (principal, interest) = ILoanManager(getLoanManagerProxyAddress())\\n            .getVaultDebt(_reserve, address(this));\\n\\n        uint256 totalDebt = principal.add(interest);\\n        return\\n            securityDepositToken.balanceOf(_sponsor) -\\n            totalDebt.wadToRay().rayMul(securityRequirement).rayToWad();\\n    }\\n\\n    function _eligibleAmount(address _reserve, address _sponsor)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return securityDepositEscrow.eligibleAmount(_reserve, _sponsor);\\n    }\\n\\n    function _getWithdrawableDeposit(address _sponsor, address _reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 withdrawableAmount = _getUnusedDeposits(_sponsor, _reserve);\\n        uint256 eligibleAmount = _eligibleAmount(_reserve, _sponsor);\\n        if (eligibleAmount < withdrawableAmount) {\\n            withdrawableAmount = eligibleAmount;\\n        }\\n        return withdrawableAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x7bd1c0b6031e3052b1e994a194f85fcadb523f18f56d169ac33799e43ac2ac56\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './Vault.sol';\\nimport '../../interfaces/IVaultFactory.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Create2.sol';\\n\\ncontract VaultFactory is IVaultFactory {\\n    function createVault(bytes32 salt) external returns (address) {\\n        bytes memory bytecode = type(Vault).creationCode;\\n        return Create2.deploy(0, salt, type(Vault).creationCode);\\n    }\\n}\\n\",\"keccak256\":\"0x813b1ad103508cd4a790dc163b2b2cf1441e63d2a00138f1908e8cc2330763e1\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/security/ReentrancyGuard.sol';\\nimport '../../libraries/proxy/Proxyable.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IVaultManager.sol';\\nimport '../../interfaces/IAddressResolver.sol';\\nimport '../../interfaces/IVaultFactory.sol';\\nimport '../../interfaces/IVault.sol';\\nimport '../../interfaces/IACLManager.sol';\\nimport './VaultStorage.sol';\\nimport './VaultFactory.sol';\\n\\ncontract VaultManager is ReentrancyGuard, Proxyable, IVaultManager {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n\\n    IAddressResolver public addressResolver;\\n    address public vaultFactory;\\n\\n    constructor(\\n        address payable _proxy,\\n        address _addressResolver,\\n        address _voyager,\\n        address _vaultFactory\\n    ) public Proxyable(_proxy) {\\n        addressResolver = IAddressResolver(_addressResolver);\\n        vaultFactory = _vaultFactory;\\n        voyager = Voyager(_voyager);\\n    }\\n\\n    modifier onlyAdmin() {\\n        _requireCallerAdmin();\\n        _;\\n    }\\n\\n    /************************************** User Functions **************************************/\\n\\n    /**\\n     * @dev Create a Vault for user\\n     * @param _user the address of the player\\n     **/\\n    function createVault(\\n        address _user,\\n        address _reserve,\\n        bytes32 _salt\\n    ) external onlyProxy returns (address) {\\n        address vault = VaultFactory(vaultFactory).createVault(_salt);\\n        require(vault != address(0), 'deploy vault failed');\\n        uint256 len = VaultStorage(getVaultStorageAddress()).pushNewVault(\\n            _user,\\n            vault\\n        );\\n        proxy._emit(\\n            abi.encode(vault, len),\\n            2,\\n            keccak256('VaultCreated(address, address, uint256)'),\\n            bytes32(abi.encodePacked(_user)),\\n            0,\\n            0\\n        );\\n        return vault;\\n    }\\n\\n    function initVault(address _vault, address _reserve) external onlyProxy {\\n        SecurityDepositEscrow securityDepositEscrow = new SecurityDepositEscrow(\\n            _vault\\n        );\\n        IVault(_vault).initialize(\\n            addressResolver.getVoyage(),\\n            securityDepositEscrow\\n        );\\n        IVault(_vault).initSecurityDepositToken(_reserve);\\n    }\\n\\n    /**\\n     * @dev Delegate call to Vault's depositMargin\\n     * @param _sponsor who actual deposits the reserve into the amount\\n     * @param _vaultUser user address\\n     * @param _reserve reserve address\\n     * @param _amount amount user is willing to deposit\\n     */\\n    function depositMargin(\\n        address _sponsor,\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyProxy {\\n        address vaultAddress = _getVault(_vaultUser);\\n        IVault(vaultAddress).depositMargin(_sponsor, _reserve, _amount);\\n        _emit(\\n            _sponsor,\\n            _vaultUser,\\n            _reserve,\\n            _amount,\\n            keccak256('SecurityDeposited(address, address, address, uint256)')\\n        );\\n    }\\n\\n    /**\\n     * @dev  Delegate call to Vault's redeemMargin\\n     * @param _sponsor sponsor address\\n     * @param _vaultUser user address\\n     * @param _reserve reserve address\\n     * @param _amount redeem amount\\n     **/\\n    function redeemMargin(\\n        address payable _sponsor,\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyProxy {\\n        address vaultAddress = _getVault(_vaultUser);\\n        Vault(vaultAddress).redeemMargin(_sponsor, _reserve, _amount);\\n        proxy._emit(\\n            abi.encode(_vaultUser, _reserve, _amount),\\n            2,\\n            keccak256('SecurityRedeemed(address, address, address, uint256)'),\\n            bytes32(abi.encodePacked(_sponsor)),\\n            0,\\n            0\\n        );\\n    }\\n\\n    // placeholder function\\n    function slash(\\n        address _vaultUser,\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) public nonReentrant onlyProxy {\\n        address vaultAddress = _getVault(_vaultUser);\\n        return Vault(vaultAddress).slash(_reserve, _to, _amount);\\n    }\\n\\n    /************************ HouseKeeping Function ******************************/\\n\\n    /**\\n     * @dev Set max security deposit for _reserve\\n     * @param _reserve reserve address\\n     * @param _amount max amount sponsor can deposit\\n     */\\n    function setMarginSecurityDeposit(address _reserve, uint256 _amount)\\n        external\\n        onlyProxy\\n        onlyAdmin\\n    {\\n        VaultStorage(getVaultStorageAddress()).setMarginSecurityDeposit(\\n            _reserve,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Set min security deposit for _reserve\\n     * @param _reserve reserve address\\n     * @param _amount min amount sponsor can deposit\\n     */\\n    function setMinSecurityDeposit(address _reserve, uint256 _amount)\\n        external\\n        onlyProxy\\n        onlyAdmin\\n    {\\n        VaultStorage(getVaultStorageAddress()).setMinSecurityDeposit(\\n            _reserve,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Update the security deposit requirement\\n     * @param _reserve reserve address\\n     * @param _requirement expressed in Ray\\n     */\\n    function setSecurityDepositRequirement(\\n        address _reserve,\\n        uint256 _requirement\\n    ) external onlyProxy onlyAdmin {\\n        VaultStorage(getVaultStorageAddress()).setSecurityDepositRequirement(\\n            _reserve,\\n            _requirement\\n        );\\n    }\\n\\n    /************************************** View Functions **************************************/\\n\\n    function getVaultConfig(address _reserve)\\n        external\\n        view\\n        onlyProxy\\n        returns (DataTypes.VaultConfig memory)\\n    {\\n        return VaultStorage(getVaultStorageAddress()).getVaultConfig(_reserve);\\n    }\\n\\n    /**\\n     * @dev Get available credit\\n     * @param _user user address\\n     * @param _reserve reserve address\\n     **/\\n    function getAvailableCredit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 creditLimit = getCreditLimit(_user, _reserve);\\n        uint256 principal;\\n        uint256 interest;\\n        address vault = _getVault(_user);\\n        ILoanManager(addressResolver.getLoanManagerProxy()).getVaultDebt(\\n            _reserve,\\n            vault\\n        );\\n        uint256 accumulatedDebt = principal.add(interest);\\n        if (creditLimit < accumulatedDebt) {\\n            return 0;\\n        }\\n        return creditLimit - accumulatedDebt;\\n    }\\n\\n    /**\\n     * @dev Get credit limit for a specific reserve\\n     * @param _user user address\\n     * @return _reserve reserve address\\n     **/\\n    function getCreditLimit(address _user, address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 currentSecurityDeposit = _getSecurityDeposit(_user, _reserve);\\n        DataTypes.VaultConfig memory vc = VaultStorage(getVaultStorageAddress())\\n            .getVaultConfig(_reserve);\\n        uint256 securityDepositRequirement = vc.securityDepositRequirement;\\n        require(\\n            securityDepositRequirement != 0,\\n            'security deposit requirement cannot be 0'\\n        );\\n        uint256 creditLimitInRay = currentSecurityDeposit.wadToRay().rayDiv(\\n            securityDepositRequirement\\n        );\\n        return creditLimitInRay.rayToWad();\\n    }\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getSecurityDeposit(_user, _reserve);\\n    }\\n\\n    function getVaultStorageAddress() private view returns (address) {\\n        return addressResolver.getVaultStorage();\\n    }\\n\\n    function getSecurityDepositTokenAddress(address vault)\\n        private\\n        view\\n        returns (address)\\n    {\\n        return IVault(vault).getSecurityDepositTokenAddress();\\n    }\\n\\n    /**\\n     * @dev Get existing Vault contract address for user\\n     * @param _user the address of the player\\n     * @return Vault address\\n     **/\\n    function getVault(address _user) external view returns (address) {\\n        return _getVault(_user);\\n    }\\n\\n    function getAllVaults() external view returns (address[] memory) {\\n        return VaultStorage(getVaultStorageAddress()).getAllVaults();\\n    }\\n\\n    function getWithdrawableDeposit(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) public view returns (uint256) {\\n        address vaultAddress = _getVault(_vaultUser);\\n        return IVault(vaultAddress).getWithdrawableDeposit(_sponsor, _reserve);\\n    }\\n\\n    function getGav(address _user) external view returns (uint256) {\\n        return IVault(_getVault(_user)).getGav();\\n    }\\n\\n    /************************************** Private Functions **************************************/\\n\\n    function _getSecurityDeposit(address _user, address _reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        address vaultAddress = _getVault(_user);\\n        uint256 currentSecurityDeposit = IVault(vaultAddress)\\n            .getCurrentSecurityDeposit(_reserve);\\n        return currentSecurityDeposit;\\n    }\\n\\n    function _getVault(address _user) internal view returns (address) {\\n        return VaultStorage(getVaultStorageAddress()).getVaultAddress(_user);\\n    }\\n\\n    function _requireCallerAdmin() internal {\\n        IACLManager aclManager = IACLManager(\\n            addressResolver.getAddress('aclManager')\\n        );\\n        require(aclManager.isVaultManager(messageSender), 'Not vault admin');\\n    }\\n\\n    function _emit(\\n        address _sponsor,\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount,\\n        bytes32 _topic\\n    ) internal {\\n        proxy._emit(\\n            abi.encode(_vaultUser, _reserve, _amount),\\n            2,\\n            _topic,\\n            bytes32(abi.encodePacked(_sponsor)),\\n            0,\\n            0\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4af8c8e97945034544671aef0415622547008af593176a87e1b707fd89022a8f\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/proxy/Proxy.sol';\\nimport '../../interfaces/IVaultManager.sol';\\nimport '../../interfaces/IVaultManagerProxy.sol';\\n\\ncontract VaultManagerProxy is Proxy, IVaultManagerProxy {\\n    /************************** Immutable static call for target contract **************************/\\n\\n    function getVaultConfig(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.VaultConfig memory)\\n    {\\n        return IVaultManager(address(target)).getVaultConfig(_reserve);\\n    }\\n\\n    function getCreditLimit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return IVaultManager(address(target)).getCreditLimit(_user, _reserve);\\n    }\\n\\n    function getAvailableCredit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultManager(address(target)).getAvailableCredit(_user, _reserve);\\n    }\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultManager(address(target)).getSecurityDeposit(_user, _reserve);\\n    }\\n\\n    function getWithdrawableDeposit(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256) {\\n        return\\n            IVaultManager(address(target)).getWithdrawableDeposit(\\n                _vaultUser,\\n                _reserve,\\n                _sponsor\\n            );\\n    }\\n\\n    function getVault(address _user) external view returns (address) {\\n        return IVaultManager(address(target)).getVault(_user);\\n    }\\n\\n    function getAllVaults() external view returns (address[] memory) {\\n        return IVaultManager(address(target)).getAllVaults();\\n    }\\n\\n    function getGav(address _user) external view returns (uint256) {\\n        return IVaultManager(address(target)).getGav(_user);\\n    }\\n}\\n\",\"keccak256\":\"0x915a2e22ed48c824418528df0d163a7c3662553d9c9eee77113526068960f1ab\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/state/State.sol';\\nimport '../../libraries/types/DataTypes.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n// central storage for all vaults\\ncontract VaultStorage is State {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n\\n    address[] public allVaults;\\n    // player address => vault address\\n    mapping(address => address) public getVault;\\n\\n    mapping(address => DataTypes.VaultConfig) public vaultConfig;\\n\\n    constructor(address _vaultManager) State(_vaultManager) {}\\n\\n    function pushNewVault(address _player, address vault)\\n        external\\n        onlyAssociatedContract\\n        returns (uint256)\\n    {\\n        allVaults.push(vault);\\n        require(getVault[_player] == address(0), 'vault exists');\\n        getVault[_player] = vault;\\n        return allVaults.length;\\n    }\\n\\n    function setMarginSecurityDeposit(address _reserve, uint256 _amount)\\n        external\\n        onlyAssociatedContract\\n    {\\n        vaultConfig[_reserve].maxSecurityDeposit = _amount;\\n    }\\n\\n    function setMinSecurityDeposit(address _reserve, uint256 _amount)\\n        external\\n        onlyAssociatedContract\\n    {\\n        vaultConfig[_reserve].minSecurityDeposit = _amount;\\n    }\\n\\n    function setSecurityDepositRequirement(\\n        address _reserve,\\n        uint256 _requirement\\n    ) external onlyAssociatedContract {\\n        vaultConfig[_reserve].securityDepositRequirement = _requirement;\\n    }\\n\\n    /**\\n     * @dev Get Vault address for a specific user\\n     * @param _user the address of the player\\n     **/\\n    function getVaultAddress(address _user) external view returns (address) {\\n        return getVault[_user];\\n    }\\n\\n    /**\\n     * @dev Get all credit account addresses\\n     **/\\n    function getAllVaults() external view returns (address[] memory) {\\n        return allVaults;\\n    }\\n\\n    function getVaultConfig(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.VaultConfig memory)\\n    {\\n        return vaultConfig[_reserve];\\n    }\\n}\\n\",\"keccak256\":\"0xd86672816e5ae04063c0a62e2205086d93e036cd9274d5ac155fe65b7d13c7ec\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IACLManager {\\n    function grantLiquidityManager(address _admin) external;\\n\\n    function isLiquidityManager(address _admin) external view returns (bool);\\n\\n    function grantVaultManager(address _admin) external;\\n\\n    function isVaultManager(address _admin) external view returns (bool);\\n\\n    function grantPoolManager(address _admin) external;\\n\\n    function grantLoanManager(address _admin) external;\\n\\n    function isLoanManager(address _admin) external view returns (bool);\\n\\n    function isProtocolManager(address _admin) external view returns (bool);\\n\\n    function grantLiquidityManagerContract(address _admin) external;\\n\\n    function isLiquidityManagerContract(address _admin)\\n        external\\n        view\\n        returns (bool);\\n\\n    function grantLoanManagerContract(address _admin) external;\\n\\n    function isLoanManagerContract(address _admin) external view returns (bool);\\n\\n    function grantVaultManagerContract(address _admin) external;\\n\\n    function isVaultManagerContract(address _admin)\\n        external\\n        view\\n        returns (bool);\\n\\n    function grantVaultConfigurator(address _amin) external;\\n\\n    function isVaultConfigurator(address _admin) external view returns (bool);\\n\\n    function grantVoyagerContract(address _admin) external;\\n\\n    function isVoyagerContract(address _admin) external view returns (bool);\\n\\n    function grantOracleManager(address _admin) external;\\n\\n    function isOracleManager(address _admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x090955749b2269dd012fe139c3b5fb738c40ef4faeef29fea91eb66314c62bd8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function importAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external;\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address);\\n\\n    function getVoyage() external view returns (address);\\n\\n    function getLiquidityManagerProxy() external view returns (address);\\n\\n    function getLiquidityManagerStorage() external view returns (address);\\n\\n    function getLoanManagerProxy() external view returns (address);\\n\\n    function getLoanManager() external view returns (address);\\n\\n    function getVaultManagerProxy() external view returns (address);\\n\\n    function getVaultManager() external view returns (address);\\n\\n    function getExtCallProxy() external view returns (address);\\n\\n    function getAclManager() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function getVaultStorage() external view returns (address);\\n\\n    function getJuniorDepositToken() external view returns (address);\\n\\n    function getSeniorDepositToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xabaf3bd5e82031922cd12308d27fc166f39294fe8e6f7d99310482b72d238a14\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IHealthStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IHealthStrategy {\\n    function getPremiumFactor() external view returns (uint256);\\n\\n    function getLoanTenure() external view returns (uint256);\\n\\n    function getWeightedLTV() external view returns (uint256);\\n\\n    function getWeightedRepaymentRatio() external view returns (uint256);\\n\\n    function calculateHealthRisk(DataTypes.HealthRiskParameter memory)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xb5846e09c5c14a9365b2c5994acbc2d41459600e68b603d8cd12d5f6e1a5d8b7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/logic/ReserveLogic.sol';\\n\\ninterface ILiquidityManager {\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256);\\n\\n    function deposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function withdraw(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address payable _user\\n    ) external;\\n\\n    function withdrawAbleAmount(\\n        address _reserve,\\n        address _user,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256);\\n\\n    function balance(\\n        address _reserve,\\n        address _user,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256);\\n\\n    function utilizationRate(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1439a39839a1943baaddfc29783961eb8316326cfc74469045aa6b8872550458\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquidityManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/logic/ReserveLogic.sol';\\n\\ninterface ILiquidityManagerProxy {\\n    function getLiquidityRate(address _reserve, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getReserveData(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function getLiquidityAndDebt(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.DepositAndDebt memory);\\n\\n    function getFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        );\\n\\n    function getConfiguration(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256);\\n\\n    function withdrawAbleAmount(\\n        address _reserve,\\n        address _user,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256);\\n\\n    function balance(\\n        address _reserve,\\n        address _user,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256);\\n\\n    function utilizationRate(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x97f61a08a40eb34b0f097fe6fd5762079b3d9a179fece284ecfed4c792ee76a9\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface ILoanManager {\\n    function getVaultDebt(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getDrawDownList(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getDrawDownDetail(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDownId\\n    ) external view returns (DataTypes.DebtDetail memory);\\n}\\n\",\"keccak256\":\"0x9214b4a59afe18931024bf25d5e913e43c5f2af9e3336e7271b5e20b8b4a3cd1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILoanManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface ILoanManagerProxy {\\n    function getVaultDebt(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getDrawDownList(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getDrawDownDetail(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDownId\\n    ) external view returns (DataTypes.DebtDetail memory);\\n}\\n\",\"keccak256\":\"0xbd9e495c8f0189090f35ab26654b0f8c2a00f4986e02fc3ea36c22762804470c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILoanStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface ILoanStrategy {\\n    function getTerm() external view returns (uint256);\\n\\n    function getEpoch() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd01cc4078b1c729f2d09edcb3b408c43acda8c9fff75fef32b969f7fefb21ffe\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IMessageBus {\\n    function getAddressResolverAddress() external view returns (address);\\n\\n    function getVault(address _user) external view returns (address);\\n\\n    function getReserveData(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x77f0a31135831639edbe4c148a90ba03dc5fdacba6b19d57af2033433530a202\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n@title IReserveInterestRateStrategyInterface interface\\n@notice Interface for the calculation of the interest rates.\\n*/\\n\\ninterface IReserveInterestRateStrategy {\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address liquidityEscrow,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xdef4da289a16168b03272c81a29078c7dc7b5df89b415d927471575277b1781b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserveManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/logic/ReserveLogic.sol';\\n\\ninterface IReserveManager {\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress,\\n        address _loanStrategyAddress,\\n        uint256 _optimalIncomeRatio\\n    ) external;\\n\\n    function activeReserve(address _asset) external;\\n\\n    function getReserveData(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function getReserveList() external view returns (address[] memory);\\n\\n    function getConfiguration(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    function getFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        );\\n\\n    function getLiquidityRate(address _reserve, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x95f7340cdf8b147f57717d8db5f89dc5b54dc3e1c3559b1e766262cba96c8228\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVToken {\\n    function mint(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external returns (bool);\\n\\n    function burn(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external;\\n\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n\\n    function transferUnderlyingTo(address _target, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x55267283dce2062ce5f98eb02bb65c9cbecbaa02badab1e5691ad7968ac86586\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../component/vault/SecurityDepositEscrow.sol';\\n\\ninterface IVault {\\n    function initialize(\\n        address _voyager,\\n        SecurityDepositEscrow _securityDepositEscrow\\n    ) external;\\n\\n    function depositMargin(\\n        address _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function redeemMargin(\\n        address payable _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function slash(\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function initStakingContract(address _reserve) external;\\n\\n    function getSecurityDepositTokenAddress() external view returns (address);\\n\\n    function initSecurityDepositToken(address _reserve) external;\\n\\n    function underlyingBalance(address _sponsor, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getGav() external view returns (uint256);\\n\\n    function getCurrentSecurityDeposit(address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableDeposit(address _sponsor, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x7c5be2f571c157959b1577299db8b47706124f825036db8edd6586b5e1c5c40c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IVaultFactory {\\n    function createVault(bytes32 _salt) external returns (address);\\n}\\n\",\"keccak256\":\"0xcb900bf7e72d660f7aa1f1300fdd2dd0836a01566cd2b5ac887350b09418bc87\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IVaultManager {\\n    function getVaultConfig(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.VaultConfig memory);\\n\\n    function getCreditLimit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableDeposit(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256);\\n\\n    function createVault(\\n        address _user,\\n        address _reserve,\\n        bytes32 _vault\\n    ) external returns (address);\\n\\n    function initVault(address _vault, address _reserve) external;\\n\\n    function getVault(address _user) external view returns (address);\\n\\n    function getAllVaults() external view returns (address[] memory);\\n\\n    function getGav(address _user) external view returns (uint256);\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAvailableCredit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setSecurityDepositRequirement(\\n        address _reserve,\\n        uint256 _requirement\\n    ) external;\\n\\n    function setMarginSecurityDeposit(address _reserve, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xceeaef8c7d47823869e3ff35769c85ac400e011dae099fcf711a39e5fc706f29\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IVaultManagerProxy {\\n    function getVaultConfig(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.VaultConfig memory);\\n\\n    function getCreditLimit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAvailableCredit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableDeposit(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256);\\n\\n    function getVault(address _user) external view returns (address);\\n\\n    function getAllVaults() external view returns (address[] memory);\\n\\n    function getGav(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x76939a639994bc5c5be2257878e54dec979224b19ef456d2a28ee72af65927ad\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVoyagerComponent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../component/Voyager.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport '../component/shared/storage/LiquidityManagerStorage.sol';\\nimport '../libraries/types/DataTypes.sol';\\n\\nabstract contract IVoyagerComponent {\\n    Voyager public voyager;\\n\\n    modifier requireNotPaused() {\\n        _whenNotPaused();\\n        _;\\n    }\\n\\n    function liquidityManagerStorageAddress() internal view returns (address) {\\n        return\\n            AddressResolver(voyager.getAddressResolverAddress())\\n                .getLiquidityManagerStorage();\\n    }\\n\\n    function _whenNotPaused() internal view {\\n        require(!paused(), Errors.LP_IS_PAUSED);\\n    }\\n\\n    function paused() internal view returns (bool) {\\n        address storageAddress = liquidityManagerStorageAddress();\\n        return LiquidityManagerStorage(storageAddress).paused();\\n    }\\n\\n    function getDepositAndDebt(address _reserve)\\n        public\\n        view\\n        returns (DataTypes.DepositAndDebt memory)\\n    {\\n        address storageAddress = liquidityManagerStorageAddress();\\n        return\\n            LiquidityManagerStorage(storageAddress).getDepositAndDebt(_reserve);\\n    }\\n}\\n\",\"keccak256\":\"0x5cef6eacffaa539d436fc2e47047bc77063a4f336089ba646c5d9585361e941c\",\"license\":\"GPL-3.0\"},\"contracts/libraries/EthAddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary EthAddressLib {\\n    /**\\n     * @dev returns the address used within the protocol to identify ETH\\n     * @return the address assigned to ETH\\n     */\\n    function ethAddress() internal pure returns (address) {\\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    }\\n}\\n\",\"keccak256\":\"0xd804184a4493b89dbe84b06927f119535944d46889c5ffcd5d8ca6f4172a541f\",\"license\":\"GPL-3.0\"},\"contracts/libraries/acl/ExtCallACL.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../proxy/Proxyable.sol';\\nimport './IExtCallACL.sol';\\nimport '../../component/Voyager.sol';\\n\\ncontract ExtCallACL is Proxyable, IExtCallACL {\\n    mapping(address => bool) public whitelistedAddress;\\n    mapping(bytes32 => bool) public whitelistedFunctions;\\n\\n    constructor(address payable _proxy, address _voyage)\\n        public\\n        Proxyable(_proxy)\\n    {\\n        voyager = Voyager(_voyage);\\n    }\\n\\n    function whitelistAddress(address[] calldata _address) external onlyProxy {\\n        uint256 arrayLength = _address.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            whitelistedAddress[_address[i]] = true;\\n        }\\n    }\\n\\n    function blockAddress(address[] calldata _address) external onlyProxy {\\n        uint256 arrayLength = _address.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            delete whitelistedAddress[_address[i]];\\n        }\\n    }\\n\\n    function isWhitelistedAddress(address _address)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return whitelistedAddress[_address];\\n    }\\n\\n    function whitelistFunction(bytes32[] calldata _func) external onlyProxy {\\n        uint256 arrayLength = _func.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            whitelistedFunctions[_func[i]] = true;\\n        }\\n    }\\n\\n    function blockFunction(bytes32[] calldata _func) external onlyProxy {\\n        uint256 arrayLength = _func.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            delete whitelistedFunctions[_func[i]];\\n        }\\n    }\\n\\n    function isWhitelistedFunction(bytes32 _func) external view returns (bool) {\\n        return whitelistedFunctions[_func];\\n    }\\n}\\n\",\"keccak256\":\"0x0c2ee374263eba6235da2dda988ebf85cbc83450e7a4330deb191e7e5211ad8d\",\"license\":\"GPL-3.0\"},\"contracts/libraries/acl/ExtCallACLProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../proxy/Proxy.sol';\\nimport './IExtCallACL.sol';\\n\\ncontract ExtCallACLProxy is Proxy {\\n    function isWhitelistedAddress(address _address) public view returns (bool) {\\n        return IExtCallACL(address(target)).isWhitelistedAddress(_address);\\n    }\\n\\n    function isWhitelistedFunction(bytes32 _func) public view returns (bool) {\\n        return IExtCallACL(address(target)).isWhitelistedFunction(_func);\\n    }\\n}\\n\",\"keccak256\":\"0x3ec9525d0851c9ac3b990c8d2a0fb8c8a4de54d653acdee841a916145fa12dea\",\"license\":\"GPL-3.0\"},\"contracts/libraries/acl/IExtCallACL.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IExtCallACL {\\n    function whitelistAddress(address[] calldata _address) external;\\n\\n    function blockAddress(address[] calldata _address) external;\\n\\n    function isWhitelistedAddress(address _address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function whitelistFunction(bytes32[] calldata _func) external;\\n\\n    function blockFunction(bytes32[] calldata _func) external;\\n\\n    function isWhitelistedFunction(bytes32 _func) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8243da9760ba180c6c523f75b57ae2a819667a8aeed8bdd4068a36c585413e81\",\"license\":\"GPL-3.0\"},\"contracts/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Voyage\\n * @notice Implements the bitmap logic to handle the reserve configuration, inspired by Aave\\n **/\\nlibrary ReserveConfiguration {\\n    uint256 constant LIQUIDATE_BONUS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 constant DECIMAL_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80FFFF; // prettier-ignore\\n    uint256 constant ACTIVE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFF; // prettier-ignore\\n    uint256 constant FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFF; // prettier-ignore\\n    uint256 constant BORROWING_ENABLE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFF; // prettier-ignore\\n    uint256 constant RESERVED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF87FFFFFF; // prettier-ignore\\n    uint256 constant RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0007FFFFFFF; // prettier-ignore\\n    uint256 constant LOCKUP_PERIOD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80007FFFFFFFFFFF; // prettier-ignore\\n\\n    uint256 constant DECIMAL_MASK_BIT_POSITION = 16;\\n    uint256 constant ACTIVE_MASK_BIT_POSITION = 24;\\n    uint256 constant FROZEN_MASK_BIT_POSITION = 25;\\n    uint256 constant BORROWING_ENABLE_MASK_POSITION = 26;\\n    uint256 constant RESERVED_MASK_BIT_POSITION = 27;\\n    uint256 constant RESERVE_FACTOR_MASK_BIT_POSITION = 31;\\n    uint256 constant LOCKUP_PERIOD_MASK_BIT_POSITION = 47;\\n\\n    /**\\n     * Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flags representing active, frozen, borrowing enabled\\n     **/\\n    function getFlags(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_ENABLE_MASK) != 0\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     **/\\n    function setActive(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool active\\n    ) internal pure {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << ACTIVE_MASK_BIT_POSITION);\\n    }\\n\\n    function getActive(DataTypes.ReserveConfigurationMap storage self)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x23a62f92e3d54e0ea396ca9f3bdce06e7c38ef191b2c27ff582140207e5a28c2\",\"license\":\"GPL-3.0\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors library\\n * @author Voyager\\n * @notice Defines the error messages emitted by the different contracts of the Voyager protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - LM = LiquidityManager\\n *  - LOM = LoanManager\\n *  - CT = Common errors between tokens\\n *  - RL = ReserveLogic\\n */\\nlibrary Errors {\\n    string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n    string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n    string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL = '20';\\n    string public constant CT_CALLER_MUST_BE_LOAN_MANAGER = '21';\\n    string public constant CT_INVALID_MINT_AMOUNT = '21';\\n    string public constant CT_INVALID_BURN_AMOUNT = '22';\\n    string public constant LM_NOT_CONTRACT = '60';\\n    string public constant LP_IS_PAUSED = '61'; // 'Pool is paused'\\n    string public constant LOM_RESERVE_NOT_SUFFICIENT = '70';\\n    string public constant LOM_CREDIT_NOT_SUFFICIENT = '71';\\n    string public constant LOM_HEALTH_RISK_BELOW_ONE = '72';\\n    string public constant LOM_NOT_VAULT_OWNER = '73';\\n    string public constant LOM_INVALID_AMOUNT = '74';\\n    string public constant LOM_INVALID_DEBT = '75';\\n    string public constant RL_LIQUIDITY_RATE_OVERFLOW = '80'; //  Liquidity rate overflows uint128\\n    string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '81'; //  Stable borrow rate overflows uint128\\n}\\n\",\"keccak256\":\"0xda68b3e3013b3a2d2fc63ba81392793ab49a6c57e29d59d7f66a385978ddb6fe\",\"license\":\"agpl-3.0\"},\"contracts/libraries/helpers/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../ownership/Ownable.sol';\\n\\nabstract contract Pausable is Ownable {\\n    uint256 public lastPauseTime;\\n    bool public paused;\\n\\n    constructor() {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner != address(0), 'Owner must be set');\\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\\n    }\\n\\n    /**\\n     * @notice Change the paused state of the contract\\n     * @dev Only the contract owner may call this.\\n     */\\n    function setPaused(bool _paused) external onlyOwner {\\n        // Ensure we're actually changing the state before we do anything\\n        if (_paused == paused) {\\n            return;\\n        }\\n\\n        // Set our paused state.\\n        paused = _paused;\\n\\n        // If applicable, set the last pause time.\\n        if (paused) {\\n            lastPauseTime = block.timestamp;\\n        }\\n\\n        // Let everyone know that our pause state has changed.\\n        emit PauseChanged(paused);\\n    }\\n\\n    event PauseChanged(bool isPaused);\\n\\n    modifier notPaused() {\\n        require(\\n            !paused,\\n            'This action cannot be performed while the contract is paused'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xeb00aba958ad4f51f456bca0b5feba360518817b6f62b894fa16a923f425454a\",\"license\":\"agpl-3.0\"},\"contracts/libraries/logic/DebtLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport '../math/WadRayMath.sol';\\nimport '../math/MathUtils.sol';\\nimport '../types/DataTypes.sol';\\nimport '../helpers/Errors.sol';\\nimport '../../component/liquidity/DefaultReserveInterestRateStrategy.sol';\\nimport 'hardhat/console.sol';\\n\\n/**\\n * @title DebtLogic library\\n * @author Voyage\\n * @notice Implements the logic to update the debt state\\n **/\\nlibrary DebtLogic {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant SECOND_PER_MONTH = 30 days;\\n\\n    using DebtLogic for DataTypes.BorrowData;\\n    using DebtLogic for DataTypes.BorrowStat;\\n\\n    function insertDrawDown(\\n        DataTypes.BorrowData storage debtData,\\n        DataTypes.BorrowStat storage borrowStat,\\n        uint256 principal,\\n        uint256 term,\\n        uint256 epoch,\\n        uint256 apr\\n    ) public {\\n        uint256 currentDrawDownNumber = debtData.nextDrawDownNumber;\\n        DataTypes.DrawDown storage dd = debtData.drawDowns[\\n            currentDrawDownNumber\\n        ];\\n        dd.principal = principal;\\n        dd.term = term;\\n        dd.epoch = epoch;\\n        dd.apr = apr;\\n        dd.nper = term.div(epoch);\\n        dd.borrowAt = block.timestamp;\\n\\n        uint256 principalRay = principal.wadToRay();\\n        uint256 interestRay = principalRay.rayMul(apr);\\n\\n        DataTypes.PMT memory pmt;\\n        pmt.principal = principal.div(dd.nper);\\n        pmt.interest = interestRay.rayToWad().div(dd.nper);\\n        pmt.pmt = pmt.principal.add(pmt.interest);\\n        dd.pmt = pmt;\\n\\n        dd.nextPaymentDue = dd.borrowAt.add(\\n            dd.nper.sub(dd.paidTimes).mul(dd.epoch.mul(SECOND_PER_MONTH))\\n        );\\n        debtData.nextDrawDownNumber++;\\n        debtData.mapSize++;\\n        debtData.totalPrincipal = debtData.totalPrincipal.add(principal);\\n        debtData.totalInterest = debtData.totalInterest.add(\\n            interestRay.rayToWad()\\n        );\\n        borrowStat.increase(principalRay, interestRay, apr);\\n    }\\n\\n    function getDrawDownPeriod(DataTypes.BorrowData storage debtData)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (debtData.paidDrawDownNumber, debtData.nextDrawDownNumber);\\n    }\\n\\n    function getDrawDownDetail(\\n        DataTypes.BorrowData storage debtData,\\n        uint256 _drawDownId\\n    ) public view returns (DataTypes.DebtDetail memory) {\\n        DataTypes.DrawDown storage dd = debtData.drawDowns[_drawDownId];\\n        DataTypes.DebtDetail memory debtDetail;\\n        debtDetail.principal = dd.principal;\\n        debtDetail.term = dd.term;\\n        debtDetail.epoch = dd.epoch;\\n        debtDetail.nper = dd.nper;\\n        debtDetail.pmt = dd.pmt;\\n        debtDetail.apr = dd.apr;\\n        debtDetail.borrowAt = dd.borrowAt;\\n        debtDetail.nextPaymentDue = dd.nextPaymentDue;\\n        debtDetail.totalInterestPaid = dd.totalInterestPaid;\\n        debtDetail.totalPrincipalPaid = dd.totalPrincipalPaid;\\n        debtDetail.paidTimes = dd.paidTimes;\\n        return debtDetail;\\n    }\\n\\n    function repay(\\n        DataTypes.BorrowData storage debtData,\\n        DataTypes.BorrowStat storage borrowStat,\\n        uint256 drawDownNumber,\\n        uint256 principal,\\n        uint256 interest\\n    ) public {\\n        DataTypes.DrawDown storage dd = debtData.drawDowns[drawDownNumber];\\n        dd.paidTimes += 1;\\n        if (dd.paidTimes == dd.nper) {\\n            delete debtData.drawDowns[drawDownNumber];\\n        } else {\\n            dd.totalPrincipalPaid = dd.totalPrincipalPaid.add(principal);\\n            dd.totalInterestPaid = dd.totalInterestPaid.add(interest);\\n            DataTypes.RepaymentData memory repayment;\\n            repayment.interest = interest;\\n            repayment.principal = principal;\\n            repayment.total = principal.add(interest);\\n            repayment.paidAt = uint40(block.timestamp);\\n            dd.repayments.push(repayment);\\n            dd.nextPaymentDue = dd.borrowAt.add(\\n                dd.nper.sub(dd.paidTimes).mul(dd.epoch.mul(SECOND_PER_MONTH))\\n            );\\n        }\\n\\n        debtData.totalPrincipal.sub(principal);\\n        debtData.totalInterest.sub(interest);\\n        uint256 interestRay = interest.wadToRay();\\n        borrowStat.decrease(principal.wadToRay(), interestRay, dd.apr);\\n    }\\n\\n    function increase(\\n        DataTypes.BorrowStat storage borrowStat,\\n        uint256 principalPay,\\n        uint256 interestRay,\\n        uint256 rate\\n    ) internal {\\n        uint256 totalDebtRay = borrowStat.totalDebt.wadToRay();\\n        borrowStat.avgBorrowRate = totalDebtRay\\n            .rayMul(borrowStat.avgBorrowRate)\\n            .add(principalPay.rayMul(rate))\\n            .rayDiv(totalDebtRay.add(principalPay));\\n        borrowStat.totalDebt = borrowStat.totalDebt.add(\\n            principalPay.rayToWad()\\n        );\\n        borrowStat.totalInterest = borrowStat.totalInterest.add(\\n            interestRay.rayToWad()\\n        );\\n    }\\n\\n    function decrease(\\n        DataTypes.BorrowStat storage borrowStat,\\n        uint256 principalPay,\\n        uint256 interestRay,\\n        uint256 rate\\n    ) internal {\\n        uint256 totalDebtRay = borrowStat.totalDebt.wadToRay();\\n        borrowStat.avgBorrowRate = totalDebtRay\\n            .rayMul(borrowStat.avgBorrowRate)\\n            .sub(principalPay.rayMul(rate))\\n            .rayDiv(totalDebtRay.sub(principalPay));\\n        borrowStat.totalDebt = borrowStat.totalDebt.sub(\\n            principalPay.rayToWad()\\n        );\\n        borrowStat.totalInterest = borrowStat.totalInterest.sub(\\n            interestRay.rayToWad()\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcdc441b680aec348816196c3892020ca9681e31283079e4cb2463af6e02576a6\",\"license\":\"GPL-3.0\"},\"contracts/libraries/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport '../math/WadRayMath.sol';\\nimport '../math/MathUtils.sol';\\nimport '../types/DataTypes.sol';\\nimport '../helpers/Errors.sol';\\nimport '../../component/liquidity/DefaultReserveInterestRateStrategy.sol';\\nimport 'hardhat/console.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author Voyage\\n * @notice Implements the logic to update the reserves state\\n **/\\nlibrary ReserveLogic {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    uint256 internal constant RAY = 1e27;\\n\\n    using ReserveLogic for DataTypes.ReserveData;\\n\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed asset,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 liquidityIndex\\n    );\\n\\n    function init(\\n        DataTypes.ReserveData storage reserve,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress,\\n        address _loanStrategyAddress,\\n        uint256 _optimalIncomeRatio\\n    ) external {\\n        reserve.juniorLiquidityIndex = WadRayMath.ray();\\n        reserve.seniorLiquidityIndex = WadRayMath.ray();\\n        reserve.juniorDepositTokenAddress = _juniorDepositTokenAddress;\\n        reserve.seniorDepositTokenAddress = _seniorDepositTokenAddress;\\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\\n        reserve.healthStrategyAddress = _healthStrategyAddress;\\n        reserve.optimalIncomeRatio = _optimalIncomeRatio;\\n        reserve.loanStrategyAddress = _loanStrategyAddress;\\n    }\\n\\n    function updateState(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public {\\n        _updateIndexes(reserve, _tranche);\\n    }\\n\\n    function getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public view returns (uint256) {\\n        return reserve._getLiquidityRate(_tranche);\\n    }\\n\\n    struct UpdateInterestRatesLocalVars {\\n        uint256 availableLiquidity;\\n        uint256 juniorLiquidity;\\n        uint256 seniorLiquidity;\\n        uint256 liquidityRatio;\\n        uint256 totalDebt;\\n        // total liquidity rate\\n        uint256 newLiquidityRate;\\n        uint256 effectiveJuniorLiquidityRate;\\n        uint256 effectSeniorLiquidityRate;\\n        uint256 newBorrowRate;\\n        uint256 avgBorrowRate;\\n    }\\n\\n    // for the purposes of updating interest rates, we only care about senior tranche liquidity.\\n    function updateInterestRates(\\n        DataTypes.ReserveData storage _reserve,\\n        address _reserveAddress,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorLiquidityAdded,\\n        uint256 _juniorLiquidityTaken,\\n        uint256 _seniorLiquidityAdded,\\n        uint256 _seniorLiquidityTaken,\\n        uint256 _totalDebt,\\n        uint256 _avgBorrowRate\\n    ) public {\\n        UpdateInterestRatesLocalVars memory vars;\\n\\n        (vars.totalDebt, vars.avgBorrowRate) = (_totalDebt, _avgBorrowRate);\\n\\n        (\\n            vars.newLiquidityRate,\\n            vars.newBorrowRate\\n        ) = IReserveInterestRateStrategy(_reserve.interestRateStrategyAddress)\\n            .calculateInterestRates(\\n                _reserveAddress,\\n                _seniorDepositTokenAddress,\\n                _seniorLiquidityAdded,\\n                _seniorLiquidityTaken,\\n                vars.totalDebt,\\n                vars.avgBorrowRate\\n            );\\n        require(\\n            vars.newLiquidityRate <= type(uint128).max,\\n            Errors.RL_LIQUIDITY_RATE_OVERFLOW\\n        );\\n\\n        vars.seniorLiquidity = IERC20(_seniorDepositTokenAddress).totalSupply();\\n        vars.juniorLiquidity =\\n            IERC20(_juniorDepositTokenAddress).totalSupply() +\\n            _juniorLiquidityAdded -\\n            _juniorLiquidityTaken;\\n\\n        if (vars.juniorLiquidity == 0) {\\n            vars.effectiveJuniorLiquidityRate = 0;\\n            vars.effectSeniorLiquidityRate = vars.newLiquidityRate;\\n        } else {\\n            vars.liquidityRatio = vars.seniorLiquidity.rayDiv(\\n                vars.juniorLiquidity\\n            );\\n\\n            vars.effectiveJuniorLiquidityRate = vars\\n                .newLiquidityRate\\n                .rayMul(RAY - _reserve.optimalIncomeRatio)\\n                .rayMul(vars.liquidityRatio);\\n\\n            vars.effectSeniorLiquidityRate = vars.newLiquidityRate.rayMul(\\n                _reserve.optimalIncomeRatio\\n            );\\n        }\\n\\n        _reserve.currentOverallLiquidityRate = vars.newLiquidityRate;\\n        _reserve.currentJuniorLiquidityRate = vars.effectiveJuniorLiquidityRate;\\n        _reserve.currentSeniorLiquidityRate = vars.effectSeniorLiquidityRate;\\n\\n        emit ReserveDataUpdated(\\n            _reserveAddress,\\n            vars.newLiquidityRate,\\n            vars.newBorrowRate,\\n            vars.newLiquidityRate\\n        );\\n    }\\n\\n    function getNormalizedIncome(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        uint40 timestamp;\\n        uint256 liquidityIndex;\\n        if (_tranche == Tranche.JUNIOR) {\\n            timestamp = reserve.juniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.juniorLiquidityIndex;\\n        } else {\\n            timestamp = reserve.seniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.seniorLiquidityIndex;\\n        }\\n\\n        //solium-disable-next-line\\n        if (timestamp == uint40(block.timestamp)) {\\n            return liquidityIndex;\\n        }\\n\\n        uint256 cumulated = MathUtils\\n            .calculateLinearInterest(\\n                reserve._getLiquidityRate(_tranche),\\n                timestamp\\n            )\\n            .rayMul(liquidityIndex);\\n        return cumulated;\\n    }\\n\\n    function _getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        if (_tranche == Tranche.JUNIOR) {\\n            return reserve.currentJuniorLiquidityRate;\\n        } else {\\n            return reserve.currentSeniorLiquidityRate;\\n        }\\n    }\\n\\n    function _updateIndexes(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal {\\n        if (_tranche == Tranche.JUNIOR) {\\n            uint256 previousJuniorLiquidityIndex = reserve.juniorLiquidityIndex;\\n            uint256 lastJuniorUpdatedTimestamp = reserve\\n                .juniorLastUpdateTimestamp;\\n            reserve._updateJuniorLiquidityIndex(\\n                previousJuniorLiquidityIndex,\\n                uint40(lastJuniorUpdatedTimestamp)\\n            );\\n        } else {\\n            uint256 previousSeniorLiquidityIndex = reserve.seniorLiquidityIndex;\\n            uint256 lastSeniorUpdatedTimestamp = reserve\\n                .seniorLastUpdateTimestamp;\\n            reserve._updateSeniorLiquidityIndex(\\n                previousSeniorLiquidityIndex,\\n                uint40(lastSeniorUpdatedTimestamp)\\n            );\\n        }\\n    }\\n\\n    function _updateJuniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 juniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 juniorLiquidityRate = reserve._getLiquidityRate(Tranche.JUNIOR);\\n        uint256 newJuniorLiquidityIndex = juniorLiquidityIndex;\\n\\n        // only cumulating if there is any income being produced\\n        if (juniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(juniorLiquidityRate, timestamp);\\n            newJuniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                juniorLiquidityIndex\\n            );\\n            reserve.juniorLiquidityIndex = newJuniorLiquidityIndex;\\n        }\\n\\n        reserve.juniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newJuniorLiquidityIndex;\\n    }\\n\\n    function _updateSeniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 seniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 seniorLiquidityRate = reserve._getLiquidityRate(Tranche.SENIOR);\\n        uint256 newSeniorLiquidityIndex = seniorLiquidityIndex;\\n\\n        if (seniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(seniorLiquidityRate, timestamp);\\n            newSeniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                seniorLiquidityIndex\\n            );\\n            reserve.seniorLiquidityIndex = newSeniorLiquidityIndex;\\n        }\\n        reserve.seniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newSeniorLiquidityIndex;\\n    }\\n\\n    function trancheToBytes32(Tranche tranche) public view returns (bytes32) {\\n        return bytes32(uint256(tranche));\\n    }\\n}\\n\",\"keccak256\":\"0x922d3e1bdddcfc5e43ff9f24d910cc39aba3f9e5d88724d9d8e2766c035d6400\",\"license\":\"GPL-3.0\"},\"contracts/libraries/logic/ValidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../types/DataTypes.sol';\\nimport '../configuration/ReserveConfiguration.sol';\\nimport '../helpers/Errors.sol';\\n\\nlibrary ValidationLogic {\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    /**\\n     * @dev Validates a deposit token\\n     * @param reserve The reserve object on which the user is depositing\\n     * @param amount The amount to be deposited\\n     **/\\n    function validateDeposit(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amount\\n    ) external view {\\n        (bool isActive, bool isFrozen, ) = reserve.configuration.getFlags();\\n        require(amount != 0, Errors.VL_INVALID_AMOUNT);\\n        require(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n        require(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n    }\\n}\\n\",\"keccak256\":\"0xdd470946bea9515caf3bfdc20ae4e78f2138dc785ae3650a0ac8951dedf3581e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(\\n            uint256(lastUpdateTimestamp)\\n        );\\n\\n        return\\n            (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n     * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        if (exp == 0) {\\n            return WadRayMath.ray();\\n        }\\n\\n        uint256 expMinusOne = exp - 1;\\n\\n        uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n        uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n        uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n        uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n        uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n        uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(\\n            basePowerThree\\n        ) / 6;\\n\\n        return\\n            WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(\\n                thirdTerm\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xeb644d3d04ac6c043657b2b835fbf71d1f2795f1f713b900cc43582158f31eac\",\"license\":\"agpl-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87bc93b45f82b290b2b6a9f00ce09f8c5c2b758931a85b37fb5d117a79031d3f\"},\"contracts/libraries/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(owner, pendingOwner);\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x5dca7c2446290ea3519aa0f9295e1edfbff47a1474edbe126f08dca92843e2c8\"},\"contracts/libraries/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../ownership/Ownable.sol';\\nimport './Proxyable.sol';\\nimport '../../interfaces/IACLManager.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract Proxy is Ownable {\\n    Proxyable public target;\\n\\n    event TargetUpdated(Proxyable newTarget);\\n\\n    modifier onlyTarget() {\\n        require(Proxyable(msg.sender) == target, 'Must be proxy target');\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        _onlyAuthorized();\\n        _;\\n    }\\n\\n    function setTarget(Proxyable _target) external onlyOwner {\\n        target = _target;\\n        emit TargetUpdated(_target);\\n    }\\n\\n    function _emit(\\n        bytes calldata callData,\\n        uint256 numTopics,\\n        bytes32 topic1,\\n        bytes32 topic2,\\n        bytes32 topic3,\\n        bytes32 topic4\\n    ) external onlyTarget {\\n        uint256 size = callData.length;\\n        bytes memory _callData = callData;\\n\\n        assembly {\\n            /* The first 32 bytes of callData contain its length (as specified by the abi).\\n             * Length is assumed to be a uint256 and therefore maximum of 32 bytes\\n             * in length. It is also leftpadded to be a multiple of 32 bytes.\\n             * This means moving call_data across 32 bytes guarantees we correctly access\\n             * the data itself. */\\n            switch numTopics\\n            case 0 {\\n                log0(add(_callData, 32), size)\\n            }\\n            case 1 {\\n                log1(add(_callData, 32), size, topic1)\\n            }\\n            case 2 {\\n                log2(add(_callData, 32), size, topic1, topic2)\\n            }\\n            case 3 {\\n                log3(add(_callData, 32), size, topic1, topic2, topic3)\\n            }\\n            case 4 {\\n                log4(add(_callData, 32), size, topic1, topic2, topic3, topic4)\\n            }\\n        }\\n    }\\n\\n    // solhint-disable no-complex-fallback\\n    fallback() external payable onlyAuthorized {\\n        // Mutable call setting Proxyable.messageSender as this is using call not delegatecall\\n        target.setMessageSender(msg.sender);\\n\\n        assembly {\\n            let free_ptr := mload(0x40)\\n            calldatacopy(free_ptr, 0, calldatasize())\\n\\n            /* We must explicitly forward ether to the underlying contract as well. */\\n            let result := call(\\n                gas(),\\n                sload(target.slot),\\n                callvalue(),\\n                free_ptr,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(free_ptr, 0, returndatasize())\\n\\n            if iszero(result) {\\n                revert(free_ptr, returndatasize())\\n            }\\n            return(free_ptr, returndatasize())\\n        }\\n    }\\n\\n    function _onlyAuthorized() public {\\n        address voyage = address(target.voyager());\\n        IACLManager aclManager = IACLManager(\\n            target.voyager().addressResolver().getAclManager()\\n        );\\n        require(\\n            msg.sender == target.voyager().addressResolver().getVoyage() ||\\n                aclManager.isLiquidityManager(msg.sender) ||\\n                aclManager.isLoanManager(msg.sender),\\n            'Voyager or admin only function'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe4cbbdc5e052b32d9be215dd93bceeccc00db112996d1e7bc09f0f66ba502b0a\",\"license\":\"GPL-3.0\"},\"contracts/libraries/proxy/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './Proxy.sol';\\nimport '../ownership/Ownable.sol';\\nimport 'hardhat/console.sol';\\nimport '../../interfaces/IVoyagerComponent.sol';\\n\\nabstract contract Proxyable is Ownable, IVoyagerComponent {\\n    /* The proxy this contract exists behind. */\\n    Proxy public proxy;\\n\\n    /* The caller of the proxy, passed through to this contract.\\n     * Note that every function using this member must apply the onlyProxy or\\n     * optionalProxy modifiers, otherwise their invocations can use stale values. */\\n    address public messageSender;\\n\\n    modifier onlyProxy() {\\n        _onlyProxy();\\n        _;\\n    }\\n\\n    modifier optionalProxy_onlyOwner() {\\n        _optionalProxy_onlyOwner();\\n        _;\\n    }\\n\\n    event ProxyUpdated(address proxyAddress);\\n\\n    constructor(address payable _proxy) internal {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner != address(0), 'Owner must be set');\\n\\n        proxy = Proxy(_proxy);\\n        emit ProxyUpdated(_proxy);\\n    }\\n\\n    function _onlyProxy() private view {\\n        require(msg.sender == address(proxy), 'Only the proxy can call');\\n    }\\n\\n    function setProxy(address payable _proxy) external onlyOwner {\\n        proxy = Proxy(_proxy);\\n        emit ProxyUpdated(_proxy);\\n    }\\n\\n    function setMessageSender(address sender) external onlyProxy {\\n        messageSender = sender;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _optionalProxy_onlyOwner() private {\\n        if (msg.sender != address(proxy) && messageSender != msg.sender) {\\n            messageSender = msg.sender;\\n        }\\n        require(messageSender == owner, 'Owner only function');\\n    }\\n}\\n\",\"keccak256\":\"0x70c0d2737482fa112f4c9c254ff25a2a751a7a3465908069b9ae05a4adb1ce2a\",\"license\":\"GPL-3.0\"},\"contracts/libraries/state/State.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../ownership/Ownable.sol';\\n\\nabstract contract State is Ownable {\\n    mapping(address => bool) public associatedContracts;\\n\\n    constructor(address _associatedContract) {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner != address(0), 'Owner must be set');\\n\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n\\n    event AssociatedContractUpdated(address associatedContract);\\n\\n    modifier onlyAssociatedContract() {\\n        require(\\n            associatedContracts[msg.sender],\\n            'Only the associated contract can perform this action'\\n        );\\n        _;\\n    }\\n\\n    // Change the associated contract to a new address\\n    function setAssociatedContract(address _associatedContract)\\n        external\\n        onlyOwner\\n    {\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n}\\n\",\"keccak256\":\"0x835e4507f1c45e5cb1ac2ab722b38969af0c5e2bd4e4fb8fc34046d56d555b9f\",\"license\":\"GPL-3.0\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary DataTypes {\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        // for calculating overall interested accumulated\\n        // then split it into two indexs base on two allocations\\n        uint256 currentOverallLiquidityRate;\\n        uint256 currentJuniorLiquidityRate;\\n        uint256 currentSeniorLiquidityRate;\\n        uint256 juniorLiquidityIndex;\\n        uint256 seniorLiquidityIndex;\\n        uint256 currentBorrowRate;\\n        // Expressed in ray\\n        uint256 securityRequirement;\\n        //the decimals of the reserve asset\\n        uint256 decimals;\\n        address interestRateStrategyAddress;\\n        address healthStrategyAddress;\\n        address loanStrategyAddress;\\n        address juniorDepositTokenAddress;\\n        address seniorDepositTokenAddress;\\n        uint40 juniorLastUpdateTimestamp;\\n        uint40 seniorLastUpdateTimestamp;\\n        uint256 optimalTrancheRatio;\\n        uint256 currentIncomeRatio;\\n        uint256 optimalIncomeRatio;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: Liquidate bonus\\n        //bit 16-23: Decimals\\n        //bit 24: Reserve is active\\n        //bit 25: reserve is frozen\\n        //bit 26: borrowing is enabled\\n        //bit 27-30: reserved\\n        //bit 31-46: reserve factor\\n        //bit 47-62: lock up period in seconds\\n        uint256 data;\\n    }\\n\\n    struct VaultConfig {\\n        uint256 minSecurityDeposit;\\n        uint256 maxSecurityDeposit;\\n        uint256 securityDepositRequirement;\\n    }\\n\\n    struct FungibleTokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    struct BorrowData {\\n        uint256 paidDrawDownNumber;\\n        // next draw down number\\n        uint256 nextDrawDownNumber;\\n        uint256 totalPrincipal;\\n        uint256 totalInterest;\\n        uint256 mapSize;\\n        mapping(uint256 => DrawDown) drawDowns;\\n    }\\n\\n    struct BorrowStat {\\n        uint256 totalDebt;\\n        uint256 totalInterest;\\n        uint256 avgBorrowRate;\\n    }\\n\\n    struct PMT {\\n        uint256 principal;\\n        uint256 interest;\\n        uint256 pmt;\\n    }\\n\\n    struct DrawDown {\\n        uint256 principal;\\n        // the total intended length of the loan in seconds - e.g., 90 days\\n        uint256 term;\\n        // the repayment interval - e.g., 30 days\\n        uint256 epoch;\\n        // number of instalments, term / epoch\\n        uint256 nper;\\n        // the amount to be repaid per instalment (principal + interest)\\n        PMT pmt;\\n        // the borrow rate of this loan\\n        uint256 apr;\\n        uint256 borrowAt;\\n        // next due data\\n        uint256 nextPaymentDue;\\n        // principal paid\\n        uint256 totalPrincipalPaid;\\n        // interest paid\\n        uint256 totalInterestPaid;\\n        RepaymentData[] repayments;\\n        // size pf repayments\\n        uint256 paidTimes;\\n    }\\n\\n    struct DebtDetail {\\n        uint256 principal;\\n        uint256 term;\\n        uint256 epoch;\\n        uint256 nper;\\n        PMT pmt;\\n        uint256 apr;\\n        uint256 borrowAt;\\n        uint256 nextPaymentDue;\\n        uint256 totalPrincipalPaid;\\n        uint256 totalInterestPaid;\\n        uint256 paidTimes;\\n    }\\n\\n    struct RepaymentData {\\n        uint256 principal;\\n        uint256 interest;\\n        // principal + interest\\n        uint256 total;\\n        uint40 paidAt;\\n    }\\n\\n    struct Repayment {\\n        uint256 principal;\\n        uint256 interest;\\n        // principal + interest\\n        uint256 total;\\n        uint40 paidAt;\\n        // about to drop\\n        uint256 totalPaid;\\n        uint256 principalPaid;\\n        uint256 interestPaid;\\n        uint256 numPayments;\\n    }\\n\\n    struct RepaymentDetail {\\n        uint256 totalPaid;\\n        uint256 numPayments;\\n    }\\n\\n    // tmp struct to avoid stack too long\\n\\n    struct DepositAndDebt {\\n        uint256 juniorDepositAmount;\\n        uint256 seniorDepositAmount;\\n        uint256 totalDebt;\\n        uint256 totalInterest;\\n        uint256 avgBorrowRate;\\n    }\\n\\n    struct HealthRiskParameter {\\n        uint256 securityDeposit;\\n        uint256 currentBorrowRate;\\n        uint256 compoundedDebt;\\n        uint256 grossAssetValue;\\n    }\\n\\n    struct PoolConfiguration {\\n        uint256 securityRequirement;\\n        uint256 minSecurity;\\n        uint256 maxSecurity;\\n        uint256 loanTenure;\\n        uint256 optimalTrancheRatio;\\n        uint256 optimalIncomeRatio;\\n        bool isActive;\\n    }\\n\\n    struct PoolData {\\n        uint256 totalLiquidity;\\n        uint256 juniorLiquidity;\\n        uint256 seniorLiquidity;\\n        uint256 juniorLiquidityRate;\\n        uint256 seniorLiquidityRate;\\n        uint256 totalDebt;\\n        uint256 utilizationRate;\\n        uint256 trancheRatio;\\n        uint256 decimals;\\n        string symbol;\\n        bool isActive;\\n    }\\n\\n    struct DrawDownList {\\n        uint256 head;\\n        uint256 tail;\\n    }\\n\\n    struct VaultData {\\n        uint256 borrowRate;\\n        uint256 totalDebt;\\n        DrawDownList drawDownList;\\n        uint256 totalSecurityDeposit;\\n        uint256 withdrawableSecurityDeposit;\\n        uint256 creditLimit;\\n        uint256 spendableBalance;\\n        uint256 gav;\\n        uint256 ltv;\\n        uint256 healthFactor;\\n    }\\n\\n    struct UserPoolData {\\n        uint256 juniorTrancheBalance;\\n        uint256 withdrawableJuniorTrancheBalance;\\n        uint256 seniorTrancheBalance;\\n        uint256 withdrawableSeniorTrancheBalance;\\n        uint256 decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xa7341cf5477427544aae096abc6403a22b31887ae387d5b983e40a37e039d46d\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/BaseERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Context.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract BaseERC20 is Context, IERC20, IERC20Metadata {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint256 internal _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 _decimals\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return The balance of the token\\n     **/\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            'ERC20: transfer amount exceeds allowance'\\n        );\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            'ERC20: decreased allowance below zero'\\n        );\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), 'ERC20: transfer from the zero address');\\n        require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            'ERC20: transfer amount exceeds balance'\\n        );\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: mint to the zero address');\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply.add(amount);\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        _balances[account] = oldAccountBalance.add(amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: burn from the zero address');\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply.sub(amount);\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        _balances[account] = oldAccountBalance.sub(\\n            amount,\\n            'ERC20: burn amount exceeds balance'\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), 'ERC20: approve from the zero address');\\n        require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _setName(string memory newName) internal {\\n        _name = newName;\\n    }\\n\\n    function _setSymbol(string memory newSymbol) internal {\\n        _symbol = newSymbol;\\n    }\\n\\n    function _setDecimals(uint8 newDecimals) internal {\\n        _decimals = newDecimals;\\n    }\\n}\\n\",\"keccak256\":\"0x2e6345cb5f601dcd27e5792f9363032f8b789f372edfa3caa4a4fdd83916f960\",\"license\":\"MIT\"},\"contracts/tokenization/InitializableDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './base/InitializableToken.sol';\\n\\n/**\\n * @title IDepositToken\\n * @notice Interface for the initialize function on JuniorDepositToken and SeniorDepositToken\\n **/\\nabstract contract InitializableDepositToken is InitializableToken {\\n    // user address => timestamp => amount\\n    mapping(address => mapping(uint256 => uint256)) private withdrawals;\\n\\n    // user address => timestamp array\\n    mapping(address => uint256[]) private pendingTimestamp;\\n\\n    uint256 private totalPending;\\n\\n    uint256 private lockupTime = 7 days;\\n\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Mint(address indexed from, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Emitted after aTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param value The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Burn(address indexed from, uint256 value, uint256 index);\\n\\n    function pushWithdraw(address _user, uint256 _amount) internal {\\n        require(withdrawals[_user][block.timestamp] == 0, 'invalid withdraw');\\n        withdrawals[_user][block.timestamp] = _amount;\\n        pendingTimestamp[_user].push(block.timestamp);\\n        totalPending += _amount;\\n    }\\n\\n    function popWithdraw(address _user, uint256 _index)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256[] storage times = pendingTimestamp[_user];\\n        require(_index < times.length, 'invalid index');\\n        uint256 ts = times[_index];\\n        require(block.timestamp - ts > lockupTime, 'cool down error');\\n\\n        uint256 last = times[times.length - 1];\\n        times[_index] = last;\\n        times.pop();\\n\\n        uint256 withdrawable = withdrawals[_user][ts];\\n        delete withdrawals[_user][ts];\\n        totalPending -= withdrawable;\\n        return withdrawable;\\n    }\\n\\n    function pendingWithdrawal(address _user)\\n        public\\n        view\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        uint256[] memory times = pendingTimestamp[_user];\\n        uint256[] memory amounts = new uint256[](times.length);\\n\\n        for (uint256 i = 0; i < times.length; i++) {\\n            amounts[i] = withdrawals[_user][times[i]];\\n        }\\n\\n        return (times, amounts);\\n    }\\n\\n    function totalPendingWithdrawal() public view returns (uint256) {\\n        return totalPending;\\n    }\\n\\n    function withdrawalAble(address _user) public view returns (uint256) {\\n        uint256[] storage ts = pendingTimestamp[_user];\\n        uint256 withdrawable = 0;\\n\\n        for (uint256 i = 0; i < ts.length; i++) {\\n            withdrawable += withdrawals[_user][ts[i]];\\n        }\\n        return withdrawable;\\n    }\\n\\n    function lockTime() public view returns (uint256) {\\n        return lockupTime;\\n    }\\n}\\n\",\"keccak256\":\"0xe9fc5493a5833d9ca7820816a037c31bbc2e321815e97e8d68e9f89f91015bfa\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/JuniorDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../contracts/component/liquidity/LiquidityManagerProxy.sol';\\nimport '../libraries/helpers/Errors.sol';\\nimport './InitializableDepositToken.sol';\\nimport '../interfaces/ILiquidityManagerProxy.sol';\\nimport './BaseERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Context.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../libraries/logic/ReserveLogic.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\nimport '../interfaces/IVToken.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract JuniorDepositToken is\\n    Context,\\n    InitializableDepositToken,\\n    BaseERC20('JuniorDepositToken_IMPL', 'JuniorDepositToken_IMPL', 0),\\n    IVToken\\n{\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    AddressResolver internal addressResolver;\\n    address internal underlyingAsset;\\n\\n    uint256 public constant JUNIOR_DEPOSIT_TOKEN_REVISION = 0x1;\\n\\n    modifier onlyLiquidityManagerProxy() {\\n        require(\\n            _msgSender() == addressResolver.getAddress('liquidityManager'),\\n            Errors.CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the JuniorDepositToken\\n     * @param _addressResolver The address of the AddressResolver\\n     * @param _underlyingAsset The address of the underlying asset of this JuniorDepositToken\\n     * @param _juniorDepositTokenDecimals The decimals of the JuniorDepositToken, same as the underlying asset's\\n     * @param _juniorDepositTokenName The name of the JuniorDepositToken\\n     * @param _juniorDepositTokenSymbol The symbol of the JuniorDepositToken\\n     **/\\n    function initialize(\\n        AddressResolver _addressResolver,\\n        address _underlyingAsset,\\n        uint8 _juniorDepositTokenDecimals,\\n        string calldata _juniorDepositTokenName,\\n        string calldata _juniorDepositTokenSymbol,\\n        bytes calldata _params\\n    ) external initializer {\\n        _setName(_juniorDepositTokenName);\\n        _setSymbol(_juniorDepositTokenSymbol);\\n        _setDecimals(_juniorDepositTokenDecimals);\\n\\n        addressResolver = _addressResolver;\\n        underlyingAsset = _underlyingAsset;\\n\\n        emit Initialized(\\n            _underlyingAsset,\\n            _juniorDepositTokenDecimals,\\n            _juniorDepositTokenName,\\n            _juniorDepositTokenSymbol,\\n            _params\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `_amount` junior deposit token to `_user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The new liquidity index of the reserve\\n     * @return `true` if the previous balance of the user was 0\\n     **/\\n    function mint(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external onlyLiquidityManagerProxy returns (bool) {\\n        uint256 previousBalance = super.balanceOf(_user);\\n        uint256 amountScaled = _amount.rayDiv(_index);\\n        require(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\\n        _mint(_user, amountScaled);\\n        emit Transfer(address(0), _user, _amount);\\n        emit Mint(_user, _amount, _index);\\n\\n        return previousBalance == 0;\\n    }\\n\\n    /**\\n     * @dev Burns JuniorDepositToken from `_user` and sends the equivalent amount of underlying to `_receiverOfUnderlying`\\n     * - Only callable by the LiquidityManagerProxy, as extra state updates there need to the managed\\n     * @param _user The owner of the JuniorDepositToken, getting them burned\\n     * @param _amount The amount being burned\\n     * @param _index The new liquidity index of the reserve\\n     **/\\n    function burn(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external onlyLiquidityManagerProxy {\\n        uint256 amountScaled = _amount.rayDiv(_index);\\n        require(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\\n        _burn(_user, amountScaled);\\n\\n        pushWithdraw(_user, _amount);\\n        emit Transfer(_user, address(0), _amount);\\n        emit Burn(_user, _amount, _index);\\n    }\\n\\n    function claim(uint256 _index) external {\\n        uint256 amount = popWithdraw(msg.sender, _index);\\n        require(\\n            IERC20(underlyingAsset).balanceOf(address(this)) >= amount,\\n            'Insufficient liquidity available'\\n        );\\n        IERC20(underlyingAsset).safeTransfer(msg.sender, amount);\\n    }\\n\\n    function transferUnderlyingTo(address _target, uint256 _amount)\\n        external\\n        onlyLiquidityManagerProxy\\n    {\\n        IERC20(underlyingAsset).safeTransfer(_target, _amount);\\n    }\\n\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the updated\\n     * stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param _user The user whose balance is calculated\\n     * @return THe scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address _user) external view returns (uint256) {\\n        return super.balanceOf(_user);\\n    }\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param _user The user whose balance is calculated\\n     * @return The balance of the user\\n     **/\\n    function balanceOf(address _user)\\n        public\\n        view\\n        override(BaseERC20)\\n        returns (uint256)\\n    {\\n        ILiquidityManagerProxy liquidityManagerProxy = getLiquidityManagerProxy();\\n        return\\n            super.balanceOf(_user).rayMul(\\n                liquidityManagerProxy.getReserveNormalizedIncome(\\n                    underlyingAsset,\\n                    ReserveLogic.Tranche.JUNIOR\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev calculates the total supply of the specific junior deposit token\\n     * since the balance of every single user increases over time, the totally supply does that too.\\n     * @return the current total supply\\n     **/\\n    function totalSupply() public view override(BaseERC20) returns (uint256) {\\n        uint256 currentSupplyScaled = super.totalSupply();\\n        if (currentSupplyScaled == 0) {\\n            return 0;\\n        }\\n        ILiquidityManagerProxy liquidityManagerProxy = getLiquidityManagerProxy();\\n\\n        return\\n            currentSupplyScaled.rayMul(\\n                liquidityManagerProxy.getReserveNormalizedIncome(\\n                    underlyingAsset,\\n                    ReserveLogic.Tranche.JUNIOR\\n                )\\n            );\\n    }\\n\\n    function scaledTotalSupply() public view returns (uint256) {\\n        return super.totalSupply();\\n    }\\n\\n    /**\\n     * @dev Return instance of ILiquidityManagerProxy\\n     **/\\n    function getLiquidityManagerProxy()\\n        internal\\n        view\\n        returns (ILiquidityManagerProxy)\\n    {\\n        address liquidityManagerProxyAddress = addressResolver.getAddress(\\n            'liquidityManagerProxy'\\n        );\\n        return ILiquidityManagerProxy(liquidityManagerProxyAddress);\\n    }\\n\\n    function getRevision() internal pure virtual override returns (uint256) {\\n        return JUNIOR_DEPOSIT_TOKEN_REVISION;\\n    }\\n}\\n\",\"keccak256\":\"0x0fddc082e178a1480efa9c373de0a1404cb6c37e5f279d06aca4aff875a22aad\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/SecurityDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/access/AccessControl.sol';\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../component/vault/Vault.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract SecurityDepositToken is ERC20, AccessControl {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant VAULT = keccak256('VAULT');\\n\\n    address public underlyingAsset;\\n    uint8 public underlyingAssetDecimals;\\n    Vault public vault;\\n\\n    event MintOnDeposit(address indexed account, uint256 amount);\\n\\n    event BurnOnRedeem(address indexed account, uint256 amount);\\n\\n    constructor(\\n        address _underlyingAsset,\\n        uint8 _underlyingAssetDecimals,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        _setupRole(VAULT, msg.sender);\\n        vault = Vault(msg.sender);\\n        underlyingAsset = _underlyingAsset;\\n        underlyingAssetDecimals = _underlyingAssetDecimals;\\n    }\\n\\n    function mintOnDeposit(address account, uint256 amount)\\n        external\\n        onlyRole(VAULT)\\n    {\\n        _mint(account, amount);\\n        emit MintOnDeposit(account, amount);\\n    }\\n\\n    function burnOnRedeem(address account, uint256 amount)\\n        external\\n        onlyRole(VAULT)\\n    {\\n        _burn(account, amount);\\n        emit BurnOnRedeem(account, amount);\\n    }\\n\\n    function underlyingBalanceOf(address _sponsor)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return vault.underlyingBalance(_sponsor, underlyingAsset);\\n    }\\n}\\n\",\"keccak256\":\"0x7f19982eaa9ebf8bcaddff25ea2c362a518bef4df45af0aaefc23e6e7aa05376\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/SeniorDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../contracts/component/liquidity/LiquidityManagerProxy.sol';\\nimport '../libraries/helpers/Errors.sol';\\nimport './InitializableDepositToken.sol';\\nimport '../interfaces/ILiquidityManagerProxy.sol';\\nimport './BaseERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Context.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../libraries/logic/ReserveLogic.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\nimport '../interfaces/IVToken.sol';\\n\\ncontract SeniorDepositToken is\\n    Context,\\n    InitializableDepositToken,\\n    BaseERC20('SeniorDepositToken_IMPL', 'SeniorDepositToken_IMPL', 0),\\n    IVToken\\n{\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    AddressResolver internal addressResolver;\\n    address internal underlyingAsset;\\n\\n    uint256 public constant SENIOR_DEPOSIT_TOKEN_REVISION = 0x1;\\n\\n    modifier onlyAdmin() {\\n        require(\\n            _msgSender() == addressResolver.getAddress('liquidityManager') ||\\n                _msgSender() == addressResolver.getAddress('loanManager'),\\n            Errors.CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the JuniorDepositToken\\n     * @param _addressResolver The address of the AddressResolver\\n     * @param _underlyingAsset The address of the underlying asset of this SeniorDepositToken\\n     * @param _seniorDepositTokenDecimals The decimals of the SeniorDepositToken, same as the underlying asset's\\n     * @param _seniorDepositTokenName The name of the SeniorDepositToken\\n     * @param _seniorDepositTokenSymbol The symbol of the SeniorDepositToken\\n     **/\\n    function initialize(\\n        AddressResolver _addressResolver,\\n        address _underlyingAsset,\\n        uint8 _seniorDepositTokenDecimals,\\n        string calldata _seniorDepositTokenName,\\n        string calldata _seniorDepositTokenSymbol,\\n        bytes calldata _params\\n    ) external initializer {\\n        _setName(_seniorDepositTokenName);\\n        _setSymbol(_seniorDepositTokenSymbol);\\n        _setDecimals(_seniorDepositTokenDecimals);\\n\\n        addressResolver = _addressResolver;\\n        underlyingAsset = _underlyingAsset;\\n\\n        emit Initialized(\\n            _underlyingAsset,\\n            _seniorDepositTokenDecimals,\\n            _seniorDepositTokenName,\\n            _seniorDepositTokenSymbol,\\n            _params\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `_amount` junior deposit token to `_user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The new liquidity index of the reserve\\n     * @return `true` if the previous balance of the user was 0\\n     **/\\n    function mint(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external onlyAdmin returns (bool) {\\n        uint256 previousBalance = super.balanceOf(_user);\\n        uint256 amountScaled = _amount.rayDiv(_index);\\n        require(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\\n        _mint(_user, amountScaled);\\n        emit Transfer(address(0), _user, _amount);\\n        emit Mint(_user, _amount, _index);\\n\\n        return previousBalance == 0;\\n    }\\n\\n    /**\\n     * @dev Burns JuniorDepositToken from `_user` and sends the equivalent amount of underlying to `_receiverOfUnderlying`\\n     * - Only callable by the LiquidityManagerProxy, as extra state updates there need to the managed\\n     * @param _user The owner of the JuniorDepositToken, getting them burned\\n     * @param _amount The amount being burned\\n     * @param _index The new liquidity index of the reserve\\n     **/\\n    function burn(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external onlyAdmin {\\n        uint256 amountScaled = _amount.rayDiv(_index);\\n        require(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\\n        _burn(_user, amountScaled);\\n        pushWithdraw(_user, _amount);\\n        emit Transfer(_user, address(0), _amount);\\n        emit Burn(_user, _amount, _index);\\n    }\\n\\n    function claim(uint256 _index) external {\\n        uint256 amount = popWithdraw(msg.sender, _index);\\n        require(\\n            IERC20(underlyingAsset).balanceOf(address(this)) >= amount,\\n            'Insufficient liquidity available'\\n        );\\n        IERC20(underlyingAsset).safeTransfer(msg.sender, amount);\\n    }\\n\\n    function transferUnderlyingTo(address _target, uint256 _amount)\\n        external\\n        onlyAdmin\\n    {\\n        IERC20(underlyingAsset).safeTransfer(_target, _amount);\\n    }\\n\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the updated\\n     * stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param _user The user whose balance is calculated\\n     * @return THe scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address _user) external view returns (uint256) {\\n        return super.balanceOf(_user);\\n    }\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param _user The user whose balance is calculated\\n     * @return The balance of the user\\n     **/\\n    function balanceOf(address _user)\\n        public\\n        view\\n        override(BaseERC20)\\n        returns (uint256)\\n    {\\n        ILiquidityManagerProxy liquidityManagerProxy = getLiquidityManagerProxy();\\n        return\\n            super.balanceOf(_user).rayMul(\\n                liquidityManagerProxy.getReserveNormalizedIncome(\\n                    underlyingAsset,\\n                    ReserveLogic.Tranche.SENIOR\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev calculates the total supply of the specific junior deposit token\\n     * since the balance of every single user increases over time, the totally supply does that too.\\n     * @return the current total supply\\n     **/\\n    function totalSupply() public view override(BaseERC20) returns (uint256) {\\n        uint256 currentSupplyScaled = super.totalSupply();\\n        if (currentSupplyScaled == 0) {\\n            return 0;\\n        }\\n        ILiquidityManagerProxy liquidityManagerProxy = getLiquidityManagerProxy();\\n\\n        return\\n            currentSupplyScaled.rayMul(\\n                liquidityManagerProxy.getReserveNormalizedIncome(\\n                    underlyingAsset,\\n                    ReserveLogic.Tranche.SENIOR\\n                )\\n            );\\n    }\\n\\n    function scaledTotalSupply() public view returns (uint256) {\\n        return super.totalSupply();\\n    }\\n\\n    /**\\n     * @dev Return instance of ILiquidityManagerProxy\\n     **/\\n    function getLiquidityManagerProxy()\\n        internal\\n        view\\n        returns (ILiquidityManagerProxy)\\n    {\\n        address liquidityManagerProxyAddress = addressResolver.getAddress(\\n            'liquidityManagerProxy'\\n        );\\n        return ILiquidityManagerProxy(liquidityManagerProxyAddress);\\n    }\\n\\n    function getRevision() internal pure virtual override returns (uint256) {\\n        return SENIOR_DEPOSIT_TOKEN_REVISION;\\n    }\\n}\\n\",\"keccak256\":\"0x1f9635b4422e73b12fbd31512861490a8d8b7c26d3625cfeaa129f9de42c9691\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/base/InitializableToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nabstract contract InitializableToken {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    uint256 private lastInitializedRevision = 0;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Emitted when a debt token is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param debtTokenDecimals the decimals of the debt token\\n     * @param debtTokenName the name of the debt token\\n     * @param debtTokenSymbol the symbol of the debt token\\n     * @param params A set of encoded parameters for additional initialization\\n     **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        uint8 debtTokenDecimals,\\n        string debtTokenName,\\n        string debtTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        uint256 revision = getRevision();\\n        require(\\n            initializing ||\\n                isConstructor() ||\\n                revision > lastInitializedRevision,\\n            'Contract instance has already been initialized'\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            lastInitializedRevision = revision;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the revision number of the contract\\n     * Needs to be defined in the inherited class as a constant.\\n     **/\\n    function getRevision() internal pure virtual returns (uint256);\\n\\n    /**\\n     * @dev Returns true if the contract has been initialized\\n     **/\\n    function isInitialized() public view returns (bool) {\\n        return !initializing && getRevision() <= lastInitializedRevision;\\n    }\\n\\n    /**\\n     * @dev Returns true if and only if the function is running in the constructor\\n     **/\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x6342e5c3aad06c2b19969ad489686a97641d4c72664165409b9e52ff9641f05b\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xebe3f8a59f0f1c96344a05edb984ef666ee4207e993cca99af3808f1de8771b5\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061544b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806317799f3614610030575b600080fd5b61004361003e366004610211565b61006c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6000806040518060200161007f90610204565b6020820181038252601f19601f8201166040525090506100e1600084604051806020016100ab90610204565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f909101166040526100e8565b9392505050565b600080844710156101405760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b825161018e5760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152606401610137565b8383516020850187f5905073ffffffffffffffffffffffffffffffffffffffff81166101fc5760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606401610137565b949350505050565b6151eb8061022b83390190565b60006020828403121561022357600080fd5b503591905056fe608060405234801561001057600080fd5b5060016000556151c6806100256000396000f3fe6080604052600436106200019f5760003560e01c806371b26ee211620000e7578063bf918e751162000089578063f448e1401162000060578063f448e14014620004af578063f71d96cb14620004d1578063fc5eb0df14620004f657600080fd5b8063bf918e751462000443578063e74f82391462000468578063ee99205c146200048d57600080fd5b80638df3799911620000be5780638df3799914620003e4578063915d34c714620003fc578063b18090ae146200042357600080fd5b806371b26ee21462000383578063798d2e88146200039a5780638dab5cf214620003bf57600080fd5b8063158ef93e11620001515780634e151f2511620001285780634e151f25146200033557806366f23026146200034c5780636afe5795146200036357600080fd5b8063158ef93e14620002bc57806339b616a214620002e9578063485cc955146200030e57600080fd5b80630d8e6e2c11620001865780630d8e6e2c14620002265780631156c9d11462000275578063145c22b6146200029757600080fd5b8063065d570f14620001a45780630a8d69b014620001ed575b600080fd5b348015620001b157600080fd5b50620001da7fbf87e2252b7172d9c61058578b6bef80f9573784ab4e27044251da25a76ed28e81565b6040519081526020015b60405180910390f35b348015620001fa57600080fd5b5060035461010090046001600160a01b03165b6040516001600160a01b039091168152602001620001e4565b3480156200023357600080fd5b50604080518082018252600b81527f5661756c7420302e302e3100000000000000000000000000000000000000000060208201529051620001e4919062001beb565b3480156200028257600080fd5b506004546200020d906001600160a01b031681565b348015620002a457600080fd5b50620001da620002b636600462001c19565b6200051b565b348015620002c957600080fd5b50600354620002d89060ff1681565b6040519015158152602001620001e4565b348015620002f657600080fd5b50620001da6200030836600462001c57565b62000530565b3480156200031b57600080fd5b50620003336200032d36600462001c19565b620005d7565b005b620003336200034636600462001c77565b6200066e565b620003336200035d36600462001c77565b6200088c565b3480156200037057600080fd5b506005546001600160a01b03166200020d565b3480156200039057600080fd5b50600654620001da565b348015620003a757600080fd5b50620001da620003b936600462001c57565b62000d1c565b348015620003cc57600080fd5b5062000333620003de36600462001c57565b62000d56565b348015620003f157600080fd5b50620001da60065481565b3480156200040957600080fd5b506003546200020d9061010090046001600160a01b031681565b3480156200043057600080fd5b506004546001600160a01b03166200020d565b3480156200045057600080fd5b50620003336200046236600462001c57565b62000fba565b3480156200047557600080fd5b50620003336200048736600462001c77565b62001149565b3480156200049a57600080fd5b506005546200020d906001600160a01b031681565b348015620004bc57600080fd5b506001546200020d906001600160a01b031681565b348015620004de57600080fd5b506200020d620004f036600462001cbd565b6200120e565b3480156200050357600080fd5b50620001da6200051536600462001c19565b62001239565b600062000529838362001247565b9392505050565b6003546040517fb8ba16fd0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000926101009004169063b8ba16fd906024015b60206040518083038186803b1580156200059657600080fd5b505afa158015620005ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005d1919062001cd7565b92915050565b60035460ff166200066a576001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03848116919091178255600380547fffffffffffffffffffffff00000000000000000000000000000000000000000016610100928516929092027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169190911790911790555b5050565b60026000541415620006c75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055620006d66200127d565b620006e2838362001247565b811115620007595760405162461bcd60e51b815260206004820152603a60248201527f5661756c743a2063616e6e6f742072656465656d206d6f7265207468616e207760448201527f6974686472617761626c65206465706f73697420616d6f756e740000000000006064820152608401620006be565b60035461010090046001600160a01b031663d9caed1283856200077d818362001475565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015620007e557600080fd5b505af1158015620007fa573d6000803e3d6000fd5b5050600480546040517f3dd4c8530000000000000000000000000000000000000000000000000000000081526001600160a01b03888116938201939093526024810186905291169250633dd4c85391506044015b600060405180830381600087803b1580156200086957600080fd5b505af11580156200087e573d6000803e3d6000fd5b505060016000555050505050565b60026000541415620008e15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620006be565b6002600055620008f06200127d565b600154604080517f05a2ee2a00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916305a2ee2a916004808301926020929190829003018186803b1580156200094f57600080fd5b505afa15801562000964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200098a919062001cf1565b6001600160a01b03166340ccb0ae6040518163ffffffff1660e01b815260040160206040518083038186803b158015620009c357600080fd5b505afa158015620009d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009fe919062001cf1565b6040517fde1eb9a30000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291925082916000919083169063de1eb9a39060240160606040518083038186803b15801562000a6257600080fd5b505afa15801562000a77573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a9d919062001d27565b60208101516003546040517fb8ba16fd0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301529394509192600092610100909204169063b8ba16fd9060240160206040518083038186803b15801562000b0d57600080fd5b505afa15801562000b22573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b48919062001cd7565b90508162000b57878362001d9d565b1062000ba65760405162461bcd60e51b815260206004820152601c60248201527f5661756c743a206465706f73697420616d6f756e7420657863656564000000006044820152606401620006be565b82518681111562000bfa5760405162461bcd60e51b815260206004820152601860248201527f5661756c743a206465706f73697420746f6f20736d616c6c00000000000000006044820152606401620006be565b6003546040517f8340f5490000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301528b81166024830152604482018a905261010090920490911690638340f54990606401600060405180830381600087803b15801562000c7057600080fd5b505af115801562000c85573d6000803e3d6000fd5b5050600480546040517f94362e8b0000000000000000000000000000000000000000000000000000000081526001600160a01b038e811693820193909352602481018c9052911692506394362e8b9150604401600060405180830381600087803b15801562000cf357600080fd5b505af115801562000d08573d6000803e3d6000fd5b505060016000555050505050505050505050565b6003546040516370a0823160e01b81526001600160a01b03610100909204821660048201526000918316906370a08231906024016200057d565b62000d606200127d565b6004546001600160a01b03161562000de15760405162461bcd60e51b815260206004820152603260248201527f5661756c743a207365637572697479206465706f73697420746f6b656e20686160448201527f73206265656e20696e697469616c697a656400000000000000000000000000006064820152608401620006be565b600081905081816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e2157600080fd5b505afa15801562000e36573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e5c919062001db8565b826001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801562000e9657600080fd5b505afa15801562000eab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000ed5919081019062001ddd565b836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801562000f0f57600080fd5b505afa15801562000f24573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000f4e919081019062001ddd565b60405162000f5c9062001b6e565b62000f6b949392919062001e96565b604051809103906000f08015801562000f88573d6000803e3d6000fd5b506004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b62000fc46200127d565b6005546001600160a01b031615620010455760405162461bcd60e51b815260206004820152602c60248201527f5661756c743a207374616b696e6720636f6e747261637420686173206265656e60448201527f20696e697469616c697a656400000000000000000000000000000000000000006064820152608401620006be565b6004546001600160a01b0316620010c55760405162461bcd60e51b815260206004820152603660248201527f5661756c743a207365637572697479206465706f73697420746f6b656e20686160448201527f73206e6f74206265656e20696e697469616c697a6564000000000000000000006064820152608401620006be565b6004546040516001600160a01b03909116908290620010e49062001b7c565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801562001118573d6000803e3d6000fd5b506005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905550565b600260005414156200119e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620006be565b6002600055620011ad6200127d565b6003546040517fe74f82390000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528481166024830152604482018490526101009092049091169063e74f8239906064016200084e565b600281815481106200121f57600080fd5b6000918252602090912001546001600160a01b0316905081565b600062000529838362001475565b600080620012568484620015a0565b90506000620012668486620018be565b90508181101562001275578091505b509392505050565b600154604080517f05a2ee2a00000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169160009183916305a2ee2a91600480820192602092909190829003018186803b158015620012e157600080fd5b505afa158015620012f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200131c919062001cf1565b6001600160a01b031663c2c855c26040518163ffffffff1660e01b815260040160206040518083038186803b1580156200135557600080fd5b505afa1580156200136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001390919062001cf1565b6040517f2cf89b6e0000000000000000000000000000000000000000000000000000000081523360048201529091506001600160a01b03821690632cf89b6e9060240160206040518083038186803b158015620013ec57600080fd5b505afa15801562001401573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001427919062001ed7565b6200066a5760405162461bcd60e51b815260206004820152601a60248201527f4e6f74207661756c74206d616e6167657220636f6e74726163740000000000006044820152606401620006be565b6000806200158b620014916200148b8562000d1c565b62001966565b60048054604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905162001584936200152f936001600160a01b0316926318160ddd9281830192602092829003018186803b158015620014f457600080fd5b505afa15801562001509573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200148b919062001cd7565b600480546040516370a0823160e01b81526001600160a01b038b8116938201939093526200157d92909116906370a082319060240160206040518083038186803b158015620014f457600080fd5b9062001978565b90620019ba565b90506200159881620019fd565b949350505050565b600080600160009054906101000a90046001600160a01b03166001600160a01b03166305a2ee2a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620015f257600080fd5b505afa15801562001607573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200162d919062001cf1565b6001600160a01b03166340ccb0ae6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200166657600080fd5b505afa1580156200167b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016a1919062001cf1565b6040517fde1eb9a30000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291925082916000919083169063de1eb9a39060240160606040518083038186803b1580156200170557600080fd5b505afa1580156200171a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001740919062001d27565b60408101519091506000806200175562001a28565b6040517f8a0695fd0000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301523060248301529190911690638a0695fd90604401604080518083038186803b158015620017b757600080fd5b505afa158015620017cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017f2919062001efb565b9092509050600062001805838362001b44565b9050620018216200181b85620015848462001966565b620019fd565b600480546040516370a0823160e01b81526001600160a01b038e8116938201939093529116906370a082319060240160206040518083038186803b1580156200186957600080fd5b505afa1580156200187e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018a4919062001cd7565b620018b0919062001f20565b9a9950505050505050505050565b6003546040517f930f8f5e0000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015283811660248301526000926101009004169063930f8f5e9060440160206040518083038186803b1580156200192b57600080fd5b505afa15801562001940573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000529919062001cd7565b6000620005d182633b9aca0062001b52565b6000806200198860028462001f3a565b90506200159883620019b3620019ab876b033b2e3c9fd0803ce800000062001b52565b849062001b44565b9062001b60565b6000620005296b033b2e3c9fd0803ce8000000620019b3620019dd868662001b52565b620019f660026b033b2e3c9fd0803ce800000062001f3a565b9062001b44565b60008062001a116002633b9aca0062001f3a565b905062000529633b9aca00620019b3838662001b44565b600154604080517f94f6744300000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691839183916394f67443916004808301926020929190829003018186803b15801562001a8b57600080fd5b505afa15801562001aa0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ac6919062001cf1565b9050806001600160a01b031663a5c84e376040518163ffffffff1660e01b815260040160206040518083038186803b15801562001b0257600080fd5b505afa15801562001b17573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b3d919062001cf1565b9250505090565b600062000529828462001d9d565b600062000529828462001f5d565b600062000529828462001f3a565b611aaa8062001f9e83390190565b6117498062003a4883390190565b60005b8381101562001ba757818101518382015260200162001b8d565b8381111562001bb7576000848401525b50505050565b6000815180845262001bd781602086016020860162001b8a565b601f01601f19169290920160200192915050565b60208152600062000529602083018462001bbd565b6001600160a01b038116811462001c1657600080fd5b50565b6000806040838503121562001c2d57600080fd5b823562001c3a8162001c00565b9150602083013562001c4c8162001c00565b809150509250929050565b60006020828403121562001c6a57600080fd5b8135620005298162001c00565b60008060006060848603121562001c8d57600080fd5b833562001c9a8162001c00565b9250602084013562001cac8162001c00565b929592945050506040919091013590565b60006020828403121562001cd057600080fd5b5035919050565b60006020828403121562001cea57600080fd5b5051919050565b60006020828403121562001d0457600080fd5b8151620005298162001c00565b634e487b7160e01b600052604160045260246000fd5b60006060828403121562001d3a57600080fd5b6040516060810181811067ffffffffffffffff8211171562001d605762001d6062001d11565b80604052508251815260208301516020820152604083015160408201528091505092915050565b634e487b7160e01b600052601160045260246000fd5b6000821982111562001db35762001db362001d87565b500190565b60006020828403121562001dcb57600080fd5b815160ff811681146200052957600080fd5b60006020828403121562001df057600080fd5b815167ffffffffffffffff8082111562001e0957600080fd5b818401915084601f83011262001e1e57600080fd5b81518181111562001e335762001e3362001d11565b604051601f8201601f19908116603f0116810190838211818310171562001e5e5762001e5e62001d11565b8160405282815287602084870101111562001e7857600080fd5b62001e8b83602083016020880162001b8a565b979650505050505050565b6001600160a01b038516815260ff8416602082015260806040820152600062001ec3608083018562001bbd565b828103606084015262001e8b818562001bbd565b60006020828403121562001eea57600080fd5b815180151581146200052957600080fd5b6000806040838503121562001f0f57600080fd5b505080516020909101519092909150565b60008282101562001f355762001f3562001d87565b500390565b60008262001f5857634e487b7160e01b600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562001f985762001f9862001d87565b50029056fe60806040523480156200001157600080fd5b5060405162001aaa38038062001aaa833981016040819052620000349162000307565b8151829082906200004d90600390602085019062000194565b5080516200006390600490602084019062000194565b505050620000987f68fc488efe30251cadb6ac88bdeef3f1a5e6048808baf387258d1d78e986720c33620000e060201b60201c565b5050600780546001600160a01b031916331790556006805460ff909216600160a01b026001600160a81b03199092166001600160a01b039390931692909217179055620003e9565b620000ec8282620000f0565b5050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16620000ec5760008281526005602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001503390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b828054620001a290620003ac565b90600052602060002090601f016020900481019282620001c6576000855562000211565b82601f10620001e157805160ff191683800117855562000211565b8280016001018555821562000211579182015b8281111562000211578251825591602001919060010190620001f4565b506200021f92915062000223565b5090565b5b808211156200021f576000815560010162000224565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200026257600080fd5b81516001600160401b03808211156200027f576200027f6200023a565b604051601f8301601f19908116603f01168101908282118183101715620002aa57620002aa6200023a565b81604052838152602092508683858801011115620002c757600080fd5b600091505b83821015620002eb5785820183015181830184015290820190620002cc565b83821115620002fd5760008385830101525b9695505050505050565b600080600080608085870312156200031e57600080fd5b84516001600160a01b03811681146200033657600080fd5b602086015190945060ff811681146200034e57600080fd5b60408601519093506001600160401b03808211156200036c57600080fd5b6200037a8883890162000250565b935060608701519150808211156200039157600080fd5b50620003a08782880162000250565b91505092959194509250565b600181811c90821680620003c157607f821691505b60208210811415620003e357634e487b7160e01b600052602260045260246000fd5b50919050565b6116b180620003f96000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c806370a08231116100ee5780639a32c20711610097578063a9059cbb11610071578063a9059cbb146103c5578063d547741f146103d8578063dd62ed3e146103eb578063fbfa77cf1461042457600080fd5b80639a32c20714610385578063a217fddf146103aa578063a457c2d7146103b257600080fd5b8063935a8b84116100c8578063935a8b841461035757806394362e8b1461036a57806395d89b411461037d57600080fd5b806370a08231146102ca5780637158da7c146102f357806391d148541461031e57600080fd5b80632f2ff15d11610150578063395093511161012a578063395093511461027d5780633dd4c85314610290578063411557d1146102a357600080fd5b80632f2ff15d14610240578063313ce5671461025557806336568abe1461026a57600080fd5b806318160ddd1161018157806318160ddd146101f857806323b872dd1461020a578063248a9ca31461021d57600080fd5b806301ffc9a7146101a857806306fdde03146101d0578063095ea7b3146101e5575b600080fd5b6101bb6101b6366004611352565b610437565b60405190151581526020015b60405180910390f35b6101d86104d0565b6040516101c791906113c0565b6101bb6101f336600461140f565b610562565b6002545b6040519081526020016101c7565b6101bb610218366004611439565b61057a565b6101fc61022b366004611475565b60009081526005602052604090206001015490565b61025361024e36600461148e565b61059e565b005b60125b60405160ff90911681526020016101c7565b61025361027836600461148e565b6105c9565b6101bb61028b36600461140f565b61065a565b61025361029e36600461140f565b610699565b6101fc7f68fc488efe30251cadb6ac88bdeef3f1a5e6048808baf387258d1d78e986720c81565b6101fc6102d83660046114ba565b6001600160a01b031660009081526020819052604090205490565b600654610306906001600160a01b031681565b6040516001600160a01b0390911681526020016101c7565b6101bb61032c36600461148e565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6101fc6103653660046114ba565b610716565b61025361037836600461140f565b6107bb565b6101d861082b565b6006546102589074010000000000000000000000000000000000000000900460ff1681565b6101fc600081565b6101bb6103c036600461140f565b61083a565b6101bb6103d336600461140f565b6108e4565b6102536103e636600461148e565b6108f2565b6101fc6103f93660046114d5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600754610306906001600160a01b031681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806104ca57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600380546104df906114ff565b80601f016020809104026020016040519081016040528092919081815260200182805461050b906114ff565b80156105585780601f1061052d57610100808354040283529160200191610558565b820191906000526020600020905b81548152906001019060200180831161053b57829003601f168201915b5050505050905090565b600033610570818585610918565b5060019392505050565b600033610588858285610a70565b610593858585610b02565b506001949350505050565b6000828152600560205260409020600101546105ba8133610d19565b6105c48383610d99565b505050565b6001600160a01b038116331461064c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6106568282610e3b565b5050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906105709082908690610694908790611550565b610918565b7f68fc488efe30251cadb6ac88bdeef3f1a5e6048808baf387258d1d78e986720c6106c48133610d19565b6106ce8383610ebe565b826001600160a01b03167f52c5746cab35abb42ab05a97f3665eddb30f7beefb6bb73a09e97db39c07b83a8360405161070991815260200190565b60405180910390a2505050565b6007546006546040517ffc5eb0df0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529182166024820152600092919091169063fc5eb0df9060440160206040518083038186803b15801561078357600080fd5b505afa158015610797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ca9190611568565b7f68fc488efe30251cadb6ac88bdeef3f1a5e6048808baf387258d1d78e986720c6107e68133610d19565b6107f08383611043565b826001600160a01b03167fdd6e9fe736800803049fae1dbd09da4f800f1656349c20f11521014ceab487b48360405161070991815260200190565b6060600480546104df906114ff565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156108d75760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610643565b6105938286868403610918565b600033610570818585610b02565b60008281526005602052604090206001015461090e8133610d19565b6105c48383610e3b565b6001600160a01b0383166109935760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610643565b6001600160a01b038216610a0f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610643565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610afc5781811015610aef5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610643565b610afc8484848403610918565b50505050565b6001600160a01b038316610b7e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610643565b6001600160a01b038216610bfa5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610643565b6001600160a01b03831660009081526020819052604090205481811015610c895760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610643565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610cc0908490611550565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d0c91815260200190565b60405180910390a3610afc565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff1661065657610d57816001600160a01b03166014611122565b610d62836020611122565b604051602001610d73929190611581565b60408051601f198184030181529082905262461bcd60e51b8252610643916004016113c0565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff166106565760008281526005602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610df73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526005602090815260408083206001600160a01b038516845290915290205460ff16156106565760008281526005602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b038216610f3a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610643565b6001600160a01b03821660009081526020819052604090205481811015610fc95760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610643565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610ff8908490611602565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b0382166110995760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610643565b80600260008282546110ab9190611550565b90915550506001600160a01b038216600090815260208190526040812080548392906110d8908490611550565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60606000611131836002611619565b61113c906002611550565b67ffffffffffffffff81111561115457611154611638565b6040519080825280601f01601f19166020018201604052801561117e576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106111b5576111b561164e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106112185761121861164e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611254846002611619565b61125f906001611550565b90505b60018111156112fc577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106112a0576112a061164e565b1a60f81b8282815181106112b6576112b661164e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c936112f581611664565b9050611262565b50831561134b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610643565b9392505050565b60006020828403121561136457600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461134b57600080fd5b60005b838110156113af578181015183820152602001611397565b83811115610afc5750506000910152565b60208152600082518060208401526113df816040850160208701611394565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461140a57600080fd5b919050565b6000806040838503121561142257600080fd5b61142b836113f3565b946020939093013593505050565b60008060006060848603121561144e57600080fd5b611457846113f3565b9250611465602085016113f3565b9150604084013590509250925092565b60006020828403121561148757600080fd5b5035919050565b600080604083850312156114a157600080fd5b823591506114b1602084016113f3565b90509250929050565b6000602082840312156114cc57600080fd5b61134b826113f3565b600080604083850312156114e857600080fd5b6114f1836113f3565b91506114b1602084016113f3565b600181811c9082168061151357607f821691505b6020821081141561153457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156115635761156361153a565b500190565b60006020828403121561157a57600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516115b9816017850160208801611394565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516115f6816028840160208801611394565b01602801949350505050565b6000828210156116145761161461153a565b500390565b60008160001904831182151516156116335761163361153a565b500290565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816116735761167361153a565b50600019019056fea26469706673582212201dd1801b0c8f28fc6dea3df30507a4ff5a77d0e1e7da1c6fe7d2ac777f17e62964736f6c6343000809003360806040526000600755600060085562093a806009553480156200002257600080fd5b506040516200174938038062001749833981016040819052620000459162000131565b6001600081815581546001600160a01b031916339081179092556040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001546001600160a01b0316620000d85760405162461bcd60e51b815260206004820152601160248201527013dddb995c881b5d5cdd081899481cd95d607a1b604482015260640160405180910390fd5b60058054610100600160a81b0319166101006001600160a01b0394851602179055600680546001600160a01b0319169190921617905562000169565b80516001600160a01b03811681146200012c57600080fd5b919050565b600080604083850312156200014557600080fd5b620001508362000114565b9150620001606020840162000114565b90509250929050565b6115d080620001796000396000f3fe608060405234801561001057600080fd5b50600436106101ce5760003560e01c806372f702f311610104578063c8f33c91116100a2578063df136d6511610071578063df136d65146103a3578063e30c3978146103ac578063ebe2b12b146103bf578063f2fde38b146103c857600080fd5b8063c8f33c911461036c578063cc1a378f14610375578063cd3daf9d14610388578063d1af0c7d1461039057600080fd5b80638da5cb5b116100de5780638da5cb5b1461032a5780638f32d59b1461033d57806391b4ded914610350578063a694fc3a1461035957600080fd5b806372f702f3146103015780637b0a47ee1461031957806380faa57d1461032257600080fd5b8063386a9525116101715780633fc6df6e1161014b5780633fc6df6e146102885780634e71e0c8146102b35780635c975abb146102bb57806370a08231146102d857600080fd5b8063386a9525146102645780633c6b16ab1461026d5780633d18b9121461028057600080fd5b806318160ddd116101ad57806318160ddd1461022e57806319762143146102365780631c1f78eb146102495780632e1a7d4d1461025157600080fd5b80628cc262146101d35780630700037d146101f957806316c38b3c14610219575b600080fd5b6101e66101e13660046113a6565b6103db565b6040519081526020015b60405180910390f35b6101e66102073660046113a6565b600d6020526000908152604090205481565b61022c6102273660046113dd565b610459565b005b600e546101e6565b61022c6102443660046113a6565b610549565b6101e66105d2565b61022c61025f3660046113fa565b6105f0565b6101e660095481565b61022c61027b3660046113fa565b61078c565b61022c610a15565b60035461029b906001600160a01b031681565b6040516001600160a01b0390911681526020016101f0565b61022c610b42565b6005546102c89060ff1681565b60405190151581526020016101f0565b6101e66102e63660046113a6565b6001600160a01b03166000908152600f602052604090205490565b60055461029b9061010090046001600160a01b031681565b6101e660085481565b6101e6610bcc565b60015461029b906001600160a01b031681565b6001546001600160a01b031633146102c8565b6101e660045481565b61022c6103673660046113fa565b610be3565b6101e6600a5481565b61022c6103833660046113fa565b610dec565b6101e6610f18565b60065461029b906001600160a01b031681565b6101e6600b5481565b60025461029b906001600160a01b031681565b6101e660075481565b61022c6103d63660046113a6565b610f64565b6001600160a01b0381166000908152600d6020908152604080832054600c909252822054610453919061044d90670de0b6b3a7640000906104479061042890610422610f18565b90610fed565b6001600160a01b0388166000908152600f602052604090205490611000565b9061100c565b90611018565b92915050565b6001546001600160a01b031633146104b85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60055460ff16151581151514156104cc5750565b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682151590811790915560ff161561050857426004555b60055460405160ff909116151581527f8fb6c181ee25a520cf3dd6565006ef91229fcfe5a989566c2a3b8c115570cec5906020015b60405180910390a15b50565b6001546001600160a01b031633146105a35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104af565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006105eb60095460085461100090919063ffffffff16565b905090565b600260005414156106435760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104af565b600260005533610651610f18565b600b5561065c610bcc565b600a556001600160a01b038116156106a357610677816103db565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b600082116106f35760405162461bcd60e51b815260206004820152601160248201527f43616e6e6f74207769746864726177203000000000000000000000000000000060448201526064016104af565b600e546107009083610fed565b600e55336000908152600f602052604090205461071d9083610fed565b336000818152600f602052604090209190915560055461074d916101009091046001600160a01b03169084611024565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001600055565b6003546001600160a01b0316331461080c5760405162461bcd60e51b815260206004820152602a60248201527f43616c6c6572206973206e6f742052657761726473446973747269627574696f60448201527f6e20636f6e74726163740000000000000000000000000000000000000000000060648201526084016104af565b6000610816610f18565b600b55610821610bcc565b600a556001600160a01b038116156108685761083c816103db565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b60075442106108875760095461087f90839061100c565b6008556108ca565b6007546000906108979042610fed565b905060006108b06008548361100090919063ffffffff16565b6009549091506108c4906104478684611018565b60085550505b6006546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561092757600080fd5b505afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f9190611413565b90506109766009548261100c90919063ffffffff16565b60085411156109c75760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f2068696768000000000000000060448201526064016104af565b42600a8190556009546109da9190611018565b6007556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b60026000541415610a685760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104af565b600260005533610a76610f18565b600b55610a81610bcc565b600a556001600160a01b03811615610ac857610a9c816103db565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b336000908152600d60205260409020548015610b3957336000818152600d6020526040812055600654610b07916001600160a01b039091169083611024565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200161077b565b50506001600055565b6002546001600160a01b03163314610b5957600080fd5b6002546001546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600280546001805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03841617909155169055565b60006007544210610bde575060075490565b504290565b60026000541415610c365760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104af565b600260005560055460ff1615610cb45760405162461bcd60e51b815260206004820152603c60248201527f5468697320616374696f6e2063616e6e6f7420626520706572666f726d65642060448201527f7768696c652074686520636f6e7472616374206973207061757365640000000060648201526084016104af565b33610cbd610f18565b600b55610cc8610bcc565b600a556001600160a01b03811615610d0f57610ce3816103db565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b60008211610d5f5760405162461bcd60e51b815260206004820152600e60248201527f43616e6e6f74207374616b65203000000000000000000000000000000000000060448201526064016104af565b600e54610d6c9083611018565b600e55336000908152600f6020526040902054610d899083611018565b336000818152600f6020526040902091909155600554610dba916101009091046001600160a01b03169030856110d2565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200161077b565b6001546001600160a01b03163314610e465760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104af565b6007544211610ee35760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a4016104af565b60098190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200161053d565b6000600e5460001415610f2c5750600b5490565b6105eb610f5b600e54610447670de0b6b3a7640000610f55600854610f55600a54610422610bcc565b90611000565b600b5490611018565b6001546001600160a01b03163314610fbe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104af565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000610ff9828461145b565b9392505050565b6000610ff98284611472565b6000610ff982846114af565b6000610ff982846114ea565b6040516001600160a01b0383166024820152604481018290526110cd9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611129565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526111239085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611069565b50505050565b600061117e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661120e9092919063ffffffff16565b8051909150156110cd578080602001905181019061119c9190611502565b6110cd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104af565b606061121d8484600085611225565b949350505050565b60608247101561129d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104af565b6001600160a01b0385163b6112f45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104af565b600080866001600160a01b03168587604051611310919061154b565b60006040518083038185875af1925050503d806000811461134d576040519150601f19603f3d011682016040523d82523d6000602084013e611352565b606091505b509150915061136282828661136d565b979650505050505050565b6060831561137c575081610ff9565b82511561138c5782518084602001fd5b8160405162461bcd60e51b81526004016104af9190611567565b6000602082840312156113b857600080fd5b81356001600160a01b0381168114610ff957600080fd5b801515811461054657600080fd5b6000602082840312156113ef57600080fd5b8135610ff9816113cf565b60006020828403121561140c57600080fd5b5035919050565b60006020828403121561142557600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561146d5761146d61142c565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156114aa576114aa61142c565b500290565b6000826114e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082198211156114fd576114fd61142c565b500190565b60006020828403121561151457600080fd5b8151610ff9816113cf565b60005b8381101561153a578181015183820152602001611522565b838111156111235750506000910152565b6000825161155d81846020870161151f565b9190910192915050565b602081526000825180602084015261158681604085016020870161151f565b601f01601f1916919091016040019291505056fea2646970667358221220b9de1f32a9849b59e60511d9c0f1d1f702279dfe7fad2d0ff6bb7ca5db47d70464736f6c63430008090033a2646970667358221220ef637815a79475bbf10ced21908b8655ceb97585739ead9db29989babf26b97364736f6c63430008090033a26469706673582212200b9f091b5b4cfde93c99b561f0fa8e5da376de5da0c0d585e7da0269a898685e64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
