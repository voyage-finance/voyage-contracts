{
  "address": "0x56604e9D6BfB92Cd7937E32b3C7AdD323C5cb993",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "extractAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "validate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x1164710b853757d2750e5c970352be50e204531217453bf90377a4e430cc96cc",
  "receipt": {
    "to": null,
    "from": "0x7bB17c9401110D05ec39894334cC9d7721E90688",
    "contractAddress": "0x56604e9D6BfB92Cd7937E32b3C7AdD323C5cb993",
    "transactionIndex": 22,
    "gasUsed": "486315",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8406c0efcee9b83f8ef709c8381a239204e57a974499e9573b66819178b8ae1d",
    "transactionHash": "0x1164710b853757d2750e5c970352be50e204531217453bf90377a4e430cc96cc",
    "logs": [],
    "blockNumber": 7419872,
    "cumulativeGasUsed": "2130571",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "12dd858cd3471725424835f3a0db1659",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"extractAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voyage/adapter/LooksRareAdapter.sol\":\"LooksRareAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/voyage/adapter/LooksRareAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {IMarketPlaceAdapter} from \\\"../interfaces/IMarketPlaceAdapter.sol\\\";\\n\\nstruct MakerOrder {\\n    bool isOrderAsk; // true --> ask / false --> bid\\n    address signer; // signer of the maker order\\n    address collection; // collection address\\n    uint256 price; // price (used as )\\n    uint256 tokenId; // id of the token\\n    uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\n    address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\n    address currency; // currency (e.g., WETH)\\n    uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n    uint256 startTime; // startTime in timestamp\\n    uint256 endTime; // endTime in timestamp\\n    uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n    bytes params; // additional parameters\\n    uint8 v; // v: parameter (27 or 28)\\n    bytes32 r; // r: parameter\\n    bytes32 s; // s: parameter\\n}\\n\\nstruct TakerOrder {\\n    bool isOrderAsk; // true --> ask / false --> bid\\n    address taker; // msg.sender\\n    uint256 price; // final price for the purchase\\n    uint256 tokenId;\\n    uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n    bytes params; // other params (e.g., tokenId)\\n}\\n\\ninterface ILooksRareExchange {\\n    function matchAskWithTakerBidUsingETHAndWETH(\\n        TakerOrder calldata takerBid,\\n        MakerOrder calldata makerAsk\\n    ) external payable;\\n\\n    function matchAskWithTakerBid(\\n        TakerOrder calldata takerBid,\\n        MakerOrder calldata makerAsk\\n    ) external;\\n\\n    function matchBidWithTakerAsk(\\n        TakerOrder calldata takerAsk,\\n        MakerOrder calldata makerBid\\n    ) external;\\n}\\n\\ncontract LooksRareAdapter is IMarketPlaceAdapter {\\n    // keccak256(\\\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\\\")\\n    bytes32 internal constant MAKER_ORDER_HASH =\\n        0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\\n\\n    function hash(MakerOrder memory makerOrder)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MAKER_ORDER_HASH,\\n                    makerOrder.isOrderAsk,\\n                    makerOrder.signer,\\n                    makerOrder.collection,\\n                    makerOrder.price,\\n                    makerOrder.tokenId,\\n                    makerOrder.amount,\\n                    makerOrder.strategy,\\n                    makerOrder.currency,\\n                    makerOrder.nonce,\\n                    makerOrder.startTime,\\n                    makerOrder.endTime,\\n                    makerOrder.minPercentageToAsk,\\n                    keccak256(makerOrder.params)\\n                )\\n            );\\n    }\\n\\n    struct PurchaseParam {\\n        address marketplace;\\n        bytes4 selector;\\n        bytes makerOrder;\\n        bytes takerOrder;\\n    }\\n\\n    function extractAssetPrice(bytes calldata _data)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        PurchaseParam memory param;\\n        (\\n            param.marketplace,\\n            param.selector,\\n            param.makerOrder,\\n            param.takerOrder\\n        ) = abi.decode(_data, (address, bytes4, bytes, bytes));\\n\\n        TakerOrder memory takerOrder;\\n        (\\n            takerOrder.isOrderAsk,\\n            takerOrder.taker,\\n            takerOrder.price,\\n            takerOrder.tokenId,\\n            takerOrder.minPercentageToAsk,\\n            takerOrder.params\\n        ) = abi.decode(\\n            param.takerOrder,\\n            (bool, address, uint256, uint256, uint256, bytes)\\n        );\\n\\n        return takerOrder.price;\\n    }\\n\\n    function validate(bytes calldata _data) external pure returns (bool) {\\n        return _validate(_data);\\n    }\\n\\n    function execute(bytes calldata _data)\\n        external\\n        pure\\n        returns (bytes memory)\\n    {\\n        if (_validate(_data)) {\\n            PurchaseParam memory param;\\n            (\\n                param.marketplace,\\n                param.selector,\\n                param.makerOrder,\\n                param.takerOrder\\n            ) = abi.decode(_data, (address, bytes4, bytes, bytes));\\n            bytes memory data = abi.encode(param.takerOrder, param.makerOrder);\\n            data = abi.encodePacked(param.selector, data);\\n            return data;\\n        }\\n        // use native error type here cause an ABI issue\\n        revert(\\\"invalid data\\\");\\n    }\\n\\n    function _validate(bytes calldata _data) private pure returns (bool) {\\n        PurchaseParam memory param;\\n        (\\n            param.marketplace,\\n            param.selector,\\n            param.makerOrder,\\n            param.takerOrder\\n        ) = abi.decode(_data, (address, bytes4, bytes, bytes));\\n\\n        // bytes4(keccak256(matchAskWithTakerBidUsingETHAndWETH()))\\n        // 0xb4e4b296\\n        if (\\n            param.selector !=\\n            ILooksRareExchange(address(0))\\n                .matchAskWithTakerBidUsingETHAndWETH\\n                .selector\\n        ) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xb0847063364f2b3a3e246a37c043484f5963679815a54df34790df8d1e8500b8\",\"license\":\"GPL-3.0\"},\"contracts/voyage/interfaces/IMarketPlaceAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IMarketPlaceAdapter {\\n    function extractAssetPrice(bytes calldata _data)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    function validate(bytes calldata _data) external view returns (bool);\\n\\n    function execute(bytes calldata _data) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x7b27405c7e5a65427d7ab54473e00feadacb03113770a2418bac3f48b8517520\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506107e3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806309c5eabe146100465780638045e15c1461006f578063c16e50ef14610090575b600080fd5b6100596100543660046103e3565b6100b3565b60405161006691906104b1565b60405180910390f35b61008261007d3660046103e3565b610208565b604051908152602001610066565b6100a361009e3660046103e3565b610318565b6040519015158152602001610066565b60606100bf838361032b565b1561019c5760408051608081018252600080825260208201526060918101829052818101919091526100f3838501856105c7565b6060850181905260408086018390527fffffffff0000000000000000000000000000000000000000000000000000000090931660208087019190915273ffffffffffffffffffffffffffffffffffffffff9094168552915160009361015a93929101610675565b60405160208183030381529060405290508160200151816040516020016101829291906106a3565b60408051601f198184030181529190529250610202915050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c696420646174610000000000000000000000000000000000000000604482015260640160405180910390fd5b92915050565b60408051608081018252600080825260208201819052606092820183905282820192909252610239838501856105c7565b6060808601919091526040808601929092527fffffffff0000000000000000000000000000000000000000000000000000000090921660208086019190915273ffffffffffffffffffffffffffffffffffffffff9093168452805160c0810182526000808252938101849052908101839052808201839052608081019290925260a082015281606001518060200190518101906102d691906106eb565b60a0870152608086015260608501526040840181905273ffffffffffffffffffffffffffffffffffffffff909116602084015290151590915291505092915050565b6000610324838361032b565b9392505050565b6040805160808101825260008082526020820181905260609282018390528282019290925261035c838501856105c7565b606085015260408401527fffffffff00000000000000000000000000000000000000000000000000000000166020830181905273ffffffffffffffffffffffffffffffffffffffff90911682527fb4e4b29600000000000000000000000000000000000000000000000000000000146103d9576000915050610202565b5060019392505050565b600080602083850312156103f657600080fd5b823567ffffffffffffffff8082111561040e57600080fd5b818501915085601f83011261042257600080fd5b81358181111561043157600080fd5b86602082850101111561044357600080fd5b60209290920196919550909350505050565b60005b83811015610470578181015183820152602001610458565b8381111561047f576000848401525b50505050565b6000815180845261049d816020860160208601610455565b601f01601f19169290920160200192915050565b6020815260006103246020830184610485565b73ffffffffffffffffffffffffffffffffffffffff811681146104e657600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610541576105416104e9565b604052919050565b600067ffffffffffffffff821115610563576105636104e9565b50601f01601f191660200190565b600082601f83011261058257600080fd5b813561059561059082610549565b610518565b8181528460208386010111156105aa57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156105dd57600080fd5b84356105e8816104c4565b935060208501357fffffffff000000000000000000000000000000000000000000000000000000008116811461061d57600080fd5b9250604085013567ffffffffffffffff8082111561063a57600080fd5b61064688838901610571565b9350606087013591508082111561065c57600080fd5b5061066987828801610571565b91505092959194509250565b6040815260006106886040830185610485565b828103602084015261069a8185610485565b95945050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000083168152600082516106dd816004850160208701610455565b919091016004019392505050565b60008060008060008060c0878903121561070457600080fd5b8651801515811461071457600080fd5b6020880151909650610725816104c4565b8095505060408701519350606087015192506080870151915060a087015167ffffffffffffffff81111561075857600080fd5b8701601f8101891361076957600080fd5b805161077761059082610549565b8181528a602083850101111561078c57600080fd5b61079d826020830160208601610455565b809350505050929550929550929556fea264697066735822122071c04a8deb8e310b2e700788cb9b01721a79ca5467fbd9fa89dce8f81466201864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806309c5eabe146100465780638045e15c1461006f578063c16e50ef14610090575b600080fd5b6100596100543660046103e3565b6100b3565b60405161006691906104b1565b60405180910390f35b61008261007d3660046103e3565b610208565b604051908152602001610066565b6100a361009e3660046103e3565b610318565b6040519015158152602001610066565b60606100bf838361032b565b1561019c5760408051608081018252600080825260208201526060918101829052818101919091526100f3838501856105c7565b6060850181905260408086018390527fffffffff0000000000000000000000000000000000000000000000000000000090931660208087019190915273ffffffffffffffffffffffffffffffffffffffff9094168552915160009361015a93929101610675565b60405160208183030381529060405290508160200151816040516020016101829291906106a3565b60408051601f198184030181529190529250610202915050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c696420646174610000000000000000000000000000000000000000604482015260640160405180910390fd5b92915050565b60408051608081018252600080825260208201819052606092820183905282820192909252610239838501856105c7565b6060808601919091526040808601929092527fffffffff0000000000000000000000000000000000000000000000000000000090921660208086019190915273ffffffffffffffffffffffffffffffffffffffff9093168452805160c0810182526000808252938101849052908101839052808201839052608081019290925260a082015281606001518060200190518101906102d691906106eb565b60a0870152608086015260608501526040840181905273ffffffffffffffffffffffffffffffffffffffff909116602084015290151590915291505092915050565b6000610324838361032b565b9392505050565b6040805160808101825260008082526020820181905260609282018390528282019290925261035c838501856105c7565b606085015260408401527fffffffff00000000000000000000000000000000000000000000000000000000166020830181905273ffffffffffffffffffffffffffffffffffffffff90911682527fb4e4b29600000000000000000000000000000000000000000000000000000000146103d9576000915050610202565b5060019392505050565b600080602083850312156103f657600080fd5b823567ffffffffffffffff8082111561040e57600080fd5b818501915085601f83011261042257600080fd5b81358181111561043157600080fd5b86602082850101111561044357600080fd5b60209290920196919550909350505050565b60005b83811015610470578181015183820152602001610458565b8381111561047f576000848401525b50505050565b6000815180845261049d816020860160208601610455565b601f01601f19169290920160200192915050565b6020815260006103246020830184610485565b73ffffffffffffffffffffffffffffffffffffffff811681146104e657600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610541576105416104e9565b604052919050565b600067ffffffffffffffff821115610563576105636104e9565b50601f01601f191660200190565b600082601f83011261058257600080fd5b813561059561059082610549565b610518565b8181528460208386010111156105aa57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156105dd57600080fd5b84356105e8816104c4565b935060208501357fffffffff000000000000000000000000000000000000000000000000000000008116811461061d57600080fd5b9250604085013567ffffffffffffffff8082111561063a57600080fd5b61064688838901610571565b9350606087013591508082111561065c57600080fd5b5061066987828801610571565b91505092959194509250565b6040815260006106886040830185610485565b828103602084015261069a8185610485565b95945050505050565b7fffffffff0000000000000000000000000000000000000000000000000000000083168152600082516106dd816004850160208701610455565b919091016004019392505050565b60008060008060008060c0878903121561070457600080fd5b8651801515811461071457600080fd5b6020880151909650610725816104c4565b8095505060408701519350606087015192506080870151915060a087015167ffffffffffffffff81111561075857600080fd5b8701601f8101891361076957600080fd5b805161077761059082610549565b8181528a602083850101111561078c57600080fd5b61079d826020830160208601610455565b809350505050929550929550929556fea264697066735822122071c04a8deb8e310b2e700788cb9b01721a79ca5467fbd9fa89dce8f81466201864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}