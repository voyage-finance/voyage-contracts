{
  "language": "Solidity",
  "sources": {
    "contracts/mock/Crab.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {IERC721Token} from \"./IERC721Token.sol\";\n\ncontract Crab is ERC721, IERC721Token {\n    constructor(string memory name_, string memory symbol_)\n        ERC721(name_, symbol_)\n    {}\n\n    function safeMint(address to, uint256 tokenId) external {\n        _safeMint(to, tokenId);\n    }\n\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal override {\n        _transfer(from, to, tokenId);\n        IERC721Receiver(to).onERC721Received(to, from, tokenId, _data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/mock/IERC721Token.sol": {
      "content": "interface IERC721Token {}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/vault/SubVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {Initializable} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {IVault} from \"./Vault.sol\";\n\ninterface ISubvault {\n    function initialize(address _parent, address _owner) external;\n\n    function updateOwner(address _newOwner) external;\n\n    function execute(address target, bytes calldata data)\n        external\n        returns (bytes memory);\n}\n\ncontract SubVault is Initializable, ISubvault, IERC721Receiver {\n    struct SubVaultStorageV1 {\n        address owner;\n        address parent;\n    }\n\n    event Execute(address _vault, address _target, bytes _data);\n\n    // only `parent` should be able to call\n    modifier authorised() {\n        require(msg.sender == diamondStorage().parent, \"SubVault: only parent\");\n        _;\n    }\n\n    function initialize(address _owner, address _parent) external initializer {\n        diamondStorage().owner = _owner;\n        diamondStorage().parent = _parent;\n    }\n\n    function execute(address target, bytes calldata data)\n        external\n        authorised\n        returns (bytes memory)\n    {\n        (bool success, bytes memory ret) = target.call(data);\n        require(success);\n        emit Execute(address(this), target, data);\n        return ret;\n    }\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4 ret) {\n        if (\n            !IVault(diamondStorage().parent).collectionInitialized(msg.sender)\n        ) {\n            revert InvalidSenderAddress();\n        }\n        IVault(diamondStorage().parent).onERC721Transferred(\n            msg.sender,\n            tokenId,\n            from,\n            address(this)\n        );\n    }\n\n    function updateOwner(address _newOwner) external authorised {\n        diamondStorage().owner = _newOwner;\n    }\n\n    function getOwner() public view returns (address) {\n        return diamondStorage().owner;\n    }\n\n    /************************************** Internal Functions **************************************/\n\n    // Returns the struct from a specified position in contract storage\n    // ds is short for DiamondStorage\n    function diamondStorage()\n        internal\n        pure\n        returns (SubVaultStorageV1 storage ds)\n    {\n        // Specifies a random position in contract storage\n        // This can be done with a keccak256 hash of a unique string as is\n        // done here or other schemes can be used such as this:\n        // bytes32 storagePosition = keccak256(abi.encodePacked(ERC1155.interfaceId, ERC1155.name, address(this)));\n        bytes32 storagePosition = keccak256(\n            \"finance.voyage.subvault.v1.storage\"\n        );\n        // Set the position of our struct in contract storage\n        assembly {\n            ds.slot := storagePosition\n        }\n    }\n}\n\n/* --------------------------------- errors -------------------------------- */\nerror InvalidSenderAddress();\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "contracts/vault/Vault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\nimport {VaultFacet} from \"../voyage/facets/VaultFacet.sol\";\nimport {SecurityFacet} from \"../voyage/facets/SecurityFacet.sol\";\nimport {IWETH9} from \"../shared/interfaces/IWETH9.sol\";\nimport {ISubvault} from \"./SubVault.sol\";\n\nstruct VaultStorageV1 {\n    address voyage;\n    address user;\n    address paymaster;\n    address weth;\n    // subvault array, for retrieval by DataProviderFacet and client-side enumeration\n    address[] subvaults;\n    // mapping of subvault to owner\n    mapping(address => address) subvaultOwnerIndex;\n    // mapping of owner to subvault\n    mapping(address => address) ownerSubvaultIndex;\n    // mapping of subvault => paused status\n    mapping(address => bool) subvaultStatusIndex;\n    mapping(address => uint256[]) tokenSet;\n    // mapping of erc721 address to mapping of tokenId to custody information\n    // to save storage space, only store this data if the token is transferred out of the Vault (i.e., to a Subvault or external contract)\n    mapping(address => mapping(uint256 => CustodyData)) custodyIndex;\n}\n\nstruct CustodyData {\n    // the \"owner\" of the token -- must be Vault or a Subvault.\n    address owner;\n    // the current holder of the token, e.g., battle game.\n    address custodian;\n}\n\nlibrary LibVaultStorage {\n    // Returns the struct from a specified position in contract storage\n    // ds is short for DiamondStorage\n    function ds() internal pure returns (VaultStorageV1 storage ds) {\n        // Set the position of our struct in contract storage\n        bytes32 storagePosition = keccak256(\"diamond.storage.vault.voyage\");\n        assembly {\n            ds.slot := storagePosition\n        }\n    }\n}\n\ninterface IVault {\n    event GasRefunded(\n        address _paymaster,\n        address _dst,\n        uint256 _amount,\n        uint256 _shortfall,\n        bytes _result\n    );\n\n    event Execute(address _vault, address _target, bytes _data);\n\n    function initialize(\n        address _voyage,\n        address _user,\n        address _paymaster,\n        address _weth\n    ) external;\n\n    function execute(bytes calldata _data) external;\n\n    function refundGas(uint256 _amount, address _dst) external;\n\n    function onERC721Transferred(\n        address _collection,\n        uint256 _tokenId,\n        address _src,\n        address _dst\n    ) external;\n\n    function collectionInitialized(address _collection)\n        external\n        view\n        returns (bool);\n}\n\ncontract Vault is Initializable, IERC1271, IVault {\n    bytes internal constant EMPTY_BYTES = \"\";\n\n    modifier onlyPaymaster() {\n        require(_isPaymaster(msg.sender), \"Only paymaster allowed\");\n        _;\n    }\n\n    modifier onlyAuthorised() {\n        SecurityFacet sf = SecurityFacet(LibVaultStorage.ds().voyage);\n        require(\n            sf.isAuthorised(msg.sender, address(this), msg.sig),\n            \"unauthorised\"\n        );\n        _;\n    }\n\n    function initialize(\n        address _voyage,\n        address _user,\n        address _paymaster,\n        address _weth\n    ) public initializer {\n        LibVaultStorage.ds().voyage = _voyage;\n        LibVaultStorage.ds().user = _user;\n        LibVaultStorage.ds().paymaster = _paymaster;\n        LibVaultStorage.ds().weth = _weth;\n    }\n\n    function execute(bytes calldata _data) external onlyAuthorised {\n        (address target, bytes memory data) = abi.decode(\n            _data,\n            (address, bytes)\n        );\n        (bool success, bytes memory ret) = target.call(data);\n        if (!success) {\n            revert();\n        }\n        emit Execute(address(this), target, data);\n    }\n\n    function refundGas(uint256 _amount, address _dst) external onlyPaymaster {\n        uint256 amountRefundable = _amount;\n        uint256 ethBal = address(this).balance;\n        // we need to unwrap some WETH in this case.\n        if (ethBal < _amount) {\n            IWETH9 weth9 = IWETH9(LibVaultStorage.ds().weth);\n            uint256 balanceWETH9 = weth9.balanceOf(address(this));\n            uint256 toUnwrap = _amount - ethBal;\n            // this should not happen, but if it does, we should take what we can instead of reverting\n            if (toUnwrap > balanceWETH9) {\n                weth9.withdraw(balanceWETH9);\n                amountRefundable = amountRefundable - toUnwrap - balanceWETH9;\n            } else {\n                weth9.withdraw(toUnwrap);\n            }\n        }\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory result) = _dst.call{\n            value: amountRefundable\n        }(EMPTY_BYTES);\n        if (!success) {\n            revert GasRefundFailed(_dst);\n        }\n        emit GasRefunded(\n            LibVaultStorage.ds().paymaster,\n            _dst,\n            amountRefundable,\n            _amount - amountRefundable,\n            result\n        );\n    }\n\n    function callSubVault(\n        address _subvault,\n        address _target,\n        bytes calldata _data\n    ) external onlyAuthorised {\n        SecurityFacet sf = SecurityFacet(LibVaultStorage.ds().voyage);\n        if (\n            !sf.isAuthorised(\n                msg.sender,\n                _subvault,\n                ISubvault(address(0)).execute.selector\n            )\n        ) {\n            revert UnAuthorised();\n        }\n\n        ISubvault(_subvault).execute(_target, _data);\n    }\n\n    function collectionInitialized(address _collection)\n        external\n        view\n        returns (bool)\n    {\n        VaultFacet vf = VaultFacet(LibVaultStorage.ds().voyage);\n        return vf.collectionInitialized(_collection);\n    }\n\n    /// @notice Update subvault's owner\n    /// @param _subvault The address of the subvaault\n    /// @param _newOwner The address of the new owner\n    function updateSubvaultOwner(address _subvault, address _newOwner)\n        external\n        onlyAuthorised\n    {\n        address oldOwner = LibVaultStorage.ds().subvaultOwnerIndex[_subvault];\n        if (oldOwner == address(0)) {\n            revert InvalidSubvaultAddress(_subvault);\n        }\n        ISubvault(_subvault).updateOwner(_newOwner);\n        LibVaultStorage.ds().subvaultOwnerIndex[_subvault] = _newOwner;\n        LibVaultStorage.ds().ownerSubvaultIndex[_newOwner] = _subvault;\n        delete LibVaultStorage.ds().ownerSubvaultIndex[oldOwner];\n    }\n\n    /// @notice Pause sub vault\n    /// @param _subvault The address of the subvault\n    function pauseSubvault(address _subvault) external {\n        if (LibVaultStorage.ds().subvaultOwnerIndex[_subvault] == address(0)) {\n            revert InvalidSubvaultAddress(_subvault);\n        }\n        LibVaultStorage.ds().subvaultStatusIndex[_subvault] = true;\n    }\n\n    /// @notice Uppause the sub vault\n    /// @param _subvault The address of the subvault\n    function unpauseSubvault(address _subvault) external {\n        if (LibVaultStorage.ds().subvaultOwnerIndex[_subvault] == address(0)) {\n            revert InvalidSubvaultAddress(_subvault);\n        }\n        LibVaultStorage.ds().subvaultStatusIndex[_subvault] = false;\n    }\n\n    function onERC721Transferred(\n        address _collection,\n        uint256 _tokenId,\n        address _src,\n        address _dst\n    ) external {\n        if (\n            msg.sender != address(this) &&\n            LibVaultStorage.ds().subvaultOwnerIndex[msg.sender] == address(0)\n        ) {\n            revert InvalidTransfer(\"invalid sender\");\n        }\n        if (\n            LibVaultStorage.ds().custodyIndex[_collection][_tokenId].owner !=\n            address(0)\n        ) {\n            revert InvalidTransfer(\"invalid token id\");\n        }\n        LibVaultStorage.ds().custodyIndex[_collection][_tokenId].owner = _src;\n        LibVaultStorage.ds().tokenSet[_collection].push(_tokenId);\n    }\n\n    /// @notice Called by erc721 contract or sub vaults\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4 ret) {\n        VaultFacet vf = VaultFacet(LibVaultStorage.ds().voyage);\n        // todo\n        return this.onERC721Received.selector;\n    }\n\n    /// @notice Should return whether the signature provided is valid for the provided data\n    /// @param hash      Hash of the data to be signed\n    /// @param signature Signature byte array associated with _data\n    function isValidSignature(bytes32 hash, bytes memory signature)\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        address sender = recoverSigner(hash, signature);\n        if (LibVaultStorage.ds().user == sender) {\n            return 0x1626ba7e;\n        }\n        return 0xffffffff;\n    }\n\n    /// @notice Recover the signer of hash, assuming it's an EOA account\n    /// @dev Only for EthSign signatures\n    /// @param _hash       Hash of message that was signed\n    /// @param _signature  Signature encoded as (bytes32 r, bytes32 s, uint8 v)\n    function recoverSigner(bytes32 _hash, bytes memory _signature)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(\n            _signature.length == 65,\n            \"SignatureValidator#recoverSigner: invalid signature length\"\n        );\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(_signature, 32))\n            s := mload(add(_signature, 64))\n            v := byte(0, mload(add(_signature, 96)))\n        }\n\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        //\n        // Source OpenZeppelin\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol\n\n        if (\n            uint256(s) >\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n        ) {\n            revert(\n                \"SignatureValidator#recoverSigner: invalid signature 's' value\"\n            );\n        }\n\n        if (v != 27 && v != 28) {\n            revert(\n                \"SignatureValidator#recoverSigner: invalid signature 'v' value\"\n            );\n        }\n\n        // Recover ECDSA signer\n        signer = ecrecover(\n            keccak256(\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\n            ),\n            v,\n            r,\n            s\n        );\n\n        // Prevent signer from being 0x0\n        require(\n            signer != address(0x0),\n            \"SignatureValidator#recoverSigner: INVALID_SIGNER\"\n        );\n\n        return signer;\n    }\n\n    receive() external payable {}\n\n    /// @notice Get sub vault address of a specific user\n    /// @param _owner The address of the user\n    function getSubvaultOf(address _owner) public view returns (address) {\n        return LibVaultStorage.ds().ownerSubvaultIndex[_owner];\n    }\n\n    /// @notice Get sub vault's address\n    /// @param _subvault The address of the subvault\n    function getSubvaultStatus(address _subvault) public view returns (bool) {\n        return LibVaultStorage.ds().subvaultStatusIndex[_subvault];\n    }\n\n    /// @notice Get token status\n    /// @param _collection The address of the ERC721 contract\n    /// @param _tokenId Token id\n    function getTokenStatus(address _collection, uint256 _tokenId)\n        public\n        view\n        returns (CustodyData memory)\n    {\n        return LibVaultStorage.ds().custodyIndex[_collection][_tokenId];\n    }\n\n    /// @notice Get token list owned by this vault\n    /// @param _collection The address of the ERC721 contract\n    function getTokensOwned(address _collection)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return LibVaultStorage.ds().tokenSet[_collection];\n    }\n\n    function _isPaymaster(address _src) internal view returns (bool) {\n        return _src == LibVaultStorage.ds().paymaster;\n    }\n\n    error GasRefundFailed(address _paymaster);\n    error UnAuthorised();\n    error InvalidSubvaultAddress(address subvault);\n    error InvalidTransfer(string reason);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "contracts/voyage/facets/VaultFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {UpgradeableBeacon} from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {BeaconProxy} from \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport {LibAppStorage, AppStorage, Storage, VaultConfig, NFTInfo, DiamondFacet, ReserveConfigurationMap} from \"../libraries/LibAppStorage.sol\";\nimport {LibVault} from \"../libraries/LibVault.sol\";\nimport {LibSecurity} from \"../libraries/LibSecurity.sol\";\nimport {LibReserveConfiguration} from \"../libraries/LibReserveConfiguration.sol\";\nimport {IVault} from \"../../vault/Vault.sol\";\nimport {IDiamondVersionFacet, Snapshot} from \"../interfaces/IDiamondVersionFacet.sol\";\nimport {IDiamondCut} from \"../../shared/diamond/interfaces/IDiamondCut.sol\";\nimport {DiamondCutFacet} from \"../../shared/diamond/facets/DiamondCutFacet.sol\";\nimport {DiamondVersionFacet} from \"./DiamondVersionFacet.sol\";\n\ncontract VaultFacet is Storage, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using LibReserveConfiguration for ReserveConfigurationMap;\n    /* --------------------------------- events --------------------------------- */\n    event VaultCreated(address _vault, address _owner, uint256 _numVaults);\n    event VaultMarginCredited(\n        address indexed _vault,\n        address indexed _asset,\n        address _sponsor,\n        uint256 _amount\n    );\n    event VaultMarginRedeemed(\n        address indexed _vault,\n        address indexed _asset,\n        address _sponsor,\n        uint256 _amount\n    );\n\n    /* ----------------------------- admin interface ---------------------------- */\n    function createVault(address _user, bytes20 _salt) external authorised {\n        bytes memory data = getEncodedVaultInitData(_user);\n        bytes32 newsalt = newSalt(_salt, _user);\n        address vaultBeaconProxy;\n        bytes memory initCode = abi.encodePacked(\n            type(BeaconProxy).creationCode,\n            abi.encode(vaultBeacon(), data)\n        );\n        assembly {\n            vaultBeaconProxy := create2(\n                0,\n                add(initCode, 0x20),\n                mload(initCode),\n                newsalt\n            )\n        }\n        if (vaultBeaconProxy == address(0)) {\n            revert FailedDeployVault();\n        }\n        uint256 numVaults = LibVault.recordVault(_user, vaultBeaconProxy);\n        bytes4[] memory sigs = new bytes4[](1);\n        sigs[0] = IVault(address(0)).execute.selector;\n        LibSecurity.grantPermissions(\n            LibAppStorage.ds().auth,\n            address(this),\n            vaultBeaconProxy,\n            sigs\n        );\n        emit VaultCreated(vaultBeaconProxy, _user, numVaults);\n    }\n\n    /* ---------------------- vault configuration interface --------------------- */\n\n    function setVaultBeacon(address _impl) external authorised {\n        LibVault.setVaultBeacon(_impl);\n    }\n\n    /* ---------------------- user interface --------------------- */\n    function withdrawNFT(\n        address _vault,\n        address _collection,\n        uint256 _tokenId\n    ) external nonReentrant {\n        if (LibVault.getVaultAddress(_msgSender()) != _vault) {\n            revert InvalidVaultCall();\n        }\n        if (LibAppStorage.ds().nftIndex[_collection][_tokenId].isCollateral) {\n            revert InvalidWithdrawal();\n        }\n        delete LibAppStorage.ds().nftIndex[_collection][_tokenId];\n        bytes4 selector = IERC721(_collection).transferFrom.selector;\n        bytes memory param = abi.encode(_vault, _msgSender(), _tokenId);\n        bytes memory data = abi.encodePacked(selector, param);\n        bytes memory encodedData = abi.encode(_collection, data);\n        IVault(_vault).execute(encodedData);\n    }\n\n    function transferReserve(\n        address _vault,\n        address _currency,\n        address _to,\n        uint256 _amount\n    ) external nonReentrant {\n        if (LibVault.getVaultAddress(_msgSender()) != _vault) {\n            revert InvalidVaultCall();\n        }\n        bytes4 selector = IERC20(_currency).transferFrom.selector;\n        bytes memory param = abi.encode(_vault, _to, _amount);\n        bytes memory data = abi.encodePacked(selector, param);\n        bytes memory encodedData = abi.encode(_currency, data);\n        IVault(_vault).execute(encodedData);\n    }\n\n    /* ---------------------- view functions --------------------- */\n    function computeCounterfactualAddress(address _user, bytes20 _salt)\n        external\n        view\n        returns (address)\n    {\n        bytes memory data = getEncodedVaultInitData(_user);\n        bytes memory initCode = abi.encodePacked(\n            type(BeaconProxy).creationCode,\n            abi.encode(vaultBeacon(), data)\n        );\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                bytes1(0xff),\n                address(this),\n                newSalt(_salt, _user),\n                keccak256(initCode)\n            )\n        );\n        return address(uint160(uint256(hash)));\n    }\n\n    function collectionInitialized(address _collection)\n        external\n        view\n        returns (bool)\n    {\n        return LibAppStorage.ds()._reserveData[_collection].initialized;\n    }\n\n    function newSalt(bytes20 _salt, address _owner)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encodePacked(keccak256(abi.encodePacked(_owner)), _salt)\n            );\n    }\n\n    function vaultBeacon() public view returns (address) {\n        return LibVault.vaultBeacon();\n    }\n\n    function subVaultBeacon() public view returns (address) {\n        return LibVault.subVaultBeacon();\n    }\n\n    function getVaultAddr(address _user) external view returns (address) {\n        return LibVault.getVaultAddress(_user);\n    }\n\n    function getEncodedVaultInitData(address _user)\n        internal\n        view\n        returns (bytes memory)\n    {\n        bytes memory data = abi.encodeWithSelector(\n            IVault(address(0)).initialize.selector,\n            address(this),\n            _user,\n            LibAppStorage.ds().paymaster,\n            LibAppStorage.ds().WETH9\n        );\n        return data;\n    }\n}\n\n/* --------------------------------- errors -------------------------------- */\nerror InvalidVaultCall();\nerror FailedDeployVault();\nerror InvalidWithdrawal();\n"
    },
    "contracts/voyage/facets/SecurityFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {Storage, Authorisation, LibAppStorage} from \"../libraries/LibAppStorage.sol\";\nimport {LibSecurity} from \"../libraries/LibSecurity.sol\";\nimport {VaultFacet} from \"./VaultFacet.sol\";\n\ncontract SecurityFacet is Storage {\n    using LibSecurity for Authorisation;\n\n    event Paused(address account);\n    event Unpaused(address account);\n\n    function paused() public view returns (bool) {\n        return LibAppStorage.ds()._paused;\n    }\n\n    function pause() public authorised {\n        LibAppStorage.ds()._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    function unpause() public authorised {\n        LibAppStorage.ds()._paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    function grantRole(\n        address user,\n        uint8 role,\n        bool enabled\n    ) public authorised {\n        LibSecurity.grantRole(LibAppStorage.ds().auth, user, role, enabled);\n    }\n\n    function grantRolePermission(\n        uint8 role,\n        address target,\n        bytes4 sig\n    ) public authorised {\n        LibSecurity.grantRolePermission(\n            LibAppStorage.ds().auth,\n            role,\n            target,\n            sig\n        );\n    }\n\n    function revokeRolePermission(\n        uint8 role,\n        address target,\n        bytes4 sig\n    ) public authorised {\n        LibSecurity.revokeRolePermission(\n            LibAppStorage.ds().auth,\n            role,\n            target,\n            sig\n        );\n    }\n\n    function grantPermission(\n        address src,\n        address dst,\n        bytes4 sig\n    ) public authorised {\n        LibSecurity.grantPermission(LibAppStorage.ds().auth, src, dst, sig);\n    }\n\n    function revokePermission(\n        address src,\n        address dst,\n        bytes4 sig\n    ) public authorised {\n        LibSecurity.revokePermission(LibAppStorage.ds().auth, src, dst, sig);\n    }\n\n    function isAuthorisedInbound(address src, bytes4 sig)\n        public\n        returns (bool)\n    {\n        return\n            LibSecurity.isAuthorisedInbound(LibAppStorage.ds().auth, src, sig);\n    }\n\n    function isAuthorisedOutbound(address dst, bytes4 sig)\n        public\n        returns (bool)\n    {\n        return\n            LibSecurity.isAuthorisedOutbound(LibAppStorage.ds().auth, dst, sig);\n    }\n\n    function isAuthorised(\n        address src,\n        address dst,\n        bytes4 sig\n    ) public returns (bool) {\n        return LibSecurity.isAuthorised(LibAppStorage.ds().auth, src, dst, sig);\n    }\n\n    function isTrustedForwarder(address _forwarder) public view returns (bool) {\n        return LibSecurity.isTrustedForwarder(_forwarder);\n    }\n}\n"
    },
    "contracts/shared/interfaces/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nabstract contract IWETH9 is IERC20 {\n    /// @notice Deposit ether to get wrapped ether\n    function deposit() external payable virtual;\n\n    /// @notice Withdraw wrapped ether to get ether\n    function withdraw(uint256) external virtual;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "contracts/voyage/libraries/LibAppStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {DSRoles} from \"../auth/DSRoles.sol\";\nimport {DSGuard} from \"../auth/DSGuard.sol\";\nimport {LibSecurity} from \"./LibSecurity.sol\";\nimport {UpgradeableBeacon} from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport {Snapshot} from \"../interfaces/IDiamondVersionFacet.sol\";\nimport {IVaultFactory} from \"../interfaces/IVaultFactory.sol\";\nimport {IDiamondCut} from \"../../shared/diamond/interfaces/IDiamondCut.sol\";\nimport {IDiamondLoupe} from \"../../shared/diamond/interfaces/IDiamondLoupe.sol\";\nimport {DiamondCutFacet} from \"../../shared/diamond/facets/DiamondCutFacet.sol\";\nimport {IWETH9} from \"../../shared/facets/PaymentsFacet.sol\";\n\nenum Tranche {\n    JUNIOR,\n    SENIOR\n}\n\nstruct ReserveData {\n    //stores the reserve configuration\n    ReserveConfigurationMap configuration;\n    uint256 currentBorrowRate;\n    //the decimals of the reserve asset\n    uint256 decimals;\n    address interestRateStrategyAddress;\n    address juniorDepositTokenAddress;\n    address seniorDepositTokenAddress;\n    uint40 juniorLastUpdateTimestamp;\n    uint40 seniorLastUpdateTimestamp;\n    address currency;\n    UpgradeableBeacon priceOracle;\n    bool initialized;\n}\n\nstruct ReserveConfigurationMap {\n    //bit 0-15: liquidation bonus (uint16)\n    //bit 16-23: decimals (uint8)\n    //bit 24: reserve is active\n    //bit 25: reserve is frozen\n    //bit 26: borrowing is enabled\n    //bit 27: reserved\n    //bit 28-63: min margin (uint36)\n    //bit 64-99: max margin (uint36)\n    //bit 100-115: margin requirement (uint16)\n    //bit 116-131: income ratio (uint16)\n    //bit 132-139: instalment interval (uint8)\n    //bit 140-155: loan term (uint16)\n    //bit 156-163: repayment grace period (uint8)\n    //bit 164-255: unused\n    uint256 data;\n}\n\nstruct PMT {\n    uint256 principal;\n    uint256 interest;\n    uint256 pmt;\n}\n\nstruct RepaymentData {\n    uint256 principal;\n    uint256 interest;\n    // principal + interest\n    uint256 total;\n    uint40 paidAt;\n    bool isLiquidated;\n}\n\nstruct Loan {\n    uint256 principal;\n    uint256 interest;\n    // the total intended length of the loan in seconds - e.g., 90 days\n    uint256 term;\n    // the repayment interval - e.g., 30 days\n    uint256 epoch;\n    // number of instalments, term / epoch\n    uint256 nper;\n    // the amount to be repaid per instalment (principal + interest)\n    PMT pmt;\n    // the borrow rate of this loan\n    uint256 apr;\n    uint256 borrowAt;\n    // next due data\n    uint256 nextPaymentDue;\n    // principal paid\n    uint256 totalPrincipalPaid;\n    // interest paid\n    uint256 totalInterestPaid;\n    RepaymentData[] repayments;\n    // size pf repayments\n    uint256 paidTimes;\n    uint256[] collateral;\n}\n\nstruct LoanList {\n    uint256 head;\n    uint256 tail;\n}\n\nstruct BorrowData {\n    uint256 paidLoanNumber;\n    // next draw down number\n    uint256 nextLoanNumber;\n    uint256 totalPrincipal;\n    uint256 totalInterest;\n    uint256 mapSize;\n    mapping(uint256 => Loan) loans;\n}\n\nstruct BorrowState {\n    uint256 totalDebt;\n    uint256 totalInterest;\n    uint256 avgBorrowRate;\n    mapping(address => uint256) repaidTimes;\n}\n\nstruct VaultConfig {\n    address currency;\n    uint256 minMargin;\n    uint256 maxMargin;\n    uint256 marginRequirement;\n    bool overrideGlobal;\n}\n\nstruct ProtocolFee {\n    address treasuryAddress;\n    uint256 cutRatio; // express in Ray\n}\n\nstruct VaultData {\n    uint256 totalDebt;\n    LoanList loanList;\n    uint256 totalMargin;\n    uint256 withdrawableSecurityDeposit;\n    uint256 creditLimit;\n    uint256 spendableBalance;\n    uint256 gav;\n    uint256 ltv;\n    uint256 healthFactor;\n}\n\nstruct Authorisation {\n    DSRoles rbac;\n    DSGuard acl;\n}\n\nstruct NFTInfo {\n    bool isCollateral; // this determines whether the NFT can be transferred out of the Vault.\n    address collection;\n    uint256 tokenId;\n    address currency; // record what currency was used to pay\n    uint256 price; // price in ETH\n}\n\nstruct ERC721AssetInfo {\n    address marketplace;\n    address erc20Addr;\n}\n\nstruct UpgradeParam {\n    mapping(address => mapping(bytes4 => address)) existingSelectorFacetMap;\n    mapping(address => bytes4[]) existingSelectors;\n    mapping(address => mapping(bytes4 => bool)) newSelectorSet;\n    mapping(address => bytes4[]) newSelectors;\n    mapping(address => IDiamondCut.FacetCut[]) facetCuts;\n    mapping(address => uint256) facetCutSize;\n    mapping(uint256 => bytes4[]) selectorsAdded;\n    mapping(uint256 => bytes4[]) selectorsReplaced;\n    mapping(uint256 => bytes4[]) selectorsRemoved;\n}\n\nstruct DiamondFacet {\n    address diamondCutFacet;\n    address diamondLoupeFacet;\n    address ownershipFacet;\n}\n\nstruct MarketPlaceData {\n    address adapterAddr;\n}\n\nstruct AppStorage {\n    /* -------------------------------- plumbing -------------------------------- */\n    mapping(bytes32 => address) _addresses;\n    /* -------------------------------- liquidity ------------------------------- */\n    UpgradeableBeacon seniorDepositTokenBeacon;\n    UpgradeableBeacon juniorDepositTokenBeacon;\n    // mapping of collection address to reserve data\n    mapping(address => ReserveData) _reserveData;\n    // List of reserves as a map (reserveId => reserve)\n    mapping(uint256 => address) _reserveList;\n    uint16 _reservesCount;\n    IWETH9 WETH9;\n    /* ---------------------------------- debt ---------------------------------- */\n    // collection => currency => vault => data\n    mapping(address => mapping(address => mapping(address => BorrowData))) _borrowData;\n    mapping(address => mapping(address => BorrowState)) _borrowState;\n    bool _paused;\n    /* ---------------------------------- vault --------------------------------- */\n    UpgradeableBeacon subVaultBeacon;\n    UpgradeableBeacon vaultBeacon;\n    DiamondFacet diamondFacet;\n    IVaultFactory vaultFactory;\n    address[] vaults;\n    // mapping of vault owner to vault instance address\n    mapping(address => address) vaultMap;\n    // marketplace address => marketplace type\n    mapping(address => MarketPlaceData) marketPlaceData;\n    // collection => tokenId => info\n    mapping(address => mapping(uint256 => NFTInfo)) nftIndex;\n    uint256 currentVersion;\n    mapping(uint256 => Snapshot) snapshotMap;\n    /* ---------------------------------- security --------------------------------- */\n    Authorisation auth;\n    address trustedForwarder; // GSN IERC2771 receiver\n    address paymaster; // VoyagePaymaster address\n    /* --------------------------------- protocol fee ------------------------------ */\n    ProtocolFee protocolFee;\n    /* ---------------------------------- helper --------------------------------- */\n    // mapping of sender address to helper maps, need to clear after computing\n    UpgradeParam upgradeParam;\n}\n\nlibrary LibAppStorage {\n    function ds() internal pure returns (AppStorage storage ds) {\n        bytes32 storagePosition = keccak256(\"diamond.storage.voyage\");\n        assembly {\n            ds.slot := storagePosition\n        }\n    }\n\n    function cleanUpgradeParam() internal {\n        UpgradeParam storage s = ds().upgradeParam;\n        for (uint256 i = 0; i < s.existingSelectors[msg.sender].length; ) {\n            delete s.existingSelectorFacetMap[msg.sender][\n                s.existingSelectors[msg.sender][i]\n            ];\n            unchecked {\n                ++i;\n            }\n        }\n        delete s.existingSelectors[msg.sender];\n\n        for (uint256 i = 0; i < s.newSelectors[msg.sender].length; ) {\n            delete s.newSelectorSet[msg.sender][s.newSelectors[msg.sender][i]];\n            unchecked {\n                ++i;\n            }\n        }\n        delete s.newSelectors[msg.sender];\n\n        delete s.facetCuts[msg.sender];\n        delete s.facetCutSize[msg.sender];\n    }\n}\n\ncontract Storage {\n    modifier whenPaused() {\n        require(LibAppStorage.ds()._paused, \"Pausable: not paused\");\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!LibAppStorage.ds()._paused, \"Pausable: paused\");\n        _;\n    }\n\n    modifier authorised() {\n        require(auth(), \"call is not authorised\");\n        _;\n    }\n\n    function auth() internal view returns (bool) {\n        return\n            LibSecurity.isAuthorisedInbound(\n                LibAppStorage.ds().auth,\n                msg.sender,\n                msg.sig\n            );\n    }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal view virtual returns (address ret) {\n        if (\n            msg.data.length >= 20 && LibSecurity.isTrustedForwarder(msg.sender)\n        ) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            ret = msg.sender;\n        }\n    }\n\n    /**\n     * return the msg.data of this call.\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n     * of the msg.data - so this method will strip those 20 bytes off.\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\n     * should be used in the contract instead of msg.data, where this difference matters.\n     */\n    function _msgData() internal view virtual returns (bytes calldata ret) {\n        if (\n            msg.data.length >= 20 && LibSecurity.isTrustedForwarder(msg.sender)\n        ) {\n            return msg.data[0:msg.data.length - 20];\n        } else {\n            return msg.data;\n        }\n    }\n\n    function computeSnapshotChecksum(Snapshot memory snapshot)\n        internal\n        view\n        returns (bytes32)\n    {\n        bytes memory data;\n        for (uint256 i = 0; i < snapshot.facets.length; ) {\n            IDiamondLoupe.Facet memory facet = snapshot.facets[i];\n            data = bytes.concat(data, abi.encodePacked(facet.facetAddress));\n            for (uint256 j = 0; j < facet.functionSelectors.length; j++) {\n                data = bytes.concat(data, facet.functionSelectors[j]);\n            }\n            bytes32 facetCodeHash;\n            address facetAddress = facet.facetAddress;\n            assembly {\n                facetCodeHash := extcodehash(facetAddress)\n            }\n            data = bytes.concat(data, facetCodeHash);\n            unchecked {\n                ++i;\n            }\n        }\n        return keccak256(data);\n    }\n\n    function diamondCut(address vault) internal {\n        uint256 currentVersion = LibAppStorage.ds().currentVersion;\n        Snapshot memory snapshot = LibAppStorage.ds().snapshotMap[\n            currentVersion\n        ];\n        IDiamondCut.FacetCut[] memory facetCuts = new IDiamondCut.FacetCut[](\n            snapshot.facets.length\n        );\n        for (uint256 i = 0; i < snapshot.facets.length; ) {\n            address facetAddr = snapshot.facets[i].facetAddress;\n            bytes4[] memory selectors = snapshot.facets[i].functionSelectors;\n            facetCuts[i].facetAddress = facetAddr;\n            facetCuts[i].functionSelectors = selectors;\n            facetCuts[i].action = IDiamondCut.FacetCutAction.Add;\n            unchecked {\n                ++i;\n            }\n        }\n        DiamondCutFacet(vault).diamondCut(\n            facetCuts,\n            snapshot.init,\n            snapshot.initArgs\n        );\n    }\n}\n"
    },
    "contracts/voyage/libraries/LibVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {BeaconProxy} from \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport {UpgradeableBeacon} from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {LibAppStorage, AppStorage, BorrowData, VaultConfig, NFTInfo, DiamondFacet, ReserveConfigurationMap} from \"./LibAppStorage.sol\";\nimport {LibReserveConfiguration} from \"./LibReserveConfiguration.sol\";\nimport {WadRayMath} from \"../../shared/libraries/WadRayMath.sol\";\nimport {PercentageMath} from \"../../shared/libraries/PercentageMath.sol\";\nimport {LogarithmMath} from \"../../shared/libraries/LogarithmMath.sol\";\n\nlibrary LibVault {\n    using WadRayMath for uint256;\n    using PercentageMath for uint256;\n    using LibReserveConfiguration for ReserveConfigurationMap;\n\n    function recordVault(address _owner, address _vault)\n        internal\n        returns (uint256)\n    {\n        AppStorage storage s = LibAppStorage.ds();\n        require(s.vaultMap[_owner] == address(0), \"one vault per owner\");\n        s.vaults.push(_vault);\n        LibAppStorage.ds().vaultMap[_owner] = _vault;\n        return (s.vaults.length);\n    }\n\n    function setVaultBeacon(address _impl) internal {\n        AppStorage storage s = LibAppStorage.ds();\n        s.vaultBeacon = new UpgradeableBeacon(_impl);\n    }\n\n    /* ----------------------------- view functions ----------------------------- */\n    function vaultBeacon() internal view returns (address) {\n        AppStorage storage s = LibAppStorage.ds();\n        return address(s.vaultBeacon);\n    }\n\n    function subVaultBeacon() internal view returns (address) {\n        AppStorage storage s = LibAppStorage.ds();\n        return address(s.subVaultBeacon);\n    }\n\n    function getVaultAddress(address _owner) internal view returns (address) {\n        return LibAppStorage.ds().vaultMap[_owner];\n    }\n\n    function getVaultDebt(\n        address _collection,\n        address _currency,\n        address _vault\n    ) internal view returns (uint256, uint256) {\n        AppStorage storage s = LibAppStorage.ds();\n        BorrowData storage borrowData = s._borrowData[_collection][_currency][\n            _vault\n        ];\n        return (borrowData.totalPrincipal, borrowData.totalInterest);\n    }\n\n    function getDiamondFacets() internal view returns (DiamondFacet memory) {\n        AppStorage storage s = LibAppStorage.ds();\n        return s.diamondFacet;\n    }\n\n    /**\n     * @dev Get credit limit for a specific reserve\n     * @param _vault vault address\n     * @return _collection collection address\n     **/\n    function getCreditLimit(\n        address _vault,\n        address _collection,\n        address _currency,\n        uint256 _fv\n    ) internal view returns (uint256) {\n        AppStorage storage s = LibAppStorage.ds();\n        uint256 rep = s._borrowState[_collection][_currency].repaidTimes[\n            _vault\n        ];\n        uint256 scaledRep = (rep + 1) * 1e18;\n        uint256 multiplier = LogarithmMath.log2(scaledRep) + 1;\n        return _fv * multiplier;\n    }\n}\n"
    },
    "contracts/voyage/libraries/LibSecurity.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {LibAppStorage, AppStorage, Authorisation} from \"./LibAppStorage.sol\";\n\nlibrary LibSecurity {\n    function isAuthorised(\n        Authorisation storage auth,\n        address src,\n        address dst,\n        bytes4 selector\n    ) internal view returns (bool) {\n        return\n            auth.rbac.canCall(src, dst, selector) ||\n            auth.acl.canCall(src, dst, selector);\n    }\n\n    function isAuthorisedInbound(\n        Authorisation storage auth,\n        address src,\n        bytes4 selector\n    ) internal view returns (bool) {\n        // s.security.acl/rbac is an instance ds-roles and implements DSAuthority interface\n        return\n            auth.rbac.canCall(src, address(this), selector) ||\n            auth.acl.canCall(src, address(this), selector);\n    }\n\n    function isAuthorisedOutbound(\n        Authorisation storage auth,\n        address dst,\n        bytes4 selector\n    ) internal view returns (bool) {\n        // s.security.acl/rbac is an instance ds-guard and implements DSAuthority interface\n        return\n            auth.rbac.canCall(msg.sender, dst, selector) ||\n            auth.acl.canCall(msg.sender, dst, selector);\n    }\n\n    // role can be a enum, but cast to uint8 before calling grantRole\n    function grantRole(\n        Authorisation storage auth,\n        address user,\n        uint8 role,\n        bool enabled\n    ) internal {\n        // grant role\n        auth.rbac.setUserRole(user, role, enabled);\n    }\n\n    function grantRolePermission(\n        Authorisation storage auth,\n        uint8 role,\n        address target,\n        bytes4 sig\n    ) internal {\n        // give a role a permission\n        auth.rbac.setRoleCapability(role, target, sig, true);\n    }\n\n    function revokeRolePermission(\n        Authorisation storage auth,\n        uint8 role,\n        address target,\n        bytes4 sig\n    ) internal {\n        // revoke a role permission\n        auth.rbac.setRoleCapability(role, target, sig, false);\n    }\n\n    function grantPermissions(\n        Authorisation storage auth,\n        address src,\n        address dst,\n        bytes4[] memory sig\n    ) internal {\n        for (uint256 i = 0; i < sig.length; i++) {\n            grantPermission(auth, src, dst, sig[i]);\n        }\n    }\n\n    function grantPermission(\n        Authorisation storage auth,\n        address src,\n        address dst,\n        bytes4 sig\n    ) internal {\n        // allow src to call dst.sig\n        auth.acl.permit(src, dst, sig);\n    }\n\n    function revokePermission(\n        Authorisation storage auth,\n        address src,\n        address dst,\n        bytes4 sig\n    ) internal {\n        auth.acl.forbid(src, dst, sig);\n    }\n\n    function getTrustedForwarder() internal view returns (address) {\n        return LibAppStorage.ds().trustedForwarder;\n    }\n\n    function setTrustedForwarder(address _forwarder) internal {\n        LibAppStorage.ds().trustedForwarder = _forwarder;\n    }\n\n    function isTrustedForwarder(address _forwarder)\n        internal\n        view\n        returns (bool)\n    {\n        return LibAppStorage.ds().trustedForwarder == _forwarder;\n    }\n}\n"
    },
    "contracts/voyage/libraries/LibReserveConfiguration.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {ReserveData, ReserveConfigurationMap, AppStorage, LibAppStorage} from \"./LibAppStorage.sol\";\n\n/**\n * @title ReserveConfiguration library\n * @author Voyage\n * @notice Implements the bitmap logic to handle the reserve configuration, inspired by Aave\n **/\nlibrary LibReserveConfiguration {\n    uint256 constant internal LIQUIDATION_BONUS_MASK =  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\n    uint256 constant internal DECIMAL_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFF; // prettier-ignore\n    uint256 constant internal ACTIVE_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFF; // prettier-ignore\n    uint256 constant internal FROZEN_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFF; // prettier-ignore\n    uint256 constant internal BORROWING_ENABLE_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFF; // prettier-ignore\n    uint256 constant internal INCOME_RATIO_MASK =       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 constant internal LOAN_INTERVAL_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 constant internal LOAN_TERM_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n    uint256 constant internal GRACE_PERIOD_MASK =       0xFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\n\n    uint256 internal constant DECIMAL_MASK_BIT_POSITION = 16;\n    uint256 internal constant ACTIVE_MASK_BIT_POSITION = 24;\n    uint256 internal constant FROZEN_MASK_BIT_POSITION = 25;\n    uint256 internal constant BORROWING_ENABLE_MASK_POSITION = 26;\n    /// @dev bit 27 reserved\n    uint256 internal constant INCOME_RATIO_MASK_BIT_POSITION = 116;\n    uint256 internal constant LOAN_INTERVAL_MASK_BIT_POSITION = 132;\n    uint256 internal constant LOAN_TERM_MASK_BIT_POSITION = 140;\n    uint256 internal constant GRACE_PERIOD_MASK_BIT_POSITION = 156;\n\n    uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535; // percentage\n    uint256 internal constant MAX_VALID_DECIMALS = 255;\n    uint256 internal constant MAX_VALID_INCOME_RATIO = 10000; // percentage, max 100%/10000 bps\n    uint256 internal constant MAX_VALID_LOAN_INTERVAL = 255; // days\n    uint256 internal constant MAX_VALID_LOAN_TERM = 65535; // days\n    uint256 internal constant MAX_VALID_GRACE_PERIOD = 255; // days\n\n    error InvalidLiquidationBonus();\n    error InvalidDecimals();\n    error InvalidIncomeRatio();\n    error InvalidLoanInterval();\n    error InvalidLoanTerm();\n    error InvalidGracePeriod();\n\n    event LiquidationConfigurationUpdated(\n        address indexed _asset,\n        uint256 _liquidationBonus\n    );\n\n    /* --------------------------- receiver functions --------------------------- */\n\n    /**\n     * Gets the configuration flags of the reserve\n     * @param self The reserve configuration\n     * @return The state flags representing active, frozen, borrowing enabled\n     **/\n    function getFlags(ReserveConfigurationMap memory self)\n        internal\n        pure\n        returns (\n            bool,\n            bool,\n            bool\n        )\n    {\n        uint256 dataLocal = self.data;\n\n        return (\n            (dataLocal & ~ACTIVE_MASK) != 0,\n            (dataLocal & ~FROZEN_MASK) != 0,\n            (dataLocal & ~BORROWING_ENABLE_MASK) != 0\n        );\n    }\n\n    function setLiquidationBonus(\n        ReserveConfigurationMap memory self,\n        uint256 liquidationBonus\n    ) internal pure {\n        if (liquidationBonus > MAX_VALID_LIQUIDATION_BONUS) {\n            revert InvalidLiquidationBonus();\n        }\n        self.data = (self.data & LIQUIDATION_BONUS_MASK) | liquidationBonus;\n    }\n\n    function getLiquidationBonus(ReserveConfigurationMap memory self)\n        internal\n        pure\n        returns (uint256)\n    {\n        return self.data & ~LIQUIDATION_BONUS_MASK;\n    }\n\n    function setDecimals(ReserveConfigurationMap memory self, uint256 _decimals)\n        internal\n        pure\n    {\n        if (_decimals > MAX_VALID_DECIMALS) {\n            revert InvalidDecimals();\n        }\n        self.data =\n            (self.data & DECIMAL_MASK) |\n            (_decimals << DECIMAL_MASK_BIT_POSITION);\n    }\n\n    function getDecimals(ReserveConfigurationMap memory self)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (self.data & ~DECIMAL_MASK) >> DECIMAL_MASK_BIT_POSITION;\n    }\n\n    /**\n     * @dev Gets the active state of the reserve\n     * @param self The reserve configuration\n     * @param active The active state\n     **/\n    function setActive(ReserveConfigurationMap memory self, bool active)\n        internal\n        pure\n    {\n        self.data =\n            (self.data & ACTIVE_MASK) |\n            (uint256(active ? 1 : 0) << ACTIVE_MASK_BIT_POSITION);\n    }\n\n    function getActive(ReserveConfigurationMap storage self)\n        internal\n        view\n        returns (bool)\n    {\n        return (self.data & ~ACTIVE_MASK) != 0;\n    }\n\n    function setIncomeRatio(ReserveConfigurationMap memory self, uint256 ratio)\n        internal\n        pure\n    {\n        if (ratio > MAX_VALID_INCOME_RATIO) {\n            revert InvalidIncomeRatio();\n        }\n\n        self.data =\n            (self.data & INCOME_RATIO_MASK) |\n            (ratio << INCOME_RATIO_MASK_BIT_POSITION);\n    }\n\n    function getIncomeRatio(ReserveConfigurationMap memory self)\n        internal\n        pure\n        returns (uint256)\n    {\n        return\n            (self.data & ~INCOME_RATIO_MASK) >> INCOME_RATIO_MASK_BIT_POSITION;\n    }\n\n    function setLoanInterval(\n        ReserveConfigurationMap memory self,\n        uint256 interval\n    ) internal pure {\n        if (interval > MAX_VALID_LOAN_INTERVAL) {\n            revert InvalidLoanInterval();\n        }\n        self.data =\n            (self.data & LOAN_INTERVAL_MASK) |\n            (interval << LOAN_INTERVAL_MASK_BIT_POSITION);\n    }\n\n    function setLoanTerm(ReserveConfigurationMap memory self, uint256 term)\n        internal\n        pure\n    {\n        if (term > MAX_VALID_LOAN_TERM) {\n            revert InvalidLoanTerm();\n        }\n        self.data =\n            (self.data & LOAN_TERM_MASK) |\n            (term << LOAN_TERM_MASK_BIT_POSITION);\n    }\n\n    function setGracePeriod(\n        ReserveConfigurationMap memory self,\n        uint256 numDays\n    ) internal pure {\n        if (numDays > MAX_VALID_GRACE_PERIOD) {\n            revert InvalidGracePeriod();\n        }\n        self.data =\n            (self.data & GRACE_PERIOD_MASK) |\n            (numDays << GRACE_PERIOD_MASK_BIT_POSITION);\n    }\n\n    function getBorrowParams(ReserveConfigurationMap memory self)\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        uint256 localData = self.data;\n        return (\n            (localData & ~LOAN_INTERVAL_MASK) >>\n                LOAN_INTERVAL_MASK_BIT_POSITION,\n            (localData & ~LOAN_TERM_MASK) >> LOAN_TERM_MASK_BIT_POSITION\n        );\n    }\n\n    function getLiquidationParams(ReserveConfigurationMap memory self)\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        uint256 localData = self.data;\n        return (\n            (localData & ~LIQUIDATION_BONUS_MASK),\n            (localData & ~GRACE_PERIOD_MASK) >> GRACE_PERIOD_MASK_BIT_POSITION\n        );\n    }\n\n    function getConfiguration(address _collection)\n        internal\n        view\n        returns (ReserveConfigurationMap memory)\n    {\n        AppStorage storage s = LibAppStorage.ds();\n        return s._reserveData[_collection].configuration;\n    }\n\n    function saveConfiguration(\n        address _collection,\n        ReserveConfigurationMap memory _conf\n    ) internal {\n        AppStorage storage s = LibAppStorage.ds();\n        s._reserveData[_collection].configuration = _conf;\n    }\n}\n"
    },
    "contracts/voyage/interfaces/IDiamondVersionFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IDiamondLoupe} from \"../../shared/diamond/interfaces/IDiamondLoupe.sol\";\n\nstruct Snapshot {\n    IDiamondLoupe.Facet[] facets;\n    address init; // address of InitDiamondVx\n    bytes initArgs; // abi encoded args to pass to InitDiamondVX\n}\n\ninterface IDiamondVersionFacet {\n    // clone should create a fresh Vault with the facets recorded in `Snapshot` of current version\n    function clone() external returns (address);\n\n    // increments `version` and stores snapshot in _snapshotMap\n    // these must be computed offchain, and called by protocol admin (including init args encoding)\n    function registerUpgrade(Snapshot memory _snapshot) external;\n\n    // return version number and snapshot hash\n    function currentVersion() external view returns (uint256, bytes32);\n\n    function isUpToDate(uint256 _version) external view returns (bool);\n\n    // returns the current snapshot\n    function getSnapshot() external view returns (Snapshot memory);\n}\n"
    },
    "contracts/shared/diamond/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {\n        Add,\n        Replace,\n        Remove\n    }\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "contracts/shared/diamond/facets/DiamondCutFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport \"../interfaces/IDiamondCut.sol\";\nimport \"../libraries/LibDiamond.sol\";\n\ncontract DiamondCutFacet is IDiamondCut {\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external override {\n        LibDiamond.enforceIsContractOwner();\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\n    }\n}\n"
    },
    "contracts/voyage/facets/DiamondVersionFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {Snapshot} from \"../interfaces/IDiamondVersionFacet.sol\";\nimport {AppStorage, Storage, LibAppStorage} from \"../libraries/LibAppStorage.sol\";\nimport {IDiamondLoupe} from \"../../shared/diamond/interfaces/IDiamondLoupe.sol\";\nimport {IDiamondCut} from \"../../shared/diamond/interfaces/IDiamondCut.sol\";\nimport {DiamondCutFacet} from \"../../shared/diamond/facets/DiamondCutFacet.sol\";\n\ncontract DiamondVersionFacet is Storage {\n    // increments `version` and stores snapshot in _snapshotMap\n    // these must be computed offchain, and called by protocol admin (including init args encoding)\n    function registerUpgrade(\n        address init,\n        bytes memory initArgs,\n        IDiamondLoupe.Facet[] memory facets\n    ) public authorised {\n        LibAppStorage.ds().currentVersion += 1;\n        uint256 version = LibAppStorage.ds().currentVersion;\n        LibAppStorage.ds().snapshotMap[version].init = init;\n        LibAppStorage.ds().snapshotMap[version].initArgs = initArgs;\n        for (uint256 i = 0; i < facets.length; ) {\n            LibAppStorage.ds().snapshotMap[version].facets.push(facets[i]);\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function getUpgrade(address _vault)\n        public\n        returns (IDiamondCut.FacetCut[] memory)\n    {\n        IDiamondCut.FacetCut[] storage facetCuts = LibAppStorage\n            .ds()\n            .upgradeParam\n            .facetCuts[msg.sender];\n        Snapshot memory snapshot = LibAppStorage.ds().snapshotMap[\n            LibAppStorage.ds().currentVersion\n        ];\n        IDiamondLoupe loupe = IDiamondLoupe(_vault);\n        IDiamondLoupe.Facet[] memory currentFacets = loupe.facets();\n\n        mapping(bytes4 => address)\n            storage existingSelectorFacetMap = LibAppStorage\n                .ds()\n                .upgradeParam\n                .existingSelectorFacetMap[msg.sender];\n        bytes4[] storage existingSelectors = LibAppStorage\n            .ds()\n            .upgradeParam\n            .existingSelectors[msg.sender];\n\n        mapping(bytes4 => bool) storage newSelectorSet = LibAppStorage\n            .ds()\n            .upgradeParam\n            .newSelectorSet[msg.sender];\n        bytes4[] storage newSelectors = LibAppStorage\n            .ds()\n            .upgradeParam\n            .newSelectors[msg.sender];\n\n        for (uint256 i = 0; i < currentFacets.length; ) {\n            IDiamondLoupe.Facet memory facet = currentFacets[i];\n            for (uint256 j = 0; j < facet.functionSelectors.length; ) {\n                bytes4 selector = facet.functionSelectors[j];\n                newSelectors.push(selector);\n                existingSelectorFacetMap[selector] = facet.facetAddress;\n                unchecked {\n                    ++j;\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        // at this point, we have to compute which facets to add/replace/delete\n        // the logic is identical to the deployment script in voyager_001.ts\n        // first, compute the selectors to add or replace\n        for (uint256 i = 0; i < snapshot.facets.length; ) {\n            IDiamondLoupe.Facet memory candidateFacet = snapshot.facets[i];\n            for (uint256 j = 0; j < candidateFacet.functionSelectors.length; ) {\n                bytes4 selector = candidateFacet.functionSelectors[j];\n                // add it to newSelectorSet\n                newSelectorSet[selector] = true;\n                address currentHostFacetAddress = existingSelectorFacetMap[\n                    selector\n                ];\n                if (currentHostFacetAddress != address(0)) {\n                    if (\n                        currentHostFacetAddress != candidateFacet.facetAddress\n                    ) {\n                        LibAppStorage\n                            .ds()\n                            .upgradeParam\n                            .selectorsReplaced[i]\n                            .push(selector);\n                    }\n                } else {\n                    LibAppStorage.ds().upgradeParam.selectorsAdded[i].push(\n                        selector\n                    );\n                }\n                unchecked {\n                    ++j;\n                }\n            }\n\n            if (LibAppStorage.ds().upgradeParam.selectorsAdded[i].length > 0) {\n                IDiamondCut.FacetCut memory facetCut;\n                facetCut.functionSelectors = LibAppStorage\n                    .ds()\n                    .upgradeParam\n                    .selectorsAdded[i];\n                facetCut.facetAddress = candidateFacet.facetAddress;\n                facetCut.action = IDiamondCut.FacetCutAction.Add;\n\n                facetCuts[\n                    LibAppStorage.ds().upgradeParam.facetCutSize[msg.sender]\n                ] = facetCut;\n                LibAppStorage.ds().upgradeParam.facetCutSize[msg.sender]++;\n\n                // clean storage right away\n                delete LibAppStorage.ds().upgradeParam.selectorsAdded[i];\n            }\n\n            if (\n                LibAppStorage.ds().upgradeParam.selectorsReplaced[i].length > 0\n            ) {\n                IDiamondCut.FacetCut memory facetCut;\n                facetCut.functionSelectors = LibAppStorage\n                    .ds()\n                    .upgradeParam\n                    .selectorsReplaced[i];\n                facetCut.facetAddress = candidateFacet.facetAddress;\n                facetCut.action = IDiamondCut.FacetCutAction.Replace;\n\n                facetCuts[\n                    LibAppStorage.ds().upgradeParam.facetCutSize[msg.sender]\n                ] = facetCut;\n                LibAppStorage.ds().upgradeParam.facetCutSize[msg.sender]++;\n\n                // clean storage right away\n                delete LibAppStorage.ds().upgradeParam.selectorsReplaced[i];\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        // now just get the XOR of existing and new selectors to find the removed set\n        for (uint256 i = 0; i < existingSelectors.length; ) {\n            if (!newSelectorSet[existingSelectors[i]]) {\n                LibAppStorage.ds().upgradeParam.selectorsRemoved[i].push(\n                    existingSelectors[i]\n                );\n            }\n\n            if (\n                LibAppStorage.ds().upgradeParam.selectorsRemoved[i].length > 0\n            ) {\n                IDiamondCut.FacetCut memory facetCut;\n                facetCut.functionSelectors = LibAppStorage\n                    .ds()\n                    .upgradeParam\n                    .selectorsRemoved[i];\n                facetCut.facetAddress = address(0);\n                facetCut.action = IDiamondCut.FacetCutAction.Remove;\n\n                facetCuts[\n                    LibAppStorage.ds().upgradeParam.facetCutSize[msg.sender]\n                ] = facetCut;\n                LibAppStorage.ds().upgradeParam.facetCutSize[msg.sender]++;\n\n                // clean storage right away\n                delete LibAppStorage.ds().upgradeParam.selectorsRemoved[i];\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        IDiamondCut.FacetCut[] memory ret = new IDiamondCut.FacetCut[](\n            LibAppStorage.ds().upgradeParam.facetCutSize[msg.sender]\n        );\n        for (\n            uint256 i = 0;\n            i < LibAppStorage.ds().upgradeParam.facetCutSize[msg.sender];\n\n        ) {\n            ret[i] = facetCuts[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        LibAppStorage.cleanUpgradeParam();\n\n        return ret;\n    }\n\n    function currentVersion() public view returns (uint256, bytes32) {\n        uint256 version = LibAppStorage.ds().currentVersion;\n        Snapshot memory snapshot = LibAppStorage.ds().snapshotMap[version];\n        return (version, computeSnapshotChecksum(snapshot));\n    }\n\n    function isUpToDate(uint256 _version) public view returns (bool) {\n        return _version == LibAppStorage.ds().currentVersion;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/voyage/auth/DSRoles.sol": {
      "content": "// roles.sol - roled based authentication\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// forked from: https://github.com/dapphub/ds-roles/blob/53d56949c0f98c9b5909df9c0d95025b67f3bb75/src/roles.sol\n\npragma solidity ^0.8.9;\n\nimport \"./DSAuth.sol\";\n\ncontract DSRoles is DSAuth, DSAuthority {\n    mapping(address => bool) _root_users;\n    mapping(address => bytes32) _user_roles;\n    mapping(address => mapping(bytes4 => bytes32)) _capability_roles;\n    mapping(address => mapping(bytes4 => bool)) _public_capabilities;\n\n    function getUserRoles(address who) public view returns (bytes32) {\n        return _user_roles[who];\n    }\n\n    function getCapabilityRoles(address code, bytes4 sig)\n        public\n        view\n        returns (bytes32)\n    {\n        return _capability_roles[code][sig];\n    }\n\n    function isUserRoot(address who) public view returns (bool) {\n        return _root_users[who];\n    }\n\n    function isCapabilityPublic(address code, bytes4 sig)\n        public\n        view\n        returns (bool)\n    {\n        return _public_capabilities[code][sig];\n    }\n\n    function hasUserRole(address who, uint8 role) public view returns (bool) {\n        bytes32 roles = getUserRoles(who);\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\n        return bytes32(0) != roles & shifted;\n    }\n\n    function canCall(\n        address caller,\n        address code,\n        bytes4 sig\n    ) public view returns (bool) {\n        if (isUserRoot(caller) || isCapabilityPublic(code, sig)) {\n            return true;\n        } else {\n            bytes32 has_roles = getUserRoles(caller);\n            bytes32 needs_one_of = getCapabilityRoles(code, sig);\n            return bytes32(0) != has_roles & needs_one_of;\n        }\n    }\n\n    function BITNOT(bytes32 input) internal pure returns (bytes32 output) {\n        return (input ^ bytes32(type(uint256).max));\n    }\n\n    function setRootUser(address who, bool enabled) public auth {\n        _root_users[who] = enabled;\n    }\n\n    function setUserRole(\n        address who,\n        uint8 role,\n        bool enabled\n    ) public auth {\n        bytes32 last_roles = _user_roles[who];\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\n        if (enabled) {\n            _user_roles[who] = last_roles | shifted;\n        } else {\n            _user_roles[who] = last_roles & BITNOT(shifted);\n        }\n    }\n\n    function setPublicCapability(\n        address code,\n        bytes4 sig,\n        bool enabled\n    ) public auth {\n        _public_capabilities[code][sig] = enabled;\n    }\n\n    function setRoleCapability(\n        uint8 role,\n        address code,\n        bytes4 sig,\n        bool enabled\n    ) public auth {\n        bytes32 last_roles = _capability_roles[code][sig];\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\n        if (enabled) {\n            _capability_roles[code][sig] = last_roles | shifted;\n        } else {\n            _capability_roles[code][sig] = last_roles & BITNOT(shifted);\n        }\n    }\n}\n"
    },
    "contracts/voyage/auth/DSGuard.sol": {
      "content": "// guard.sol -- simple whitelist implementation of DSAuthority\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// lifted from: https://github.com/dapphub/ds-guard/blob/af05632249f98bf3942b9482c5bf69e8bd45284e/src/guard.sol\n\npragma solidity ^0.8.9;\n\nimport \"./DSAuth.sol\";\n\ncontract DSGuardEvents {\n    event LogPermit(\n        bytes32 indexed src,\n        bytes32 indexed dst,\n        bytes32 indexed sig\n    );\n\n    event LogForbid(\n        bytes32 indexed src,\n        bytes32 indexed dst,\n        bytes32 indexed sig\n    );\n}\n\ncontract DSGuard is DSAuth, DSAuthority, DSGuardEvents {\n    bytes32 public constant ANY = bytes32(type(uint256).max);\n\n    mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => bool))) acl;\n\n    function canCall(\n        address src_,\n        address dst_,\n        bytes4 sig\n    ) public view returns (bool) {\n        bytes32 src = bytes32(bytes20(src_));\n        bytes32 dst = bytes32(bytes20(dst_));\n\n        return\n            acl[src][dst][sig] ||\n            acl[src][dst][ANY] ||\n            acl[src][ANY][sig] ||\n            acl[src][ANY][ANY] ||\n            acl[ANY][dst][sig] ||\n            acl[ANY][dst][ANY] ||\n            acl[ANY][ANY][sig] ||\n            acl[ANY][ANY][ANY];\n    }\n\n    function permit(\n        bytes32 src,\n        bytes32 dst,\n        bytes32 sig\n    ) public auth {\n        acl[src][dst][sig] = true;\n        emit LogPermit(src, dst, sig);\n    }\n\n    function forbid(\n        bytes32 src,\n        bytes32 dst,\n        bytes32 sig\n    ) public auth {\n        acl[src][dst][sig] = false;\n        emit LogForbid(src, dst, sig);\n    }\n\n    function permit(\n        address src,\n        address dst,\n        bytes32 sig\n    ) public {\n        permit(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\n    }\n\n    function forbid(\n        address src,\n        address dst,\n        bytes32 sig\n    ) public {\n        forbid(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\n    }\n}\n\ncontract DSGuardFactory {\n    mapping(address => bool) public isGuard;\n\n    function newGuard() public returns (DSGuard guard) {\n        guard = new DSGuard();\n        guard.setOwner(msg.sender);\n        isGuard[address(guard)] = true;\n    }\n}\n"
    },
    "contracts/voyage/interfaces/IVaultFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\ninterface IVaultFactory {\n    function createVault(\n        address owner,\n        address voyage,\n        uint256 version,\n        bytes32 checksum,\n        bytes32 salt\n    ) external returns (address);\n}\n"
    },
    "contracts/shared/diamond/interfaces/IDiamondLoupe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\n// A loupe is a small magnifying glass used to look at diamonds.\n// These functions look at diamonds\ninterface IDiamondLoupe {\n    /// These functions are expected to be called frequently\n    /// by tools.\n\n    struct Facet {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Gets all facet addresses and their four byte function selectors.\n    /// @return facets_ Facet\n    function facets() external view returns (Facet[] memory facets_);\n\n    /// @notice Gets all the function selectors supported by a specific facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(address _facet)\n        external\n        view\n        returns (bytes4[] memory facetFunctionSelectors_);\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses()\n        external\n        view\n        returns (address[] memory facetAddresses_);\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(bytes4 _functionSelector)\n        external\n        view\n        returns (address facetAddress_);\n}\n"
    },
    "contracts/shared/facets/PaymentsFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {PeripheryPayments} from \"../util/PeripheryPayments.sol\";\nimport {Multicall} from \"../util/Multicall.sol\";\nimport {SelfPermit} from \"../util/SelfPermit.sol\";\nimport {LibAppStorage} from \"../../voyage/libraries/LibAppStorage.sol\";\nimport {SafeTransferLib} from \"../libraries/SafeTransferLib.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract PaymentsFacet is PeripheryPayments, Multicall, SelfPermit {\n    using SafeERC20 for IERC20;\n\n    function unwrapWETH9(uint256 amountMinimum, address recipient)\n        public\n        payable\n    {\n        uint256 balanceWETH9 = LibAppStorage.ds().WETH9.balanceOf(\n            address(this)\n        );\n        require(balanceWETH9 >= amountMinimum, \"Insufficient WETH9\");\n\n        if (balanceWETH9 > 0) {\n            LibAppStorage.ds().WETH9.withdraw(balanceWETH9);\n            SafeTransferLib.safeTransferETH(recipient, balanceWETH9);\n        }\n    }\n\n    function wrapWETH9() public payable {\n        if (address(this).balance > 0)\n            LibAppStorage.ds().WETH9.deposit{value: address(this).balance}(); // wrap everything\n    }\n\n    function sweepToken(\n        IERC20 token,\n        uint256 amountMinimum,\n        address recipient\n    ) public payable {\n        uint256 balanceToken = token.balanceOf(address(this));\n        require(balanceToken >= amountMinimum, \"Insufficient token\");\n\n        if (balanceToken > 0) {\n            token.safeTransfer(recipient, balanceToken);\n        }\n    }\n\n    function refundETH() external payable {\n        if (address(this).balance > 0) {\n            SafeTransferLib.safeTransferETH(msg.sender, address(this).balance);\n        }\n    }\n}\n\nabstract contract IWETH9 is IERC20 {\n    /// @notice Deposit ether to get wrapped ether\n    function deposit() external payable virtual;\n\n    /// @notice Withdraw wrapped ether to get ether\n    function withdraw(uint256) external virtual;\n}\n"
    },
    "contracts/voyage/auth/DSAuth.sol": {
      "content": "// SPDX-License-Identifier: GNU-3\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// lifted from: https://github.com/dapphub/ds-auth/blob/a51e7caa1f03eeffed66d67f3b38605e0f1f881d/src/auth.sol\n\npragma solidity ^0.8.9;\n\ninterface DSAuthority {\n    function canCall(\n        address src,\n        address dst,\n        bytes4 sig\n    ) external view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority(address indexed authority);\n    event LogSetOwner(address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority public authority;\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_) public auth {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_) public auth {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth() {\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig)\n        internal\n        view\n        returns (bool)\n    {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(address(0))) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n"
    },
    "contracts/shared/diamond/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport {IDiamondCut} from \"../interfaces/IDiamondCut.sol\";\nimport {IDiamondLoupe} from \"../interfaces/IDiamondLoupe.sol\";\nimport {IERC165} from \"../interfaces/IERC165.sol\";\nimport {IERC173} from \"../interfaces/IERC173.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION =\n        keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage()\n        internal\n        pure\n        returns (DiamondStorage storage ds)\n    {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(\n            msg.sender == diamondStorage().contractOwner,\n            \"LibDiamond: Must be contract owner\"\n        );\n    }\n\n    event DiamondCut(\n        IDiamondCut.FacetCut[] _diamondCut,\n        address _init,\n        bytes _calldata\n    );\n\n    /// @notice Adds default diamond facets\n    /// @dev This is always called in the Diamond constructor.\n    /// @param _diamondCutFacet - address of DiamondCutFacet\n    /// @param _diamondLoupeFacet - address of the DiamondLoupeFacet\n    /// @param _ownershipFacet - address of the OwnershipFacet\n    function addDiamondFunctions(\n        address _diamondCutFacet,\n        address _diamondLoupeFacet,\n        address _ownershipFacet\n    ) internal {\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](3);\n        bytes4[] memory functionSelectors = new bytes4[](1);\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\n        cut[0] = IDiamondCut.FacetCut({\n            facetAddress: _diamondCutFacet,\n            action: IDiamondCut.FacetCutAction.Add,\n            functionSelectors: functionSelectors\n        });\n        functionSelectors = new bytes4[](5);\n        functionSelectors[0] = IDiamondLoupe.facets.selector;\n        functionSelectors[1] = IDiamondLoupe.facetFunctionSelectors.selector;\n        functionSelectors[2] = IDiamondLoupe.facetAddresses.selector;\n        functionSelectors[3] = IDiamondLoupe.facetAddress.selector;\n        functionSelectors[4] = IERC165.supportsInterface.selector;\n        cut[1] = IDiamondCut.FacetCut({\n            facetAddress: _diamondLoupeFacet,\n            action: IDiamondCut.FacetCutAction.Add,\n            functionSelectors: functionSelectors\n        });\n        functionSelectors = new bytes4[](2);\n        functionSelectors[0] = IERC173.transferOwnership.selector;\n        functionSelectors[1] = IERC173.owner.selector;\n        cut[2] = IDiamondCut.FacetCut({\n            facetAddress: _ownershipFacet,\n            action: IDiamondCut.FacetCutAction.Add,\n            functionSelectors: functionSelectors\n        });\n        diamondCut(cut, address(0), \"\");\n    }\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (\n            uint256 facetIndex;\n            facetIndex < _diamondCut.length;\n            facetIndex++\n        ) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(\n                    _diamondCut[facetIndex].facetAddress,\n                    _diamondCut[facetIndex].functionSelectors\n                );\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(\n                    _diamondCut[facetIndex].facetAddress,\n                    _diamondCut[facetIndex].functionSelectors\n                );\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(\n                    _diamondCut[facetIndex].facetAddress,\n                    _diamondCut[facetIndex].functionSelectors\n                );\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(\n        address _facetAddress,\n        bytes4[] memory _functionSelectors\n    ) internal {\n        require(\n            _functionSelectors.length > 0,\n            \"LibDiamondCut: No selectors in facet to cut\"\n        );\n        DiamondStorage storage ds = diamondStorage();\n        // uint16 selectorCount = uint16(diamondStorage().selectors.length);\n        require(\n            _facetAddress != address(0),\n            \"LibDiamondCut: Add facet can't be address(0)\"\n        );\n        uint16 selectorPosition = uint16(\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\n        );\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            enforceHasContractCode(\n                _facetAddress,\n                \"LibDiamondCut: New facet has no code\"\n            );\n            ds\n                .facetFunctionSelectors[_facetAddress]\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\n            ds.facetAddresses.push(_facetAddress);\n        }\n        for (\n            uint256 selectorIndex;\n            selectorIndex < _functionSelectors.length;\n            selectorIndex++\n        ) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds\n                .selectorToFacetAndPosition[selector]\n                .facetAddress;\n            require(\n                oldFacetAddress == address(0),\n                \"LibDiamondCut: Can't add function that already exists\"\n            );\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\n                selector\n            );\n            ds\n                .selectorToFacetAndPosition[selector]\n                .facetAddress = _facetAddress;\n            ds\n                .selectorToFacetAndPosition[selector]\n                .functionSelectorPosition = selectorPosition;\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(\n        address _facetAddress,\n        bytes4[] memory _functionSelectors\n    ) internal {\n        require(\n            _functionSelectors.length > 0,\n            \"LibDiamondCut: No selectors in facet to cut\"\n        );\n        DiamondStorage storage ds = diamondStorage();\n        require(\n            _facetAddress != address(0),\n            \"LibDiamondCut: Add facet can't be address(0)\"\n        );\n        uint16 selectorPosition = uint16(\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\n        );\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            enforceHasContractCode(\n                _facetAddress,\n                \"LibDiamondCut: New facet has no code\"\n            );\n            ds\n                .facetFunctionSelectors[_facetAddress]\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\n            ds.facetAddresses.push(_facetAddress);\n        }\n        for (\n            uint256 selectorIndex;\n            selectorIndex < _functionSelectors.length;\n            selectorIndex++\n        ) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds\n                .selectorToFacetAndPosition[selector]\n                .facetAddress;\n            require(\n                oldFacetAddress != _facetAddress,\n                \"LibDiamondCut: Can't replace function with same function\"\n            );\n            removeFunction(oldFacetAddress, selector);\n            // add function\n            ds\n                .selectorToFacetAndPosition[selector]\n                .functionSelectorPosition = selectorPosition;\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\n                selector\n            );\n            ds\n                .selectorToFacetAndPosition[selector]\n                .facetAddress = _facetAddress;\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(\n        address _facetAddress,\n        bytes4[] memory _functionSelectors\n    ) internal {\n        require(\n            _functionSelectors.length > 0,\n            \"LibDiamondCut: No selectors in facet to cut\"\n        );\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(\n            _facetAddress == address(0),\n            \"LibDiamondCut: Remove facet address must be address(0)\"\n        );\n        for (\n            uint256 selectorIndex;\n            selectorIndex < _functionSelectors.length;\n            selectorIndex++\n        ) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds\n                .selectorToFacetAndPosition[selector]\n                .facetAddress;\n            removeFunction(oldFacetAddress, selector);\n        }\n    }\n\n    function removeFunction(address _facetAddress, bytes4 _selector) internal {\n        DiamondStorage storage ds = diamondStorage();\n        require(\n            _facetAddress != address(0),\n            \"LibDiamondCut: Can't remove function that doesn't exist\"\n        );\n        // an immutable function is a function defined directly in a diamond\n        require(\n            _facetAddress != address(this),\n            \"LibDiamondCut: Can't remove immutable function\"\n        );\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds\n            .selectorToFacetAndPosition[_selector]\n            .functionSelectorPosition;\n        uint256 lastSelectorPosition = ds\n            .facetFunctionSelectors[_facetAddress]\n            .functionSelectors\n            .length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds\n                .facetFunctionSelectors[_facetAddress]\n                .functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\n                    selectorPosition\n                ] = lastSelector;\n            ds\n                .selectorToFacetAndPosition[lastSelector]\n                .functionSelectorPosition = uint16(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds\n                .facetFunctionSelectors[_facetAddress]\n                .facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[\n                    lastFacetAddressPosition\n                ];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds\n                    .facetFunctionSelectors[lastFacetAddress]\n                    .facetAddressPosition = uint16(facetAddressPosition);\n            }\n            ds.facetAddresses.pop();\n            delete ds\n                .facetFunctionSelectors[_facetAddress]\n                .facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata)\n        internal\n    {\n        if (_init == address(0)) {\n            require(\n                _calldata.length == 0,\n                \"LibDiamondCut: _init is address(0) but_calldata is not empty\"\n            );\n        } else {\n            require(\n                _calldata.length > 0,\n                \"LibDiamondCut: _calldata is empty but _init is not address(0)\"\n            );\n            if (_init != address(this)) {\n                enforceHasContractCode(\n                    _init,\n                    \"LibDiamondCut: _init address has no code\"\n                );\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(\n        address _contract,\n        string memory _errorMessage\n    ) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
    },
    "contracts/shared/diamond/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\ninterface IERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceId The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    ///  uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/shared/diamond/interfaces/IERC173.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title ERC-173 Contract Ownership Standard\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\n/* is ERC165 */\ninterface IERC173 {\n    /// @dev This emits when ownership of a contract changes.\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /// @notice Get the address of the owner\n    /// @return owner_ The address of the owner.\n    function owner() external view returns (address owner_);\n\n    /// @notice Set the address of the new owner of the contract\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\n    /// @param _newOwner The address of the new owner of the contract\n    function transferOwnership(address _newOwner) external;\n}\n"
    },
    "contracts/shared/util/PeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title Depositor\n/// @author Voyage Finance\n/// @notice Forwards calls to ERC-4626 compliant Vaults, but with the actual depositor appended to the encoded call data.\n/// @dev This does not work if the receiving contract does not implement ERC-4626!\nabstract contract PeripheryPayments {\n    using SafeERC20 for IERC20;\n\n    function pullToken(\n        IERC20 token,\n        uint256 amount,\n        address from,\n        address recipient\n    ) public payable {\n        token.safeTransferFrom(from, recipient, amount);\n    }\n\n    function approve(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) public payable {\n        token.safeApprove(to, amount);\n    }\n}\n"
    },
    "contracts/shared/util/Multicall.sol": {
      "content": "// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/base/Multicall.sol\n\n// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IMulticall.sol\";\n\n/// @title Multicall\n/// @notice Enables calling multiple methods in a single call to the contract\nabstract contract Multicall is IMulticall {\n    /// @inheritdoc IMulticall\n    function multicall(bytes[] calldata data)\n        public\n        payable\n        override\n        returns (bytes[] memory results)\n    {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            (bool success, bytes memory result) = address(this).delegatecall(\n                data[i]\n            );\n\n            if (!success) {\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\n                if (result.length < 68) revert();\n                assembly {\n                    result := add(result, 0x04)\n                }\n                revert(abi.decode(result, (string)));\n            }\n\n            results[i] = result;\n        }\n    }\n}\n"
    },
    "contracts/shared/util/SelfPermit.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.9;\n\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/ISelfPermit.sol\";\nimport \"../interfaces/IERC20PermitAllowed.sol\";\n\n/// @title Self Permit\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\n/// that requires an approval in a single transaction.\nabstract contract SelfPermit is ISelfPermit {\n    /// @inheritdoc ISelfPermit\n    function selfPermit(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public payable override {\n        IERC20Permit(token).permit(\n            msg.sender,\n            address(this),\n            value,\n            deadline,\n            v,\n            r,\n            s\n        );\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitIfNecessary(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable override {\n        if (IERC20(token).allowance(msg.sender, address(this)) < value)\n            selfPermit(token, value, deadline, v, r, s);\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitAllowed(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public payable override {\n        IERC20PermitAllowed(token).permit(\n            msg.sender,\n            address(this),\n            nonce,\n            expiry,\n            true,\n            v,\n            r,\n            s\n        );\n    }\n\n    /// @inheritdoc ISelfPermit\n    function selfPermitAllowedIfNecessary(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable override {\n        if (\n            IERC20(token).allowance(msg.sender, address(this)) <\n            type(uint256).max\n        ) selfPermitAllowed(token, nonce, expiry, v, r, s);\n    }\n}\n"
    },
    "contracts/shared/libraries/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\nETH OPERATIONS\n//////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\nERC20 OPERATIONS\n//////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(\n                freeMemoryPointer,\n                0x23b872dd00000000000000000000000000000000000000000000000000000000\n            )\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\n                    iszero(returndatasize())\n                ),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(\n                freeMemoryPointer,\n                0xa9059cbb00000000000000000000000000000000000000000000000000000000\n            )\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\n                    iszero(returndatasize())\n                ),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(\n                freeMemoryPointer,\n                0x095ea7b300000000000000000000000000000000000000000000000000000000\n            )\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\n                    iszero(returndatasize())\n                ),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"
    },
    "contracts/shared/interfaces/IMulticall.sol": {
      "content": "// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IMulticall.sol\n\n// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Multicall interface\n/// @notice Enables calling multiple methods in a single call to the contract\ninterface IMulticall {\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n    /// @param data The encoded function data for each of the calls to make to this contract\n    /// @return results The results from each of the calls passed in via data\n    function multicall(bytes[] calldata data)\n        external\n        payable\n        returns (bytes[] memory results);\n}\n"
    },
    "contracts/shared/interfaces/ISelfPermit.sol": {
      "content": "// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISelfPermit.sol\n\n// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Self Permit\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\ninterface ISelfPermit {\n    /// @notice Permits this contract to spend a given token from `msg.sender`\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n    /// @param token The address of the token spent\n    /// @param value The amount that can be spent of token\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermit(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend a given token from `msg.sender`\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\n    /// @param token The address of the token spent\n    /// @param value The amount that can be spent of token\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitIfNecessary(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n    /// @param token The address of the token spent\n    /// @param nonce The current nonce of the owner\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitAllowed(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\n    /// @param token The address of the token spent\n    /// @param nonce The current nonce of the owner\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitAllowedIfNecessary(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
    },
    "contracts/shared/interfaces/IERC20PermitAllowed.sol": {
      "content": "// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/external/IERC20PermitAllowed.sol\n\n// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Interface for permit\n/// @notice Interface used by DAI/CHAI for permit\ninterface IERC20PermitAllowed {\n    /// @notice Approve the spender to spend some tokens via the holder signature\n    /// @dev This is the permit interface used by DAI and CHAI\n    /// @param holder The address of the token holder, the token owner\n    /// @param spender The address of the token spender\n    /// @param nonce The holder's nonce, increases at each call to permit\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/shared/libraries/WadRayMath.sol": {
      "content": "pragma solidity ^0.8.9;\n\n/******************\n@title WadRayMath library\n@author Aave\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\n */\n\nlibrary WadRayMath {\n    uint256 internal constant WAD = 1e18;\n    uint256 internal constant halfWAD = WAD / 2;\n\n    uint256 internal constant RAY = 1e27;\n    uint256 internal constant halfRAY = RAY / 2;\n\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\n\n    function Ray() public pure returns (uint256) {\n        return RAY;\n    }\n\n    function ray() internal pure returns (uint256) {\n        return RAY;\n    }\n\n    function wad() internal pure returns (uint256) {\n        return WAD;\n    }\n\n    function halfRay() internal pure returns (uint256) {\n        return halfRAY;\n    }\n\n    function halfWad() internal pure returns (uint256) {\n        return halfWAD;\n    }\n\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (halfWAD + a * b) / WAD;\n    }\n\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 halfB = b / 2;\n\n        return (halfB + a * WAD) / b;\n    }\n\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (halfRAY + a * b) / RAY;\n    }\n\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 halfB = b / 2;\n\n        return (halfB + a * RAY) / b;\n    }\n\n    function rayToWad(uint256 a) internal pure returns (uint256) {\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\n\n        return (halfRatio + a) / WAD_RAY_RATIO;\n    }\n\n    function wadToRay(uint256 a) internal pure returns (uint256) {\n        return a * WAD_RAY_RATIO;\n    }\n\n    // @dev calculates base^exp. The code uses the ModExp precompile\n    // @return base^exp, in ray\n    //solium-disable-next-line\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rayMul(x, x);\n\n            if (n % 2 != 0) {\n                z = rayMul(z, x);\n            }\n        }\n    }\n}\n"
    },
    "contracts/shared/libraries/PercentageMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\n/**\n * @title PercentageMath library\n * @author Aave\n * @notice Provides functions to perform percentage calculations\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\n **/\nlibrary PercentageMath {\n    // Maximum percentage factor (100.00%)\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\n\n    // Half percentage factor (50.00%)\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\n\n    /**\n     * @notice Executes a percentage multiplication\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param value The value of which the percentage needs to be calculated\n     * @param percentage The percentage of the value to be calculated\n     * @return result value percentmul percentage\n     **/\n    function percentMul(uint256 value, uint256 percentage)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\n        assembly {\n            if iszero(\n                or(\n                    iszero(percentage),\n                    iszero(\n                        gt(\n                            value,\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\n                        )\n                    )\n                )\n            ) {\n                revert(0, 0)\n            }\n\n            result := div(\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\n                PERCENTAGE_FACTOR\n            )\n        }\n    }\n\n    /**\n     * @notice Executes a percentage division\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param value The value of which the percentage needs to be calculated\n     * @param percentage The percentage of the value to be calculated\n     * @return result value percentdiv percentage\n     **/\n    function percentDiv(uint256 value, uint256 percentage)\n        internal\n        pure\n        returns (uint256 result)\n    {\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\n        assembly {\n            if or(\n                iszero(percentage),\n                iszero(\n                    iszero(\n                        gt(\n                            value,\n                            div(\n                                sub(not(0), div(percentage, 2)),\n                                PERCENTAGE_FACTOR\n                            )\n                        )\n                    )\n                )\n            ) {\n                revert(0, 0)\n            }\n\n            result := div(\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\n                percentage\n            )\n        }\n    }\n}\n"
    },
    "contracts/shared/libraries/LogarithmMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\n/// import from https://github.com/paulrberg/prb-math\nlibrary LogarithmMath {\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @dev Half the SCALE number.\n    uint256 internal constant HALF_SCALE = 5e17;\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\n    ///\n    /// Caveats:\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log2(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = mostSignificantBit(x / SCALE);\n\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255 and SCALE is 1e18.\n            result = n * SCALE;\n\n            // This is y = x * 2^(-n).\n            uint256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n        }\n    }\n\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\n    /// @param x The uint256 number for which to find the index of the most significant bit.\n    /// @return msb The index of the most significant bit as an uint256.\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    error PRBMathUD60x18__LogInputTooSmall(uint256);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/voyage/facets/LiquidityFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IVToken} from \"../interfaces/IVToken.sol\";\nimport {JuniorDepositToken} from \"../tokenization/JuniorDepositToken.sol\";\nimport {SeniorDepositToken} from \"../tokenization/SeniorDepositToken.sol\";\nimport {LibAppStorage, AppStorage, Storage, Tranche, ReserveData, BorrowState, ReserveConfigurationMap} from \"../libraries/LibAppStorage.sol\";\nimport {LibReserveConfiguration} from \"../libraries/LibReserveConfiguration.sol\";\nimport {LibLiquidity} from \"../libraries/LibLiquidity.sol\";\nimport {WadRayMath} from \"../../shared/libraries/WadRayMath.sol\";\nimport {PaymentsFacet} from \"../../shared/facets/PaymentsFacet.sol\";\n\ncontract LiquidityFacet is Storage {\n    using LibLiquidity for ReserveData;\n    using LibReserveConfiguration for ReserveConfigurationMap;\n    using WadRayMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event ReserveInitialized(\n        address indexed _collection,\n        address indexed _currency,\n        address _juniorDepositTokenAddress,\n        address _seniorDepositTokenAddress,\n        address _interestRateStrategyAddress\n    );\n    event ReserveActivated(address indexed _collection);\n    event Deposit(\n        address indexed _collection,\n        address indexed _currency,\n        address indexed _user,\n        Tranche _tranche,\n        uint256 amount\n    );\n    event Withdraw(\n        address indexed _collection,\n        address indexed _currency,\n        address indexed _user,\n        Tranche _tranche,\n        uint256 amount\n    );\n\n    /* ----------------------------- admin interface ---------------------------- */\n    function initReserve(\n        address _collection,\n        address _currency,\n        address _interestRateStrategyAddress,\n        address _priceOracle\n    ) external authorised {\n        if (\n            !Address.isContract(_collection) || !Address.isContract(_currency)\n        ) {\n            revert InvalidContract();\n        }\n        ReserveData storage reserveData = LibLiquidity.getReserveData(\n            _collection\n        );\n        if (reserveData.initialized) {\n            revert InvalidInitialize();\n        }\n        reserveData.init(_currency, _interestRateStrategyAddress, _priceOracle);\n        LibAppStorage.ds()._reserveList[\n            LibAppStorage.ds()._reservesCount\n        ] = _collection;\n        LibAppStorage.ds()._reservesCount++;\n        emit ReserveInitialized(\n            _collection,\n            _currency,\n            reserveData.juniorDepositTokenAddress,\n            reserveData.seniorDepositTokenAddress,\n            _interestRateStrategyAddress\n        );\n    }\n\n    function activateReserve(address _collection) external authorised {\n        if (!Address.isContract(_collection)) {\n            revert InvalidContract();\n        }\n        ReserveConfigurationMap memory config = LibReserveConfiguration\n            .getConfiguration(_collection);\n        config.setActive(true);\n        LibReserveConfiguration.saveConfiguration(_collection, config);\n        emit ReserveActivated(_collection);\n    }\n\n    function updateProtocolFee(address _treasuryAddr, uint256 _cutRatio)\n        external\n        authorised\n    {\n        LibLiquidity.updateProtocolFee(_treasuryAddr, _cutRatio);\n    }\n\n    function upgradePriceOracleImpl(address _collection, address _priceOracle)\n        external\n        authorised\n    {\n        ReserveData storage reserveData = LibLiquidity.getReserveData(\n            _collection\n        );\n        reserveData.priceOracle.upgradeTo(_priceOracle);\n    }\n\n    function updateWETH9(address _weth9) external authorised {\n        LibLiquidity.updateWETH9(_weth9);\n    }\n\n    /* ----------------------------- user interface ----------------------------- */\n\n    function deposit(\n        address _collection,\n        Tranche _tranche,\n        uint256 _amount\n    ) external {\n        ReserveData memory reserve = LibAppStorage.ds()._reserveData[\n            _collection\n        ];\n        BorrowState storage borrowState = LibAppStorage.ds()._borrowState[\n            _collection\n        ][reserve.currency];\n        uint256 totalDebt = borrowState.totalDebt + borrowState.totalInterest;\n        uint256 avgBorrowRate = borrowState.avgBorrowRate;\n\n        IVToken vToken = _tranche == Tranche.JUNIOR\n            ? IVToken(reserve.juniorDepositTokenAddress)\n            : IVToken(reserve.seniorDepositTokenAddress);\n        // transfer the underlying tokens to liquidity manager, then do deposit.\n        PaymentsFacet(address(this)).pullToken(\n            vToken.asset(),\n            _amount,\n            msg.sender,\n            address(this)\n        );\n        vToken.deposit(_amount, msg.sender);\n        emit Deposit(\n            _collection,\n            reserve.currency,\n            msg.sender,\n            _tranche,\n            _amount\n        );\n        uint256 bal = IERC20(reserve.currency).balanceOf(\n            reserve.seniorDepositTokenAddress\n        );\n    }\n\n    function withdraw(\n        address _collection,\n        Tranche _tranche,\n        uint256 _amount\n    ) external {\n        ReserveData memory reserve = LibAppStorage.ds()._reserveData[\n            _collection\n        ];\n        IVToken vToken = Tranche.JUNIOR == _tranche\n            ? IVToken(reserve.juniorDepositTokenAddress)\n            : IVToken(reserve.seniorDepositTokenAddress);\n        uint256 userBalance = vToken.maxWithdraw(msg.sender);\n        uint256 amountToWithdraw = _amount;\n        if (_amount == type(uint256).max) {\n            amountToWithdraw = userBalance;\n        }\n        BorrowState storage borrowState = LibAppStorage.ds()._borrowState[\n            _collection\n        ][reserve.currency];\n        uint256 totalDebt = borrowState.totalDebt + borrowState.totalInterest;\n        uint256 avgBorrowRate = borrowState.avgBorrowRate;\n        IVToken(vToken).withdraw(_amount, msg.sender, msg.sender);\n\n        emit Withdraw(\n            _collection,\n            reserve.currency,\n            msg.sender,\n            _tranche,\n            _amount\n        );\n    }\n\n    /* ---------------------------------- views --------------------------------- */\n\n    function getReserveStatus(address _collection)\n        public\n        view\n        returns (bool initialized, bool activated)\n    {\n        initialized = LibLiquidity.getReserveData(_collection).initialized;\n        (activated, , ) = LibReserveConfiguration\n            .getConfiguration(_collection)\n            .getFlags();\n    }\n\n    function balance(\n        address _collection,\n        address _user,\n        Tranche _tranche\n    ) public view returns (uint256) {\n        return LibLiquidity.balance(_collection, _user, _tranche);\n    }\n\n    function unbonding(\n        address _collection,\n        address _user,\n        Tranche _tranche\n    ) public view returns (uint256) {\n        return LibLiquidity.unbonding(_collection, _user, _tranche);\n    }\n\n    function utilizationRate(address _collection, address _currency)\n        external\n        view\n        returns (uint256)\n    {\n        ReserveData memory reserve = LibLiquidity.getReserveData(_currency);\n        BorrowState storage borrowState = LibAppStorage.ds()._borrowState[\n            _collection\n        ][_currency];\n        uint256 totalDebt = borrowState.totalDebt + borrowState.totalInterest;\n\n        uint256 totalPendingWithdrawal = IVToken(\n            reserve.seniorDepositTokenAddress\n        ).totalUnbonding();\n\n        uint256 availableLiquidity = IERC20(_currency).balanceOf(\n            reserve.seniorDepositTokenAddress\n        ) - totalPendingWithdrawal;\n\n        return\n            totalDebt == 0\n                ? 0\n                : totalDebt.rayDiv(availableLiquidity + totalDebt);\n    }\n\n    function getReserveFlags(address _currency)\n        external\n        view\n        returns (\n            bool,\n            bool,\n            bool\n        )\n    {\n        return LibReserveConfiguration.getConfiguration(_currency).getFlags();\n    }\n}\n\n/* --------------------------------- errors -------------------------------- */\nerror InvalidInitialize();\nerror InvalidContract();\n"
    },
    "contracts/voyage/interfaces/IVToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC4626} from \"../../shared/interfaces/IERC4626.sol\";\n\ninterface IVToken is IERC4626 {\n    function transferUnderlyingTo(address _target, uint256 _amount) external;\n\n    function claim() external;\n\n    function unbonding(address _user) external view returns (uint256);\n\n    function totalUnbonding() external view returns (uint256);\n\n    function maximumClaimable(address _user) external view returns (uint256);\n}\n"
    },
    "contracts/voyage/tokenization/JuniorDepositToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {VToken} from \"./VToken.sol\";\n\ncontract JuniorDepositToken is VToken {\n    function totalAssets() public view override returns (uint256) {\n        return asset.balanceOf(address(this)) - totalUnbonding;\n    }\n}\n"
    },
    "contracts/voyage/tokenization/SeniorDepositToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {LoanFacet} from \"../facets/LoanFacet.sol\";\nimport {VToken} from \"./VToken.sol\";\n\ncontract SeniorDepositToken is VToken {\n    function totalAssets() public view override returns (uint256) {\n        uint256 underlyingBalance = asset.balanceOf(address(this));\n        uint256 outstandingPrincipal = LoanFacet(voyage).principalBalance(\n            address(asset)\n        );\n        return underlyingBalance + outstandingPrincipal - totalUnbonding;\n    }\n}\n"
    },
    "contracts/voyage/libraries/LibLiquidity.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {BeaconProxy} from \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport {UpgradeableBeacon} from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport {LibReserveConfiguration} from \"./LibReserveConfiguration.sol\";\nimport {IReserveInterestRateStrategy} from \"../interfaces/IReserveInterestRateStrategy.sol\";\nimport {LibAppStorage, AppStorage, ReserveData, ReserveConfigurationMap, BorrowData, BorrowState, Tranche} from \"./LibAppStorage.sol\";\nimport {IVToken} from \"../interfaces/IVToken.sol\";\nimport {IWETH9} from \"../../shared/facets/PaymentsFacet.sol\";\nimport {VToken} from \"../tokenization/VToken.sol\";\nimport {WadRayMath} from \"../../shared/libraries/WadRayMath.sol\";\nimport {PercentageMath} from \"../../shared/libraries/PercentageMath.sol\";\n\nlibrary LibLiquidity {\n    using WadRayMath for uint256;\n    using PercentageMath for uint256;\n    using LibReserveConfiguration for ReserveConfigurationMap;\n\n    event ReserveDataUpdated(\n        address indexed asset,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate\n    );\n\n    struct DepositAndDebt {\n        address currency;\n        uint256 juniorDepositAmount;\n        uint256 seniorDepositAmount;\n        uint256 totalDebt;\n        uint256 totalInterest;\n        uint256 avgBorrowRate;\n    }\n\n    uint256 internal constant RAY = 1e27;\n    uint256 internal constant UINT256_MAX = type(uint256).max;\n\n    /* --------------------------- reserve management --------------------------- */\n    function init(\n        ReserveData storage reserve,\n        address _currency,\n        address _interestRateStrategyAddress,\n        address _priceOracle\n    ) internal {\n        require(\n            reserve.seniorDepositTokenAddress == address(0) &&\n                reserve.juniorDepositTokenAddress == address(0),\n            \"deposit tokens already deployed\"\n        );\n        AppStorage storage s = LibAppStorage.ds();\n        IERC20Metadata token = IERC20Metadata(_currency);\n        ReserveConfigurationMap memory config = reserve.configuration;\n        config.setDecimals(token.decimals());\n        reserve.configuration = config;\n        bytes memory data = abi.encodeWithSelector(\n            VToken.initialize.selector,\n            address(this),\n            _currency\n        );\n        reserve.seniorDepositTokenAddress = deployBeaconProxy(\n            address(s.seniorDepositTokenBeacon),\n            data\n        );\n        token.approve(reserve.seniorDepositTokenAddress, UINT256_MAX);\n        reserve.juniorDepositTokenAddress = deployBeaconProxy(\n            address(s.juniorDepositTokenBeacon),\n            data\n        );\n        token.approve(reserve.juniorDepositTokenAddress, UINT256_MAX);\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\n        reserve.initialized = true;\n        reserve.priceOracle = new UpgradeableBeacon(_priceOracle);\n        reserve.currency = _currency;\n    }\n\n    function deployBeaconProxy(address _impl, bytes memory _data)\n        internal\n        returns (address)\n    {\n        return address(new BeaconProxy(_impl, _data));\n    }\n\n    /* --------------------------- fee management --------------------------- */\n    function updateProtocolFee(address _treasuryAddr, uint256 _cutRatio)\n        internal\n    {\n        AppStorage storage s = LibAppStorage.ds();\n        s.protocolFee.treasuryAddress = _treasuryAddr;\n        s.protocolFee.cutRatio = _cutRatio;\n    }\n\n    /* ------------------------ state mutation functions ------------------------ */\n\n    function updateWETH9(address _weth9) internal {\n        AppStorage storage s = LibAppStorage.ds();\n        s.WETH9 = IWETH9(_weth9);\n    }\n\n    /* ----------------------------- view functions ----------------------------- */\n    function getProtocolFee() internal view returns (address, uint256) {\n        AppStorage storage s = LibAppStorage.ds();\n        return (s.protocolFee.treasuryAddress, s.protocolFee.cutRatio);\n    }\n\n    function getReserveData(address _collection)\n        internal\n        view\n        returns (ReserveData storage)\n    {\n        AppStorage storage s = LibAppStorage.ds();\n        return s._reserveData[_collection];\n    }\n\n    function getReserveList() internal view returns (address[] memory) {\n        AppStorage storage s = LibAppStorage.ds();\n        address[] memory reserveList = new address[](s._reservesCount);\n        for (uint256 i = 0; i < s._reservesCount; ) {\n            reserveList[i] = s._reserveList[i];\n            unchecked {\n                ++i;\n            }\n        }\n        return reserveList;\n    }\n\n    function balance(\n        address _collection,\n        address _user,\n        Tranche _tranche\n    ) internal view returns (uint256) {\n        ReserveData memory reserve = getReserveData(_collection);\n        address vToken;\n        if (Tranche.JUNIOR == _tranche) {\n            vToken = reserve.juniorDepositTokenAddress;\n        } else {\n            vToken = reserve.seniorDepositTokenAddress;\n        }\n        return IVToken(vToken).maxWithdraw(_user);\n    }\n\n    function unbonding(\n        address _collection,\n        address _user,\n        Tranche _tranche\n    ) internal view returns (uint256) {\n        ReserveData memory reserve = getReserveData(_collection);\n        address vToken;\n        if (Tranche.JUNIOR == _tranche) {\n            vToken = reserve.juniorDepositTokenAddress;\n        } else {\n            vToken = reserve.seniorDepositTokenAddress;\n        }\n        return IVToken(vToken).unbonding(_user);\n    }\n\n    function getDepositAndDebt(address _collection)\n        internal\n        view\n        returns (DepositAndDebt memory)\n    {\n        AppStorage storage s = LibAppStorage.ds();\n        ReserveData storage reserve = s._reserveData[_collection];\n        BorrowState storage borrowState = s._borrowState[_collection][\n            reserve.currency\n        ];\n\n        DepositAndDebt memory res;\n        res.currency = reserve.currency;\n        res.juniorDepositAmount = IVToken(reserve.juniorDepositTokenAddress)\n            .totalAssets();\n        res.seniorDepositAmount = IVToken(reserve.seniorDepositTokenAddress)\n            .totalAssets();\n        (res.totalDebt, res.totalInterest, res.avgBorrowRate) = (\n            borrowState.totalDebt,\n            borrowState.totalInterest,\n            borrowState.avgBorrowRate\n        );\n        return res;\n    }\n\n    function utilizationRate(address _collection)\n        internal\n        view\n        returns (uint256)\n    {\n        AppStorage storage s = LibAppStorage.ds();\n        ReserveData memory reserve = getReserveData(_collection);\n        BorrowState storage borrowState = s._borrowState[_collection][\n            reserve.currency\n        ];\n        uint256 totalDebt = borrowState.totalDebt + borrowState.totalInterest;\n\n        uint256 totalPendingWithdrawal = IVToken(\n            reserve.seniorDepositTokenAddress\n        ).totalUnbonding();\n\n        uint256 availableLiquidity = IERC20Metadata(reserve.currency).balanceOf(\n            reserve.seniorDepositTokenAddress\n        ) - totalPendingWithdrawal;\n\n        return\n            totalDebt == 0\n                ? 0\n                : totalDebt.rayDiv(availableLiquidity + totalDebt);\n    }\n}\n"
    },
    "contracts/shared/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport {IERC20MetadataUpgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport {IERC20PermitUpgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\";\n\n// https://github.dev/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/b392c249e2c72434c438e0e495af1bacbc6cfd4f/contracts/interfaces/IERC4626Upgradeable.sol#L21\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n *\n * _Available since v4.7._\n */\ninterface IERC4626 is\n    IERC20Upgradeable,\n    IERC20MetadataUpgradeable,\n    IERC20PermitUpgradeable\n{\n    event Deposit(\n        address indexed caller,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    event Withdraw(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (IERC20Metadata assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets)\n        external\n        view\n        returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares)\n        external\n        view\n        returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver)\n        external\n        view\n        returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets)\n        external\n        view\n        returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver)\n        external\n        returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver)\n        external\n        view\n        returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver)\n        external\n        returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner)\n        external\n        view\n        returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets)\n        external\n        view\n        returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares)\n        external\n        view\n        returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) external returns (uint256 assets);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/voyage/tokenization/VToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ERC4626, IERC4626} from \"../../shared/tokenization/ERC4626.sol\";\nimport {IVToken} from \"../interfaces/IVToken.sol\";\n\nstruct Unbonding {\n    uint256 shares;\n    uint256 maxUnderlying;\n}\n\nabstract contract VToken is Initializable, ERC4626, IVToken {\n    using SafeERC20 for IERC20Metadata;\n\n    address internal voyage;\n    mapping(address => Unbonding) public unbondings;\n\n    uint256 public totalUnbonding;\n\n    uint256 public cooldown = 7 days;\n\n    event Claim(address receiver, uint256 amount);\n\n    modifier onlyAdmin() {\n        require(_msgSender() == voyage, \"Not admin\");\n        _;\n    }\n\n    function initialize(address _voyage, address _asset) public initializer {\n        IERC20Metadata underlying = IERC20Metadata(_asset);\n        voyage = _voyage;\n        __ERC20_init(underlying.name(), underlying.symbol());\n        __ERC20Permit_init(underlying.name());\n        __ERC4626_init(underlying);\n    }\n\n    function withdraw(\n        uint256 _amount,\n        address _receiver,\n        address _owner\n    ) public override(ERC4626, IERC4626) returns (uint256 shares) {\n        shares = previewWithdraw(_amount); // No need to check for rounding error, previewWithdraw rounds up.\n        if (msg.sender != _owner) {\n            _spendAllowance(_owner, msg.sender, shares);\n        }\n\n        beforeWithdraw(_amount, shares);\n\n        _burn(_owner, shares);\n        pushWithdraw(_owner, shares);\n\n        emit Withdraw(msg.sender, _receiver, _owner, _amount, shares);\n    }\n\n    function transferUnderlyingTo(address _target, uint256 _amount)\n        public\n        onlyAdmin\n    {\n        asset.safeTransfer(_target, _amount);\n    }\n\n    function totalUnbondingAsset() public view returns (uint256) {\n        return convertToAssets(totalUnbonding);\n    }\n\n    function pushWithdraw(address _user, uint256 _shares) internal {\n        unbondings[_user].shares += _shares;\n        unbondings[_user].maxUnderlying += convertToAssets(_shares);\n        totalUnbonding += _shares;\n    }\n\n    function resetUnbondingPosition(address _user) internal {\n        unbondings[_user].shares = 0;\n        unbondings[_user].maxUnderlying = 0;\n    }\n\n    function reduceUnbondingPosition(uint256 _shares, uint256 _asset) internal {\n        if (_shares > unbondings[msg.sender].shares) {\n            unbondings[msg.sender].shares == 0;\n            unbondings[msg.sender].maxUnderlying = 0;\n            return;\n        }\n        unbondings[msg.sender].maxUnderlying -= _asset;\n        unbondings[msg.sender].shares -= _shares;\n    }\n\n    function claim() external {\n        uint256 maxClaimable = unbondings[msg.sender].maxUnderlying;\n        uint256 availableLiquidity = asset.balanceOf(address(this));\n        uint256 transferredShares;\n        uint256 transferredAsset;\n        if (availableLiquidity > maxClaimable) {\n            transferredAsset = maxClaimable;\n            transferredShares = unbondings[msg.sender].shares;\n            resetUnbondingPosition(msg.sender);\n        } else {\n            transferredAsset = availableLiquidity;\n            uint256 shares = convertToShares(availableLiquidity);\n            reduceUnbondingPosition(shares, transferredAsset);\n            transferredShares = shares;\n        }\n        totalUnbonding -= transferredShares;\n        asset.safeTransfer(msg.sender, transferredAsset);\n    }\n\n    function unbonding(address _user) external view returns (uint256) {\n        return convertToAssets(unbondings[_user].shares);\n    }\n\n    function maximumClaimable(address _user) external view returns (uint256) {\n        uint256 underlyingUnbonding = unbondings[_user].maxUnderlying;\n        uint256 underlyingNow = convertToAssets(unbondings[_user].shares);\n        return\n            underlyingUnbonding < underlyingNow\n                ? underlyingUnbonding\n                : underlyingNow;\n    }\n}\n\n/* --------------------------------- errors -------------------------------- */\nerror InsufficientLiquidity();\nerror InvalidIndex();\nerror CollDownError();\n"
    },
    "contracts/shared/tokenization/ERC4626.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ERC20PermitUpgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\nimport {FixedPointMathLib} from \"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\";\nimport {IERC4626} from \"../interfaces/IERC4626.sol\";\n\nabstract contract ERC4626 is Initializable, ERC20PermitUpgradeable, IERC4626 {\n    using SafeERC20 for IERC20Metadata;\n    using FixedPointMathLib for uint256;\n\n    IERC20Metadata public asset;\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\n     */\n    function __ERC4626_init(IERC20Metadata _asset) internal onlyInitializing {\n        __ERC4626_init_unchained(_asset);\n    }\n\n    function __ERC4626_init_unchained(IERC20Metadata _asset)\n        internal\n        onlyInitializing\n    {\n        asset = _asset;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function deposit(uint256 assets, address receiver)\n        public\n        virtual\n        returns (uint256 shares)\n    {\n        // Check for rounding error since we round down in previewDeposit.\n        require((shares = previewDeposit(assets)) != 0, \"ZERO_SHARES\");\n\n        // Need to transfer before minting or ERC777s could reenter.\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares);\n    }\n\n    function mint(uint256 shares, address receiver)\n        public\n        virtual\n        returns (uint256 assets)\n    {\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\n\n        // Need to transfer before minting or ERC777s could reenter.\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares);\n    }\n\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public virtual returns (uint256 shares) {\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\n\n        if (msg.sender != owner) {\n            _spendAllowance(owner, msg.sender, shares);\n        }\n\n        beforeWithdraw(assets, shares);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        asset.safeTransfer(receiver, assets);\n    }\n\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) public virtual returns (uint256 assets) {\n        if (msg.sender != owner) {\n            _spendAllowance(owner, msg.sender, shares);\n        }\n\n        // Check for rounding error since we round down in previewRedeem.\n        require((assets = previewRedeem(shares)) != 0, \"ZERO_ASSETS\");\n\n        beforeWithdraw(assets, shares);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        asset.safeTransfer(receiver, assets);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function totalAssets() public view virtual returns (uint256);\n\n    function convertToShares(uint256 assets)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\n    }\n\n    function convertToAssets(uint256 shares)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\n    }\n\n    function previewDeposit(uint256 assets)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        return convertToShares(assets);\n    }\n\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\n    }\n\n    function previewWithdraw(uint256 assets)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\n    }\n\n    function previewRedeem(uint256 shares)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        return convertToAssets(shares);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return convertToAssets(balanceOf(owner));\n    }\n\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          INTERNAL HOOKS LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\n\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@rari-capital/solmate/src/utils/FixedPointMathLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\nlibrary FixedPointMathLib {\n    /*//////////////////////////////////////////////////////////////\n                    SIMPLIFIED FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\n\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\n    }\n\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\n    }\n\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\n    }\n\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    LOW LEVEL FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function mulDivDown(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // Divide z by the denominator.\n            z := div(z, denominator)\n        }\n    }\n\n    function mulDivUp(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 z) {\n        assembly {\n            // Store x * y in z for now.\n            z := mul(x, y)\n\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\n                revert(0, 0)\n            }\n\n            // First, divide z - 1 by the denominator and add 1.\n            // We allow z - 1 to underflow if z is 0, because we multiply the\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\n        }\n    }\n\n    function rpow(\n        uint256 x,\n        uint256 n,\n        uint256 scalar\n    ) internal pure returns (uint256 z) {\n        assembly {\n            switch x\n            case 0 {\n                switch n\n                case 0 {\n                    // 0 ** 0 = 1\n                    z := scalar\n                }\n                default {\n                    // 0 ** n = 0\n                    z := 0\n                }\n            }\n            default {\n                switch mod(n, 2)\n                case 0 {\n                    // If n is even, store scalar in z for now.\n                    z := scalar\n                }\n                default {\n                    // If n is odd, store x in z for now.\n                    z := x\n                }\n\n                // Shifting right by 1 is like dividing by 2.\n                let half := shr(1, scalar)\n\n                for {\n                    // Shift n right by 1 before looping to halve it.\n                    n := shr(1, n)\n                } n {\n                    // Shift n right by 1 each iteration to halve it.\n                    n := shr(1, n)\n                } {\n                    // Revert immediately if x ** 2 would overflow.\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\n                    if shr(128, x) {\n                        revert(0, 0)\n                    }\n\n                    // Store x squared.\n                    let xx := mul(x, x)\n\n                    // Round to the nearest number.\n                    let xxRound := add(xx, half)\n\n                    // Revert if xx + half overflowed.\n                    if lt(xxRound, xx) {\n                        revert(0, 0)\n                    }\n\n                    // Set x to scaled xxRound.\n                    x := div(xxRound, scalar)\n\n                    // If n is even:\n                    if mod(n, 2) {\n                        // Compute z * x.\n                        let zx := mul(z, x)\n\n                        // If z * x overflowed:\n                        if iszero(eq(div(zx, x), z)) {\n                            // Revert if x is non-zero.\n                            if iszero(iszero(x)) {\n                                revert(0, 0)\n                            }\n                        }\n\n                        // Round to the nearest number.\n                        let zxRound := add(zx, half)\n\n                        // Revert if zx + half overflowed.\n                        if lt(zxRound, zx) {\n                            revert(0, 0)\n                        }\n\n                        // Return properly scaled zxRound.\n                        z := div(zxRound, scalar)\n                    }\n                }\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\n        assembly {\n            // Start off with z at 1.\n            z := 1\n\n            // Used below to help find a nearby power of 2.\n            let y := x\n\n            // Find the lowest power of 2 that is at least sqrt(x).\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\n                y := shr(128, y) // Like dividing by 2 ** 128.\n                z := shl(64, z) // Like multiplying by 2 ** 64.\n            }\n            if iszero(lt(y, 0x10000000000000000)) {\n                y := shr(64, y) // Like dividing by 2 ** 64.\n                z := shl(32, z) // Like multiplying by 2 ** 32.\n            }\n            if iszero(lt(y, 0x100000000)) {\n                y := shr(32, y) // Like dividing by 2 ** 32.\n                z := shl(16, z) // Like multiplying by 2 ** 16.\n            }\n            if iszero(lt(y, 0x10000)) {\n                y := shr(16, y) // Like dividing by 2 ** 16.\n                z := shl(8, z) // Like multiplying by 2 ** 8.\n            }\n            if iszero(lt(y, 0x100)) {\n                y := shr(8, y) // Like dividing by 2 ** 8.\n                z := shl(4, z) // Like multiplying by 2 ** 4.\n            }\n            if iszero(lt(y, 0x10)) {\n                y := shr(4, y) // Like dividing by 2 ** 4.\n                z := shl(2, z) // Like multiplying by 2 ** 2.\n            }\n            if iszero(lt(y, 0x8)) {\n                // Equivalent to 2 ** z.\n                z := shl(1, z)\n            }\n\n            // Shifting right by 1 is like dividing by 2.\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n            z := shr(1, add(z, div(x, z)))\n\n            // Compute a rounded down version of z.\n            let zRoundDown := div(x, z)\n\n            // If zRoundDown is smaller, use it.\n            if lt(zRoundDown, z) {\n                z := zRoundDown\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/voyage/facets/LoanFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {ERC4626} from \"@rari-capital/solmate/src/mixins/ERC4626.sol\";\nimport {LibLiquidity} from \"../libraries/LibLiquidity.sol\";\nimport {LibLoan} from \"../libraries/LibLoan.sol\";\nimport {LibVault} from \"../libraries/LibVault.sol\";\nimport {IReserveInterestRateStrategy} from \"../interfaces/IReserveInterestRateStrategy.sol\";\nimport {IVToken} from \"../interfaces/IVToken.sol\";\nimport {IPriceOracle} from \"../interfaces/IPriceOracle.sol\";\nimport {LibAppStorage, AppStorage, Storage, BorrowData, BorrowState, Loan, ReserveConfigurationMap, ReserveData, PMT} from \"../libraries/LibAppStorage.sol\";\nimport {LibReserveConfiguration} from \"../libraries/LibReserveConfiguration.sol\";\nimport {WadRayMath} from \"../../shared/libraries/WadRayMath.sol\";\nimport {PercentageMath} from \"../../shared/libraries/PercentageMath.sol\";\nimport {PaymentsFacet} from \"../../shared/facets/PaymentsFacet.sol\";\nimport {SafeTransferLib} from \"../../shared/libraries/SafeTransferLib.sol\";\nimport {IVault} from \"../../vault/Vault.sol\";\nimport {MarketplaceAdapterFacet} from \"./MarketplaceAdapterFacet.sol\";\n\ncontract LoanFacet is Storage {\n    using WadRayMath for uint256;\n    using SafeERC20 for IERC20;\n    using PercentageMath for uint256;\n    using LibReserveConfiguration for ReserveConfigurationMap;\n\n    uint256 public immutable TEN_THOUSANDS = 10000;\n\n    struct ExecuteBuyNowParams {\n        address collection;\n        address marketplace;\n        uint256 tokenId;\n        address vault;\n        uint256 totalPrincipal;\n        uint256 totalInterest;\n        uint256 totalDebt;\n        uint256 outstandingPrincipal;\n        uint256 outstandingInterest;\n        uint256 outstandingDebt;\n        uint256 fv;\n        uint256 timestamp;\n        uint256 term;\n        uint256 epoch;\n        uint256 nper;\n        uint256 downpayment;\n        uint256 borrowRate;\n        uint256 availableLiquidity;\n        uint256 totalBalance;\n        uint256 totalPending;\n        uint256 loanId;\n        PMT pmt;\n    }\n\n    struct ExecuteLiquidateParams {\n        address collection;\n        address currency;\n        address vault;\n        uint256 loanId;\n        uint256 repaymentId;\n        uint256 principal;\n        uint256 interest;\n        uint256 totalDebt;\n        uint256 remaningDebt;\n        uint256 discount;\n        uint256 discountedFloorPrice;\n        uint256 amountNeedExtra;\n        uint256 juniorTrancheAmount;\n        uint256 receivedAmount;\n        address liquidator;\n        uint256 floorPrice;\n        uint256 floorPriceTime;\n        uint256 gracePeriod;\n        uint256 liquidationBonus;\n        uint256 marginRequirement;\n        uint256 writeDownAmount;\n        uint256 totalAssetFromJuniorTranche;\n        bool isFinal;\n    }\n\n    struct ExecuteRepayParams {\n        uint256 principal;\n        uint256 interest;\n        uint256 total;\n        uint256 totalDebt;\n    }\n\n    event Borrow(\n        address indexed _vault,\n        address indexed _collection,\n        address indexed _currency,\n        uint256 _loanId,\n        uint256 _principal,\n        uint256 _interest,\n        uint256 _apr\n    );\n\n    event Repayment(\n        address indexed _user,\n        address indexed _vault,\n        address indexed _collection,\n        address _currency,\n        uint256 _loanId,\n        uint256 _repaymentId,\n        uint256 _amount,\n        bool isFinal\n    );\n\n    event Liquidate(\n        address indexed _liquidator,\n        address indexed _vault,\n        address indexed _collection,\n        uint256 _drowDownId,\n        uint256 _repaymentId,\n        uint256 _debt,\n        uint256 _fromJuniorTranche,\n        uint256 _amountToWriteDown\n    );\n\n    event CollateralTransferred(\n        address collection,\n        address from,\n        address to,\n        uint256[] collaterals\n    );\n\n    function previewBuyNowParams(address _collection)\n        public\n        view\n        returns (ExecuteBuyNowParams memory)\n    {\n        ExecuteBuyNowParams memory params;\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\n            _collection\n        );\n        ReserveConfigurationMap memory reserveConf = LibReserveConfiguration\n            .getConfiguration(_collection);\n\n        (params.epoch, params.term) = reserveConf.getBorrowParams();\n        params.nper = params.term / params.epoch;\n\n        params.outstandingPrincipal =\n            params.totalPrincipal -\n            params.totalPrincipal /\n            params.nper;\n\n        BorrowState storage borrowState = LibLoan.getBorrowState(\n            _collection,\n            reserveData.currency\n        );\n\n        (params.borrowRate) = IReserveInterestRateStrategy(\n            reserveData.interestRateStrategyAddress\n        ).calculateBorrowRate(\n                reserveData.currency,\n                reserveData.seniorDepositTokenAddress,\n                0,\n                params.outstandingPrincipal,\n                borrowState.totalDebt\n            );\n\n        return params;\n    }\n\n    function buyNow(\n        address _collection,\n        uint256 _tokenId,\n        address payable _vault,\n        address _marketplace,\n        bytes calldata _data\n    ) external payable whenNotPaused {\n        ExecuteBuyNowParams memory params;\n        params.collection = _collection;\n        params.tokenId = _tokenId;\n        params.vault = _vault;\n        params.marketplace = _marketplace;\n\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\n            params.collection\n        );\n\n        BorrowState storage borrowState = LibLoan.getBorrowState(\n            params.collection,\n            reserveData.currency\n        );\n\n        // 0. check if the user owns the vault\n        if (LibVault.getVaultAddress(_msgSender()) != params.vault) {\n            revert Unauthorised();\n        }\n\n        // 1. get price for params.tokenId  and floor price pv\n        params.totalPrincipal = MarketplaceAdapterFacet(address(this))\n            .extractAssetPrice(_marketplace, _data);\n        (params.fv, params.timestamp) = IPriceOracle(\n            reserveData.priceOracle.implementation()\n        ).getTwap(params.collection);\n\n        if (params.fv == 0) {\n            revert InvalidFloorPrice();\n        }\n\n        if (params.fv < params.totalPrincipal) {\n            revert InvalidPrincipal();\n        }\n\n        // 2. get borrow params and borrow rate\n        ReserveConfigurationMap memory reserveConf = LibReserveConfiguration\n            .getConfiguration(params.collection);\n        (params.epoch, params.term) = reserveConf.getBorrowParams();\n        params.nper = params.term / params.epoch;\n        params.outstandingPrincipal =\n            params.totalPrincipal -\n            params.totalPrincipal /\n            params.nper;\n\n        // 3. check if available liquidity sufficient\n        params.totalPending = IVToken(reserveData.seniorDepositTokenAddress)\n            .totalUnbonding();\n        params.totalBalance = IERC20(reserveData.currency).balanceOf(\n            reserveData.seniorDepositTokenAddress\n        );\n        if (params.totalBalance > params.totalPending) {\n            params.availableLiquidity =\n                params.totalBalance -\n                params.totalPending;\n        }\n\n        if (params.availableLiquidity < params.outstandingPrincipal) {\n            revert InsufficientLiquidity();\n        }\n\n        (params.borrowRate) = IReserveInterestRateStrategy(\n            reserveData.interestRateStrategyAddress\n        ).calculateBorrowRate(\n                reserveData.currency,\n                reserveData.seniorDepositTokenAddress,\n                0,\n                params.outstandingPrincipal,\n                borrowState.totalDebt\n            );\n\n        // 4. insert debt, get total interest and PMT\n        (params.loanId, params.pmt, params.totalInterest) = LibLoan.insertDebt(\n            params.collection,\n            reserveData.currency,\n            params.tokenId,\n            params.vault,\n            params.totalPrincipal,\n            params.term,\n            params.epoch,\n            params.borrowRate\n        );\n\n        // 5. calculate downpayment and outstanding interest and debt\n        params.downpayment = params.pmt.pmt;\n        params.outstandingInterest = params.totalInterest - params.pmt.interest;\n        params.outstandingDebt =\n            params.outstandingPrincipal +\n            params.outstandingInterest;\n\n        // 6. check credit limit against with outstanding debt\n        uint256 availableCreditLimit = LibVault.getCreditLimit(\n            params.vault,\n            params.collection,\n            reserveData.currency,\n            params.fv\n        );\n        if (availableCreditLimit < params.outstandingDebt) {\n            revert InsufficientCreditLimit();\n        }\n\n        // 7.1 receive downpayment\n        if (params.downpayment > msg.value) {\n            IERC20(reserveData.currency).safeTransferFrom(\n                msg.sender,\n                address(this),\n                (params.downpayment - msg.value)\n            );\n        } else {\n            if (params.downpayment != msg.value) {\n                revert InvalidValueTransfered();\n            }\n        }\n\n        // 7.2 protocol fee\n        uint256 protocolFee = params.totalPrincipal.percentMul(\n            LibAppStorage.ds().protocolFee.cutRatio\n        );\n        IERC20(reserveData.currency).safeTransferFrom(\n            msg.sender,\n            LibAppStorage.ds().protocolFee.treasuryAddress,\n            protocolFee\n        );\n\n        // 8.1 transfer money to this\n        IVToken(reserveData.seniorDepositTokenAddress).transferUnderlyingTo(\n            address(this),\n            params.outstandingPrincipal\n        );\n\n        // 8.2 unwrap weth\n        PaymentsFacet(address(this)).unwrapWETH9(\n            params.outstandingPrincipal,\n            address(this)\n        );\n\n        SafeTransferLib.safeTransferETH(params.vault, params.totalPrincipal);\n\n        // 9. purchase nft\n        (params.pmt.principal, params.pmt.interest) = LibLoan.getPMT(\n            params.collection,\n            reserveData.currency,\n            params.vault,\n            params.loanId\n        );\n        MarketplaceAdapterFacet(address(this)).purchase(\n            params.marketplace,\n            params.vault,\n            _data\n        );\n\n        // 10. first payment\n        LibLoan.repay(\n            params.collection,\n            reserveData.currency,\n            params.vault,\n            params.loanId\n        );\n\n        // 11. distribute interest\n        LibLoan.distributeInterest(\n            reserveData,\n            params.pmt.interest,\n            _msgSender()\n        );\n\n        emit Borrow(\n            params.vault,\n            params.collection,\n            reserveData.currency,\n            params.loanId,\n            params.totalPrincipal,\n            params.totalInterest,\n            params.borrowRate\n        );\n    }\n\n    function repay(\n        address _collection,\n        uint256 _loan,\n        address payable _vault\n    ) external whenNotPaused {\n        ExecuteRepayParams memory params;\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\n            _collection\n        );\n\n        // 0. check if the user owns the vault\n        if (LibVault.getVaultAddress(_msgSender()) != _vault) {\n            revert Unauthorised();\n        }\n\n        // 1. check draw down to get principal and interest\n        (params.principal, params.interest) = LibLoan.getPMT(\n            _collection,\n            reserveData.currency,\n            _vault,\n            _loan\n        );\n        if (params.principal + params.interest == 0) {\n            revert InvalidDebt();\n        }\n\n        params.total = params.principal + params.interest;\n\n        // 2. update repay data\n        (uint256 repaymentId, bool isFinal) = LibLoan.repay(\n            _collection,\n            reserveData.currency,\n            _vault,\n            _loan\n        );\n\n        // 3. distribute interest\n        LibLoan.distributeInterest(reserveData, params.interest, _msgSender());\n\n        IERC20(reserveData.currency).safeTransferFrom(\n            _msgSender(),\n            reserveData.seniorDepositTokenAddress,\n            params.principal\n        );\n\n        emit Repayment(\n            _msgSender(),\n            _vault,\n            _collection,\n            reserveData.currency,\n            _loan,\n            repaymentId,\n            params.total,\n            isFinal\n        );\n    }\n\n    function liquidate(\n        address _collection,\n        address _vault,\n        uint256 _loanId\n    ) external whenNotPaused {\n        ExecuteLiquidateParams memory param;\n        param.collection = _collection;\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\n            param.collection\n        );\n        param.currency = reserveData.currency;\n        ReserveConfigurationMap memory reserveConf = LibReserveConfiguration\n            .getConfiguration(param.collection);\n\n        // 1. prepare basic info and some strategy parameters\n        param.vault = _vault;\n        param.loanId = _loanId;\n        param.liquidator = _msgSender();\n        (param.liquidationBonus, param.gracePeriod) = reserveConf\n            .getLiquidationParams();\n\n        LibLoan.LoanDetail memory loanDetail = LibLoan.getLoanDetail(\n            param.collection,\n            param.currency,\n            param.vault,\n            param.loanId\n        );\n\n        // 2. check if the debt is qualified to be liquidated\n        if (\n            block.timestamp <= loanDetail.nextPaymentDue ||\n            block.timestamp - loanDetail.nextPaymentDue <=\n            param.gracePeriod * LibLoan.SECOND_PER_DAY\n        ) {\n            revert InvalidLiquidate();\n        }\n\n        // 3 get floor price from oracle contract\n        IPriceOracle priceOracle = IPriceOracle(\n            reserveData.priceOracle.implementation()\n        );\n        (param.floorPrice, param.floorPriceTime) = priceOracle.getTwap(\n            param.collection\n        );\n\n        if (param.floorPrice == 0) {\n            revert InvalidFloorPrice();\n        }\n\n        // 3 get pmt info\n        (param.principal, param.interest) = LibLoan.getPMT(\n            param.collection,\n            param.currency,\n            param.vault,\n            param.loanId\n        );\n        param.totalDebt = param.principal;\n        param.remaningDebt = param.totalDebt;\n        param.discount = getDiscount(param.floorPrice, param.liquidationBonus);\n        param.discountedFloorPrice = param.floorPrice - param.discount;\n\n        // 4 transfer all nfts to liquidator\n        uint256[] memory collaterals = LibLoan.releaseLien(\n            param.collection,\n            param.currency,\n            param.vault,\n            param.loanId\n        );\n\n        uint256 discountedFloorPriceInTotal = param.discountedFloorPrice *\n            collaterals.length;\n        IERC20(param.currency).safeTransferFrom(\n            param.liquidator,\n            address(this),\n            discountedFloorPriceInTotal\n        );\n        param.receivedAmount += discountedFloorPriceInTotal;\n\n        for (uint256 i = 0; i < collaterals.length; i++) {\n            bytes4 selector = IERC721(param.collection).transferFrom.selector;\n            bytes memory data = abi.encodePacked(\n                selector,\n                abi.encode(param.vault, param.liquidator, collaterals[i])\n            );\n            bytes memory encodedData = abi.encode(param.collection, data);\n            IVault(_vault).execute(encodedData);\n        }\n\n        emit CollateralTransferred(\n            param.collection,\n            param.vault,\n            param.liquidator,\n            collaterals\n        );\n\n        if (param.totalDebt > discountedFloorPriceInTotal) {\n            param.remaningDebt = param.totalDebt - discountedFloorPriceInTotal;\n        } else {\n            uint256 refundAmount = discountedFloorPriceInTotal -\n                param.totalDebt;\n            IERC20(param.currency).transfer(param.vault, refundAmount);\n            param.receivedAmount -= refundAmount;\n        }\n\n        // 5. transfer from junior tranche if there is still remaning debt\n        if (param.remaningDebt > 0) {\n            param.totalAssetFromJuniorTranche = ERC4626(\n                reserveData.juniorDepositTokenAddress\n            ).totalAssets();\n\n            if (param.totalAssetFromJuniorTranche >= param.remaningDebt) {\n                IVToken(reserveData.juniorDepositTokenAddress)\n                    .transferUnderlyingTo(address(this), param.remaningDebt);\n                param.juniorTrancheAmount = param.remaningDebt;\n                param.receivedAmount += param.remaningDebt;\n            } else {\n                IVToken(reserveData.juniorDepositTokenAddress)\n                    .transferUnderlyingTo(\n                        address(this),\n                        param.totalAssetFromJuniorTranche\n                    );\n                param.juniorTrancheAmount = param.totalAssetFromJuniorTranche;\n                param.receivedAmount += param.totalAssetFromJuniorTranche;\n                param.writeDownAmount =\n                    param.remaningDebt -\n                    param.totalAssetFromJuniorTranche;\n            }\n        }\n\n        // 6. record repay info\n        (param.repaymentId, param.isFinal) = LibLoan.repay(\n            param.collection,\n            param.currency,\n            param.vault,\n            param.loanId\n        );\n\n        emit Repayment(\n            _msgSender(),\n            param.vault,\n            param.collection,\n            param.currency,\n            param.loanId,\n            param.repaymentId,\n            param.totalDebt,\n            param.isFinal\n        );\n\n        // 7. transfer to senior deposit token\n        IERC20(param.currency).safeTransfer(\n            reserveData.seniorDepositTokenAddress,\n            param.receivedAmount\n        );\n\n        emit Liquidate(\n            _msgSender(),\n            _vault,\n            param.currency,\n            param.loanId,\n            param.repaymentId,\n            param.totalDebt,\n            param.juniorTrancheAmount,\n            param.writeDownAmount\n        );\n    }\n\n    function getVaultDebt(address _collection, address _vault)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\n            _collection\n        );\n        return LibVault.getVaultDebt(_collection, reserveData.currency, _vault);\n    }\n\n    /// @notice Returns the total outstanding principal debt for a particular underlying asset pool\n    /// @param _collection the address of the underlying nft collection.\n    /// @return The total outstanding principal owed to depositors.\n    function principalBalance(address _collection)\n        external\n        view\n        returns (uint256)\n    {\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\n            _collection\n        );\n        BorrowState storage borrowState = LibLoan.getBorrowState(\n            _collection,\n            reserveData.currency\n        );\n        return borrowState.totalDebt;\n    }\n\n    /// @notice Returns the total outstanding interest debt for a particular underlying asset pool\n    /// @param _collection the address of the underlying nft collection.\n    /// @return The total outstanding interest owed to depositors.\n    function interestBalance(address _collection)\n        external\n        view\n        returns (uint256)\n    {\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\n            _collection\n        );\n        BorrowState storage borrowState = LibLoan.getBorrowState(\n            _collection,\n            reserveData.currency\n        );\n        return borrowState.totalInterest;\n    }\n\n    function getDiscount(uint256 _value, uint256 _liquidationBonus)\n        private\n        pure\n        returns (uint256)\n    {\n        uint256 withBonus = _value.percentMul(_liquidationBonus);\n        return withBonus - _value;\n    }\n}\n\n/* --------------------------------- errors -------------------------------- */\nerror Unauthorised();\nerror InsufficientLiquidity();\nerror InsufficientCreditLimit();\nerror InvalidDebt();\nerror InvalidLiquidate();\nerror InvalidFloorPrice();\nerror InvalidPrincipal();\nerror InvalidValueTransfered();\n"
    },
    "@rari-capital/solmate/src/mixins/ERC4626.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\nimport {SafeTransferLib} from \"../utils/SafeTransferLib.sol\";\nimport {FixedPointMathLib} from \"../utils/FixedPointMathLib.sol\";\n\n/// @notice Minimal ERC4626 tokenized Vault implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\nabstract contract ERC4626 is ERC20 {\n    using SafeTransferLib for ERC20;\n    using FixedPointMathLib for uint256;\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /*//////////////////////////////////////////////////////////////\n                               IMMUTABLES\n    //////////////////////////////////////////////////////////////*/\n\n    ERC20 public immutable asset;\n\n    constructor(\n        ERC20 _asset,\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol, _asset.decimals()) {\n        asset = _asset;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\n        // Check for rounding error since we round down in previewDeposit.\n        require((shares = previewDeposit(assets)) != 0, \"ZERO_SHARES\");\n\n        // Need to transfer before minting or ERC777s could reenter.\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares);\n    }\n\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\n\n        // Need to transfer before minting or ERC777s could reenter.\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        _mint(receiver, shares);\n\n        emit Deposit(msg.sender, receiver, assets, shares);\n\n        afterDeposit(assets, shares);\n    }\n\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public virtual returns (uint256 shares) {\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\n\n        if (msg.sender != owner) {\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\n        }\n\n        beforeWithdraw(assets, shares);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        asset.safeTransfer(receiver, assets);\n    }\n\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) public virtual returns (uint256 assets) {\n        if (msg.sender != owner) {\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\n\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\n        }\n\n        // Check for rounding error since we round down in previewRedeem.\n        require((assets = previewRedeem(shares)) != 0, \"ZERO_ASSETS\");\n\n        beforeWithdraw(assets, shares);\n\n        _burn(owner, shares);\n\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\n\n        asset.safeTransfer(receiver, assets);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function totalAssets() public view virtual returns (uint256);\n\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\n    }\n\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\n    }\n\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return convertToShares(assets);\n    }\n\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\n    }\n\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\n\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\n    }\n\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return convertToAssets(shares);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return convertToAssets(balanceOf[owner]);\n    }\n\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          INTERNAL HOOKS LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\n\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\n}\n"
    },
    "contracts/voyage/libraries/LibLoan.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {LibAppStorage, AppStorage, BorrowData, BorrowState, Loan, PMT, RepaymentData, ReserveData, RepaymentData, NFTInfo, ReserveConfigurationMap} from \"./LibAppStorage.sol\";\nimport {LibLiquidity} from \"./LibLiquidity.sol\";\nimport {LibReserveConfiguration} from \"./LibReserveConfiguration.sol\";\nimport {WadRayMath} from \"../../shared/libraries/WadRayMath.sol\";\nimport {PercentageMath} from \"../../shared/libraries/PercentageMath.sol\";\n\nlibrary LibLoan {\n    using WadRayMath for uint256;\n    using PercentageMath for uint256;\n    using SafeERC20 for IERC20;\n    using LibReserveConfiguration for ReserveConfigurationMap;\n\n    uint256 internal constant RAY = 1e27;\n    uint256 internal constant SECOND_PER_DAY = 1 days;\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\n\n    struct LoanDetail {\n        uint256 principal;\n        uint256 interest;\n        uint256 term;\n        uint256 epoch;\n        uint256 nper;\n        address reserve;\n        PMT pmt;\n        uint256 apr;\n        uint256 borrowAt;\n        uint256 nextPaymentDue;\n        uint256 totalPrincipalPaid;\n        uint256 totalInterestPaid;\n        uint256 paidTimes;\n    }\n\n    struct ExecuteDebtParam {\n        address collection;\n        address currency;\n        uint256 tokenId;\n        address vault;\n        uint256 principal;\n        uint256 interest;\n        uint256 term;\n        uint256 epoch;\n        uint256 apr;\n    }\n\n    /* ----------------------------- state mutations ---------------------------- */\n\n    function releaseLien(\n        address _collection,\n        address _currency,\n        address _vault,\n        uint256 _loanId\n    ) internal returns (uint256[] memory ret) {\n        BorrowData storage borrowData = getBorrowData(\n            _collection,\n            _currency,\n            _vault\n        );\n\n        Loan storage loan = borrowData.loans[_loanId];\n        uint256[] storage collaterals = loan.collateral;\n        ret = collaterals;\n        for (uint256 i = 0; i < collaterals.length; i++) {\n            delete LibAppStorage.ds().nftIndex[_collection][collaterals[i]];\n        }\n        delete borrowData.loans[_loanId];\n        return ret;\n    }\n\n    function calculateInterest(\n        address _collection,\n        address _currency,\n        uint256 _collateral,\n        address _vault,\n        uint256 _principal,\n        uint256 _term,\n        uint256 _epoch,\n        uint256 _apr\n    ) internal {\n        ExecuteDebtParam memory param = composeExecuteDebtParam(\n            _collection,\n            _currency,\n            _collateral,\n            _vault,\n            _principal,\n            _term,\n            _epoch,\n            _apr\n        );\n        BorrowData storage borrowData = getBorrowData(\n            param.collection,\n            param.currency,\n            param.vault\n        );\n        uint256 currentLoanNumber = borrowData.nextLoanNumber;\n        Loan storage loan = borrowData.loans[currentLoanNumber];\n        loan.principal = param.principal;\n        loan.term = param.term;\n        loan.epoch = param.epoch;\n        loan.apr = param.apr;\n        loan.nper = (_term * SECOND_PER_DAY) / (_epoch * SECOND_PER_DAY);\n        loan.borrowAt = block.timestamp;\n        uint256 periodsPerYear = SECONDS_PER_YEAR /\n            (loan.epoch * SECOND_PER_DAY);\n        uint256 effectiveInterestRate = (loan.apr * loan.nper) / periodsPerYear;\n        loan.interest = loan.principal.rayMul(effectiveInterestRate);\n\n        PMT memory pmt;\n        pmt.principal = loan.principal / loan.nper;\n        pmt.interest = loan.interest / loan.nper;\n        pmt.pmt = pmt.principal + pmt.interest;\n        loan.pmt = pmt;\n    }\n\n    function insertDebt(\n        address _collection,\n        address _currency,\n        uint256 _collateral,\n        address _vault,\n        uint256 _principal,\n        uint256 _term,\n        uint256 _epoch,\n        uint256 _apr\n    )\n        internal\n        returns (\n            uint256 loanId,\n            PMT memory pmt,\n            uint256 totalInterest\n        )\n    {\n        ExecuteDebtParam memory param = composeExecuteDebtParam(\n            _collection,\n            _currency,\n            _collateral,\n            _vault,\n            _principal,\n            _term,\n            _epoch,\n            _apr\n        );\n\n        (\n            BorrowState storage borrowState,\n            BorrowData storage borrowData\n        ) = getBorrowDataAndState(param);\n\n        uint256 currentLoanNumber = borrowData.nextLoanNumber;\n        Loan storage loan = borrowData.loans[currentLoanNumber];\n        updateLoan(loan, param);\n\n        pmt = calculatePMT(loan);\n        loan.pmt = pmt;\n\n        loan.collateral.push(param.tokenId);\n        LibAppStorage.ds().nftIndex[param.collection][\n            param.tokenId\n        ] = composeNFTInfo(param);\n        loan.nextPaymentDue =\n            loan.borrowAt +\n            (loan.paidTimes + 1) *\n            loan.epoch *\n            SECOND_PER_DAY;\n\n        updateBorrowData(borrowState, loan, borrowData, param.principal);\n\n        return (currentLoanNumber, pmt, loan.interest);\n    }\n\n    function repay(\n        address _collection,\n        address _currency,\n        address _vault,\n        uint256 _loanNumber\n    ) internal returns (uint256, bool) {\n        ExecuteDebtParam memory param;\n        param.collection = _collection;\n        param.currency = _currency;\n        param.vault = _vault;\n        bool isFinal = false;\n        BorrowData storage debtData = getBorrowData(\n            param.collection,\n            param.currency,\n            param.vault\n        );\n        BorrowState storage borrowState = getBorrowState(\n            param.collection,\n            param.currency\n        );\n        Loan storage loan = debtData.loans[_loanNumber];\n        loan.paidTimes += 1;\n        if (loan.paidTimes == loan.nper) {\n            uint256[] storage collaterals = loan.collateral;\n            for (uint256 i = 0; i < collaterals.length; i++) {\n                LibAppStorage\n                .ds()\n                .nftIndex[param.collection][collaterals[i]]\n                    .isCollateral = false;\n            }\n            delete debtData.loans[_loanNumber];\n            isFinal = true;\n            borrowState.repaidTimes[param.vault] =\n                borrowState.repaidTimes[param.vault] +\n                1;\n        } else {\n            loan.totalPrincipalPaid =\n                loan.totalPrincipalPaid +\n                loan.pmt.principal;\n            loan.totalInterestPaid = loan.totalInterestPaid + loan.pmt.interest;\n            RepaymentData memory repayment;\n            repayment.interest = loan.pmt.interest;\n            repayment.principal = loan.pmt.principal;\n            repayment.total = loan.pmt.principal + loan.pmt.interest;\n            repayment.paidAt = uint40(block.timestamp);\n            loan.repayments.push(repayment);\n            // t, t+1, t+2\n            loan.nextPaymentDue =\n                loan.borrowAt +\n                loan.paidTimes *\n                loan.epoch *\n                SECOND_PER_DAY;\n        }\n\n        debtData.totalPrincipal = debtData.totalPrincipal - loan.pmt.principal;\n        debtData.totalInterest = debtData.totalInterest - loan.pmt.interest;\n        if (borrowState.totalDebt == loan.pmt.principal) {\n            borrowState.avgBorrowRate = 0;\n        } else {\n            uint256 numer = borrowState.totalDebt.rayMul(\n                borrowState.avgBorrowRate\n            ) - loan.pmt.principal.rayMul(loan.apr);\n            uint256 denom = borrowState.totalDebt - loan.pmt.principal;\n            borrowState.avgBorrowRate = numer.rayDiv(denom);\n        }\n        borrowState.totalDebt = borrowState.totalDebt - loan.pmt.principal;\n        borrowState.totalInterest = borrowState.totalInterest - param.interest;\n\n        return (\n            loan.repayments.length == 0 ? 0 : loan.repayments.length - 1,\n            isFinal\n        );\n    }\n\n    function getBorrowDataAndState(ExecuteDebtParam memory param)\n        internal\n        view\n        returns (BorrowState storage borrowState, BorrowData storage borrowData)\n    {\n        borrowState = getBorrowState(param.collection, param.currency);\n        borrowData = getBorrowData(\n            param.collection,\n            param.currency,\n            param.vault\n        );\n        return (borrowState, borrowData);\n    }\n\n    function updateLoan(Loan storage loan, ExecuteDebtParam memory param)\n        internal\n    {\n        loan.principal = param.principal;\n        loan.term = param.term;\n        loan.epoch = param.epoch;\n        loan.apr = param.apr;\n        loan.nper =\n            (param.term * SECOND_PER_DAY) /\n            (param.epoch * SECOND_PER_DAY);\n        loan.borrowAt = block.timestamp;\n        uint256 periodsPerYear = SECONDS_PER_YEAR /\n            (loan.epoch * SECOND_PER_DAY);\n        uint256 effectiveInterestRate = (loan.apr * loan.nper) / periodsPerYear;\n        loan.interest = loan.principal.rayMul(effectiveInterestRate);\n    }\n\n    function calculatePMT(Loan storage loan)\n        internal\n        view\n        returns (PMT memory)\n    {\n        PMT memory pmt;\n        pmt.principal = loan.principal / loan.nper;\n        pmt.interest = loan.interest / loan.nper;\n        pmt.pmt = pmt.principal + pmt.interest;\n        return pmt;\n    }\n\n    function composeExecuteDebtParam(\n        address _collection,\n        address _currency,\n        uint256 _collateral,\n        address _vault,\n        uint256 _principal,\n        uint256 _term,\n        uint256 _epoch,\n        uint256 _apr\n    ) internal pure returns (ExecuteDebtParam memory param) {\n        param.collection = _collection;\n        param.currency = _currency;\n        param.tokenId = _collateral;\n        param.vault = _vault;\n        param.principal = _principal;\n        param.term = _term;\n        param.epoch = _epoch;\n        param.apr = _apr;\n        return param;\n    }\n\n    function composeNFTInfo(ExecuteDebtParam memory param)\n        internal\n        pure\n        returns (NFTInfo memory nftInfo)\n    {\n        nftInfo.collection = param.collection;\n        nftInfo.tokenId = param.tokenId;\n        nftInfo.currency = param.currency;\n        nftInfo.price = param.principal;\n        nftInfo.isCollateral = true;\n        return nftInfo;\n    }\n\n    function updateBorrowData(\n        BorrowState storage borrowState,\n        Loan storage loan,\n        BorrowData storage borrowData,\n        uint256 principal\n    ) internal {\n        borrowData.nextLoanNumber++;\n        borrowData.mapSize++;\n        borrowData.totalPrincipal = borrowData.totalPrincipal + principal;\n        borrowData.totalInterest = borrowData.totalInterest + loan.interest;\n\n        /// @dev most of the time, principal and totalDebt are denominated in wad\n        /// we use ray operations as we are seeking avgBorrowRate, which is supposed to be epxressed in ray.\n        /// in the vast majority of cases, as the underlying asset has 18 DPs, we end up just padding the LSBs with 0 to make avgBorrowRate a ray.\n        ///  formula: ((debt * avgBorrowRate) + (principal*apr)) / (debt + principal)\n        uint256 numer = (\n            borrowState.totalDebt.rayMul(borrowState.avgBorrowRate)\n        ) + (loan.principal.rayMul(loan.apr));\n        uint256 denom = borrowState.totalDebt + loan.principal;\n        borrowState.avgBorrowRate = numer.rayDiv(denom);\n        borrowState.totalDebt = borrowState.totalDebt + loan.principal;\n        borrowState.totalInterest = borrowState.totalInterest + loan.interest;\n    }\n\n    function distributeInterest(\n        ReserveData memory reserveData,\n        uint256 interest,\n        address sender\n    ) internal {\n        uint256 incomeRatio = LibReserveConfiguration\n            .getConfiguration(reserveData.currency)\n            .getIncomeRatio();\n        uint256 seniorInterest = interest.percentMul(incomeRatio);\n        IERC20(reserveData.currency).safeTransferFrom(\n            sender,\n            reserveData.seniorDepositTokenAddress,\n            seniorInterest\n        );\n\n        IERC20(reserveData.currency).safeTransferFrom(\n            sender,\n            reserveData.juniorDepositTokenAddress,\n            interest - seniorInterest\n        );\n    }\n\n    /* ----------------------------- view functions ----------------------------- */\n\n    function getBorrowState(address _collection, address _currency)\n        internal\n        view\n        returns (BorrowState storage)\n    {\n        AppStorage storage s = LibAppStorage.ds();\n        return s._borrowState[_collection][_currency];\n    }\n\n    function getBorrowData(\n        address _collection,\n        address _currency,\n        address _vault\n    ) internal view returns (BorrowData storage) {\n        AppStorage storage s = LibAppStorage.ds();\n        return s._borrowData[_collection][_currency][_vault];\n    }\n\n    function getLoanDetail(\n        address _collection,\n        address _currency,\n        address _vault,\n        uint256 _loanId\n    ) internal view returns (LoanDetail memory) {\n        AppStorage storage s = LibAppStorage.ds();\n        BorrowData storage borrowData = s._borrowData[_collection][_currency][\n            _vault\n        ];\n        Loan storage loan = borrowData.loans[_loanId];\n        LoanDetail memory loanDetail;\n        loanDetail.principal = loan.principal;\n        loanDetail.interest = loan.interest;\n        loanDetail.term = loan.term;\n        loanDetail.epoch = loan.epoch;\n        loanDetail.nper = loan.nper;\n        loanDetail.pmt = loan.pmt;\n        loanDetail.apr = loan.apr;\n        loanDetail.borrowAt = loan.borrowAt;\n        loanDetail.nextPaymentDue = loan.nextPaymentDue;\n        loanDetail.totalInterestPaid = loan.totalInterestPaid;\n        loanDetail.totalPrincipalPaid = loan.totalPrincipalPaid;\n        loanDetail.paidTimes = loan.paidTimes;\n        loanDetail.reserve = _currency;\n        return loanDetail;\n    }\n\n    function getRepayment(\n        address _collection,\n        address _currency,\n        address _vault,\n        uint256 _loanId\n    ) internal view returns (RepaymentData[] memory) {\n        AppStorage storage s = LibAppStorage.ds();\n        BorrowData storage borrowData = s._borrowData[_collection][_currency][\n            _vault\n        ];\n        Loan storage loan = borrowData.loans[_loanId];\n        return loan.repayments;\n    }\n\n    function getLoanList(\n        address _collection,\n        address _currency,\n        address _vault\n    ) internal view returns (uint256, uint256) {\n        AppStorage storage s = LibAppStorage.ds();\n        BorrowData storage borrowData = s._borrowData[_collection][_currency][\n            _vault\n        ];\n        return (borrowData.paidLoanNumber, borrowData.nextLoanNumber);\n    }\n\n    function getPMT(\n        address _collection,\n        address _currency,\n        address _vault,\n        uint256 _loan\n    ) internal view returns (uint256, uint256) {\n        AppStorage storage s = LibAppStorage.ds();\n        Loan storage loan = s._borrowData[_collection][_currency][_vault].loans[\n            _loan\n        ];\n        return (loan.pmt.principal, loan.pmt.interest);\n    }\n}\n"
    },
    "contracts/voyage/interfaces/IReserveInterestRateStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\n/**\n@title IReserveInterestRateStrategyInterface interface\n@notice Interface for the calculation of the interest rates.\n*/\n\ninterface IReserveInterestRateStrategy {\n    function calculateBorrowRate(\n        address reserve,\n        address seniorDepositTokenAddress,\n        uint256 liquidityAdded,\n        uint256 liquidityTaken,\n        uint256 totalStableDebt\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/voyage/interfaces/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\ninterface IPriceOracle {\n    function getTwap(address _asset) external view returns (uint256, uint256);\n\n    function updateTwap(address _asset, uint256 _priceAverage) external;\n}\n"
    },
    "contracts/voyage/facets/MarketplaceAdapterFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {IVault} from \"../../vault/Vault.sol\";\nimport {IMarketPlaceAdapter} from \"../interfaces/IMarketPlaceAdapter.sol\";\nimport {Storage, LibAppStorage} from \"../libraries/LibAppStorage.sol\";\n\ncontract MarketplaceAdapterFacet is Storage {\n    event MarketplaceAdapterUpdated(\n        address indexed _marketplace,\n        address _strategy\n    );\n\n    function purchase(\n        address _marketplace,\n        address _vault,\n        bytes calldata _data\n    ) external {\n        if (msg.sender != address(this)) {\n            revert InvalidCaller();\n        }\n        address adapterAddr = LibAppStorage\n            .ds()\n            .marketPlaceData[_marketplace]\n            .adapterAddr;\n        bytes memory data = IMarketPlaceAdapter(adapterAddr).execute(_data);\n        bytes memory encodedData = abi.encode(_marketplace, data);\n        IVault(_vault).execute(encodedData);\n    }\n\n    function extractAssetPrice(address _marketplace, bytes calldata _data)\n        external\n        view\n        returns (uint256)\n    {\n        address adapterAddr = LibAppStorage\n            .ds()\n            .marketPlaceData[_marketplace]\n            .adapterAddr;\n\n        return IMarketPlaceAdapter(adapterAddr).extractAssetPrice(_data);\n    }\n\n    function updateMarketPlaceData(address _marketplace, address _strategy)\n        external\n        authorised\n    {\n        LibAppStorage\n            .ds()\n            .marketPlaceData[_marketplace]\n            .adapterAddr = _strategy;\n        emit MarketplaceAdapterUpdated(_marketplace, _strategy);\n    }\n\n    error InvalidCaller();\n}\n"
    },
    "@rari-capital/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "@rari-capital/solmate/src/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"
    },
    "contracts/voyage/interfaces/IMarketPlaceAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\ninterface IMarketPlaceAdapter {\n    function extractAssetPrice(bytes calldata _data)\n        external\n        pure\n        returns (uint256);\n\n    function validate(bytes calldata _data) external view returns (bool);\n\n    function execute(bytes calldata _data) external view returns (bytes memory);\n}\n"
    },
    "contracts/voyage/InitDiamond.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {UpgradeableBeacon} from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport {AppStorage, LibAppStorage} from \"./libraries/LibAppStorage.sol\";\nimport {LibDiamond} from \"../shared/diamond/libraries/LibDiamond.sol\";\nimport {IDiamondLoupe} from \"../shared/diamond/interfaces/IDiamondLoupe.sol\";\nimport {IDiamondCut} from \"../shared/diamond/interfaces/IDiamondCut.sol\";\nimport {IERC173} from \"../shared/diamond/interfaces/IERC173.sol\";\nimport {IERC165} from \"../shared/diamond/interfaces/IERC165.sol\";\nimport {IWETH9} from \"../shared/facets/PaymentsFacet.sol\";\nimport {DSRoles} from \"../voyage/auth/DSRoles.sol\";\nimport {DSGuard} from \"../voyage/auth/DSGuard.sol\";\nimport {IVaultFactory} from \"./interfaces/IVaultFactory.sol\";\n\ncontract InitDiamond {\n    struct Args {\n        address initOwner;\n        address seniorDepositTokenImpl;\n        address juniorDepositTokenImpl;\n        address vaultFactory;\n        address diamondCutFacet;\n        address diamondLoupeFacet;\n        address ownershipFacet;\n        address weth9;\n        address trustedForwarder;\n        address paymaster;\n    }\n\n    function init(Args memory _args) external {\n        // initialise diamond level stuff\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\n\n        // initialise app storage stuff\n        AppStorage storage s = LibAppStorage.ds();\n        LibAppStorage.ds().WETH9 = IWETH9(_args.weth9);\n        LibAppStorage.ds()._paused = false;\n        if (address(LibAppStorage.ds().auth.rbac) == address(0)) {\n            LibAppStorage.ds().auth.rbac = new DSRoles();\n        }\n        if (address(LibAppStorage.ds().auth.acl) == address(0)) {\n            LibAppStorage.ds().auth.acl = new DSGuard();\n            LibAppStorage.ds().auth.rbac.setRootUser(_args.initOwner, true);\n            bytes32 ANY = bytes32(type(uint256).max);\n            LibAppStorage.ds().auth.acl.permit(\n                bytes32(bytes20(_args.initOwner)),\n                ANY,\n                ANY\n            );\n        }\n\n        if (\n            address(LibAppStorage.ds().seniorDepositTokenBeacon) == address(0)\n        ) {\n            LibAppStorage.ds().seniorDepositTokenBeacon = new UpgradeableBeacon(\n                _args.seniorDepositTokenImpl\n            );\n        }\n\n        if (\n            address(LibAppStorage.ds().juniorDepositTokenBeacon) == address(0)\n        ) {\n            LibAppStorage.ds().juniorDepositTokenBeacon = new UpgradeableBeacon(\n                _args.juniorDepositTokenImpl\n            );\n        }\n\n        if (address(LibAppStorage.ds().vaultFactory) == address(0)) {\n            LibAppStorage.ds().vaultFactory = IVaultFactory(_args.vaultFactory);\n        }\n\n        if (LibAppStorage.ds().diamondFacet.diamondCutFacet == address(0)) {\n            LibAppStorage.ds().diamondFacet.diamondCutFacet = _args\n                .diamondCutFacet;\n        }\n\n        if (LibAppStorage.ds().diamondFacet.diamondLoupeFacet == address(0)) {\n            LibAppStorage.ds().diamondFacet.diamondLoupeFacet = _args\n                .diamondLoupeFacet;\n        }\n\n        if (LibAppStorage.ds().diamondFacet.ownershipFacet == address(0)) {\n            LibAppStorage.ds().diamondFacet.ownershipFacet = _args\n                .ownershipFacet;\n        }\n\n        if (s.trustedForwarder == address(0)) {\n            s.trustedForwarder = _args.trustedForwarder;\n        }\n\n        if (s.paymaster == address(0)) {\n            s.paymaster = _args.paymaster;\n        }\n    }\n}\n"
    },
    "contracts/voyage/VaultFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport \"openzeppelin-solidity/contracts/utils/Create2.sol\";\nimport {Vault} from \"../vault/Vault.sol\";\nimport {IVaultFactory} from \"./interfaces/IVaultFactory.sol\";\n\ncontract VaultFactory is IVaultFactory {\n    function createVault(\n        address owner,\n        address voyage,\n        uint256 version,\n        bytes32 checksum,\n        bytes32 salt\n    ) external returns (address) {\n        bytes memory creationCode = type(Vault).creationCode;\n\n        bytes memory bytecode = abi.encodePacked(\n            creationCode,\n            abi.encode(owner, voyage, version, checksum)\n        );\n\n        return Create2.deploy(0, salt, bytecode);\n    }\n}\n"
    },
    "openzeppelin-solidity/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address) {\n        address addr;\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address) {\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\n        return address(uint160(uint256(_data)));\n    }\n}\n"
    },
    "contracts/voyage/strategy/DefaultReserveInterestRateStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IVToken} from \"../interfaces/IVToken.sol\";\nimport {IReserveInterestRateStrategy} from \"../interfaces/IReserveInterestRateStrategy.sol\";\nimport {WadRayMath} from \"../../shared/libraries/WadRayMath.sol\";\n\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\n    using WadRayMath for uint256;\n    /**\n     * this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates\n     * Expressed in RAY\n     **/\n    uint256 public immutable OPTIMAL_UTILIZATION_RATE;\n\n    // Base interest rate set by governance. Expressed in ray\n    uint256 internal immutable baseBorrowRate;\n\n    // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\n    uint256 internal immutable stableRateSlope;\n\n    constructor(\n        uint256 _optimalUtilizationRate,\n        uint256 _stableRateSlope,\n        uint256 _baseBorrowRate\n    ) {\n        OPTIMAL_UTILIZATION_RATE = _optimalUtilizationRate;\n        baseBorrowRate = _baseBorrowRate;\n        stableRateSlope = _stableRateSlope;\n    }\n\n    struct CalcInterestRatesLocalVars {\n        uint256 totalDebt;\n        uint256 currentStableBorrowRate;\n        uint256 currentLiquidityRate;\n        uint256 utilizationRate;\n    }\n\n    function calculateBorrowRate(\n        address reserve,\n        address seniorDepositTokenAddress,\n        uint256 liquidityAdded,\n        uint256 liquidityTaken,\n        uint256 totalStableDebt\n    ) external view returns (uint256) {\n        CalcInterestRatesLocalVars memory vars;\n        vars.totalDebt = totalStableDebt;\n        vars.currentStableBorrowRate = baseBorrowRate;\n\n        uint256 totalPendingWithdrawal = IVToken(seniorDepositTokenAddress)\n            .totalUnbonding();\n\n        uint256 availableLiquidity = IERC20(reserve).balanceOf(\n            seniorDepositTokenAddress\n        ) - totalPendingWithdrawal;\n\n        availableLiquidity =\n            availableLiquidity +\n            liquidityAdded -\n            liquidityTaken;\n\n        vars.utilizationRate = vars.totalDebt == 0\n            ? 0\n            : vars.totalDebt.rayDiv(availableLiquidity + vars.totalDebt);\n        if (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\n            vars.currentStableBorrowRate =\n                vars.currentStableBorrowRate +\n                (\n                    stableRateSlope\n                        .rayMul(vars.utilizationRate - OPTIMAL_UTILIZATION_RATE)\n                        .rayDiv(WadRayMath.Ray() - OPTIMAL_UTILIZATION_RATE)\n                );\n        }\n        return vars.currentStableBorrowRate;\n    }\n}\n"
    },
    "contracts/voyage/infra/PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {WadRayMath} from \"../../shared/libraries/WadRayMath.sol\";\nimport {IPriceOracle} from \"../interfaces/IPriceOracle.sol\";\n\ncontract PriceOracle is IPriceOracle, Ownable {\n    mapping(address => bool) _operators;\n\n    modifier auth() {\n        if (!_operators[msg.sender] && msg.sender != owner()) {\n            revert InvalidOperator();\n        }\n        _;\n    }\n\n    using WadRayMath for uint256;\n\n    struct AveragePrice {\n        uint256 blockTimestamp;\n        uint256 priceAverage;\n    }\n\n    mapping(address => AveragePrice) prices;\n\n    function getTwap(address _currency)\n        external\n        view\n        returns (uint256, uint256)\n    {\n        return (\n            prices[_currency].priceAverage,\n            prices[_currency].blockTimestamp\n        );\n    }\n\n    function updateTwap(address _currency, uint256 _priceAverage)\n        external\n        auth\n    {\n        prices[_currency].priceAverage = _priceAverage;\n        prices[_currency].blockTimestamp = block.timestamp;\n    }\n\n    function setOperator(address _operator, bool enabled) external onlyOwner {\n        if (enabled) {\n            _operators[_operator] = true;\n        } else {\n            delete _operators[_operator];\n        }\n    }\n}\n\nerror InvalidOperator();\n"
    },
    "@opengsn/contracts/src/BasePaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./utils/GsnTypes.sol\";\nimport \"./interfaces/IPaymaster.sol\";\nimport \"./interfaces/IRelayHub.sol\";\nimport \"./utils/GsnEip712Library.sol\";\nimport \"./forwarder/IForwarder.sol\";\n\n/**\n * Abstract base class to be inherited by a concrete Paymaster\n * A subclass must implement:\n *  - preRelayedCall\n *  - postRelayedCall\n */\nabstract contract BasePaymaster is IPaymaster, Ownable {\n\n    IRelayHub internal relayHub;\n    address private _trustedForwarder;\n\n    function getHubAddr() public override view returns (address) {\n        return address(relayHub);\n    }\n\n    //overhead of forwarder verify+signature, plus hub overhead.\n    uint256 constant public FORWARDER_HUB_OVERHEAD = 50000;\n\n    //These parameters are documented in IPaymaster.GasAndDataLimits\n    uint256 constant public PRE_RELAYED_CALL_GAS_LIMIT = 100000;\n    uint256 constant public POST_RELAYED_CALL_GAS_LIMIT = 110000;\n    uint256 constant public PAYMASTER_ACCEPTANCE_BUDGET = PRE_RELAYED_CALL_GAS_LIMIT + FORWARDER_HUB_OVERHEAD;\n    uint256 constant public CALLDATA_SIZE_LIMIT = 10500;\n\n    function getGasAndDataLimits()\n    public\n    override\n    virtual\n    view\n    returns (\n        IPaymaster.GasAndDataLimits memory limits\n    ) {\n        return IPaymaster.GasAndDataLimits(\n            PAYMASTER_ACCEPTANCE_BUDGET,\n            PRE_RELAYED_CALL_GAS_LIMIT,\n            POST_RELAYED_CALL_GAS_LIMIT,\n            CALLDATA_SIZE_LIMIT\n        );\n    }\n\n    // this method must be called from preRelayedCall to validate that the forwarder\n    // is approved by the paymaster as well as by the recipient contract.\n    function _verifyForwarder(GsnTypes.RelayRequest calldata relayRequest)\n    public\n    view\n    {\n        require(address(_trustedForwarder) == relayRequest.relayData.forwarder, \"Forwarder is not trusted\");\n        GsnEip712Library.verifyForwarderTrusted(relayRequest);\n    }\n\n    /*\n     * modifier to be used by recipients as access control protection for preRelayedCall & postRelayedCall\n     */\n    modifier relayHubOnly() {\n        require(msg.sender == getHubAddr(), \"can only be called by RelayHub\");\n        _;\n    }\n\n    function setRelayHub(IRelayHub hub) public onlyOwner {\n        relayHub = hub;\n    }\n\n    function setTrustedForwarder(address forwarder) public virtual onlyOwner {\n        _trustedForwarder = forwarder;\n    }\n\n    function trustedForwarder() public virtual view override returns (address){\n        return _trustedForwarder;\n    }\n\n\n    /// check current deposit on relay hub.\n    function getRelayHubDeposit()\n    public\n    override\n    view\n    returns (uint) {\n        return relayHub.balanceOf(address(this));\n    }\n\n    // any money moved into the paymaster is transferred as a deposit.\n    // This way, we don't need to understand the RelayHub API in order to replenish\n    // the paymaster.\n    receive() external virtual payable {\n        require(address(relayHub) != address(0), \"relay hub address not set\");\n        relayHub.depositFor{value:msg.value}(address(this));\n    }\n\n    /// withdraw deposit from relayHub\n    function withdrawRelayHubDepositTo(uint amount, address payable target) public onlyOwner {\n        relayHub.withdraw(amount, target);\n    }\n}\n"
    },
    "@opengsn/contracts/src/utils/GsnTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../forwarder/IForwarder.sol\";\n\ninterface GsnTypes {\n    /// @notice gasPrice, pctRelayFee and baseRelayFee must be validated inside of the paymaster's preRelayedCall in order not to overpay\n    struct RelayData {\n        uint256 gasPrice;\n        uint256 pctRelayFee;\n        uint256 baseRelayFee;\n        address relayWorker;\n        address paymaster;\n        address forwarder;\n        bytes paymasterData;\n        uint256 clientId;\n    }\n\n    //note: must start with the ForwardRequest to be an extension of the generic forwarder\n    struct RelayRequest {\n        IForwarder.ForwardRequest request;\n        RelayData relayData;\n    }\n}\n"
    },
    "@opengsn/contracts/src/interfaces/IPaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"../utils/GsnTypes.sol\";\n\ninterface IPaymaster {\n\n    /**\n     * @param acceptanceBudget -\n     *      Paymaster expected gas budget to accept (or reject) a request\n     *      This a gas required by any calculations that might need to reject the\n     *      transaction, by preRelayedCall, forwarder and recipient.\n     *      See value in BasePaymaster.PAYMASTER_ACCEPTANCE_BUDGET\n     *      Transaction that gets rejected above that gas usage is on the paymaster's expense.\n     *      As long this value is above preRelayedCallGasLimit (see defaults in BasePaymaster), the\n     *      Paymaster is guaranteed it will never pay for rejected transactions.\n     *      If this value is below preRelayedCallGasLimt, it might might make Paymaster open to a \"griefing\" attack.\n     *\n     *      Specifying value too high might make the call rejected by some relayers.\n     *\n     *      From a Relay's point of view, this is the highest gas value a paymaster might \"grief\" the relay,\n     *      since the paymaster will pay anything above that (regardless if the tx reverts)\n     *\n     * @param preRelayedCallGasLimit - the max gas usage of preRelayedCall. any revert (including OOG)\n     *      of preRelayedCall is a reject by the paymaster.\n     *      as long as acceptanceBudget is above preRelayedCallGasLimit, any such revert (including OOG)\n     *      is not payed by the paymaster.\n     * @param postRelayedCallGasLimit - the max gas usage of postRelayedCall.\n     *      note that an OOG will revert the transaction, but the paymaster already committed to pay,\n     *      so the relay will get compensated, at the expense of the paymaster\n     */\n    struct GasAndDataLimits {\n        uint256 acceptanceBudget;\n        uint256 preRelayedCallGasLimit;\n        uint256 postRelayedCallGasLimit;\n        uint256 calldataSizeLimit;\n    }\n\n    /**\n     * Return the Gas Limits and msg.data max size constants used by the Paymaster.\n     */\n    function getGasAndDataLimits()\n    external\n    view\n    returns (\n        GasAndDataLimits memory limits\n    );\n\n    function trustedForwarder() external view returns (address);\n\n/**\n * return the relayHub of this contract.\n */\n    function getHubAddr() external view returns (address);\n\n    /**\n     * Can be used to determine if the contract can pay for incoming calls before making any.\n     * @return the paymaster's deposit in the RelayHub.\n     */\n    function getRelayHubDeposit() external view returns (uint256);\n\n    /**\n     * Called by Relay (and RelayHub), to validate if the paymaster agrees to pay for this call.\n     *\n     * MUST be protected with relayHubOnly() in case it modifies state.\n     *\n     * The Paymaster rejects by the following \"revert\" operations\n     *  - preRelayedCall() method reverts\n     *  - the forwarder reverts because of nonce or signature error\n     *  - the paymaster returned \"rejectOnRecipientRevert\", and the recipient contract reverted.\n     * In any of the above cases, all paymaster calls (and recipient call) are reverted.\n     * In any other case, the paymaster agrees to pay for the gas cost of the transaction (note\n     *  that this includes also postRelayedCall revert)\n     *\n     * The rejectOnRecipientRevert flag means the Paymaster \"delegate\" the rejection to the recipient\n     *  code.  It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,\n     *  forwarder check and receipient checks must fit into the GasLimits.acceptanceBudget,\n     *  otherwise the TX is paid by the Paymaster.\n     *\n     *  @param relayRequest - the full relay request structure\n     *  @param signature - user's EIP712-compatible signature of the {@link relayRequest}.\n     *              Note that in most cases the paymaster shouldn't try use it at all. It is always checked\n     *              by the forwarder immediately after preRelayedCall returns.\n     *  @param approvalData - extra dapp-specific data (e.g. signature from trusted party)\n     *  @param maxPossibleGas - based on values returned from {@link getGasAndDataLimits},\n     *         the RelayHub will calculate the maximum possible amount of gas the user may be charged for.\n     *         In order to convert this value to wei, the Paymaster has to call \"relayHub.calculateCharge()\"\n     *  return:\n     *      a context to be passed to postRelayedCall\n     *      rejectOnRecipientRevert - TRUE if paymaster want to reject the TX if the recipient reverts.\n     *          FALSE means that rejects by the recipient will be completed on chain, and paid by the paymaster.\n     *          (note that in the latter case, the preRelayedCall and postRelayedCall are not reverted).\n     */\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    external\n    returns (bytes memory context, bool rejectOnRecipientRevert);\n\n    /**\n     * This method is called after the actual relayed function call.\n     * It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call.\n     *\n     * MUST be protected with relayHubOnly() in case it modifies state.\n     *\n     * @param context - the call context, as returned by the preRelayedCall\n     * @param success - true if the relayed call succeeded, false if it reverted\n     * @param gasUseWithoutPost - the actual amount of gas used by the entire transaction, EXCEPT\n     *        the gas used by the postRelayedCall itself.\n     * @param relayData - the relay params of the request. can be used by relayHub.calculateCharge()\n     *\n     * Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster\n     * is still committed to pay the relay for the entire transaction.\n     */\n    function postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    ) external;\n\n    function versionPaymaster() external view returns (string memory);\n}\n"
    },
    "@opengsn/contracts/src/interfaces/IRelayHub.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"../utils/GsnTypes.sol\";\nimport \"./IStakeManager.sol\";\n\ninterface IRelayHub {\n    struct RelayHubConfig {\n        // maximum number of worker accounts allowed per manager\n        uint256 maxWorkerCount;\n        // Gas set aside for all relayCall() instructions to prevent unexpected out-of-gas exceptions\n        uint256 gasReserve;\n        // Gas overhead to calculate gasUseWithoutPost\n        uint256 postOverhead;\n        // Gas cost of all relayCall() instructions after actual 'calculateCharge()'\n        // Assume that relay has non-zero balance (costs 15'000 more otherwise).\n        uint256 gasOverhead;\n        // Maximum funds that can be deposited at once. Prevents user error by disallowing large deposits.\n        uint256 maximumRecipientDeposit;\n        // Minimum unstake delay blocks of a relay manager's stake on the StakeManager\n        uint256 minimumUnstakeDelay;\n        // Minimum stake a relay can have. An attack on the network will never cost less than half this value.\n        uint256 minimumStake;\n        // relayCall()'s msg.data upper bound gas cost per byte\n        uint256 dataGasCostPerByte;\n        // relayCalls() minimal gas overhead when calculating cost of putting tx on chain.\n        uint256 externalCallDataCostOverhead;\n    }\n\n    event RelayHubConfigured(RelayHubConfig config);\n\n    /// Emitted when a relay server registers or updates its details\n    /// Looking at these events lets a client discover relay servers\n    event RelayServerRegistered(\n        address indexed relayManager,\n        uint256 baseRelayFee,\n        uint256 pctRelayFee,\n        string relayUrl\n    );\n\n    /// Emitted when relays are added by a relayManager\n    event RelayWorkersAdded(\n        address indexed relayManager,\n        address[] newRelayWorkers,\n        uint256 workersCount\n    );\n\n    /// Emitted when an account withdraws funds from RelayHub.\n    event Withdrawn(\n        address indexed account,\n        address indexed dest,\n        uint256 amount\n    );\n\n    /// Emitted when depositFor is called, including the amount and account that was funded.\n    event Deposited(\n        address indexed paymaster,\n        address indexed from,\n        uint256 amount\n    );\n\n    /// Emitted when an attempt to relay a call fails and Paymaster does not accept the transaction.\n    /// The actual relayed call was not executed, and the recipient not charged.\n    /// @param reason contains a revert reason returned from preRelayedCall or forwarder.\n    event TransactionRejectedByPaymaster(\n        address indexed relayManager,\n        address indexed paymaster,\n        address indexed from,\n        address to,\n        address relayWorker,\n        bytes4 selector,\n        uint256 innerGasUsed,\n        bytes reason\n    );\n\n    /// Emitted when a transaction is relayed. Note that the actual encoded function might be reverted: this will be\n    /// indicated in the status field.\n    /// Useful when monitoring a relay's operation and relayed calls to a contract.\n    /// Charge is the ether value deducted from the recipient's balance, paid to the relay's manager.\n    event TransactionRelayed(\n        address indexed relayManager,\n        address indexed relayWorker,\n        address indexed from,\n        address to,\n        address paymaster,\n        bytes4 selector,\n        RelayCallStatus status,\n        uint256 charge\n    );\n\n    event TransactionResult(\n        RelayCallStatus status,\n        bytes returnValue\n    );\n\n    event HubDeprecated(uint256 fromBlock);\n\n    /// Reason error codes for the TransactionRelayed event\n    /// @param OK - the transaction was successfully relayed and execution successful - never included in the event\n    /// @param RelayedCallFailed - the transaction was relayed, but the relayed call failed\n    /// @param RejectedByPreRelayed - the transaction was not relayed due to preRelatedCall reverting\n    /// @param RejectedByForwarder - the transaction was not relayed due to forwarder check (signature,nonce)\n    /// @param PostRelayedFailed - the transaction was relayed and reverted due to postRelatedCall reverting\n    /// @param PaymasterBalanceChanged - the transaction was relayed and reverted due to the paymaster balance change\n    enum RelayCallStatus {\n        OK,\n        RelayedCallFailed,\n        RejectedByPreRelayed,\n        RejectedByForwarder,\n        RejectedByRecipientRevert,\n        PostRelayedFailed,\n        PaymasterBalanceChanged\n    }\n\n    /// Add new worker addresses controlled by sender who must be a staked Relay Manager address.\n    /// Emits a RelayWorkersAdded event.\n    /// This function can be called multiple times, emitting new events\n    function addRelayWorkers(address[] calldata newRelayWorkers) external;\n\n    function registerRelayServer(uint256 baseRelayFee, uint256 pctRelayFee, string calldata url) external;\n\n    // Balance management\n\n    /// Deposits ether for a contract, so that it can receive (and pay for) relayed transactions. Unused balance can only\n    /// be withdrawn by the contract itself, by calling withdraw.\n    /// Emits a Deposited event.\n    function depositFor(address target) external payable;\n\n    /// Withdraws from an account's balance, sending it back to it. Relay managers call this to retrieve their revenue, and\n    /// contracts can also use it to reduce their funding.\n    /// Emits a Withdrawn event.\n    function withdraw(uint256 amount, address payable dest) external;\n\n    // Relaying\n\n\n    /// Relays a transaction. For this to succeed, multiple conditions must be met:\n    ///  - Paymaster's \"preRelayCall\" method must succeed and not revert\n    ///  - the sender must be a registered Relay Worker that the user signed\n    ///  - the transaction's gas price must be equal or larger than the one that was signed by the sender\n    ///  - the transaction must have enough gas to run all internal transactions if they use all gas available to them\n    ///  - the Paymaster must have enough balance to pay the Relay Worker for the scenario when all gas is spent\n    ///\n    /// If all conditions are met, the call will be relayed and the recipient charged.\n    ///\n    /// Arguments:\n    /// @param maxAcceptanceBudget - max valid value for paymaster.getGasLimits().acceptanceBudget\n    /// @param relayRequest - all details of the requested relayed call\n    /// @param signature - client's EIP-712 signature over the relayRequest struct\n    /// @param approvalData: dapp-specific data forwarded to preRelayedCall.\n    ///        This value is *not* verified by the Hub. For example, it can be used to pass a signature to the Paymaster\n    /// @param externalGasLimit - the value passed as gasLimit to the transaction.\n    ///\n    /// Emits a TransactionRelayed event.\n    function relayCall(\n        uint maxAcceptanceBudget,\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint externalGasLimit\n    )\n    external\n    returns (bool paymasterAccepted, bytes memory returnValue);\n\n    function penalize(address relayWorker, address payable beneficiary) external;\n\n    function setConfiguration(RelayHubConfig memory _config) external;\n\n    // Deprecate hub (reverting relayCall()) from block number 'fromBlock'\n    // Can only be called by owner\n    function deprecateHub(uint256 fromBlock) external;\n\n    /// The fee is expressed as a base fee in wei plus percentage on actual charge.\n    /// E.g. a value of 40 stands for a 40% fee, so the recipient will be\n    /// charged for 1.4 times the spent amount.\n    function calculateCharge(uint256 gasUsed, GsnTypes.RelayData calldata relayData) external view returns (uint256);\n\n    /* getters */\n\n    /// Returns the whole hub configuration\n    function getConfiguration() external view returns (RelayHubConfig memory config);\n\n    function calldataGasCost(uint256 length) external view returns (uint256);\n\n    function workerToManager(address worker) external view returns(address);\n\n    function workerCount(address manager) external view returns(uint256);\n\n    /// Returns an account's deposits. It can be either a deposit of a paymaster, or a revenue of a relay manager.\n    function balanceOf(address target) external view returns (uint256);\n\n    function stakeManager() external view returns (IStakeManager);\n\n    function penalizer() external view returns (address);\n\n    /// Uses StakeManager info to decide if the Relay Manager can be considered staked\n    /// @return true if stake size and delay satisfy all requirements\n    function isRelayManagerStaked(address relayManager) external view returns(bool);\n\n    // Checks hubs' deprecation status\n    function isDeprecated() external view returns (bool);\n\n    // Returns the block number from which the hub no longer allows relaying calls.\n    function deprecationBlock() external view returns (uint256);\n\n    /// @return a SemVer-compliant version of the hub contract\n    function versionHub() external view returns (string memory);\n}\n\n"
    },
    "@opengsn/contracts/src/utils/GsnEip712Library.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"../utils/GsnTypes.sol\";\nimport \"../interfaces/IRelayRecipient.sol\";\nimport \"../forwarder/IForwarder.sol\";\n\nimport \"./GsnUtils.sol\";\n\n/**\n * Bridge Library to map GSN RelayRequest into a call of a Forwarder\n */\nlibrary GsnEip712Library {\n    // maximum length of return value/revert reason for 'execute' method. Will truncate result if exceeded.\n    uint256 private constant MAX_RETURN_SIZE = 1024;\n\n    //copied from Forwarder (can't reference string constants even from another library)\n    string public constant GENERIC_PARAMS = \"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntil\";\n\n    bytes public constant RELAYDATA_TYPE = \"RelayData(uint256 gasPrice,uint256 pctRelayFee,uint256 baseRelayFee,address relayWorker,address paymaster,address forwarder,bytes paymasterData,uint256 clientId)\";\n\n    string public constant RELAY_REQUEST_NAME = \"RelayRequest\";\n    string public constant RELAY_REQUEST_SUFFIX = string(abi.encodePacked(\"RelayData relayData)\", RELAYDATA_TYPE));\n\n    bytes public constant RELAY_REQUEST_TYPE = abi.encodePacked(\n        RELAY_REQUEST_NAME,\"(\",GENERIC_PARAMS,\",\", RELAY_REQUEST_SUFFIX);\n\n    bytes32 public constant RELAYDATA_TYPEHASH = keccak256(RELAYDATA_TYPE);\n    bytes32 public constant RELAY_REQUEST_TYPEHASH = keccak256(RELAY_REQUEST_TYPE);\n\n\n    struct EIP712Domain {\n        string name;\n        string version;\n        uint256 chainId;\n        address verifyingContract;\n    }\n\n    bytes32 public constant EIP712DOMAIN_TYPEHASH = keccak256(\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n    );\n\n    function splitRequest(\n        GsnTypes.RelayRequest calldata req\n    )\n    internal\n    pure\n    returns (\n        bytes memory suffixData\n    ) {\n        suffixData = abi.encode(\n            hashRelayData(req.relayData));\n    }\n\n    //verify that the recipient trusts the given forwarder\n    // MUST be called by paymaster\n    function verifyForwarderTrusted(GsnTypes.RelayRequest calldata relayRequest) internal view {\n        (bool success, bytes memory ret) = relayRequest.request.to.staticcall(\n            abi.encodeWithSelector(\n                IRelayRecipient.isTrustedForwarder.selector, relayRequest.relayData.forwarder\n            )\n        );\n        require(success, \"isTrustedForwarder: reverted\");\n        require(ret.length == 32, \"isTrustedForwarder: bad response\");\n        require(abi.decode(ret, (bool)), \"invalid forwarder for recipient\");\n    }\n\n    function verifySignature(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal view {\n        (bytes memory suffixData) = splitRequest(relayRequest);\n        bytes32 _domainSeparator = domainSeparator(relayRequest.relayData.forwarder);\n        IForwarder forwarder = IForwarder(payable(relayRequest.relayData.forwarder));\n        forwarder.verify(relayRequest.request, _domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature);\n    }\n\n    function verify(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal view {\n        verifyForwarderTrusted(relayRequest);\n        verifySignature(relayRequest, signature);\n    }\n\n    function execute(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal returns (bool forwarderSuccess, bool callSuccess, bytes memory ret) {\n        (bytes memory suffixData) = splitRequest(relayRequest);\n        bytes32 _domainSeparator = domainSeparator(relayRequest.relayData.forwarder);\n        /* solhint-disable-next-line avoid-low-level-calls */\n        (forwarderSuccess, ret) = relayRequest.relayData.forwarder.call(\n            abi.encodeWithSelector(IForwarder.execute.selector,\n            relayRequest.request, _domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature\n        ));\n        if ( forwarderSuccess ) {\n\n          //decode return value of execute:\n          (callSuccess, ret) = abi.decode(ret, (bool, bytes));\n        }\n        truncateInPlace(ret);\n    }\n\n    //truncate the given parameter (in-place) if its length is above the given maximum length\n    // do nothing otherwise.\n    //NOTE: solidity warns unless the method is marked \"pure\", but it DOES modify its parameter.\n    function truncateInPlace(bytes memory data) internal pure {\n        MinLibBytes.truncateInPlace(data, MAX_RETURN_SIZE);\n    }\n\n    function domainSeparator(address forwarder) internal view returns (bytes32) {\n        return hashDomain(EIP712Domain({\n            name : \"GSN Relayed Transaction\",\n            version : \"2\",\n            chainId : getChainID(),\n            verifyingContract : forwarder\n            }));\n    }\n\n    function getChainID() internal view returns (uint256 id) {\n        /* solhint-disable no-inline-assembly */\n        assembly {\n            id := chainid()\n        }\n    }\n\n    function hashDomain(EIP712Domain memory req) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n                EIP712DOMAIN_TYPEHASH,\n                keccak256(bytes(req.name)),\n                keccak256(bytes(req.version)),\n                req.chainId,\n                req.verifyingContract));\n    }\n\n    function hashRelayData(GsnTypes.RelayData calldata req) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n                RELAYDATA_TYPEHASH,\n                req.gasPrice,\n                req.pctRelayFee,\n                req.baseRelayFee,\n                req.relayWorker,\n                req.paymaster,\n                req.forwarder,\n                keccak256(req.paymasterData),\n                req.clientId\n            ));\n    }\n}\n"
    },
    "@opengsn/contracts/src/forwarder/IForwarder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\ninterface IForwarder {\n\n    struct ForwardRequest {\n        address from;\n        address to;\n        uint256 value;\n        uint256 gas;\n        uint256 nonce;\n        bytes data;\n        uint256 validUntil;\n    }\n\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\n\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\n\n    function getNonce(address from)\n    external view\n    returns(uint256);\n\n    /**\n     * verify the transaction would execute.\n     * validate the signature and the nonce of the request.\n     * revert if either signature or nonce are incorrect.\n     * also revert if domainSeparator or requestTypeHash are not registered.\n     */\n    function verify(\n        ForwardRequest calldata forwardRequest,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata signature\n    ) external view;\n\n    /**\n     * execute a transaction\n     * @param forwardRequest - all transaction parameters\n     * @param domainSeparator - domain used when signing this request\n     * @param requestTypeHash - request type used when signing this request.\n     * @param suffixData - the extension data used when signing this request.\n     * @param signature - signature to validate.\n     *\n     * the transaction is verified, and then executed.\n     * the success and ret of \"call\" are returned.\n     * This method would revert only verification errors. target errors\n     * are reported using the returned \"success\" and ret string\n     */\n    function execute(\n        ForwardRequest calldata forwardRequest,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata signature\n    )\n    external payable\n    returns (bool success, bytes memory ret);\n\n    /**\n     * Register a new Request typehash.\n     * @param typeName - the name of the request type.\n     * @param typeSuffix - any extra data after the generic params.\n     *  (must add at least one param. The generic ForwardRequest type is always registered by the constructor)\n     */\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\n\n    /**\n     * Register a new domain separator.\n     * The domain separator must have the following fields: name,version,chainId, verifyingContract.\n     * the chainId is the current network's chainId, and the verifyingContract is this forwarder.\n     * This method is given the domain name and version to create and register the domain separator value.\n     * @param name the domain's display name\n     * @param version the domain/protocol version\n     */\n    function registerDomainSeparator(string calldata name, string calldata version) external;\n}\n"
    },
    "@opengsn/contracts/src/interfaces/IStakeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ninterface IStakeManager {\n\n    /// Emitted when a stake or unstakeDelay are initialized or increased\n    event StakeAdded(\n        address indexed relayManager,\n        address indexed owner,\n        uint256 stake,\n        uint256 unstakeDelay\n    );\n\n    /// Emitted once a stake is scheduled for withdrawal\n    event StakeUnlocked(\n        address indexed relayManager,\n        address indexed owner,\n        uint256 withdrawBlock\n    );\n\n    /// Emitted when owner withdraws relayManager funds\n    event StakeWithdrawn(\n        address indexed relayManager,\n        address indexed owner,\n        uint256 amount\n    );\n\n    /// Emitted when an authorized Relay Hub penalizes a relayManager\n    event StakePenalized(\n        address indexed relayManager,\n        address indexed beneficiary,\n        uint256 reward\n    );\n\n    event HubAuthorized(\n        address indexed relayManager,\n        address indexed relayHub\n    );\n\n    event HubUnauthorized(\n        address indexed relayManager,\n        address indexed relayHub,\n        uint256 removalBlock\n    );\n\n    event OwnerSet(\n        address indexed relayManager,\n        address indexed owner\n    );\n\n    /// @param stake - amount of ether staked for this relay\n    /// @param unstakeDelay - number of blocks to elapse before the owner can retrieve the stake after calling 'unlock'\n    /// @param withdrawBlock - first block number 'withdraw' will be callable, or zero if the unlock has not been called\n    /// @param owner - address that receives revenue and manages relayManager's stake\n    struct StakeInfo {\n        uint256 stake;\n        uint256 unstakeDelay;\n        uint256 withdrawBlock;\n        address payable owner;\n    }\n\n    struct RelayHubInfo {\n        uint256 removalBlock;\n    }\n\n    /// Set the owner of a Relay Manager. Called only by the RelayManager itself.\n    /// Note that owners cannot transfer ownership - if the entry already exists, reverts.\n    /// @param owner - owner of the relay (as configured off-chain)\n    function setRelayManagerOwner(address payable owner) external;\n\n    /// Only the owner can call this function. If the entry does not exist, reverts.\n    /// @param relayManager - address that represents a stake entry and controls relay registrations on relay hubs\n    /// @param unstakeDelay - number of blocks to elapse before the owner can retrieve the stake after calling 'unlock'\n    function stakeForRelayManager(address relayManager, uint256 unstakeDelay) external payable;\n\n    function unlockStake(address relayManager) external;\n\n    function withdrawStake(address relayManager) external;\n\n    function authorizeHubByOwner(address relayManager, address relayHub) external;\n\n    function authorizeHubByManager(address relayHub) external;\n\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external;\n\n    function unauthorizeHubByManager(address relayHub) external;\n\n    function isRelayManagerStaked(address relayManager, address relayHub, uint256 minAmount, uint256 minUnstakeDelay)\n    external\n    view\n    returns (bool);\n\n    /// Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns half of stake on the way.\n    /// @param relayManager - entry to penalize\n    /// @param beneficiary - address that receives half of the penalty amount\n    /// @param amount - amount to withdraw from stake\n    function penalizeRelayManager(address relayManager, address payable beneficiary, uint256 amount) external;\n\n    function getStakeInfo(address relayManager) external view returns (StakeInfo memory stakeInfo);\n\n    function maxUnstakeDelay() external view returns (uint256);\n\n    function versionSM() external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@opengsn/contracts/src/interfaces/IRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\n/**\n * a contract must implement this interface in order to support relayed transaction.\n * It is better to inherit the BaseRelayRecipient as its implementation.\n */\nabstract contract IRelayRecipient {\n\n    /**\n     * return if the forwarder is trusted to forward relayed transactions to us.\n     * the forwarder is required to verify the sender's signature, and verify\n     * the call is not a replay.\n     */\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n     * of the msg.data.\n     * otherwise, return `msg.sender`\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal virtual view returns (address);\n\n    /**\n     * return the msg.data of this call.\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n     * of the msg.data - so this method will strip those 20 bytes off.\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\n     * should be used in the contract instead of msg.data, where this difference matters.\n     */\n    function _msgData() internal virtual view returns (bytes calldata);\n\n    function versionRecipient() external virtual view returns (string memory);\n}\n"
    },
    "@opengsn/contracts/src/utils/GsnUtils.sol": {
      "content": "/* solhint-disable no-inline-assembly */\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../utils/MinLibBytes.sol\";\n\nlibrary GsnUtils {\n\n    /**\n     * extract method sig from encoded function call\n     */\n    function getMethodSig(bytes memory msgData) internal pure returns (bytes4) {\n        return MinLibBytes.readBytes4(msgData, 0);\n    }\n\n    /**\n     * extract parameter from encoded-function block.\n     * see: https://solidity.readthedocs.io/en/develop/abi-spec.html#formal-specification-of-the-encoding\n     * the return value should be casted to the right type (uintXXX/bytesXXX/address/bool/enum)\n     */\n    function getParam(bytes memory msgData, uint index) internal pure returns (uint) {\n        return MinLibBytes.readUint256(msgData, 4 + index * 32);\n    }\n\n    //re-throw revert with the same revert data.\n    function revertWithData(bytes memory data) internal pure {\n        assembly {\n            revert(add(data,32), mload(data))\n        }\n    }\n\n}\n"
    },
    "@opengsn/contracts/src/utils/MinLibBytes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// minimal bytes manipulation required by GSN\n// a minimal subset from 0x/LibBytes\n/* solhint-disable no-inline-assembly */\npragma solidity ^0.8.0;\n\nlibrary MinLibBytes {\n\n    //truncate the given parameter (in-place) if its length is above the given maximum length\n    // do nothing otherwise.\n    //NOTE: solidity warns unless the method is marked \"pure\", but it DOES modify its parameter.\n    function truncateInPlace(bytes memory data, uint256 maxlen) internal pure {\n        if (data.length > maxlen) {\n            assembly { mstore(data, maxlen) }\n        }\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require (b.length >= index + 20, \"readAddress: data too short\");\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(b.length >= index + 32, \"readBytes32: data too short\" );\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, add(index,32)))\n        }\n        return result;\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(b.length >= index + 4, \"readBytes4: data too short\");\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, add(index,32)))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n}\n"
    },
    "contracts/shared/gsn/VoyagePaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {VaultFacet} from \"../../voyage/facets/VaultFacet.sol\";\nimport {IVault} from \"../../vault/Vault.sol\";\nimport {IPaymaster, BasePaymaster, GsnTypes} from \"@opengsn/contracts/src/BasePaymaster.sol\";\nimport {IForwarder} from \"@opengsn/contracts/src/forwarder/IForwarder.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract VoyagePaymaster is BasePaymaster {\n    error SenderNoVault();\n    error VaultBalanceInsufficient();\n\n    address public immutable voyage;\n    address public immutable weth9;\n    address public immutable treasury;\n\n    uint256 public constant REFUND_GAS_OVERHEAD = 35000;\n    uint256 public constant PRE_RELAYED_CALL_OVERHEAD = 60000;\n    uint256 public constant POST_RELAYED_CALL_OVERHEAD = 80000;\n    uint256 public constant ACCEPTANCE_BUDGET =\n        PRE_RELAYED_CALL_OVERHEAD + FORWARDER_HUB_OVERHEAD;\n    uint256 public constant CALLDATA_LIMIT = type(uint256).max;\n\n    constructor(\n        address _voyage,\n        address _weth9,\n        address _treasury\n    ) {\n        voyage = _voyage;\n        weth9 = _weth9;\n        treasury = _treasury;\n    }\n\n    function versionPaymaster()\n        external\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        return \"1.0.0+voyage.ipaymaster\";\n    }\n\n    /// @inheritdoc IPaymaster\n    function getGasAndDataLimits()\n        public\n        pure\n        override\n        returns (IPaymaster.GasAndDataLimits memory limits)\n    {\n        return\n            IPaymaster.GasAndDataLimits(\n                ACCEPTANCE_BUDGET,\n                PRE_RELAYED_CALL_OVERHEAD,\n                POST_RELAYED_CALL_OVERHEAD,\n                CALLDATA_LIMIT\n            );\n    }\n\n    /// @inheritdoc IPaymaster\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n        external\n        virtual\n        override\n        returns (bytes memory context, bool revertOnRecipientRevert)\n    {\n        _verifyForwarder(relayRequest);\n        address vault = VaultFacet(voyage).getVaultAddr(\n            relayRequest.request.from\n        );\n        if (vault == address(0)) {\n            revert SenderNoVault();\n        }\n        uint256 ethBalance = vault.balance + IERC20(weth9).balanceOf(vault);\n        if (ethBalance < maxPossibleGas * relayRequest.relayData.gasPrice) {\n            revert VaultBalanceInsufficient();\n        }\n\n        return (abi.encodePacked(relayRequest.request.from), false);\n    }\n\n    /// @inheritdoc IPaymaster\n    function postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    ) external virtual override {\n        address vault = abi.decode(context, (address));\n        // calldata overhead = 21k + non_zero_bytes * 16 + zero_bytes * 4\n        //            ~= 21k + calldata.length * [1/3 * 16 + 2/3 * 4]\n        uint256 minimumFees = (gasUseWithoutPost +\n            21000 +\n            msg.data.length *\n            8 +\n            REFUND_GAS_OVERHEAD) * relayData.gasPrice;\n        uint256 refund = vault.balance >= minimumFees\n            ? minimumFees\n            : minimumFees + 21000 * relayData.gasPrice; // cover cost of unwrapping WETH\n        IVault(vault).refundGas(refund, treasury);\n    }\n}\n"
    },
    "contracts/voyage/facets/DataProviderFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {WadRayMath} from \"../../shared/libraries/WadRayMath.sol\";\nimport {IVToken} from \"../interfaces/IVToken.sol\";\nimport {AppStorage, ReserveData, ReserveConfigurationMap, Tranche, VaultConfig, LoanList, RepaymentData, LibAppStorage} from \"../libraries/LibAppStorage.sol\";\nimport {LibLiquidity} from \"../libraries/LibLiquidity.sol\";\nimport {LibLoan} from \"../libraries/LibLoan.sol\";\nimport {LibVault} from \"../libraries/LibVault.sol\";\nimport {LibReserveConfiguration} from \"../libraries/LibReserveConfiguration.sol\";\n\nstruct CreditLineData {\n    uint256 totalDebt;\n    LoanList loanList;\n    uint256 gav;\n    uint256 ltv;\n    uint256 healthFactor;\n}\n\ncontract DataProviderFacet {\n    using WadRayMath for uint256;\n    using LibReserveConfiguration for ReserveConfigurationMap;\n\n    struct PoolData {\n        address currency;\n        uint256 totalLiquidity;\n        uint256 juniorLiquidity;\n        uint256 seniorLiquidity;\n        uint256 juniorLiquidityRate;\n        uint256 seniorLiquidityRate;\n        uint256 totalDebt;\n        uint256 utilizationRate;\n        uint256 trancheRatio;\n        uint256 decimals;\n        string symbol;\n        bool isActive;\n    }\n\n    struct UserPoolData {\n        uint256 juniorTrancheBalance;\n        uint256 withdrawableJuniorTrancheBalance;\n        uint256 seniorTrancheBalance;\n        uint256 withdrawableSeniorTrancheBalance;\n        uint256 decimals;\n    }\n\n    struct PoolConfiguration {\n        uint256 liquidationBonus;\n        uint256 loanInterval;\n        uint256 loanTenure;\n        uint256 incomeRatio;\n        bool isInitialized;\n        bool isActive;\n    }\n\n    function getPoolConfiguration(address _collection)\n        external\n        view\n        returns (PoolConfiguration memory)\n    {\n        PoolConfiguration memory poolConfiguration;\n        ReserveConfigurationMap memory config = LibReserveConfiguration\n            .getConfiguration(_collection);\n        poolConfiguration.liquidationBonus = config.getLiquidationBonus();\n        poolConfiguration.incomeRatio = config.getIncomeRatio();\n\n        return poolConfiguration;\n    }\n\n    function getPoolData(address _collection)\n        external\n        view\n        returns (PoolData memory)\n    {\n        LibLiquidity.DepositAndDebt memory depositAndDebt = LibLiquidity\n            .getDepositAndDebt(_collection);\n        IERC20Metadata token = IERC20Metadata(depositAndDebt.currency);\n\n        PoolData memory poolData;\n        poolData.currency = depositAndDebt.currency;\n        poolData.juniorLiquidity = depositAndDebt.juniorDepositAmount;\n        poolData.seniorLiquidity = depositAndDebt.seniorDepositAmount;\n        poolData.totalLiquidity =\n            depositAndDebt.seniorDepositAmount +\n            depositAndDebt.juniorDepositAmount;\n        poolData.totalDebt = depositAndDebt.totalDebt;\n        if (depositAndDebt.seniorDepositAmount == 0) {\n            poolData.trancheRatio = 0;\n        } else {\n            poolData.trancheRatio = depositAndDebt.juniorDepositAmount.rayDiv(\n                depositAndDebt.seniorDepositAmount\n            );\n        }\n\n        poolData.decimals = token.decimals();\n        poolData.utilizationRate = LibLiquidity.utilizationRate(_collection);\n        poolData.symbol = token.symbol();\n        (poolData.isActive, , ) = LibReserveConfiguration\n            .getConfiguration(_collection)\n            .getFlags();\n\n        return poolData;\n    }\n\n    function getDepositTokens(address _collection)\n        public\n        view\n        returns (address senior, address junior)\n    {\n        ReserveData memory reserve = LibLiquidity.getReserveData(_collection);\n        senior = reserve.seniorDepositTokenAddress;\n        junior = reserve.juniorDepositTokenAddress;\n    }\n\n    function getVault(address _user) external view returns (address) {\n        return LibVault.getVaultAddress(_user);\n    }\n\n    function getCollections() external view returns (address[] memory) {\n        return LibLiquidity.getReserveList();\n    }\n\n    function getUserPoolData(address _collection, address _user)\n        external\n        view\n        returns (UserPoolData memory)\n    {\n        ReserveData memory reserve = LibLiquidity.getReserveData(_collection);\n        UserPoolData memory userPoolData;\n        IERC20Metadata token = IERC20Metadata(reserve.currency);\n\n        uint256 seniorTrancheWithdrawable = LibLiquidity.balance(\n            _collection,\n            _user,\n            Tranche.SENIOR\n        );\n        uint256 seniorTrancheUnbonding = LibLiquidity.unbonding(\n            _collection,\n            _user,\n            Tranche.SENIOR\n        );\n        uint256 seniorTrancheTotalBalance = seniorTrancheWithdrawable +\n            seniorTrancheUnbonding;\n        uint256 juniorTrancheWithdrawable = LibLiquidity.balance(\n            _collection,\n            _user,\n            Tranche.JUNIOR\n        );\n        uint256 juniorTrancheUnbonding = LibLiquidity.unbonding(\n            _collection,\n            _user,\n            Tranche.JUNIOR\n        );\n        uint256 juniorTrancheTotalBalance = juniorTrancheWithdrawable +\n            juniorTrancheUnbonding;\n\n        userPoolData.juniorTrancheBalance = juniorTrancheTotalBalance;\n        userPoolData\n            .withdrawableJuniorTrancheBalance = juniorTrancheWithdrawable;\n        userPoolData.seniorTrancheBalance = seniorTrancheTotalBalance;\n        userPoolData\n            .withdrawableSeniorTrancheBalance = seniorTrancheWithdrawable;\n        userPoolData.decimals = token.decimals();\n        return userPoolData;\n    }\n\n    function getCreditLineData(address _vault, address _collection)\n        external\n        view\n        returns (CreditLineData memory)\n    {\n        ReserveData memory reserve = LibLiquidity.getReserveData(_collection);\n        CreditLineData memory creditLineData;\n        uint256 principal;\n        uint256 interest;\n        LoanList memory loanList;\n        (loanList.head, loanList.tail) = LibLoan.getLoanList(\n            _collection,\n            reserve.currency,\n            _vault\n        );\n        (principal, interest) = LibVault.getVaultDebt(\n            _collection,\n            reserve.currency,\n            _vault\n        );\n        creditLineData.loanList = loanList;\n        creditLineData.totalDebt = principal + interest;\n        creditLineData.ltv = creditLineData.totalDebt == 0\n            ? 1\n            : (creditLineData.gav).rayDiv(creditLineData.totalDebt);\n        return creditLineData;\n    }\n\n    function getLoanDetail(\n        address _vault,\n        address _collection,\n        uint256 _loanId\n    ) external view returns (LibLoan.LoanDetail memory) {\n        ReserveData memory reserve = LibLiquidity.getReserveData(_collection);\n        return\n            LibLoan.getLoanDetail(\n                _collection,\n                reserve.currency,\n                _vault,\n                _loanId\n            );\n    }\n\n    function getRepayment(\n        address _valut,\n        address _collection,\n        uint256 _loanId\n    ) external view returns (RepaymentData[] memory) {\n        ReserveData memory reserve = LibLiquidity.getReserveData(_collection);\n        return\n            LibLoan.getRepayment(\n                _collection,\n                _valut,\n                reserve.currency,\n                _loanId\n            );\n    }\n\n    function pendingSeniorWithdrawals(address _user, address _collection)\n        public\n        view\n        returns (uint256)\n    {\n        ReserveData memory reserve = LibLiquidity.getReserveData(_collection);\n\n        return IVToken(reserve.seniorDepositTokenAddress).unbonding(_user);\n    }\n\n    function pendingJuniorWithdrawals(address _user, address _collection)\n        public\n        view\n        returns (uint256)\n    {\n        ReserveData memory reserve = LibLiquidity.getReserveData(_collection);\n\n        return IVToken(reserve.juniorDepositTokenAddress).unbonding(_user);\n    }\n\n    function getProtocolFeeParam() public view returns (address, uint256) {\n        AppStorage storage s = LibAppStorage.ds();\n        return (s.protocolFee.treasuryAddress, s.protocolFee.cutRatio);\n    }\n}\n"
    },
    "contracts/voyage/facets/ConfigurationFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {LibAppStorage, Storage, ReserveConfigurationMap} from \"../libraries/LibAppStorage.sol\";\nimport {LibReserveConfiguration} from \"../libraries/LibReserveConfiguration.sol\";\nimport {LibVault} from \"../libraries/LibVault.sol\";\n\ncontract ConfigurationFacet is Storage, ReentrancyGuard {\n    using LibReserveConfiguration for ReserveConfigurationMap;\n    /* --------------------------------- events --------------------------------- */\n    event LiquidationConfigurationUpdated(\n        address indexed _collection,\n        uint256 _liquidationBonus\n    );\n    event IncomeRatioUpdated(address indexed _collection, uint256 _incomeRatio);\n    event MarginParametersUpdated(\n        address indexed _collection,\n        uint256 _min,\n        uint256 _max,\n        uint256 _marginRequirement\n    );\n    event LoanParametersUpdated(\n        address indexed _collection,\n        uint256 _epoch,\n        uint256 _term,\n        uint256 _gracePeriod\n    );\n\n    /* --------------------------------- errors --------------------------------- */\n    error IllegalLoanParameters();\n    error IllegalMarginParameters();\n\n    /// @dev maximum size of _liquidationBonus is 2^16, ~600%\n    /// @param _collection address of the underlying NFT collection\n    /// @param _liquidationBonus liquidation bonus, percentage expressed as basis points\n    function setLiquidationBonus(address _collection, uint256 _liquidationBonus)\n        external\n        authorised\n    {\n        ReserveConfigurationMap memory conf = LibReserveConfiguration\n            .getConfiguration(_collection);\n        conf.setLiquidationBonus(_liquidationBonus);\n        LibReserveConfiguration.saveConfiguration(_collection, conf);\n        emit LiquidationConfigurationUpdated(_collection, _liquidationBonus);\n    }\n\n    function setIncomeRatio(address _collection, uint256 _ratio)\n        external\n        authorised\n    {\n        ReserveConfigurationMap memory conf = LibReserveConfiguration\n            .getConfiguration(_collection);\n        conf.setIncomeRatio(_ratio);\n        LibReserveConfiguration.saveConfiguration(_collection, conf);\n        emit IncomeRatioUpdated(_collection, _ratio);\n    }\n\n    function setLoanParams(\n        address _collection,\n        uint256 _epoch,\n        uint256 _term,\n        uint256 _gracePeriod\n    ) external authorised {\n        if (_epoch > _term) {\n            revert IllegalLoanParameters();\n        }\n        ReserveConfigurationMap memory conf = LibReserveConfiguration\n            .getConfiguration(_collection);\n        conf.setLoanInterval(_epoch);\n        conf.setLoanTerm(_term);\n        conf.setGracePeriod(_gracePeriod);\n        LibReserveConfiguration.saveConfiguration(_collection, conf);\n        emit LoanParametersUpdated(_collection, _epoch, _term, _gracePeriod);\n    }\n}\n"
    },
    "contracts/shared/diamond/VersionedDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n* \n* Implementation of a diamond.\n/******************************************************************************/\n\nimport {LibDiamond} from \"./libraries/LibDiamond.sol\";\nimport {DiamondCutFacet} from \"./facets/DiamondCutFacet.sol\";\nimport {DiamondLoupeFacet} from \"./facets/DiamondLoupeFacet.sol\";\nimport {OwnershipFacet} from \"./facets/OwnershipFacet.sol\";\nimport {DiamondVersionFacet} from \"../../voyage/facets/DiamondVersionFacet.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract VersionedDiamond is Initializable {\n    // more arguments are added to this struct\n    // this avoids stack too deep errors\n    struct DiamondArgs {\n        address owner;\n    }\n\n    function _initialize(\n        address _owner,\n        address _cutFacet,\n        address _loupeFacet,\n        address _ownershipFacet\n    ) internal {\n        LibDiamond.setContractOwner(_owner);\n        LibDiamond.addDiamondFunctions(_cutFacet, _loupeFacet, _ownershipFacet);\n    }\n\n    // Find facet for function that is called and execute the\n    // function if a facet is found and return any value.\n    fallback() external payable {\n        LibDiamond.DiamondStorage storage ds;\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\n        require(facet != address(0), \"Diamond: Function does not exist\");\n        assembly {\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/shared/diamond/facets/DiamondLoupeFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport \"../libraries/LibDiamond.sol\";\nimport \"../interfaces/IDiamondCut.sol\";\nimport \"../interfaces/IDiamondLoupe.sol\";\nimport \"../interfaces/IERC165.sol\";\n\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\n    // Diamond Loupe Functions\n    ////////////////////////////////////////////////////////////////////\n    /// These functions are expected to be called frequently by tools.\n    //\n    // struct Facet {\n    //     address facetAddress;\n    //     bytes4[] functionSelectors;\n    // }\n\n    /// @notice Gets all facets and their selectors.\n    /// @return facets_ Facet\n    function facets() external view override returns (Facet[] memory facets_) {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        uint256 numFacets = ds.facetAddresses.length;\n        facets_ = new Facet[](numFacets);\n        for (uint256 i; i < numFacets; i++) {\n            address facetAddress_ = ds.facetAddresses[i];\n            facets_[i].facetAddress = facetAddress_;\n            facets_[i].functionSelectors = ds\n                .facetFunctionSelectors[facetAddress_]\n                .functionSelectors;\n        }\n    }\n\n    /// @notice Gets all the function selectors provided by a facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(address _facet)\n        external\n        view\n        override\n        returns (bytes4[] memory facetFunctionSelectors_)\n    {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        facetFunctionSelectors_ = ds\n            .facetFunctionSelectors[_facet]\n            .functionSelectors;\n    }\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses()\n        external\n        view\n        override\n        returns (address[] memory facetAddresses_)\n    {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        facetAddresses_ = ds.facetAddresses;\n    }\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(bytes4 _functionSelector)\n        external\n        view\n        override\n        returns (address facetAddress_)\n    {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        facetAddress_ = ds\n            .selectorToFacetAndPosition[_functionSelector]\n            .facetAddress;\n    }\n\n    // This implements ERC-165.\n    function supportsInterface(bytes4 _interfaceId)\n        external\n        view\n        override\n        returns (bool)\n    {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        return ds.supportedInterfaces[_interfaceId];\n    }\n}\n"
    },
    "contracts/shared/diamond/facets/OwnershipFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../libraries/LibDiamond.sol\";\nimport \"../interfaces/IERC173.sol\";\n\ncontract OwnershipFacet is IERC173 {\n    function transferOwnership(address _newOwner) external override {\n        LibDiamond.enforceIsContractOwner();\n        LibDiamond.setContractOwner(_newOwner);\n    }\n\n    function owner() external view override returns (address owner_) {\n        owner_ = LibDiamond.contractOwner();\n    }\n}\n"
    },
    "contracts/shared/diamond/Diamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n* \n* Implementation of a diamond.\n/******************************************************************************/\n\nimport {LibDiamond} from \"./libraries/LibDiamond.sol\";\nimport {DiamondCutFacet} from \"./facets/DiamondCutFacet.sol\";\nimport {DiamondLoupeFacet} from \"./facets/DiamondLoupeFacet.sol\";\nimport {OwnershipFacet} from \"./facets/OwnershipFacet.sol\";\n\ncontract Diamond {\n    // more arguments are added to this struct\n    // this avoids stack too deep errors\n    struct DiamondArgs {\n        address owner;\n    }\n\n    constructor(address _owner) payable {\n        LibDiamond.setContractOwner(_owner);\n        LibDiamond.addDiamondFunctions(\n            address(new DiamondCutFacet()),\n            address(new DiamondLoupeFacet()),\n            address(new OwnershipFacet())\n        );\n    }\n\n    // Find facet for function that is called and execute the\n    // function if a facet is found and return any value.\n    fallback() external payable {\n        LibDiamond.DiamondStorage storage ds;\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\n        require(facet != address(0), \"Diamond: Function does not exist\");\n        assembly {\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/voyage/Voyage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {Diamond} from \"../shared/diamond/Diamond.sol\";\nimport {LibDiamond} from \"../shared/diamond/libraries/LibDiamond.sol\";\n\ncontract Voyage is Diamond {\n    constructor(address _owner) Diamond(_owner) {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/mock/Tus.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Tus is ERC20 {\n    constructor(uint256 initialSupply) ERC20(\"Treasure Under Sea\", \"TUS\") {\n        _mint(msg.sender, initialSupply);\n    }\n}\n"
    },
    "contracts/voyage/adapter/SeaportAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {IMarketPlaceAdapter} from \"../interfaces/IMarketPlaceAdapter.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nuint256 constant BasicOrder_basicOrderType_cdPtr = 0x124;\n\n// prettier-ignore\nenum BasicOrderRouteType {\n    // 0: provide Ether (or other native token) to receive offered ERC721 item.\n    ETH_TO_ERC721,\n\n    // 1: provide Ether (or other native token) to receive offered ERC1155 item.\n    ETH_TO_ERC1155,\n\n    // 2: provide ERC20 item to receive offered ERC721 item.\n    ERC20_TO_ERC721,\n\n    // 3: provide ERC20 item to receive offered ERC1155 item.\n    ERC20_TO_ERC1155,\n\n    // 4: provide ERC721 item to receive offered ERC20 item.\n    ERC721_TO_ERC20,\n\n    // 5: provide ERC1155 item to receive offered ERC20 item.\n    ERC1155_TO_ERC20\n}\n\n// prettier-ignore\nenum OrderType {\n    // 0: no partial fills, anyone can execute\n    FULL_OPEN,\n\n    // 1: partial fills supported, anyone can execute\n    PARTIAL_OPEN,\n\n    // 2: no partial fills, only offerer or zone can execute\n    FULL_RESTRICTED,\n\n    // 3: partial fills supported, only offerer or zone can execute\n    PARTIAL_RESTRICTED\n}\n\n// prettier-ignore\nenum ItemType {\n    // 0: ETH on mainnet, MATIC on polygon, etc.\n    NATIVE,\n\n    // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\n    ERC20,\n\n    // 2: ERC721 items\n    ERC721,\n\n    // 3: ERC1155 items\n    ERC1155,\n\n    // 4: ERC721 items where a number of tokenIds are supported\n    ERC721_WITH_CRITERIA,\n\n    // 5: ERC1155 items where a number of ids are supported\n    ERC1155_WITH_CRITERIA\n}\n\nenum BasicOrderType {\n    // 0: no partial fills, anyone can execute\n    ETH_TO_ERC721_FULL_OPEN,\n    // 1: partial fills supported, anyone can execute\n    ETH_TO_ERC721_PARTIAL_OPEN,\n    // 2: no partial fills, only offerer or zone can execute\n    ETH_TO_ERC721_FULL_RESTRICTED,\n    // 3: partial fills supported, only offerer or zone can execute\n    ETH_TO_ERC721_PARTIAL_RESTRICTED,\n    // 4: no partial fills, anyone can execute\n    ETH_TO_ERC1155_FULL_OPEN,\n    // 5: partial fills supported, anyone can execute\n    ETH_TO_ERC1155_PARTIAL_OPEN,\n    // 6: no partial fills, only offerer or zone can execute\n    ETH_TO_ERC1155_FULL_RESTRICTED,\n    // 7: partial fills supported, only offerer or zone can execute\n    ETH_TO_ERC1155_PARTIAL_RESTRICTED,\n    // 8: no partial fills, anyone can execute\n    ERC20_TO_ERC721_FULL_OPEN,\n    // 9: partial fills supported, anyone can execute\n    ERC20_TO_ERC721_PARTIAL_OPEN,\n    // 10: no partial fills, only offerer or zone can execute\n    ERC20_TO_ERC721_FULL_RESTRICTED,\n    // 11: partial fills supported, only offerer or zone can execute\n    ERC20_TO_ERC721_PARTIAL_RESTRICTED,\n    // 12: no partial fills, anyone can execute\n    ERC20_TO_ERC1155_FULL_OPEN,\n    // 13: partial fills supported, anyone can execute\n    ERC20_TO_ERC1155_PARTIAL_OPEN,\n    // 14: no partial fills, only offerer or zone can execute\n    ERC20_TO_ERC1155_FULL_RESTRICTED,\n    // 15: partial fills supported, only offerer or zone can execute\n    ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\n    // 16: no partial fills, anyone can execute\n    ERC721_TO_ERC20_FULL_OPEN,\n    // 17: partial fills supported, anyone can execute\n    ERC721_TO_ERC20_PARTIAL_OPEN,\n    // 18: no partial fills, only offerer or zone can execute\n    ERC721_TO_ERC20_FULL_RESTRICTED,\n    // 19: partial fills supported, only offerer or zone can execute\n    ERC721_TO_ERC20_PARTIAL_RESTRICTED,\n    // 20: no partial fills, anyone can execute\n    ERC1155_TO_ERC20_FULL_OPEN,\n    // 21: partial fills supported, anyone can execute\n    ERC1155_TO_ERC20_PARTIAL_OPEN,\n    // 22: no partial fills, only offerer or zone can execute\n    ERC1155_TO_ERC20_FULL_RESTRICTED,\n    // 23: partial fills supported, only offerer or zone can execute\n    ERC1155_TO_ERC20_PARTIAL_RESTRICTED\n}\n\n/**\n * @dev Basic orders can supply any number of additional recipients, with the\n *      implied assumption that they are supplied from the offered ETH (or other\n *      native token) or ERC20 token for the order.\n */\nstruct AdditionalRecipient {\n    uint256 amount;\n    address payable recipient;\n}\n\n/**\n * @dev For basic orders involving ETH / native / ERC20 <=> ERC721 / ERC1155\n *      matching, a group of six functions may be called that only requires a\n *      subset of the usual order arguments. Note the use of a \"basicOrderType\"\n *      enum; this represents both the usual order type as well as the \"route\"\n *      of the basic order (a simple derivation function for the basic order\n *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\n */\nstruct BasicOrderParameters {\n    // calldata offset\n    address considerationToken; // 0x24\n    uint256 considerationIdentifier; // 0x44\n    uint256 considerationAmount; // 0x64\n    address payable offerer; // 0x84\n    address zone; // 0xa4\n    address offerToken; // 0xc4\n    uint256 offerIdentifier; // 0xe4\n    uint256 offerAmount; // 0x104\n    BasicOrderType basicOrderType; // 0x124\n    uint256 startTime; // 0x144\n    uint256 endTime; // 0x164\n    bytes32 zoneHash; // 0x184\n    uint256 salt; // 0x1a4\n    bytes32 offererConduitKey; // 0x1c4\n    bytes32 fulfillerConduitKey; // 0x1e4\n    uint256 totalOriginalAdditionalRecipients; // 0x204\n    AdditionalRecipient[] additionalRecipients; // 0x224\n    bytes signature; // 0x244\n    // Total length, excluding dynamic array data: 0x264 (580)\n}\n\nstruct PurchaseParam {\n    address vault;\n    address seaport;\n    bytes4 selector;\n    bytes basicOrderParameters;\n}\n\ninterface ConsiderationInterface {\n    /**\n     * @notice Fulfill an order offering an ERC721 token by supplying Ether (or\n     *         the native token for the given chain) as consideration for the\n     *         order. An arbitrary number of \"additional recipients\" may also be\n     *         supplied which will each receive native tokens from the fulfiller\n     *         as consideration.\n     *\n     * @param parameters Additional information on the fulfilled order. Note\n     *                   that the offerer must first approve this contract (or\n     *                   their preferred conduit if indicated by the order) for\n     *                   their offered ERC721 token to be transferred.\n     *\n     * @return fulfilled A boolean indicating whether the order has been\n     *                   successfully fulfilled.\n     */\n    function fulfillBasicOrder(BasicOrderParameters calldata parameters)\n        external\n        payable\n        returns (bool fulfilled);\n}\n\ncontract SeaportAdapter is IMarketPlaceAdapter {\n    address public weth;\n\n    constructor(address _weth) {\n        weth = _weth;\n    }\n\n    function extractAssetPrice(bytes calldata _data)\n        external\n        pure\n        returns (uint256)\n    {\n        PurchaseParam memory param = _decode(_data);\n        BasicOrderParameters memory basicOrderParameters = abi.decode(\n            param.basicOrderParameters,\n            (BasicOrderParameters)\n        );\n        return basicOrderParameters.considerationAmount;\n    }\n\n    function validate(bytes calldata _data) external pure returns (bool) {\n        return _validate(_data);\n    }\n\n    function execute(bytes calldata _data)\n        external\n        pure\n        returns (bytes memory)\n    {\n        if (!_validate(_data)) {\n            revert(\"invalid data\");\n        }\n\n        PurchaseParam memory param = _decode(_data);\n\n        return abi.encodePacked(param.selector, param.basicOrderParameters);\n    }\n\n    function _decode(bytes calldata _data)\n        internal\n        pure\n        returns (PurchaseParam memory)\n    {\n        PurchaseParam memory param;\n        (\n            param.vault,\n            param.seaport,\n            param.selector,\n            param.basicOrderParameters\n        ) = abi.decode(_data, (address, address, bytes4, bytes));\n        return param;\n    }\n\n    function _validate(bytes calldata _data) private pure returns (bool) {\n        PurchaseParam memory param = _decode(_data);\n\n        // bytes4(keccak256(fulfillBasicOrder()))\n        // 0xfb0f3ee1\n        if (\n            param.selector !=\n            ConsiderationInterface(address(0)).fulfillBasicOrder.selector\n        ) {\n            return false;\n        }\n\n        BasicOrderParameters memory basicOrderParameters = abi.decode(\n            param.basicOrderParameters,\n            (BasicOrderParameters)\n        );\n        BasicOrderType basicOrderType = basicOrderParameters.basicOrderType;\n\n        BasicOrderRouteType route;\n\n        // Utilize assembly to extract the basic order route.\n        assembly {\n            // Divide basicOrderType by four to derive the route.\n            route := shr(2, basicOrderType)\n        }\n\n        if (route != BasicOrderRouteType.ETH_TO_ERC721) {\n            return false;\n        }\n\n        if (basicOrderParameters.offerAmount != 1) {\n            return false;\n        }\n\n        if (basicOrderParameters.considerationToken != address(0)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"
    },
    "contracts/voyage/adapter/LooksRareAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {IMarketPlaceAdapter} from \"../interfaces/IMarketPlaceAdapter.sol\";\n\nstruct MakerOrder {\n    bool isOrderAsk; // true --> ask / false --> bid\n    address signer; // signer of the maker order\n    address collection; // collection address\n    uint256 price; // price (used as )\n    uint256 tokenId; // id of the token\n    uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\n    address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\n    address currency; // currency (e.g., WETH)\n    uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\n    uint256 startTime; // startTime in timestamp\n    uint256 endTime; // endTime in timestamp\n    uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\n    bytes params; // additional parameters\n    uint8 v; // v: parameter (27 or 28)\n    bytes32 r; // r: parameter\n    bytes32 s; // s: parameter\n}\n\nstruct TakerOrder {\n    bool isOrderAsk; // true --> ask / false --> bid\n    address taker; // msg.sender\n    uint256 price; // final price for the purchase\n    uint256 tokenId;\n    uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\n    bytes params; // other params (e.g., tokenId)\n}\n\ninterface ILooksRareExchange {\n    function matchAskWithTakerBidUsingETHAndWETH(\n        TakerOrder calldata takerBid,\n        MakerOrder calldata makerAsk\n    ) external payable;\n\n    function matchAskWithTakerBid(\n        TakerOrder calldata takerBid,\n        MakerOrder calldata makerAsk\n    ) external;\n\n    function matchBidWithTakerAsk(\n        TakerOrder calldata takerAsk,\n        MakerOrder calldata makerBid\n    ) external;\n}\n\ncontract LooksRareAdapter is IMarketPlaceAdapter {\n    // keccak256(\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\")\n    bytes32 internal constant MAKER_ORDER_HASH =\n        0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\n\n    function hash(MakerOrder memory makerOrder)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encode(\n                    MAKER_ORDER_HASH,\n                    makerOrder.isOrderAsk,\n                    makerOrder.signer,\n                    makerOrder.collection,\n                    makerOrder.price,\n                    makerOrder.tokenId,\n                    makerOrder.amount,\n                    makerOrder.strategy,\n                    makerOrder.currency,\n                    makerOrder.nonce,\n                    makerOrder.startTime,\n                    makerOrder.endTime,\n                    makerOrder.minPercentageToAsk,\n                    keccak256(makerOrder.params)\n                )\n            );\n    }\n\n    struct PurchaseParam {\n        address marketplace;\n        bytes4 selector;\n        bytes makerOrder;\n        bytes takerOrder;\n    }\n\n    function extractAssetPrice(bytes calldata _data)\n        external\n        pure\n        returns (uint256)\n    {\n        PurchaseParam memory param;\n        (\n            param.marketplace,\n            param.selector,\n            param.makerOrder,\n            param.takerOrder\n        ) = abi.decode(_data, (address, bytes4, bytes, bytes));\n\n        TakerOrder memory takerOrder;\n        (\n            takerOrder.isOrderAsk,\n            takerOrder.taker,\n            takerOrder.price,\n            takerOrder.tokenId,\n            takerOrder.minPercentageToAsk,\n            takerOrder.params\n        ) = abi.decode(\n            param.takerOrder,\n            (bool, address, uint256, uint256, uint256, bytes)\n        );\n\n        return takerOrder.price;\n    }\n\n    function validate(bytes calldata _data) external pure returns (bool) {\n        return _validate(_data);\n    }\n\n    function execute(bytes calldata _data)\n        external\n        pure\n        returns (bytes memory)\n    {\n        if (_validate(_data)) {\n            PurchaseParam memory param;\n            (\n                param.marketplace,\n                param.selector,\n                param.makerOrder,\n                param.takerOrder\n            ) = abi.decode(_data, (address, bytes4, bytes, bytes));\n            bytes memory data = abi.encode(param.takerOrder, param.makerOrder);\n            data = abi.encodePacked(param.selector, data);\n            return data;\n        }\n        // use native error type here cause an ABI issue\n        revert(\"invalid data\");\n    }\n\n    function _validate(bytes calldata _data) private pure returns (bool) {\n        PurchaseParam memory param;\n        (\n            param.marketplace,\n            param.selector,\n            param.makerOrder,\n            param.takerOrder\n        ) = abi.decode(_data, (address, bytes4, bytes, bytes));\n\n        // bytes4(keccak256(matchAskWithTakerBidUsingETHAndWETH()))\n        // 0xb4e4b296\n        if (\n            param.selector !=\n            ILooksRareExchange(address(0))\n                .matchAskWithTakerBidUsingETHAndWETH\n                .selector\n        ) {\n            return false;\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/mock/MockMarketplace.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {TakerOrder, MakerOrder} from \"../voyage/adapter/LooksRareAdapter.sol\";\nimport \"hardhat/console.sol\";\n\ncontract MockMarketPlace {\n    function matchAskWithTakerBidUsingETHAndWETH(\n        TakerOrder calldata takerBid,\n        MakerOrder calldata makerAsk\n    ) external {\n        console.log(\"in matchAskWithTakerBid\");\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/mock/MockSeaport.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nimport {BasicOrderType, AdditionalRecipient, BasicOrderParameters} from \"../voyage/adapter/SeaportAdapter.sol\";\nimport \"hardhat/console.sol\";\n\ncontract MockSeaport {\n    function fulfillBasicOrder(BasicOrderParameters calldata parameters)\n        external\n        payable\n        returns (bool fulfilled)\n    {\n        console.log(\"MockSeaport#fulfillBasicOrder\");\n    }\n}\n"
    },
    "contracts/mock/MockContextFacet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\nimport {Storage, LibAppStorage} from \"../voyage/libraries/LibAppStorage.sol\";\n\ncontract MockContextFacet is Storage {\n    event Sender(address sender);\n\n    function msgSender() public {\n        emit Sender(_msgSender());\n    }\n\n    event Data(bytes data, uint256 integerValue, string stringValue);\n\n    function msgData(uint256 integerValue, string memory stringValue) public {\n        emit Data(_msgData(), integerValue, stringValue);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}