{
  "address": "0x6A852897F10E9ae2c93072EAD01A770fa96b2C01",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_optimalUtilizationRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableRateSlope1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableRateSlope2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseBorrowRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OPTIMAL_UTILIZATION_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "availableLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStableDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averageBorrowRate",
          "type": "uint256"
        }
      ],
      "name": "calculateInterestRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "juniorDepositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seniorDepositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAdded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityTaken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStableDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averageBorrowRate",
          "type": "uint256"
        }
      ],
      "name": "calculateInterestRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x98beccec524765f65d77090324af9fca26b1bc0b45580eeddd0f003df44adbc7",
  "receipt": {
    "to": null,
    "from": "0x4C616d9377Fa8d928385F0b11Ab16D4bf0f2d544",
    "contractAddress": "0x6A852897F10E9ae2c93072EAD01A770fa96b2C01",
    "transactionIndex": 4,
    "gasUsed": "465942",
    "logsBloom": "0x
    "blockHash": "0xfa883f59af68f9ade4b56a05bab17cf79b9ae32224f1e88400307e86074e0627",
    "transactionHash": "0x98beccec524765f65d77090324af9fca26b1bc0b45580eeddd0f003df44adbc7",
    "logs": [],
    "blockNumber": 8943320,
    "cumulativeGasUsed": "1288481",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "500000000000000000000000000",
    "100000000000000000000000000",
    "200000000000000000000000000",
    "80000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "05c39977b28574de0bf36f6a271259a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optimalUtilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableRateSlope2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseBorrowRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OPTIMAL_UTILIZATION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageBorrowRate\",\"type\":\"uint256\"}],\"name\":\"calculateInterestRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"juniorDepositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seniorDepositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageBorrowRate\",\"type\":\"uint256\"}],\"name\":\"calculateInterestRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateInterestRates(address,address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Calculates the interest rates depending on the reserve's state and configuration\",\"params\":{\"averageBorrowRate\":\"The current average borrow rate*\",\"juniorDepositToken\":\"The address of junior deposit token\",\"liquidityAdded\":\"The liquidity added during the operation\",\"liquidityTaken\":\"The liquidity taken during the operation\",\"reserve\":\"The address of the reserve\",\"seniorDepositToken\":\"The address of senior deposit token\",\"totalStableDebt\":\"The total borrowed from the reserve a stable rate\"}},\"calculateInterestRates(address,uint256,uint256,uint256)\":{\"details\":\"Calculates the interest rates depending on the reserve's state and configurations.\",\"params\":{\"availableLiquidity\":\"The liquidity available in the corresponding aToken\",\"averageBorrowRate\":\"The current average borrow rate*\",\"reserve\":\"The address of the reserve\",\"totalStableDebt\":\"The total borrowed from the reserve a stable rate\"},\"returns\":{\"_0\":\"The liquidity rate, the stable borrow rate\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OPTIMAL_UTILIZATION_RATE()\":{\"notice\":\"this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates Expressed in RAY*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/component/liquiditymanager/DefaultReserveInterestRateStrategy.sol\":\"DefaultReserveInterestRateStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/component/liquiditymanager/DefaultReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IReserveInterestRateStrategy.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    /**\\n     * this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates\\n     * Expressed in RAY\\n     **/\\n    uint256 public immutable OPTIMAL_UTILIZATION_RATE;\\n\\n    // Base interest rate set by governance. Expressed in ray\\n    uint256 internal immutable baseBorrowRate;\\n\\n    // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope1;\\n\\n    // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope2;\\n\\n    constructor(\\n        uint256 _optimalUtilizationRate,\\n        uint256 _stableRateSlope1,\\n        uint256 _stableRateSlope2,\\n        uint256 _baseBorrowRate\\n    ) public {\\n        OPTIMAL_UTILIZATION_RATE = _optimalUtilizationRate;\\n        baseBorrowRate = _baseBorrowRate;\\n        stableRateSlope1 = _stableRateSlope1;\\n        stableRateSlope2 = _stableRateSlope2;\\n    }\\n\\n    struct CalcInterestRatesLocalVars {\\n        uint256 totalDebt;\\n        uint256 currentStableBorrowRate;\\n        uint256 currentLiquidityRate;\\n        uint256 utilizationRate;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configuration\\n     * @param reserve The address of the reserve\\n     * @param juniorDepositToken The address of junior deposit token\\n     * @param seniorDepositToken The address of senior deposit token\\n     * @param liquidityAdded The liquidity added during the operation\\n     * @param liquidityTaken The liquidity taken during the operation\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256) {\\n        uint256 availableJuniorLiquidity = IERC20(reserve).balanceOf(\\n            juniorDepositToken\\n        );\\n        uint256 availableSeniorLiquidity = IERC20(reserve).balanceOf(\\n            seniorDepositToken\\n        );\\n        uint256 availableLiquidity = availableJuniorLiquidity.add(\\n            availableSeniorLiquidity\\n        );\\n        availableLiquidity = availableLiquidity.add(liquidityAdded).sub(\\n            liquidityTaken\\n        );\\n        return\\n            calculateInterestRates(\\n                reserve,\\n                availableLiquidity,\\n                totalStableDebt,\\n                averageBorrowRate\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * @param reserve The address of the reserve\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @return The liquidity rate, the stable borrow rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) public view returns (uint256, uint256) {\\n        CalcInterestRatesLocalVars memory vars;\\n\\n        vars.totalDebt = totalStableDebt;\\n        vars.currentStableBorrowRate = baseBorrowRate;\\n        vars.currentLiquidityRate = 0;\\n\\n        vars.utilizationRate = vars.totalDebt == 0\\n            ? 0\\n            : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\\n\\n        if (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n            vars.currentStableBorrowRate = vars\\n                .currentStableBorrowRate\\n                .add(stableRateSlope1)\\n                .add(\\n                    stableRateSlope2\\n                        .rayMul(\\n                            vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE)\\n                        )\\n                        .rayDiv(WadRayMath.Ray().sub(OPTIMAL_UTILIZATION_RATE))\\n                );\\n        } else {\\n            vars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\\n                stableRateSlope1.rayMul(vars.utilizationRate).rayDiv(\\n                    OPTIMAL_UTILIZATION_RATE\\n                )\\n            );\\n        }\\n\\n        vars.currentLiquidityRate = averageBorrowRate.rayMul(\\n            vars.utilizationRate\\n        );\\n        return (vars.currentLiquidityRate, vars.currentStableBorrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0x501b0d30efd4654196b7940e1b24d0c44a4dcd82c32288da095e9c63625bd9c6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n@title IReserveInterestRateStrategyInterface interface\\n@notice Interface for the calculation of the interest rates.\\n*/\\n\\ninterface IReserveInterestRateStrategy {\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xb45b6fadbd52886b83832ccf42a5f2e3f41aaee4f5132f9ad1b19fad2070b57e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87bc93b45f82b290b2b6a9f00ce09f8c5c2b758931a85b37fb5d117a79031d3f\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b5060405161085238038061085283398101604081905261003091610047565b60809390935260a09290925260c05260e05261007d565b6000806000806080858703121561005d57600080fd5b505082516020840151604085015160609095015191969095509092509050565b60805160a05160c05160e05161077b6100d7600039600061024f01526000818161028501526102ea0152600060ee015260008181608b01528181610149015281816101790152818161022901526102c1015261077b6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636ee082ca1461004657806380a5f70f14610073578063a15f30ac14610086575b600080fd5b6100596100543660046105b5565b6100bb565b604080519283526020830191909152015b60405180910390f35b6100596100813660046105ee565b610352565b6100ad7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161006a565b6000806100e96040518060800160405280600081526020016000815260200160008152602001600081525090565b8481527f0000000000000000000000000000000000000000000000000000000000000000602082015260006040820152841561013d578051610138906101309088906104dd565b8251906104f0565b610140565b60005b606082018190527f000000000000000000000000000000000000000000000000000000000000000010156102b9576102af61027a61021a7f000000000000000000000000000000000000000000000000000000000000000073780e127d90E9366947E70fcEe51C5C03890503eB63df29d0716040518163ffffffff1660e01b815260040160206040518083038186803b1580156101dc57600080fd5b505af41580156101f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102149190610656565b90610532565b60608401516102749061024d907f0000000000000000000000000000000000000000000000000000000000000000610532565b7f00000000000000000000000000000000000000000000000000000000000000009061053e565b906104f0565b60208301516102a9907f00000000000000000000000000000000000000000000000000000000000000006104dd565b906104dd565b6020820152610328565b6103226103177f000000000000000000000000000000000000000000000000000000000000000061027484606001517f000000000000000000000000000000000000000000000000000000000000000061053e90919063ffffffff16565b6020830151906104dd565b60208201525b606081015161033890859061053e565b604082018190526020909101519097909650945050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260009182918291908b16906370a082319060240160206040518083038186803b1580156103c157600080fd5b505afa1580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f99190610656565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301529192506000918c16906370a082319060240160206040518083038186803b15801561046657600080fd5b505afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190610656565b905060006104ac83836104dd565b90506104bc88610214838c6104dd565b90506104ca8c8289896100bb565b9450945050505097509795505050505050565b60006104e9828461069e565b9392505050565b6000806104fe6002846106b6565b905061052a8361052461051d876b033b2e3c9fd0803ce8000000610574565b84906104dd565b90610580565b949350505050565b60006104e982846106f1565b60006104e96b033b2e3c9fd0803ce800000061052461055d8686610574565b6102a960026b033b2e3c9fd0803ce80000006106b6565b60006104e98284610708565b60006104e982846106b6565b803573ffffffffffffffffffffffffffffffffffffffff811681146105b057600080fd5b919050565b600080600080608085870312156105cb57600080fd5b6105d48561058c565b966020860135965060408601359560600135945092505050565b600080600080600080600060e0888a03121561060957600080fd5b6106128861058c565b96506106206020890161058c565b955061062e6040890161058c565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b60006020828403121561066857600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156106b1576106b161066f565b500190565b6000826106ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000828210156107035761070361066f565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156107405761074061066f565b50029056fea26469706673582212201035fc36d979d46ae0bb917d724492c68b44aea4411ad144873c3f1b599f09c164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80636ee082ca1461004657806380a5f70f14610073578063a15f30ac14610086575b600080fd5b6100596100543660046105b5565b6100bb565b604080519283526020830191909152015b60405180910390f35b6100596100813660046105ee565b610352565b6100ad7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161006a565b6000806100e96040518060800160405280600081526020016000815260200160008152602001600081525090565b8481527f0000000000000000000000000000000000000000000000000000000000000000602082015260006040820152841561013d578051610138906101309088906104dd565b8251906104f0565b610140565b60005b606082018190527f000000000000000000000000000000000000000000000000000000000000000010156102b9576102af61027a61021a7f000000000000000000000000000000000000000000000000000000000000000073__$acfa992bb9b9449e585e2b7d311f34c7d0$__63df29d0716040518163ffffffff1660e01b815260040160206040518083038186803b1580156101dc57600080fd5b505af41580156101f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102149190610656565b90610532565b60608401516102749061024d907f0000000000000000000000000000000000000000000000000000000000000000610532565b7f00000000000000000000000000000000000000000000000000000000000000009061053e565b906104f0565b60208301516102a9907f00000000000000000000000000000000000000000000000000000000000000006104dd565b906104dd565b6020820152610328565b6103226103177f000000000000000000000000000000000000000000000000000000000000000061027484606001517f000000000000000000000000000000000000000000000000000000000000000061053e90919063ffffffff16565b6020830151906104dd565b60208201525b606081015161033890859061053e565b604082018190526020909101519097909650945050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260009182918291908b16906370a082319060240160206040518083038186803b1580156103c157600080fd5b505afa1580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f99190610656565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301529192506000918c16906370a082319060240160206040518083038186803b15801561046657600080fd5b505afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190610656565b905060006104ac83836104dd565b90506104bc88610214838c6104dd565b90506104ca8c8289896100bb565b9450945050505097509795505050505050565b60006104e9828461069e565b9392505050565b6000806104fe6002846106b6565b905061052a8361052461051d876b033b2e3c9fd0803ce8000000610574565b84906104dd565b90610580565b949350505050565b60006104e982846106f1565b60006104e96b033b2e3c9fd0803ce800000061052461055d8686610574565b6102a960026b033b2e3c9fd0803ce80000006106b6565b60006104e98284610708565b60006104e982846106b6565b803573ffffffffffffffffffffffffffffffffffffffff811681146105b057600080fd5b919050565b600080600080608085870312156105cb57600080fd5b6105d48561058c565b966020860135965060408601359560600135945092505050565b600080600080600080600060e0888a03121561060957600080fd5b6106128861058c565b96506106206020890161058c565b955061062e6040890161058c565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b60006020828403121561066857600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156106b1576106b161066f565b500190565b6000826106ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000828210156107035761070361066f565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156107405761074061066f565b50029056fea26469706673582212201035fc36d979d46ae0bb917d724492c68b44aea4411ad144873c3f1b599f09c164736f6c63430008090033",
  "libraries": {
    "WadRayMath": "0x780e127d90E9366947E70fcEe51C5C03890503eB"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateInterestRates(address,address,address,uint256,uint256,uint256,uint256)": {
        "details": "Calculates the interest rates depending on the reserve's state and configuration",
        "params": {
          "averageBorrowRate": "The current average borrow rate*",
          "juniorDepositToken": "The address of junior deposit token",
          "liquidityAdded": "The liquidity added during the operation",
          "liquidityTaken": "The liquidity taken during the operation",
          "reserve": "The address of the reserve",
          "seniorDepositToken": "The address of senior deposit token",
          "totalStableDebt": "The total borrowed from the reserve a stable rate"
        }
      },
      "calculateInterestRates(address,uint256,uint256,uint256)": {
        "details": "Calculates the interest rates depending on the reserve's state and configurations.",
        "params": {
          "availableLiquidity": "The liquidity available in the corresponding aToken",
          "averageBorrowRate": "The current average borrow rate*",
          "reserve": "The address of the reserve",
          "totalStableDebt": "The total borrowed from the reserve a stable rate"
        },
        "returns": {
          "_0": "The liquidity rate, the stable borrow rate"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OPTIMAL_UTILIZATION_RATE()": {
        "notice": "this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates Expressed in RAY*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}