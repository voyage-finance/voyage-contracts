{
  "address": "0x4572849dE81C498b0ce873Afb8D030528e65f46d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_optimalUtilizationRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableRateSlope1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stableRateSlope2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseBorrowRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OPTIMAL_UTILIZATION_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "availableLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStableDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averageBorrowRate",
          "type": "uint256"
        }
      ],
      "name": "calculateInterestRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "juniorDepositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seniorDepositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAdded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityTaken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStableDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averageBorrowRate",
          "type": "uint256"
        }
      ],
      "name": "calculateInterestRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xee7c3b19207e9bcc0ee9baa7b8685fc258fee0b6477e60c9c5821380f1593b56",
  "receipt": {
    "to": null,
    "from": "0x4C616d9377Fa8d928385F0b11Ab16D4bf0f2d544",
    "contractAddress": "0x4572849dE81C498b0ce873Afb8D030528e65f46d",
    "transactionIndex": 10,
    "gasUsed": "646355",
    "logsBloom": "0x
    "blockHash": "0xe1182c5169b0d8a21c437860cfac18f7e4acbf464796a6be8e5d9398a9abee7a",
    "transactionHash": "0xee7c3b19207e9bcc0ee9baa7b8685fc258fee0b6477e60c9c5821380f1593b56",
    "logs": [],
    "blockNumber": 8678279,
    "cumulativeGasUsed": "1391839",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "500000000000000000000000000",
    "100000000000000000000000000",
    "200000000000000000000000000",
    "80000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "18122cecad17c7f35277e81b5475a72e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optimalUtilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableRateSlope2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseBorrowRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OPTIMAL_UTILIZATION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageBorrowRate\",\"type\":\"uint256\"}],\"name\":\"calculateInterestRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"juniorDepositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seniorDepositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageBorrowRate\",\"type\":\"uint256\"}],\"name\":\"calculateInterestRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateInterestRates(address,address,address,uint256,uint256,uint256,uint256)\":{\"details\":\"Calculates the interest rates depending on the reserve's state and configuration\",\"params\":{\"averageBorrowRate\":\"The current average borrow rate*\",\"juniorDepositToken\":\"The address of junior deposit token\",\"liquidityAdded\":\"The liquidity added during the operation\",\"liquidityTaken\":\"The liquidity taken during the operation\",\"reserve\":\"The address of the reserve\",\"seniorDepositToken\":\"The address of senior deposit token\",\"totalStableDebt\":\"The total borrowed from the reserve a stable rate\"}},\"calculateInterestRates(address,uint256,uint256,uint256)\":{\"details\":\"Calculates the interest rates depending on the reserve's state and configurations.\",\"params\":{\"availableLiquidity\":\"The liquidity available in the corresponding aToken\",\"averageBorrowRate\":\"The current average borrow rate*\",\"reserve\":\"The address of the reserve\",\"totalStableDebt\":\"The total borrowed from the reserve a stable rate\"},\"returns\":{\"_0\":\"The liquidity rate, the stable borrow rate\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OPTIMAL_UTILIZATION_RATE()\":{\"notice\":\"this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates Expressed in RAY*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/component/liquiditymanager/DefaultReserveInterestRateStrategy.sol\":\"DefaultReserveInterestRateStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/component/liquiditymanager/DefaultReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IReserveInterestRateStrategy.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    /**\\n     * this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates\\n     * Expressed in RAY\\n     **/\\n    uint256 public immutable OPTIMAL_UTILIZATION_RATE;\\n\\n    // Base interest rate set by governance. Expressed in ray\\n    uint256 internal immutable baseBorrowRate;\\n\\n    // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope1;\\n\\n    // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope2;\\n\\n    constructor(\\n        uint256 _optimalUtilizationRate,\\n        uint256 _stableRateSlope1,\\n        uint256 _stableRateSlope2,\\n        uint256 _baseBorrowRate\\n    ) public {\\n        OPTIMAL_UTILIZATION_RATE = _optimalUtilizationRate;\\n        baseBorrowRate = _baseBorrowRate;\\n        stableRateSlope1 = _stableRateSlope1;\\n        stableRateSlope2 = _stableRateSlope2;\\n    }\\n\\n    struct CalcInterestRatesLocalVars {\\n        uint256 totalDebt;\\n        uint256 currentStableBorrowRate;\\n        uint256 currentLiquidityRate;\\n        uint256 utilizationRate;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configuration\\n     * @param reserve The address of the reserve\\n     * @param juniorDepositToken The address of junior deposit token\\n     * @param seniorDepositToken The address of senior deposit token\\n     * @param liquidityAdded The liquidity added during the operation\\n     * @param liquidityTaken The liquidity taken during the operation\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256) {\\n        uint256 availableJuniorLiquidity = IERC20(reserve).balanceOf(\\n            juniorDepositToken\\n        );\\n        uint256 availableSeniorLiquidity = IERC20(reserve).balanceOf(\\n            seniorDepositToken\\n        );\\n        uint256 availableLiquidity = availableJuniorLiquidity.add(\\n            availableSeniorLiquidity\\n        );\\n        availableLiquidity = availableLiquidity.add(liquidityAdded).sub(\\n            liquidityTaken\\n        );\\n        return\\n            calculateInterestRates(\\n                reserve,\\n                availableLiquidity,\\n                totalStableDebt,\\n                averageBorrowRate\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * @param reserve The address of the reserve\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @return The liquidity rate, the stable borrow rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) public view returns (uint256, uint256) {\\n        CalcInterestRatesLocalVars memory vars;\\n\\n        vars.totalDebt = totalStableDebt;\\n        vars.currentStableBorrowRate = baseBorrowRate;\\n        vars.currentLiquidityRate = 0;\\n\\n        vars.utilizationRate = vars.totalDebt == 0\\n            ? 0\\n            : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\\n\\n        if (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n            vars.currentStableBorrowRate = vars\\n                .currentStableBorrowRate\\n                .add(stableRateSlope1)\\n                .add(\\n                    stableRateSlope2\\n                        .rayMul(\\n                            vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE)\\n                        )\\n                        .rayDiv(WadRayMath.Ray().sub(OPTIMAL_UTILIZATION_RATE))\\n                );\\n        } else {\\n            vars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\\n                stableRateSlope1.rayMul(vars.utilizationRate).rayDiv(\\n                    OPTIMAL_UTILIZATION_RATE\\n                )\\n            );\\n        }\\n\\n        vars.currentLiquidityRate = averageBorrowRate.rayMul(\\n            vars.utilizationRate\\n        );\\n        return (vars.currentLiquidityRate, vars.currentStableBorrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0x501b0d30efd4654196b7940e1b24d0c44a4dcd82c32288da095e9c63625bd9c6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n@title IReserveInterestRateStrategyInterface interface\\n@notice Interface for the calculation of the interest rates.\\n*/\\n\\ninterface IReserveInterestRateStrategy {\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xb45b6fadbd52886b83832ccf42a5f2e3f41aaee4f5132f9ad1b19fad2070b57e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87bc93b45f82b290b2b6a9f00ce09f8c5c2b758931a85b37fb5d117a79031d3f\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b50604051610c09380380610c0983398181016040528101906100339190610097565b83608081815250508060a081815250508260c081815250508160e08181525050505050506100fe565b600080fd5b6000819050919050565b61007481610061565b811461007f57600080fd5b50565b6000815190506100918161006b565b92915050565b600080600080608085870312156100b1576100b061005c565b5b60006100bf87828801610082565b94505060206100d087828801610082565b93505060406100e187828801610082565b92505060606100f287828801610082565b91505092959194509250565b60805160a05160c05160e051610ab061015960003960006102760152600081816102b601526103350152600060dd01526000818161015c01528181610191015281816102420152818161030c01526105410152610ab06000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636ee082ca1461004657806380a5f70f14610077578063a15f30ac146100a8575b600080fd5b610060600480360381019061005b919061073f565b6100c6565b60405161006e9291906107b5565b60405180910390f35b610091600480360381019061008c91906107de565b6103c5565b60405161009f9291906107b5565b60405180910390f35b6100b061053f565b6040516100bd9190610880565b60405180910390f35b6000806100d161067e565b848160000181815250507f00000000000000000000000000000000000000000000000000000000000000008160200181815250506000816040018181525050600081600001511461014e5761014961013682600001518861056390919063ffffffff16565b826000015161057990919063ffffffff16565b610151565b60005b8160600181815250507f000000000000000000000000000000000000000000000000000000000000000081606001511115610304576102f66102b161023a7f000000000000000000000000000000000000000000000000000000000000000073CD01b59C7216A196032717B21cC9Dac8f5506f4E63df29d0716040518163ffffffff1660e01b815260040160206040518083038186803b1580156101f457600080fd5b505af4158015610208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022c91906108b0565b6105d790919063ffffffff16565b6102a36102747f000000000000000000000000000000000000000000000000000000000000000086606001516105d790919063ffffffff16565b7f00000000000000000000000000000000000000000000000000000000000000006105ed90919063ffffffff16565b61057990919063ffffffff16565b6102e87f0000000000000000000000000000000000000000000000000000000000000000846020015161056390919063ffffffff16565b61056390919063ffffffff16565b81602001818152505061038d565b6103836103707f000000000000000000000000000000000000000000000000000000000000000061036284606001517f00000000000000000000000000000000000000000000000000000000000000006105ed90919063ffffffff16565b61057990919063ffffffff16565b826020015161056390919063ffffffff16565b8160200181815250505b6103a48160600151856105ed90919063ffffffff16565b81604001818152505080604001518160200151925092505094509492505050565b60008060008973ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b815260040161040391906108ec565b60206040518083038186803b15801561041b57600080fd5b505afa15801561042f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045391906108b0565b905060008a73ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b815260040161049091906108ec565b60206040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e091906108b0565b905060006104f7828461056390919063ffffffff16565b905061051e886105108b8461056390919063ffffffff16565b6105d790919063ffffffff16565b905061052c8c8289896100c6565b9450945050505097509795505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081836105719190610936565b905092915050565b60008060028361058991906109bb565b90506105ce836105c06105b16b033b2e3c9fd0803ce80000008861065290919063ffffffff16565b8461056390919063ffffffff16565b61066890919063ffffffff16565b91505092915050565b600081836105e591906109ec565b905092915050565b600061064a6b033b2e3c9fd0803ce800000061063c610615858761065290919063ffffffff16565b60026b033b2e3c9fd0803ce800000061062e91906109bb565b61056390919063ffffffff16565b61066890919063ffffffff16565b905092915050565b600081836106609190610a20565b905092915050565b6000818361067691906109bb565b905092915050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106d6826106ab565b9050919050565b6106e6816106cb565b81146106f157600080fd5b50565b600081359050610703816106dd565b92915050565b6000819050919050565b61071c81610709565b811461072757600080fd5b50565b60008135905061073981610713565b92915050565b60008060008060808587031215610759576107586106a6565b5b6000610767878288016106f4565b94505060206107788782880161072a565b93505060406107898782880161072a565b925050606061079a8782880161072a565b91505092959194509250565b6107af81610709565b82525050565b60006040820190506107ca60008301856107a6565b6107d760208301846107a6565b9392505050565b600080600080600080600060e0888a0312156107fd576107fc6106a6565b5b600061080b8a828b016106f4565b975050602061081c8a828b016106f4565b965050604061082d8a828b016106f4565b955050606061083e8a828b0161072a565b945050608061084f8a828b0161072a565b93505060a06108608a828b0161072a565b92505060c06108718a828b0161072a565b91505092959891949750929550565b600060208201905061089560008301846107a6565b92915050565b6000815190506108aa81610713565b92915050565b6000602082840312156108c6576108c56106a6565b5b60006108d48482850161089b565b91505092915050565b6108e6816106cb565b82525050565b600060208201905061090160008301846108dd565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061094182610709565b915061094c83610709565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561098157610980610907565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006109c682610709565b91506109d183610709565b9250826109e1576109e061098c565b5b828204905092915050565b60006109f782610709565b9150610a0283610709565b925082821015610a1557610a14610907565b5b828203905092915050565b6000610a2b82610709565b9150610a3683610709565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a6f57610a6e610907565b5b82820290509291505056fea264697066735822122012ae04b99c9fd98002902178a041941f8d7e8a6e6bfc44068ed9e4002b59c9d064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80636ee082ca1461004657806380a5f70f14610077578063a15f30ac146100a8575b600080fd5b610060600480360381019061005b919061073f565b6100c6565b60405161006e9291906107b5565b60405180910390f35b610091600480360381019061008c91906107de565b6103c5565b60405161009f9291906107b5565b60405180910390f35b6100b061053f565b6040516100bd9190610880565b60405180910390f35b6000806100d161067e565b848160000181815250507f00000000000000000000000000000000000000000000000000000000000000008160200181815250506000816040018181525050600081600001511461014e5761014961013682600001518861056390919063ffffffff16565b826000015161057990919063ffffffff16565b610151565b60005b8160600181815250507f000000000000000000000000000000000000000000000000000000000000000081606001511115610304576102f66102b161023a7f000000000000000000000000000000000000000000000000000000000000000073__$acfa992bb9b9449e585e2b7d311f34c7d0$__63df29d0716040518163ffffffff1660e01b815260040160206040518083038186803b1580156101f457600080fd5b505af4158015610208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022c91906108b0565b6105d790919063ffffffff16565b6102a36102747f000000000000000000000000000000000000000000000000000000000000000086606001516105d790919063ffffffff16565b7f00000000000000000000000000000000000000000000000000000000000000006105ed90919063ffffffff16565b61057990919063ffffffff16565b6102e87f0000000000000000000000000000000000000000000000000000000000000000846020015161056390919063ffffffff16565b61056390919063ffffffff16565b81602001818152505061038d565b6103836103707f000000000000000000000000000000000000000000000000000000000000000061036284606001517f00000000000000000000000000000000000000000000000000000000000000006105ed90919063ffffffff16565b61057990919063ffffffff16565b826020015161056390919063ffffffff16565b8160200181815250505b6103a48160600151856105ed90919063ffffffff16565b81604001818152505080604001518160200151925092505094509492505050565b60008060008973ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b815260040161040391906108ec565b60206040518083038186803b15801561041b57600080fd5b505afa15801561042f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045391906108b0565b905060008a73ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b815260040161049091906108ec565b60206040518083038186803b1580156104a857600080fd5b505afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e091906108b0565b905060006104f7828461056390919063ffffffff16565b905061051e886105108b8461056390919063ffffffff16565b6105d790919063ffffffff16565b905061052c8c8289896100c6565b9450945050505097509795505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081836105719190610936565b905092915050565b60008060028361058991906109bb565b90506105ce836105c06105b16b033b2e3c9fd0803ce80000008861065290919063ffffffff16565b8461056390919063ffffffff16565b61066890919063ffffffff16565b91505092915050565b600081836105e591906109ec565b905092915050565b600061064a6b033b2e3c9fd0803ce800000061063c610615858761065290919063ffffffff16565b60026b033b2e3c9fd0803ce800000061062e91906109bb565b61056390919063ffffffff16565b61066890919063ffffffff16565b905092915050565b600081836106609190610a20565b905092915050565b6000818361067691906109bb565b905092915050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106d6826106ab565b9050919050565b6106e6816106cb565b81146106f157600080fd5b50565b600081359050610703816106dd565b92915050565b6000819050919050565b61071c81610709565b811461072757600080fd5b50565b60008135905061073981610713565b92915050565b60008060008060808587031215610759576107586106a6565b5b6000610767878288016106f4565b94505060206107788782880161072a565b93505060406107898782880161072a565b925050606061079a8782880161072a565b91505092959194509250565b6107af81610709565b82525050565b60006040820190506107ca60008301856107a6565b6107d760208301846107a6565b9392505050565b600080600080600080600060e0888a0312156107fd576107fc6106a6565b5b600061080b8a828b016106f4565b975050602061081c8a828b016106f4565b965050604061082d8a828b016106f4565b955050606061083e8a828b0161072a565b945050608061084f8a828b0161072a565b93505060a06108608a828b0161072a565b92505060c06108718a828b0161072a565b91505092959891949750929550565b600060208201905061089560008301846107a6565b92915050565b6000815190506108aa81610713565b92915050565b6000602082840312156108c6576108c56106a6565b5b60006108d48482850161089b565b91505092915050565b6108e6816106cb565b82525050565b600060208201905061090160008301846108dd565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061094182610709565b915061094c83610709565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561098157610980610907565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006109c682610709565b91506109d183610709565b9250826109e1576109e061098c565b5b828204905092915050565b60006109f782610709565b9150610a0283610709565b925082821015610a1557610a14610907565b5b828203905092915050565b6000610a2b82610709565b9150610a3683610709565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a6f57610a6e610907565b5b82820290509291505056fea264697066735822122012ae04b99c9fd98002902178a041941f8d7e8a6e6bfc44068ed9e4002b59c9d064736f6c63430008090033",
  "libraries": {
    "WadRayMath": "0xCD01b59C7216A196032717B21cC9Dac8f5506f4E"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateInterestRates(address,address,address,uint256,uint256,uint256,uint256)": {
        "details": "Calculates the interest rates depending on the reserve's state and configuration",
        "params": {
          "averageBorrowRate": "The current average borrow rate*",
          "juniorDepositToken": "The address of junior deposit token",
          "liquidityAdded": "The liquidity added during the operation",
          "liquidityTaken": "The liquidity taken during the operation",
          "reserve": "The address of the reserve",
          "seniorDepositToken": "The address of senior deposit token",
          "totalStableDebt": "The total borrowed from the reserve a stable rate"
        }
      },
      "calculateInterestRates(address,uint256,uint256,uint256)": {
        "details": "Calculates the interest rates depending on the reserve's state and configurations.",
        "params": {
          "availableLiquidity": "The liquidity available in the corresponding aToken",
          "averageBorrowRate": "The current average borrow rate*",
          "reserve": "The address of the reserve",
          "totalStableDebt": "The total borrowed from the reserve a stable rate"
        },
        "returns": {
          "_0": "The liquidity rate, the stable borrow rate"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OPTIMAL_UTILIZATION_RATE()": {
        "notice": "this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates Expressed in RAY*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}