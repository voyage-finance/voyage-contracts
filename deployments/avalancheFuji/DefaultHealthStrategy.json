{
  "address": "0xd5AF49Be52bA294A4CEB54dAAD8ea68E4214Adce",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premiumFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loanTenure",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_weightedLTV",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_weightedRepaymentRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "securityDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "compoundedDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "grossAssetValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "aggregateOptimalRepaymentRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "aggregateActualRepaymentRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.HealthRiskParameter",
          "name": "hrp",
          "type": "tuple"
        }
      ],
      "name": "calculateHealthRisk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLoanTenure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPremiumFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWeightedLTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWeightedRepaymentRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x460713b1a6ee51601f5087dcf6c6ec3f4ed43bcaa4f70649922d71421441fe2c",
  "receipt": {
    "to": null,
    "from": "0x4C616d9377Fa8d928385F0b11Ab16D4bf0f2d544",
    "contractAddress": "0xd5AF49Be52bA294A4CEB54dAAD8ea68E4214Adce",
    "transactionIndex": 9,
    "gasUsed": "450324",
    "logsBloom": "0x
    "blockHash": "0x0065da02921b3b619176b47ae78f07e0c1c459d5a1afcd2c6389192d421e35d1",
    "transactionHash": "0x460713b1a6ee51601f5087dcf6c6ec3f4ed43bcaa4f70649922d71421441fe2c",
    "logs": [],
    "blockNumber": 8678283,
    "cumulativeGasUsed": "1039358",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "5000000000000000000000000000",
    "5000000000000000000000000000",
    "2000000000000000000000000000",
    "8000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "18122cecad17c7f35277e81b5475a72e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premiumFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanTenure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weightedLTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weightedRepaymentRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"securityDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compoundedDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grossAssetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateOptimalRepaymentRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateActualRepaymentRate\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.HealthRiskParameter\",\"name\":\"hrp\",\"type\":\"tuple\"}],\"name\":\"calculateHealthRisk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLoanTenure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPremiumFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeightedLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeightedRepaymentRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/component/vault/DefaultHealthStrategy.sol\":\"DefaultHealthStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/component/vault/DefaultHealthStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../interfaces/IHealthStrategy.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../libraries/math/MathUtils.sol';\\nimport '../../libraries/types/DataTypes.sol';\\n\\ncontract DefaultHealthStrategy is IHealthStrategy {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n\\n    // A number >= 1 by which loan amount is multiplied. Riskier assets will attract\\n    // a higher PF, effectively increasing the expected repayment rate. Expressed in ray\\n    uint256 internal immutable premiumFactor;\\n\\n    // Tenure for a given draw down\\n    uint256 internal immutable loanTenure;\\n\\n    // Weight of LTV in HF computation\\n    uint256 internal immutable weightedLTV;\\n\\n    // Wight of RR(Repayment Ratio) in HF computation\\n    uint256 internal immutable weightedRepaymentRatio;\\n\\n    constructor(\\n        uint256 _premiumFactor,\\n        uint256 _loanTenure,\\n        uint256 _weightedLTV,\\n        uint256 _weightedRepaymentRatio\\n    ) public {\\n        premiumFactor = _premiumFactor;\\n        loanTenure = _loanTenure;\\n        weightedLTV = _weightedLTV;\\n        weightedRepaymentRatio = _weightedRepaymentRatio;\\n    }\\n\\n    function getPrincipalDebt(uint256 _amount) internal view returns (uint256) {\\n        return premiumFactor.add(WadRayMath.Ray()).rayMul(_amount);\\n    }\\n\\n    function calculateHealthRisk(DataTypes.HealthRiskParameter memory hrp)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ltvRatio = hrp.grossAssetValue.add(hrp.securityDeposit).rayDiv(\\n            hrp.compoundedDebt\\n        );\\n        uint256 repaymentRatio = hrp.aggregateActualRepaymentRate.rayDiv(\\n            hrp.aggregateOptimalRepaymentRate\\n        );\\n        return\\n            ltvRatio\\n                .rayMul(weightedLTV)\\n                .add(repaymentRatio.rayMul(weightedRepaymentRatio))\\n                .rayDiv(weightedLTV.add(weightedRepaymentRatio));\\n    }\\n\\n    function getPremiumFactor() external view returns (uint256) {\\n        return premiumFactor;\\n    }\\n\\n    function getLoanTenure() external view returns (uint256) {\\n        return loanTenure;\\n    }\\n\\n    function getWeightedLTV() external view returns (uint256) {\\n        return weightedLTV;\\n    }\\n\\n    function getWeightedRepaymentRatio() external view returns (uint256) {\\n        return weightedRepaymentRatio;\\n    }\\n}\\n\",\"keccak256\":\"0x82feb0a3002f53ac2c03d42fae8086fe692222d91c9c54a430e57f551f7e875e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IHealthStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IHealthStrategy {\\n    function getPremiumFactor() external view returns (uint256);\\n\\n    function getLoanTenure() external view returns (uint256);\\n\\n    function getWeightedLTV() external view returns (uint256);\\n\\n    function getWeightedRepaymentRatio() external view returns (uint256);\\n\\n    function calculateHealthRisk(DataTypes.HealthRiskParameter memory)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xb5846e09c5c14a9365b2c5994acbc2d41459600e68b603d8cd12d5f6e1a5d8b7\",\"license\":\"GPL-3.0\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(\\n            uint256(lastUpdateTimestamp)\\n        );\\n\\n        return\\n            (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n     * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        if (exp == 0) {\\n            return WadRayMath.ray();\\n        }\\n\\n        uint256 expMinusOne = exp - 1;\\n\\n        uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n        uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n        uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n        uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n        uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n        uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(\\n            basePowerThree\\n        ) / 6;\\n\\n        return\\n            WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(\\n                thirdTerm\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xeb644d3d04ac6c043657b2b835fbf71d1f2795f1f713b900cc43582158f31eac\",\"license\":\"agpl-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87bc93b45f82b290b2b6a9f00ce09f8c5c2b758931a85b37fb5d117a79031d3f\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary DataTypes {\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        // for calculating overall interested accumulated\\n        // then split it into two indexs base on two allocations\\n        uint256 currentOverallLiquidityRate;\\n        // Expressed in ray\\n        uint256 currentSeniorIncomeAllocation;\\n        // Expressed in ray\\n        uint256 currentJuniorIncomeAllocation;\\n        uint256 juniorLiquidityIndex;\\n        uint256 seniorLiquidityIndex;\\n        uint256 totalBorrows;\\n        uint256 currentBorrowRate;\\n        // Expressed in ray\\n        uint256 securityRequirement;\\n        //the decimals of the reserve asset\\n        uint256 decimals;\\n        address interestRateStrategyAddress;\\n        address healthStrategyAddress;\\n        address juniorDepositTokenAddress;\\n        address seniorDepositTokenAddress;\\n        address stableDebtAddress;\\n        uint40 juniorLastUpdateTimestamp;\\n        uint40 seniorLastUpdateTimestamp;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: Liquidate bonus\\n        //bit 16-23: Decimals\\n        //bit 24: Reserve is active\\n        //bit 25: reserve is frozen\\n        //bit 26: borrowing is enabled\\n        //bit 27-30: reserved\\n        //bit 31-46: reserve factor\\n        //bit 47-62: lock up period in seconds\\n        uint256 data;\\n    }\\n\\n    struct FungibleTokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    struct BorrowData {\\n        uint256 drawDownNumber;\\n        uint256 totalDebt;\\n        mapping(uint256 => DrawDown) drawDowns;\\n        mapping(uint256 => Repayment) repayments;\\n    }\\n\\n    struct DrawDown {\\n        uint256 amount;\\n        uint256 tenure;\\n        uint40 timestamp;\\n        uint256 borrowRate;\\n        Repayment repayment;\\n    }\\n\\n    struct Repayment {\\n        uint256 totalPaid;\\n        // tenure => amount\\n        // todo wrapper this in the future\\n        mapping(uint256 => uint256) repayment;\\n    }\\n\\n    // tmp struct to avoid stack too long\\n\\n    struct DepositAndDebt {\\n        uint256 juniorDepositAmount;\\n        uint256 seniorDepositAmount;\\n        uint256 totalDebt;\\n    }\\n\\n    struct HealthRiskParameter {\\n        uint256 securityDeposit;\\n        uint256 currentBorrowRate;\\n        uint256 compoundedDebt;\\n        uint256 grossAssetValue;\\n        uint256 aggregateOptimalRepaymentRate;\\n        uint256 aggregateActualRepaymentRate;\\n    }\\n}\\n\",\"keccak256\":\"0x2475d0cacc4f46847d0f7c21081a6957410f0bfe47a4c4e919d97f4b8fd1cb73\",\"license\":\"GPL-3.0\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b5060405161087738038061087783398181016040528101906100339190610097565b83608081815250508260a081815250508160c081815250508060e08181525050505050506100fe565b600080fd5b6000819050919050565b61007481610061565b811461007f57600080fd5b50565b6000815190506100918161006b565b92915050565b600080600080608085870312156100b1576100b061005c565b5b60006100bf87828801610082565b94505060206100d087828801610082565b93505060406100e187828801610082565b92505060606100f287828801610082565b91505092959194509250565b60805160a05160c05160e051610724610153600039600081816101d90152818161022f01526102b9015260008181610108015281816101fa0152610262015260006101580152600061013001526107246000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633f7eaa011461005c57806356d613171461007a5780635f633ac7146100985780636a69878c146100b6578063c0df3636146100e6575b600080fd5b610064610104565b60405161007191906103fb565b60405180910390f35b61008261012c565b60405161008f91906103fb565b60405180910390f35b6100a0610154565b6040516100ad91906103fb565b60405180910390f35b6100d060048036038101906100cb9190610582565b61017c565b6040516100dd91906103fb565b60405180910390f35b6100ee6102b5565b6040516100fb91906103fb565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000806101b083604001516101a2856000015186606001516102dd90919063ffffffff16565b6102f390919063ffffffff16565b905060006101cf84608001518560a001516102f390919063ffffffff16565b90506102ac6102277f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006102dd90919063ffffffff16565b61029e61025d7f00000000000000000000000000000000000000000000000000000000000000008561035190919063ffffffff16565b6102907f00000000000000000000000000000000000000000000000000000000000000008761035190919063ffffffff16565b6102dd90919063ffffffff16565b6102f390919063ffffffff16565b92505050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600081836102eb91906105de565b905092915050565b6000806002836103039190610663565b90506103488361033a61032b6b033b2e3c9fd0803ce8000000886103b690919063ffffffff16565b846102dd90919063ffffffff16565b6103cc90919063ffffffff16565b91505092915050565b60006103ae6b033b2e3c9fd0803ce80000006103a061037985876103b690919063ffffffff16565b60026b033b2e3c9fd0803ce80000006103929190610663565b6102dd90919063ffffffff16565b6103cc90919063ffffffff16565b905092915050565b600081836103c49190610694565b905092915050565b600081836103da9190610663565b905092915050565b6000819050919050565b6103f5816103e2565b82525050565b600060208201905061041060008301846103ec565b92915050565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104738261042a565b810181811067ffffffffffffffff821117156104925761049161043b565b5b80604052505050565b60006104a5610416565b90506104b1828261046a565b919050565b6104bf816103e2565b81146104ca57600080fd5b50565b6000813590506104dc816104b6565b92915050565b600060c082840312156104f8576104f7610425565b5b61050260c061049b565b90506000610512848285016104cd565b6000830152506020610526848285016104cd565b602083015250604061053a848285016104cd565b604083015250606061054e848285016104cd565b6060830152506080610562848285016104cd565b60808301525060a0610576848285016104cd565b60a08301525092915050565b600060c0828403121561059857610597610420565b5b60006105a6848285016104e2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105e9826103e2565b91506105f4836103e2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610629576106286105af565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061066e826103e2565b9150610679836103e2565b92508261068957610688610634565b5b828204905092915050565b600061069f826103e2565b91506106aa836103e2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156106e3576106e26105af565b5b82820290509291505056fea26469706673582212209dc77799f959efc87abf8529f733e70200157855cadcab9b780da816eb7a3d0f64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80633f7eaa011461005c57806356d613171461007a5780635f633ac7146100985780636a69878c146100b6578063c0df3636146100e6575b600080fd5b610064610104565b60405161007191906103fb565b60405180910390f35b61008261012c565b60405161008f91906103fb565b60405180910390f35b6100a0610154565b6040516100ad91906103fb565b60405180910390f35b6100d060048036038101906100cb9190610582565b61017c565b6040516100dd91906103fb565b60405180910390f35b6100ee6102b5565b6040516100fb91906103fb565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000806101b083604001516101a2856000015186606001516102dd90919063ffffffff16565b6102f390919063ffffffff16565b905060006101cf84608001518560a001516102f390919063ffffffff16565b90506102ac6102277f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006102dd90919063ffffffff16565b61029e61025d7f00000000000000000000000000000000000000000000000000000000000000008561035190919063ffffffff16565b6102907f00000000000000000000000000000000000000000000000000000000000000008761035190919063ffffffff16565b6102dd90919063ffffffff16565b6102f390919063ffffffff16565b92505050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600081836102eb91906105de565b905092915050565b6000806002836103039190610663565b90506103488361033a61032b6b033b2e3c9fd0803ce8000000886103b690919063ffffffff16565b846102dd90919063ffffffff16565b6103cc90919063ffffffff16565b91505092915050565b60006103ae6b033b2e3c9fd0803ce80000006103a061037985876103b690919063ffffffff16565b60026b033b2e3c9fd0803ce80000006103929190610663565b6102dd90919063ffffffff16565b6103cc90919063ffffffff16565b905092915050565b600081836103c49190610694565b905092915050565b600081836103da9190610663565b905092915050565b6000819050919050565b6103f5816103e2565b82525050565b600060208201905061041060008301846103ec565b92915050565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104738261042a565b810181811067ffffffffffffffff821117156104925761049161043b565b5b80604052505050565b60006104a5610416565b90506104b1828261046a565b919050565b6104bf816103e2565b81146104ca57600080fd5b50565b6000813590506104dc816104b6565b92915050565b600060c082840312156104f8576104f7610425565b5b61050260c061049b565b90506000610512848285016104cd565b6000830152506020610526848285016104cd565b602083015250604061053a848285016104cd565b604083015250606061054e848285016104cd565b6060830152506080610562848285016104cd565b60808301525060a0610576848285016104cd565b60a08301525092915050565b600060c0828403121561059857610597610420565b5b60006105a6848285016104e2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105e9826103e2565b91506105f4836103e2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610629576106286105af565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061066e826103e2565b9150610679836103e2565b92508261068957610688610634565b5b828204905092915050565b600061069f826103e2565b91506106aa836103e2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156106e3576106e26105af565b5b82820290509291505056fea26469706673582212209dc77799f959efc87abf8529f733e70200157855cadcab9b780da816eb7a3d0f64736f6c63430008090033",
  "libraries": {
    "WadRayMath": "0xCD01b59C7216A196032717B21cC9Dac8f5506f4E"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}