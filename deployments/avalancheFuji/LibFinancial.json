{
  "address": "0xE6cd0D7C4e706dB27b692Ca813902e601d49B2B2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "adjustedAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nper",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pmt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "pmtsign",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "pv",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "pvsign",
          "type": "bool"
        }
      ],
      "name": "fv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "per",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nper",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pv",
          "type": "uint256"
        }
      ],
      "name": "ipmt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nper",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pv",
          "type": "uint256"
        }
      ],
      "name": "pmt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "per",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nper",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pv",
          "type": "uint256"
        }
      ],
      "name": "ppmt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8fecdbc148580b497744027d126906d33e4943d26061aa93ef60bf078dbf3ce9",
  "receipt": {
    "to": null,
    "from": "0x4C616d9377Fa8d928385F0b11Ab16D4bf0f2d544",
    "contractAddress": "0xE6cd0D7C4e706dB27b692Ca813902e601d49B2B2",
    "transactionIndex": 0,
    "gasUsed": "432382",
    "logsBloom": "0x
    "blockHash": "0x00f3dd9ee0f6194c04897dbd25d2444310df3b40c21d94bccb498b67116eb0e1",
    "transactionHash": "0x8fecdbc148580b497744027d126906d33e4943d26061aa93ef60bf078dbf3ce9",
    "logs": [],
    "blockNumber": 10670218,
    "cumulativeGasUsed": "432382",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "12f50c75a18b6f714019b390413b1deb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"adjustedAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pmt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pmtsign\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pv\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pvsign\",\"type\":\"bool\"}],\"name\":\"fv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"per\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pv\",\"type\":\"uint256\"}],\"name\":\"ipmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pv\",\"type\":\"uint256\"}],\"name\":\"pmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"per\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pv\",\"type\":\"uint256\"}],\"name\":\"ppmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"adjustedAPR(uint256,uint256)\":{\"details\":\"Function to compute the adjusted equivalent nominal borrow rate\",\"params\":{\"epoch\":\"Payment period*\",\"rate\":\"The interest rate\"}},\"fv(uint256,uint256,uint256,bool,uint256,bool)\":{\"details\":\"Function to compute the future value\",\"params\":{\"nper\":\"Number of compounding periods\",\"pmt\":\"Payment\",\"pv\":\"Present value\",\"rate\":\"The interest rate\"},\"returns\":{\"_0\":\"The future value, in wad*\"}},\"ipmt(uint256,uint256,uint256,uint256)\":{\"details\":\"Function to compute the interest portion of a payment\",\"params\":{\"nper\":\"Number of compounding periods\",\"per\":\"The payment period to calculate the interest amount\",\"pv\":\"Present value\",\"rate\":\"The interest rate\"},\"returns\":{\"_0\":\"The interest portion of payment, in wad*\"}},\"pmt(uint256,uint256,uint256)\":{\"details\":\"Function to compute the payment against loan principal plus interest The payment is computed by solving the equation:  fv + pv*(1 + rate)**nper + pmt*(1 + rate*when(0))/rate*((1 + rate)**nper - 1) == 0\",\"params\":{\"nper\":\"Number of compounding periods\",\"pv\":\"Present value (amount borrowed)\",\"rate\":\"The interest rate per period, in Ray\"},\"returns\":{\"_0\":\"The fixed periodic payment, in wad*\"}},\"ppmt(uint256,uint256,uint256,uint256)\":{\"details\":\"Function to compute the payment against load principal\",\"params\":{\"nper\":\"Number of compounding periods\",\"per\":\"The payment period to calculate the interest amount\",\"pv\":\"Present value\",\"rate\":\"The interest rate\"},\"returns\":{\"_0\":\"The payment, in wad*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/financial/LibFinancial.sol\":\"LibFinancial\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/libraries/financial/LibFinancial.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\n\\nlibrary LibFinancial {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant TYEAR = 31536000;\\n    uint256 internal constant TMOTH = 2592000;\\n\\n    /**\\n     * @dev Function to compute the payment against loan principal plus interest\\n     * The payment is computed by solving the equation:\\n     *  fv + pv*(1 + rate)**nper + pmt*(1 + rate*when(0))/rate*((1 + rate)**nper - 1) == 0\\n     * @param rate The interest rate per period, in Ray\\n     * @param nper Number of compounding periods\\n     * @param pv Present value (amount borrowed)\\n     * @return The fixed periodic payment, in wad\\n     **/\\n    function pmt(\\n        uint256 rate,\\n        uint256 nper,\\n        uint256 pv\\n    ) public view returns (uint256, bool) {\\n        uint256 temp = rate.add(RAY).rayPow(nper);\\n        uint256 masked_rate = rate;\\n        uint256 fact = nper;\\n        if (rate == 0) {\\n            masked_rate = RAY;\\n        } else {\\n            fact = temp.sub(RAY).rayDiv(masked_rate);\\n        }\\n\\n        uint256 pvRay = pv.wadToRay();\\n        return (pvRay.rayMul(temp).rayDiv(fact).rayToWad(), false);\\n    }\\n\\n    /**\\n     * @dev Function to compute the future value\\n     * @param rate The interest rate\\n     * @param nper Number of compounding periods\\n     * @param pmt Payment\\n     * @param pv Present value\\n     * @return The future value, in wad\\n     **/\\n    function fv(\\n        uint256 rate,\\n        uint256 nper,\\n        uint256 pmt,\\n        bool pmtsign,\\n        uint256 pv,\\n        bool pvsign\\n    ) public view returns (uint256) {\\n        uint256 temp = rate.add(RAY).rayPow(nper);\\n        uint256 pvRay = pv.wadToRay();\\n        uint256 pmtRay = pmt.wadToRay();\\n        uint256 parta = temp.rayMul(pvRay);\\n        uint256 partb = pmtRay.rayDiv(rate).rayMul(temp.sub(RAY));\\n        uint256 fv = 0;\\n        if (pvsign && !pmtsign) {\\n            fv = parta.sub(partb);\\n        } else if (!pvsign && pmtsign) {\\n            fv = partb.sub(parta);\\n        } else {\\n            fv = parta.add(partb);\\n        }\\n        return fv.rayToWad();\\n    }\\n\\n    /**\\n     * @dev Function to compute the interest portion of a payment\\n     * @param rate The interest rate\\n     * @param per The payment period to calculate the interest amount\\n     * @param nper Number of compounding periods\\n     * @param pv Present value\\n     * @return The interest portion of payment, in wad\\n     **/\\n    function ipmt(\\n        uint256 rate,\\n        uint256 per,\\n        uint256 nper,\\n        uint256 pv\\n    ) public view returns (uint256) {\\n        (uint256 totalPmt, bool pmtsign) = pmt(rate, nper, pv);\\n        uint256 fvRay = fv(rate, per - 1, totalPmt, pmtsign, pv, true)\\n            .wadToRay();\\n        return fvRay.rayMul(rate).rayDiv(rate.add(RAY)).rayToWad();\\n    }\\n\\n    /**\\n     * @dev Function to compute the payment against load principal\\n     * @param rate The interest rate\\n     * @param per The payment period to calculate the interest amount\\n     * @param nper Number of compounding periods\\n     * @param pv Present value\\n     * @return The payment, in wad\\n     **/\\n    function ppmt(\\n        uint256 rate,\\n        uint256 per,\\n        uint256 nper,\\n        uint256 pv\\n    ) public view returns (uint256) {\\n        (uint256 totalPmt, bool sign) = pmt(rate, nper, pv);\\n        return totalPmt.sub(ipmt(rate, per, nper, pv));\\n    }\\n\\n    /**\\n     * @dev Function to compute the adjusted equivalent nominal borrow rate\\n     * @param rate The interest rate\\n     * @param epoch Payment period\\n     **/\\n    function adjustedAPR(uint256 rate, uint256 epoch)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 temp = rate.div(TYEAR).add(RAY).rayPow(epoch);\\n        uint256 epy = TYEAR.rayDiv(epoch);\\n        return temp.sub(RAY).rayMul(epy);\\n    }\\n}\\n\",\"keccak256\":\"0xca102d61dc81daff6f22ec4239c3cc11ce609ab78aec42d51debd0e8c35557f5\",\"license\":\"agpl-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7cd9f5c44c880296f68a612b02370ca94fea3aba2eb2678636345c10edd21e42\"}},\"version\":1}",
  "bytecode": "0x6106e161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c8063bd1634ff1161005a578063bd1634ff146100c4578063c389aec5146100d7578063ec429b35146100ea57600080fd5b80631ea96f9c1461007657806348a4da7a1461009c575b600080fd5b6100896100843660046104cc565b6100fd565b6040519081526020015b60405180910390f35b6100af6100aa3660046104fe565b610174565b60408051928352901515602083015201610093565b6100896100d236600461052a565b610200565b6100896100e5366004610561565b61026a565b6100896100f83660046104cc565b61033c565b600080600061010d878686610174565b909250905060006101356101308961012660018b6105e8565b86868a600161026a565b610371565b90506101686101636101538a6b033b2e3c9fd0803ce8000000610381565b61015d848c610394565b906103d0565b61040c565b98975050505050505050565b6000808061019885610192886b033b2e3c9fd0803ce8000000610381565b90610432565b90508585816101b5576b033b2e3c9fd0803ce800000091506101d2565b6101cf8261015d856b033b2e3c9fd0803ce80000006104a8565b90505b60006101dd87610371565b90506101f06101638361015d8488610394565b9960009950975050505050505050565b60008061022b836101926b033b2e3c9fd0803ce8000000610225886301e133806104b4565b90610381565b9050600061023d6301e13380856103d0565b905061025f81610259846b033b2e3c9fd0803ce80000006104a8565b90610394565b925050505b92915050565b600080610287876101928a6b033b2e3c9fd0803ce8000000610381565b9050600061029485610371565b905060006102a188610371565b905060006102af8484610394565b905060006102d66102cc866b033b2e3c9fd0803ce80000006104a8565b610259858f6103d0565b905060008780156102e5575089155b156102fb576102f483836104a8565b9050610322565b871580156103065750895b15610315576102f482846104a8565b61031f8383610381565b90505b61032b8161040c565b9d9c50505050505050505050505050565b600080600061034c878686610174565b9150915061036661035f888888886100fd565b83906104a8565b979650505050505050565b600061026482633b9aca006104c0565b600061038d82846105ff565b9392505050565b600061038d6b033b2e3c9fd0803ce80000006103ca6103b386866104c0565b61022560026b033b2e3c9fd0803ce8000000610646565b906104b4565b6000806103de600284610646565b9050610404836103ca6103fd876b033b2e3c9fd0803ce80000006104c0565b8490610381565b949350505050565b60008061041e6002633b9aca00610646565b905061038d633b9aca006103ca8386610381565b600061043f60028361065a565b610455576b033b2e3c9fd0803ce8000000610457565b825b9050610464600283610646565b91505b8115610264576104778384610394565b925061048460028361065a565b15610496576104938184610394565b90505b6104a1600283610646565b9150610467565b600061038d82846105e8565b600061038d8284610646565b600061038d828461066e565b600080600080608085870312156104e257600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561051357600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561053d57600080fd5b50508035926020909101359150565b8035801515811461055c57600080fd5b919050565b60008060008060008060c0878903121561057a57600080fd5b8635955060208701359450604087013593506105986060880161054c565b9250608087013591506105ad60a0880161054c565b90509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156105fa576105fa6105b9565b500390565b60008219821115610612576106126105b9565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261065557610655610617565b500490565b60008261066957610669610617565b500690565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156106a6576106a66105b9565b50029056fea2646970667358221220095340c832b4a4b27bc8f0a645760a552dd403434b19e181f18bc0e622232d4a64736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c8063bd1634ff1161005a578063bd1634ff146100c4578063c389aec5146100d7578063ec429b35146100ea57600080fd5b80631ea96f9c1461007657806348a4da7a1461009c575b600080fd5b6100896100843660046104cc565b6100fd565b6040519081526020015b60405180910390f35b6100af6100aa3660046104fe565b610174565b60408051928352901515602083015201610093565b6100896100d236600461052a565b610200565b6100896100e5366004610561565b61026a565b6100896100f83660046104cc565b61033c565b600080600061010d878686610174565b909250905060006101356101308961012660018b6105e8565b86868a600161026a565b610371565b90506101686101636101538a6b033b2e3c9fd0803ce8000000610381565b61015d848c610394565b906103d0565b61040c565b98975050505050505050565b6000808061019885610192886b033b2e3c9fd0803ce8000000610381565b90610432565b90508585816101b5576b033b2e3c9fd0803ce800000091506101d2565b6101cf8261015d856b033b2e3c9fd0803ce80000006104a8565b90505b60006101dd87610371565b90506101f06101638361015d8488610394565b9960009950975050505050505050565b60008061022b836101926b033b2e3c9fd0803ce8000000610225886301e133806104b4565b90610381565b9050600061023d6301e13380856103d0565b905061025f81610259846b033b2e3c9fd0803ce80000006104a8565b90610394565b925050505b92915050565b600080610287876101928a6b033b2e3c9fd0803ce8000000610381565b9050600061029485610371565b905060006102a188610371565b905060006102af8484610394565b905060006102d66102cc866b033b2e3c9fd0803ce80000006104a8565b610259858f6103d0565b905060008780156102e5575089155b156102fb576102f483836104a8565b9050610322565b871580156103065750895b15610315576102f482846104a8565b61031f8383610381565b90505b61032b8161040c565b9d9c50505050505050505050505050565b600080600061034c878686610174565b9150915061036661035f888888886100fd565b83906104a8565b979650505050505050565b600061026482633b9aca006104c0565b600061038d82846105ff565b9392505050565b600061038d6b033b2e3c9fd0803ce80000006103ca6103b386866104c0565b61022560026b033b2e3c9fd0803ce8000000610646565b906104b4565b6000806103de600284610646565b9050610404836103ca6103fd876b033b2e3c9fd0803ce80000006104c0565b8490610381565b949350505050565b60008061041e6002633b9aca00610646565b905061038d633b9aca006103ca8386610381565b600061043f60028361065a565b610455576b033b2e3c9fd0803ce8000000610457565b825b9050610464600283610646565b91505b8115610264576104778384610394565b925061048460028361065a565b15610496576104938184610394565b90505b6104a1600283610646565b9150610467565b600061038d82846105e8565b600061038d8284610646565b600061038d828461066e565b600080600080608085870312156104e257600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561051357600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561053d57600080fd5b50508035926020909101359150565b8035801515811461055c57600080fd5b919050565b60008060008060008060c0878903121561057a57600080fd5b8635955060208701359450604087013593506105986060880161054c565b9250608087013591506105ad60a0880161054c565b90509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156105fa576105fa6105b9565b500390565b60008219821115610612576106126105b9565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261065557610655610617565b500490565b60008261066957610669610617565b500690565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156106a6576106a66105b9565b50029056fea2646970667358221220095340c832b4a4b27bc8f0a645760a552dd403434b19e181f18bc0e622232d4a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "adjustedAPR(uint256,uint256)": {
        "details": "Function to compute the adjusted equivalent nominal borrow rate",
        "params": {
          "epoch": "Payment period*",
          "rate": "The interest rate"
        }
      },
      "fv(uint256,uint256,uint256,bool,uint256,bool)": {
        "details": "Function to compute the future value",
        "params": {
          "nper": "Number of compounding periods",
          "pmt": "Payment",
          "pv": "Present value",
          "rate": "The interest rate"
        },
        "returns": {
          "_0": "The future value, in wad*"
        }
      },
      "ipmt(uint256,uint256,uint256,uint256)": {
        "details": "Function to compute the interest portion of a payment",
        "params": {
          "nper": "Number of compounding periods",
          "per": "The payment period to calculate the interest amount",
          "pv": "Present value",
          "rate": "The interest rate"
        },
        "returns": {
          "_0": "The interest portion of payment, in wad*"
        }
      },
      "pmt(uint256,uint256,uint256)": {
        "details": "Function to compute the payment against loan principal plus interest The payment is computed by solving the equation:  fv + pv*(1 + rate)**nper + pmt*(1 + rate*when(0))/rate*((1 + rate)**nper - 1) == 0",
        "params": {
          "nper": "Number of compounding periods",
          "pv": "Present value (amount borrowed)",
          "rate": "The interest rate per period, in Ray"
        },
        "returns": {
          "_0": "The fixed periodic payment, in wad*"
        }
      },
      "ppmt(uint256,uint256,uint256,uint256)": {
        "details": "Function to compute the payment against load principal",
        "params": {
          "nper": "Number of compounding periods",
          "per": "The payment period to calculate the interest amount",
          "pv": "Present value",
          "rate": "The interest rate"
        },
        "returns": {
          "_0": "The payment, in wad*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}