{
  "address": "0x7f941D367811770b4c69E4E753438CBe7F3A28de",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_proxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_voyager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "proxyAddress",
          "type": "address"
        }
      ],
      "name": "ProxyUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "activeReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_onBehalfOf",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ReserveConfigurationMap",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositAndDebt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "juniorDepositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "seniorDepositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDebt",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.DepositAndDebt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEscrowAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getFlags",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getJuniorLiquidityIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        }
      ],
      "name": "getLiquidityRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "data",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.ReserveConfigurationMap",
              "name": "configuration",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentOverallLiquidityRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentSeniorIncomeAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentJuniorIncomeAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "juniorLiquidityIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "seniorLiquidityIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "securityRequirement",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "healthStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "juniorDepositTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seniorDepositTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableDebtAddress",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "juniorLastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "seniorLastUpdateTimestamp",
              "type": "uint40"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserveList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        }
      ],
      "name": "getReserveNormalizedIncome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getSeniorLiquidityIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_juniorDepositTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seniorDepositTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_juniorIncomeAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_seniorIncomeAllocation",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stableDebtAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestRateStrategyAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_healthStrategyAddress",
          "type": "address"
        }
      ],
      "name": "initReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityDepositEscrow",
      "outputs": [
        {
          "internalType": "contract LiquidityDepositEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxy",
      "outputs": [
        {
          "internalType": "contract Proxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "setMessageSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "setProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voyager",
      "outputs": [
        {
          "internalType": "contract Voyager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa279d66a7987ad8dac5f14060e86d38c974d88b7174b88876f76e54984677ba",
  "receipt": {
    "to": null,
    "from": "0x4C616d9377Fa8d928385F0b11Ab16D4bf0f2d544",
    "contractAddress": "0x7f941D367811770b4c69E4E753438CBe7F3A28de",
    "transactionIndex": 9,
    "gasUsed": "5184125",
    "logsBloom": "0x
    "blockHash": "0xb58ea10e7f6f4512defbd8b9baf03a10fffdb9cd1ff48391c6808841366b8d37",
    "transactionHash": "0xfa279d66a7987ad8dac5f14060e86d38c974d88b7174b88876f76e54984677ba",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 8678076,
        "transactionHash": "0xfa279d66a7987ad8dac5f14060e86d38c974d88b7174b88876f76e54984677ba",
        "address": "0x7f941D367811770b4c69E4E753438CBe7F3A28de",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004c616d9377fa8d928385f0b11ab16d4bf0f2d544"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xb58ea10e7f6f4512defbd8b9baf03a10fffdb9cd1ff48391c6808841366b8d37"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 8678076,
        "transactionHash": "0xfa279d66a7987ad8dac5f14060e86d38c974d88b7174b88876f76e54984677ba",
        "address": "0x7f941D367811770b4c69E4E753438CBe7F3A28de",
        "topics": [
          "0xfc80377ca9c49cc11ae6982f390a42db976d5530af7c43889264b13fbbd7c57e"
        ],
        "data": "0x000000000000000000000000b1ed7f48c682d90cf43e00357c4c8a7a5878257e",
        "logIndex": 8,
        "blockHash": "0xb58ea10e7f6f4512defbd8b9baf03a10fffdb9cd1ff48391c6808841366b8d37"
      }
    ],
    "blockNumber": 8678076,
    "cumulativeGasUsed": "5857435",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB1ed7f48C682D90cF43e00357C4C8a7A5878257E",
    "0xf29cdfB7C1B6349366640a0223870F7995512D46"
  ],
  "numDeployments": 1,
  "solcInputHash": "e55a2fe9cd38f3924261117ac4ab7a78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voyager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"ProxyUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"activeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onBehalfOf\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositAndDebt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"juniorDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DepositAndDebt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEscrowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getFlags\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getJuniorLiquidityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"getLiquidityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentOverallLiquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSeniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentJuniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorLiquidityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorLiquidityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"securityRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"healthStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"juniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"juniorLastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"seniorLastUpdateTimestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getSeniorLiquidityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_juniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_juniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_healthStrategyAddress\",\"type\":\"address\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityDepositEscrow\",\"outputs\":[{\"internalType\":\"contract LiquidityDepositEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract Proxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"setMessageSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voyager\",\"outputs\":[{\"internalType\":\"contract Voyager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activeReserve(address)\":{\"details\":\"Active a reserve for borrowing\",\"params\":{\"_asset\":\"The address of the reserve*\"}},\"claimOwnership()\":{\"details\":\"Allows the pendingOwner address to finalize the transfer.\"},\"initReserve(address,address,address,uint256,uint256,address,address,address)\":{\"details\":\"Initializes a reserve, activating it, assigning two deposit tokens and an interest rate strategy Only callable by protocol operator\",\"params\":{\"_asset\":\"The address of the underlying asset of the reserve\",\"_interestRateStrategyAddress\":\"The address of the interest rate strategy contract*\",\"_juniorDepositTokenAddress\":\"The address of the junior deposit token that will be assigned to the reserve\",\"_juniorIncomeAllocation\":\"Junior income allocation, express in RAY\",\"_seniorDepositTokenAddress\":\"The address of the senior deposit token that will be assigned to the reserve\",\"_seniorIncomeAllocation\":\"Senior income allocation, express in RAY\",\"_stableDebtAddress\":\"The address of the StableDebtToken that will be assigned to the reserve\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"pause()\":{\"details\":\"Pause the protocol*\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to set the pendingOwner address.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}},\"unPause()\":{\"details\":\"UnPause the protocol*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/component/liquiditymanager/LiquidityManager.sol\":\"LiquidityManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/component/Voyager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/access/AccessControl.sol';\\nimport '../libraries/acl/ExtCallACL.sol';\\nimport '../libraries/acl/ExtCallACLProxy.sol';\\nimport '../libraries/ownership/Ownable.sol';\\nimport '../libraries/types/DataTypes.sol';\\nimport '../libraries/logic/ReserveLogic.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport '../component/vault/VaultManager.sol';\\nimport '../component/vault/VaultManagerProxy.sol';\\nimport '../component/liquiditymanager/LiquidityManager.sol';\\nimport '../interfaces/IACLManager.sol';\\nimport './infra/MessageBus.sol';\\n\\ncontract Voyager is MessageBus {\\n    modifier onlyWhitelisted(bytes32 func) {\\n        require(\\n            ExtCallACL(getExtCallACLProxyAddress()).isWhitelistedAddress(\\n                msg.sender\\n            ),\\n            'Voyager: not whitelisted address'\\n        );\\n        require(\\n            ExtCallACL(getExtCallACLProxyAddress()).isWhitelistedFunction(func),\\n            'Voyager: not whitelisted functions'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyProtocolManager() {\\n        _requireCallerAdmin();\\n        _;\\n    }\\n\\n    event CallResult(bool, bytes);\\n\\n    /************************************** HouseKeeping Interfaces **************************************/\\n    /**\\n     * @dev Update addressResolver contract address\\n     * @param _addressResolver address of the resolver contract\\n     **/\\n    function setAddressResolverAddress(address _addressResolver)\\n        external\\n        onlyOwner\\n    {\\n        addressResolver = AddressResolver(_addressResolver);\\n    }\\n\\n    function whitelistAddress(address[] calldata _address)\\n        external\\n        onlyProtocolManager\\n    {\\n        ExtCallACL extCallACL = ExtCallACL(getExtCallACLProxyAddress());\\n        extCallACL.whitelistAddress(_address);\\n    }\\n\\n    function whitelistFunction(bytes32[] calldata _function)\\n        external\\n        onlyProtocolManager\\n    {\\n        ExtCallACL extCallACL = ExtCallACL(getExtCallACLProxyAddress());\\n        extCallACL.whitelistFunction(_function);\\n    }\\n\\n    /************************************** Liquidity Manager Interfaces **************************************/\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying tokens: Either\\n     * Junior Deposit Token or Senior Deposit token\\n     * @param _asset The address of the underlying asset to deposit\\n     * @param _tranche The tranche of the liquidity pool the user wants to deposit to\\n     * @param _amount The amount to be deposited\\n     * @param _onBehalfOf The address that will receive the deposit tokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of deposit token\\n     *   is a different wallet\\n     **/\\n    function deposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address _onBehalfOf\\n    ) external {\\n        LiquidityManager(getLiquidityManagerProxyAddress()).deposit(\\n            _asset,\\n            _tranche,\\n            _amount,\\n            msg.sender,\\n            _onBehalfOf\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the normalized income per unit of asset\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @param _tranche The tranche of the reserve, either Junior or Senior\\n     * @return The reserve's normalized income\\n     **/\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress())\\n                .getReserveNormalizedIncome(_asset, _tranche);\\n    }\\n\\n    /**\\n     * @dev Returns the reserve flags\\n     * @param _asset The address of asset\\n     * @return The state flags representing active, frozen, borrowing enabled\\n     **/\\n    function getReserveFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress()).getFlags(\\n                _asset\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getConfiguration(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress())\\n                .getConfiguration(_asset);\\n    }\\n\\n    /**\\n     * @dev Get current liquidity rate for a specific reserve for it junior tranche or senior tranche\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @param _tranche Either junior tranche or senior tranche\\n     **/\\n    function liquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress())\\n                .getLiquidityRate(_asset, _tranche);\\n    }\\n\\n    /**\\n     * @dev Get EscrowContract owned by LiquidityManager\\n     **/\\n    function getLiquidityManagerEscrowContractAddress()\\n        external\\n        view\\n        returns (address)\\n    {\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress())\\n                .getEscrowAddress();\\n    }\\n\\n    /************************************** Vault Manager Interfaces **************************************/\\n\\n    /**\\n     * @dev Create an empty Vault for msg.sender, in addition to this, a vault also deploy\\n     * a SecurityDepositEscrow contract which the fund will be held in\\n     \\u00d7 @return address of Vault\\n     **/\\n    function createVault()\\n        external\\n        onlyWhitelisted('createVault')\\n        returns (address)\\n    {\\n        address vaultManagerProxy = getVaultManagerProxyAddress();\\n        VaultManager vaultManager = VaultManager(vaultManagerProxy);\\n        return vaultManager.createVault(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Deposit specific amount of security deposit to user owned Vault\\n     * @param _vaultUser the user address that will be sponsored\\n     * @param _reserve address of reserve\\n     * @param _amount deposit amount\\n     **/\\n    function depositSecurity(\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyWhitelisted('depositSecurity') {\\n        VaultManager(getVaultManagerProxyAddress()).depositSecurity(\\n            msg.sender,\\n            _vaultUser,\\n            _reserve,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Get underlying balance of security deposit token\\n     * @param _vaultUser _vaultUser the user address that has be sponsored\\n     * @param _reserve address of reserve\\n     * @param _sponsor sponsor address\\n     **/\\n    function underlyingBalance(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256) {\\n        return\\n            VaultManager(getVaultManagerProxyAddress()).underlyingBalance(\\n                _vaultUser,\\n                _reserve,\\n                _sponsor\\n            );\\n    }\\n\\n    /**\\n     * @dev Redeem specific amount of security deposit to user owned Vault\\n     * @param _vaultUser the user address that has be sponsored\\n     * @param _reserve address of reserve\\n     * @param _amount deposit amount\\n     **/\\n    function redeemSecurity(\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyWhitelisted('redeemSecurity') {\\n        VaultManager(getVaultManagerProxyAddress()).redeemSecurity(\\n            payable(msg.sender),\\n            _vaultUser,\\n            _reserve,\\n            _amount\\n        );\\n    }\\n\\n    // todo placeholder functions, more detail should be impl in the future\\n    function slash(\\n        address _vaultUser,\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) external {\\n        VaultManager(getVaultManagerProxyAddress()).slash(\\n            _vaultUser,\\n            _reserve,\\n            _to,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Get maximum reserve amount the use can borrow\\n     * @param _user user address\\n     * @param _reserve reserve contract address\\n     **/\\n    function getCreditLimit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            VaultManager(getVaultManagerProxyAddress()).getCreditLimit(\\n                _user,\\n                _reserve\\n            );\\n    }\\n\\n    /**\\n     * @dev Get available credit\\n     * @param _user user address\\n     * @param _reserve address of reserve\\n     **/\\n    function getAvailableCredit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            VaultManager(getVaultManagerProxyAddress()).getAvailableCredit(\\n                _user,\\n                _reserve\\n            );\\n    }\\n\\n    /**\\n     * @dev Eligible amount that can be withdraw, calculated by deposit records without considering slash\\n     * @param _vaultUser user address\\n     * @param _reserve reserve address\\n     * @param _sponsor sponsor address\\n     **/\\n    function eligibleAmount(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256) {\\n        return\\n            VaultManager(getVaultManagerProxyAddress()).eligibleAmount(\\n                _vaultUser,\\n                _reserve,\\n                _sponsor\\n            );\\n    }\\n\\n    /************************************** View Interfaces **************************************/\\n\\n    /**\\n     * @dev Get ExtCallACLProxy contract address\\n     **/\\n    function getExtCallACLProxyAddress() public view returns (address payable) {\\n        address extCallACLProxyAddress = AddressResolver(addressResolver)\\n            .getAddress(extCallACLProxyName);\\n        return payable(extCallACLProxyAddress);\\n    }\\n\\n    /************************************** Internal Interfaces **************************************/\\n\\n    function _requireCallerAdmin() internal {\\n        IACLManager aclManager = IACLManager(\\n            addressResolver.getAddress(aclManagerName)\\n        );\\n        require(aclManager.isProtocolManager(tx.origin), 'Not vault admin');\\n    }\\n}\\n\",\"keccak256\":\"0x41c0958b534d8f271e43d8f5e6376a9e1fb1237fba52623b30a3c6318afbccfd\",\"license\":\"GPL-3.0\"},\"contracts/component/infra/AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../interfaces/IAddressResolver.sol';\\nimport '../../libraries/ownership/Ownable.sol';\\n\\ncontract AddressResolver is IAddressResolver, Ownable {\\n    bytes32 public constant aclManagerName = 'aclManager';\\n    bytes32 public constant liquidityManagerProxyName = 'liquidityManagerProxy';\\n    bytes32 public constant liquidityManagerName = 'liquidityManager';\\n    bytes32 public constant liquidityManagerStorageName =\\n        'liquidityManagerStorage';\\n    bytes32 public constant loanManagerName = 'loanManager';\\n    bytes32 public constant vaultManagerProxyName = 'vaultManagerProxy';\\n    bytes32 public constant vaultStorageName = 'vaultStorage';\\n    bytes32 public constant securityDepositTokenName = 'securityDepositToken';\\n    bytes32 public constant stableDebtTokenName = 'stableDebtToken';\\n    bytes32 public constant extCallACLProxyName = 'extCallACLProxy';\\n\\n    mapping(bytes32 => address) public repository;\\n\\n    function importAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external onlyOwner {\\n        require(\\n            names.length == destinations.length,\\n            'Input lengths must match'\\n        );\\n\\n        for (uint256 i = 0; i < names.length; i++) {\\n            bytes32 name = names[i];\\n            address destination = destinations[i];\\n            repository[name] = destination;\\n            emit AddressImported(name, destination);\\n        }\\n    }\\n\\n    function getLiquidityManagerProxy() external view returns (address) {\\n        return repository[liquidityManagerProxyName];\\n    }\\n\\n    function getAddress(bytes32 name) external view returns (address) {\\n        return repository[name];\\n    }\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address)\\n    {\\n        address _foundAddress = repository[name];\\n        require(_foundAddress != address(0), reason);\\n        return _foundAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x71f72ca85da06af1e8382ece88e9b57978b10a453e0eae0808207078887e328d\",\"license\":\"GPL-3.0\"},\"contracts/component/infra/MessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './AddressResolver.sol';\\nimport '../../interfaces/IMessageBus.sol';\\nimport '../../interfaces/IDebtToken.sol';\\nimport '../../interfaces/IVaultManager.sol';\\nimport '../../libraries/ownership/Ownable.sol';\\nimport '../../libraries/types/DataTypes.sol';\\n//import \\\"../../libraries/utils/Address.sol\\\";\\nimport '../../libraries/helpers/Errors.sol';\\nimport '../liquiditymanager/LiquidityManager.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * todo it might be a bad name here, it actually performs as the centralise place\\n * for querying each other among the internal components\\n **/\\ncontract MessageBus is IMessageBus, Ownable {\\n    // todo to remove\\n    bytes32 public constant aclManagerName = 'aclManager';\\n    bytes32 public constant liquidityManagerProxyName = 'liquidityManagerProxy';\\n    bytes32 public constant liquidityManagerName = 'liquidityManager';\\n    bytes32 public constant liquidityManagerStorageName =\\n        'liquidityManagerStorage';\\n    bytes32 public constant loanManagerName = 'loanManager';\\n    bytes32 public constant vaultManagerProxyName = 'vaultManagerProxy';\\n    bytes32 public constant vaultStorageName = 'vaultStorage';\\n    bytes32 public constant securityDepositTokenName = 'securityDepositToken';\\n    bytes32 public constant stableDebtTokenName = 'stableDebtToken';\\n    bytes32 public constant extCallACLProxyName = 'extCallACLProxy';\\n\\n    AddressResolver public addressResolver;\\n\\n    /**\\n     * @dev Get addressResolver contract address\\n     * @return address of the resolver contract\\n     **/\\n    function getAddressResolverAddress() external view returns (address) {\\n        return address(addressResolver);\\n    }\\n\\n    /************************************** LiquidityManager Functions **************************************/\\n\\n    /**\\n     * @dev Get LiquidityManagerProxy contract address\\n     **/\\n    function getLiquidityManagerProxyAddress()\\n        public\\n        view\\n        returns (address payable)\\n    {\\n        address liquidityManagerProxyAddress = addressResolver.getAddress(\\n            liquidityManagerProxyName\\n        );\\n        return payable(liquidityManagerProxyAddress);\\n    }\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress()).getReserveData(\\n                _asset\\n            );\\n    }\\n\\n    /************************************** Vault Functions **************************************/\\n\\n    /**\\n     * @dev Get vault address\\n     * @param _user The owner of the vault\\n     **/\\n    function getVault(address _user) external view returns (address) {\\n        return IVaultManager(getVaultManagerProxyAddress()).getVault(_user);\\n    }\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultManager(getVaultManagerProxyAddress()).getSecurityDeposit(\\n                _user,\\n                _reserve\\n            );\\n    }\\n\\n    /**\\n     * @dev Get max security deposit for _reserve\\n     * @param _reserve reserve address\\n     * @return max deposit amount\\n     */\\n    function getMaxSecurityDeposit(address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultManager(getVaultManagerProxyAddress()).getMaxSecurityDeposit(\\n                _reserve\\n            );\\n    }\\n\\n    /**\\n     * @dev Get current security deposit requirement\\n     * @param _reserve reserve address\\n     * @return requirement, expressed in Ray\\n     **/\\n    function getSecurityDepositRequirement(address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultManager(getVaultManagerProxyAddress())\\n                .getSecurityDepositRequirement(_reserve);\\n    }\\n\\n    /**\\n     * @dev Get VaultManagerProxy contract address\\n     * @return address of the VaultManager\\n     **/\\n    function getVaultManagerProxyAddress()\\n        public\\n        view\\n        returns (address payable)\\n    {\\n        address vaultManagerProxyAddress = addressResolver.getAddress(\\n            vaultManagerProxyName\\n        );\\n        return payable(vaultManagerProxyAddress);\\n    }\\n\\n    /************************************** Stable Debt Token Functions **************************************/\\n\\n    function getCompoundedDebt(address _user) external view returns (uint256) {\\n        return\\n            IERC20(addressResolver.getAddress(stableDebtTokenName)).balanceOf(\\n                _user\\n            );\\n    }\\n\\n    function getAggregateOptimalRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IStableDebtToken(addressResolver.getAddress(stableDebtTokenName))\\n                .getAggregateOptimalRepaymentRate(_user);\\n    }\\n\\n    function getAggregateActualRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IStableDebtToken(addressResolver.getAddress(stableDebtTokenName))\\n                .getAggregateActualRepaymentRate(_user);\\n    }\\n\\n    /************************************** Constant Functions **************************************/\\n\\n    function getVaultManagerProxyName() external view returns (bytes32) {\\n        return vaultManagerProxyName;\\n    }\\n\\n    function getVaultStorageName() external view returns (bytes32) {\\n        return vaultStorageName;\\n    }\\n\\n    function getLiquidityManagerProxyName() external view returns (bytes32) {\\n        return liquidityManagerProxyName;\\n    }\\n\\n    function getLiquidityManagerStorageName() external view returns (bytes32) {\\n        return liquidityManagerStorageName;\\n    }\\n\\n    function getLoanManagerName() external view returns (bytes32) {\\n        return loanManagerName;\\n    }\\n\\n    function getSecurityDepositTokenName() external view returns (bytes32) {\\n        return securityDepositTokenName;\\n    }\\n\\n    function getExtCallACLProxyName() external view returns (bytes32) {\\n        return extCallACLProxyName;\\n    }\\n\\n    function getACLManagerName() external view returns (bytes32) {\\n        return aclManagerName;\\n    }\\n\\n    function getStableDebtTokenName() external view returns (bytes32) {\\n        return stableDebtTokenName;\\n    }\\n}\\n\",\"keccak256\":\"0xd6b43e13fb09c13ff1c18b2b9901491b3670a3eb572f31f08d3cec8276ed554e\",\"license\":\"GPL-3.0\"},\"contracts/component/liquiditymanager/DefaultReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IReserveInterestRateStrategy.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    /**\\n     * this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates\\n     * Expressed in RAY\\n     **/\\n    uint256 public immutable OPTIMAL_UTILIZATION_RATE;\\n\\n    // Base interest rate set by governance. Expressed in ray\\n    uint256 internal immutable baseBorrowRate;\\n\\n    // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope1;\\n\\n    // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope2;\\n\\n    constructor(\\n        uint256 _optimalUtilizationRate,\\n        uint256 _stableRateSlope1,\\n        uint256 _stableRateSlope2,\\n        uint256 _baseBorrowRate\\n    ) public {\\n        OPTIMAL_UTILIZATION_RATE = _optimalUtilizationRate;\\n        baseBorrowRate = _baseBorrowRate;\\n        stableRateSlope1 = _stableRateSlope1;\\n        stableRateSlope2 = _stableRateSlope2;\\n    }\\n\\n    struct CalcInterestRatesLocalVars {\\n        uint256 totalDebt;\\n        uint256 currentStableBorrowRate;\\n        uint256 currentLiquidityRate;\\n        uint256 utilizationRate;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configuration\\n     * @param reserve The address of the reserve\\n     * @param juniorDepositToken The address of junior deposit token\\n     * @param seniorDepositToken The address of senior deposit token\\n     * @param liquidityAdded The liquidity added during the operation\\n     * @param liquidityTaken The liquidity taken during the operation\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256) {\\n        uint256 availableJuniorLiquidity = IERC20(reserve).balanceOf(\\n            juniorDepositToken\\n        );\\n        uint256 availableSeniorLiquidity = IERC20(reserve).balanceOf(\\n            seniorDepositToken\\n        );\\n        uint256 availableLiquidity = availableJuniorLiquidity.add(\\n            availableSeniorLiquidity\\n        );\\n        availableLiquidity = availableLiquidity.add(liquidityAdded).sub(\\n            liquidityTaken\\n        );\\n        return\\n            calculateInterestRates(\\n                reserve,\\n                availableLiquidity,\\n                totalStableDebt,\\n                averageBorrowRate\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * @param reserve The address of the reserve\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @return The liquidity rate, the stable borrow rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) public view returns (uint256, uint256) {\\n        CalcInterestRatesLocalVars memory vars;\\n\\n        vars.totalDebt = totalStableDebt;\\n        vars.currentStableBorrowRate = baseBorrowRate;\\n        vars.currentLiquidityRate = 0;\\n\\n        vars.utilizationRate = vars.totalDebt == 0\\n            ? 0\\n            : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\\n\\n        if (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n            vars.currentStableBorrowRate = vars\\n                .currentStableBorrowRate\\n                .add(stableRateSlope1)\\n                .add(\\n                    stableRateSlope2\\n                        .rayMul(\\n                            vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE)\\n                        )\\n                        .rayDiv(WadRayMath.Ray().sub(OPTIMAL_UTILIZATION_RATE))\\n                );\\n        } else {\\n            vars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\\n                stableRateSlope1.rayMul(vars.utilizationRate).rayDiv(\\n                    OPTIMAL_UTILIZATION_RATE\\n                )\\n            );\\n        }\\n\\n        vars.currentLiquidityRate = averageBorrowRate.rayMul(\\n            vars.utilizationRate\\n        );\\n        return (vars.currentLiquidityRate, vars.currentStableBorrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0x501b0d30efd4654196b7940e1b24d0c44a4dcd82c32288da095e9c63625bd9c6\",\"license\":\"GPL-3.0\"},\"contracts/component/liquiditymanager/LiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './ReserveManager.sol';\\nimport '../../libraries/helpers/Errors.sol';\\nimport '../../libraries/logic/ReserveLogic.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../shared/escrow/LiquidityDepositEscrow.sol';\\nimport '../../interfaces/IReserveManager.sol';\\nimport '../../interfaces/ILiquidityManager.sol';\\nimport '../../tokenization/JuniorDepositToken.sol';\\nimport '../../tokenization/SeniorDepositToken.sol';\\n\\ncontract LiquidityManager is ReserveManager, ILiquidityManager {\\n    LiquidityDepositEscrow public liquidityDepositEscrow;\\n\\n    constructor(address payable _proxy, address _voyager)\\n        ReserveManager(_proxy, _voyager)\\n    {\\n        liquidityDepositEscrow = LiquidityDepositEscrow(deployEscrow());\\n        liquidityDepositEscrow.init(_voyager);\\n    }\\n\\n    /************************************** User Functions **************************************/\\n\\n    function deposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address _user,\\n        address _onBehalfOf\\n    ) external onlyProxy {\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        DataTypes.ReserveData memory reserve = getReserveData(_asset);\\n\\n        lms.updateStateOnDeposit(_asset, _tranche, _amount);\\n\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            JuniorDepositToken(reserve.juniorDepositTokenAddress).mint(\\n                _onBehalfOf,\\n                _amount,\\n                getJuniorLiquidityIndex(_asset)\\n            );\\n        } else {\\n            SeniorDepositToken(reserve.seniorDepositTokenAddress).mint(\\n                _onBehalfOf,\\n                _amount,\\n                getSeniorLiquidityIndex(_asset)\\n            );\\n        }\\n        liquidityDepositEscrow.deposit(_asset, _user, _amount);\\n        proxy._emit(\\n            abi.encode(_tranche, _user, _onBehalfOf, _amount),\\n            2,\\n            keccak256(\\n                'Deposit(address, ReserveLogic.Tranche, address, address,uint256)'\\n            ),\\n            bytes32(abi.encodePacked(_asset)),\\n            0,\\n            0\\n        );\\n    }\\n\\n    /************************************** View Functions **************************************/\\n\\n    function getEscrowAddress() external view returns (address) {\\n        return address(escrow());\\n    }\\n\\n    function escrow() internal view override returns (LiquidityDepositEscrow) {\\n        return liquidityDepositEscrow;\\n    }\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getReserveNormalizedIncome(_asset, _tranche);\\n    }\\n\\n    /************************************** Private Functions **************************************/\\n\\n    function deployEscrow() private returns (address) {\\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender));\\n        bytes memory bytecode = type(LiquidityDepositEscrow).creationCode;\\n        address deployedEscrow;\\n        assembly {\\n            deployedEscrow := create2(\\n                0,\\n                add(bytecode, 32),\\n                mload(bytecode),\\n                salt\\n            )\\n        }\\n        return deployedEscrow;\\n    }\\n}\\n\",\"keccak256\":\"0xb4e75ec303fd6104fc9804e2a8e4c25631feff5091de09f10af2d505b762fda3\",\"license\":\"GPL-3.0\"},\"contracts/component/liquiditymanager/LiquidityManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/proxy/Proxy.sol';\\nimport '../../interfaces/IReserveManager.sol';\\nimport '../../interfaces/ILiquidityManager.sol';\\nimport '../../libraries/logic/ReserveLogic.sol';\\n\\ncontract LiquidityManagerProxy is Proxy {\\n    function getLiquidityRate(address _reserve, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IReserveManager(address(target)).getLiquidityRate(\\n                _reserve,\\n                _tranche\\n            );\\n    }\\n\\n    function getReserveData(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        return IReserveManager(address(target)).getReserveData(_reserve);\\n    }\\n\\n    function getReserveList() external view returns (address[] memory) {\\n        return IReserveManager(address(target)).getReserveList();\\n    }\\n\\n    function getConfiguration(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        return IReserveManager(address(target)).getConfiguration(_reserve);\\n    }\\n\\n    function getFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return IReserveManager(address(target)).getFlags(_asset);\\n    }\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        return\\n            ILiquidityManager(address(target)).getReserveNormalizedIncome(\\n                _asset,\\n                _tranche\\n            );\\n    }\\n\\n    function getEscrowAddress() external view returns (address) {\\n        return ILiquidityManager(address(target)).getEscrowAddress();\\n    }\\n}\\n\",\"keccak256\":\"0x79dfc2b1f9562c239e1b578be4aef1e90796f3c57987774b35b0ee18aa92237d\",\"license\":\"GPL-3.0\"},\"contracts/component/liquiditymanager/ReserveManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../Voyager.sol';\\nimport '../../libraries/helpers/Errors.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Address.sol';\\nimport '../shared/storage/LiquidityManagerStorage.sol';\\nimport '../infra/AddressResolver.sol';\\nimport '../../libraries/proxy/Proxyable.sol';\\nimport '../../libraries/logic/ReserveLogic.sol';\\nimport '../../interfaces/IReserveManager.sol';\\nimport '../../interfaces/IVoyagerComponent.sol';\\nimport '../../interfaces/IDebtToken.sol';\\nimport '../../interfaces/IACLManager.sol';\\nimport '../shared/escrow/LiquidityDepositEscrow.sol';\\n\\nabstract contract ReserveManager is\\n    Proxyable,\\n    IReserveManager,\\n    IVoyagerComponent\\n{\\n    constructor(address payable _proxy, address _voyager) Proxyable(_proxy) {\\n        voyager = Voyager(_voyager);\\n    }\\n\\n    modifier onlyAdmin() {\\n        _requireCallerAdmin();\\n        _;\\n    }\\n\\n    /************************************** HouseKeeping Functions **************************************/\\n\\n    /**\\n     * @dev Pause the protocol\\n     **/\\n    function pause() external onlyProxy onlyAdmin {\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).pause();\\n    }\\n\\n    /**\\n     * @dev UnPause the protocol\\n     **/\\n    function unPause() external onlyProxy onlyAdmin {\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).unPause();\\n    }\\n\\n    /**\\n     * @dev Initializes a reserve, activating it, assigning two deposit tokens and an interest rate strategy\\n     * Only callable by protocol operator\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @param _juniorDepositTokenAddress The address of the junior deposit token that will be assigned to the reserve\\n     * @param _seniorDepositTokenAddress The address of the senior deposit token that will be assigned to the reserve\\n     * @param _juniorIncomeAllocation Junior income allocation, express in RAY\\n     * @param _seniorIncomeAllocation Senior income allocation, express in RAY\\n     * @param _stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param _interestRateStrategyAddress The address of the interest rate strategy contract\\n     **/\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress\\n    ) external onlyProxy onlyAdmin {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).initReserve(\\n            _asset,\\n            _juniorDepositTokenAddress,\\n            _seniorDepositTokenAddress,\\n            _juniorIncomeAllocation,\\n            _seniorIncomeAllocation,\\n            _stableDebtAddress,\\n            _interestRateStrategyAddress,\\n            _healthStrategyAddress\\n        );\\n        proxy._emit(\\n            abi.encode(\\n                _juniorDepositTokenAddress,\\n                _seniorDepositTokenAddress,\\n                _juniorIncomeAllocation,\\n                _seniorIncomeAllocation,\\n                _stableDebtAddress,\\n                _interestRateStrategyAddress,\\n                _healthStrategyAddress\\n            ),\\n            2,\\n            keccak256(\\n                'ReverseInited(address, address,address, uint256, uint256,address,address,address)'\\n            ),\\n            bytes32(abi.encodePacked(_asset)),\\n            0,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @dev Active a reserve for borrowing\\n     * @param _asset The address of the reserve\\n     **/\\n    function activeReserve(address _asset) external onlyProxy onlyAdmin {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).activeReserve(\\n                _asset\\n            );\\n    }\\n\\n    /************************************** View Functions **************************************/\\n\\n    function getReserveData(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getReserveData(_asset);\\n    }\\n\\n    function getReserveList() external view returns (address[] memory) {\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getReserveList();\\n    }\\n\\n    function getConfiguration(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getConfiguration(_asset);\\n    }\\n\\n    function getFlags(address _asset)\\n        public\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress()).getFlags(\\n                _asset\\n            );\\n    }\\n\\n    function getLiquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getLiquidityRate(_asset, _tranche);\\n    }\\n\\n    function getJuniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getJuniorLiquidityIndex(_asset);\\n    }\\n\\n    function getSeniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getSeniorLiquidityIndex(_asset);\\n    }\\n\\n    /************************************** Private Functions **************************************/\\n\\n    function _requireCallerAdmin() internal {\\n        Voyager v = Voyager(voyager);\\n        IACLManager aclManager = IACLManager(\\n            v.addressResolver().getAddress(v.getACLManagerName())\\n        );\\n        require(\\n            aclManager.isLiquidityManager(messageSender),\\n            'Not vault admin'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4f68ea2655bde08d27fa08edccae5baa3e44311a5e72c997edd027b9a2cbb3d3\",\"license\":\"GPL-3.0\"},\"contracts/component/shared/escrow/LiquidityDepositEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../../libraries/Escrow.sol';\\nimport 'openzeppelin-solidity/contracts/access/AccessControl.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\nimport '../../Voyager.sol';\\nimport '../../../interfaces/IACLManager.sol';\\nimport '../../infra/AddressResolver.sol';\\n\\ncontract LiquidityDepositEscrow is Escrow {\\n    Voyager private voyager;\\n    bool private initialized;\\n\\n    modifier onlyLiquidityManager() {\\n        _requireCallerLiquidityManagerContract();\\n        _;\\n    }\\n\\n    modifier onlyLoanManager() {\\n        _requireCallerLoanManagerContract();\\n        _;\\n    }\\n\\n    function deposit(\\n        address _reserve,\\n        address _user,\\n        uint256 _amount\\n    ) public payable nonReentrant onlyLiquidityManager {\\n        _deposit(_reserve, _user, _amount);\\n    }\\n\\n    function init(address _voyager) external {\\n        if (!initialized) {\\n            voyager = Voyager(_voyager);\\n            initialized = true;\\n        }\\n    }\\n\\n    function withdraw(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) public onlyLiquidityManager {\\n        _withdraw(_reserve, _user, _amount);\\n    }\\n\\n    function transfer(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) public onlyLoanManager {\\n        IERC20(_reserve).transfer(_user, _amount);\\n    }\\n\\n    function balanceOf(address _reserve) public view returns (uint256) {\\n        return IERC20(_reserve).balanceOf(address(this));\\n    }\\n\\n    /************************************** Private Functions **************************************/\\n\\n    function _requireCallerLiquidityManagerContract() internal {\\n        Voyager v = Voyager(voyager);\\n        IACLManager aclManager = IACLManager(\\n            voyager.addressResolver().getAddress(v.getACLManagerName())\\n        );\\n        require(\\n            aclManager.isLiquidityManagerContract(msg.sender),\\n            'Not liquidity manager contract'\\n        );\\n    }\\n\\n    function _requireCallerLoanManagerContract() internal {\\n        Voyager v = Voyager(voyager);\\n        IACLManager aclManager = IACLManager(\\n            v.addressResolver().getAddress(v.getACLManagerName())\\n        );\\n        require(\\n            aclManager.isLoanManagerContract(msg.sender),\\n            'Not liquidity manager contract'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5e8691a984613303747f3e9d2472237594a6c3d475d459833583e0f3115830e3\",\"license\":\"GPL-3.0\"},\"contracts/component/shared/storage/LiquidityManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../../libraries/state/State.sol';\\nimport '../../../libraries/types/DataTypes.sol';\\nimport '../../../libraries/logic/ReserveLogic.sol';\\nimport '../../../libraries/logic/ValidationLogic.sol';\\nimport '../../../libraries/configuration/ReserveConfiguration.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\ncontract LiquidityManagerStorage is State {\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using SafeMath for uint256;\\n\\n    mapping(address => DataTypes.ReserveData) internal _reserves;\\n\\n    // List of reserves as a map (reserveId => reserve)\\n    mapping(uint256 => address) internal _reserveList;\\n\\n    // Maximum number of active reserves there have been in the protocol. It is the upper bound of the reserves list\\n    uint16 internal _reservesCount;\\n\\n    bool internal _paused;\\n    uint256 public juniorDepositAmount;\\n    uint256 public seniorDepositAmount;\\n    uint256 public totalDebt;\\n\\n    constructor(address _liquidityManager) State(_liquidityManager) {}\\n\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress\\n    ) external onlyAssociatedContract {\\n        _reserves[_asset].init(\\n            _juniorDepositTokenAddress,\\n            _seniorDepositTokenAddress,\\n            _juniorIncomeAllocation,\\n            _seniorIncomeAllocation,\\n            _stableDebtAddress,\\n            _interestRateStrategyAddress,\\n            _healthStrategyAddress\\n        );\\n\\n        _reserveList[_reservesCount] = _asset;\\n        _reservesCount++;\\n    }\\n\\n    function updateStateOnDeposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount\\n    ) public onlyAssociatedContract {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        ValidationLogic.validateDeposit(reserve, _amount);\\n        reserve.updateState(_tranche);\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            reserve.updateInterestRates(_asset, _amount, 0, 0, 0);\\n        } else {\\n            reserve.updateInterestRates(_asset, 0, 0, _amount, 0);\\n        }\\n    }\\n\\n    function updateStateOnBorrow(address _asset, uint256 _amount)\\n        public\\n        onlyAssociatedContract\\n    {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        reserve.updateState(ReserveLogic.Tranche.SENIOR);\\n        reserve.updateInterestRates(_asset, 0, 0, 0, _amount);\\n    }\\n\\n    function activeReserve(address _asset) public onlyAssociatedContract {\\n        DataTypes.ReserveConfigurationMap\\n            memory currentConfig = getConfiguration(_asset);\\n        currentConfig.setActive(true);\\n        setConfiguration(_asset, currentConfig.data);\\n    }\\n\\n    function pause() public onlyAssociatedContract {\\n        _paused = true;\\n    }\\n\\n    function unPause() public onlyAssociatedContract {\\n        _paused = false;\\n    }\\n\\n    function increaseJuniorDeposit(uint256 _amount)\\n        public\\n        onlyAssociatedContract\\n    {\\n        juniorDepositAmount += _amount;\\n    }\\n\\n    function increaseSeniorDeposit(uint256 _amount)\\n        public\\n        onlyAssociatedContract\\n    {\\n        seniorDepositAmount += _amount;\\n    }\\n\\n    function decreaseJuniorDeposit(uint256 _amount)\\n        public\\n        onlyAssociatedContract\\n    {\\n        juniorDepositAmount -= _amount;\\n    }\\n\\n    function decreaseSeniorDeposit(uint256 _amount)\\n        public\\n        onlyAssociatedContract\\n    {\\n        seniorDepositAmount -= _amount;\\n    }\\n\\n    function increaseTotalDebt(uint256 _amount) public onlyAssociatedContract {\\n        totalDebt += _amount;\\n    }\\n\\n    /*********************************************** View functions ***********************************************/\\n\\n    function getFlags(address _asset)\\n        public\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        DataTypes.ReserveConfigurationMap\\n            memory currentConfig = getConfiguration(_asset);\\n        return currentConfig.getFlags();\\n    }\\n\\n    function getReserveData(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        return _reserves[_asset];\\n    }\\n\\n    function getReserveList() public view returns (address[] memory) {\\n        address[] memory reserveList = new address[](_reservesCount);\\n        for (uint256 i = 0; i < _reservesCount; i++) {\\n            reserveList[i] = _reserveList[i];\\n        }\\n        return reserveList;\\n    }\\n\\n    function getConfiguration(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        return _reserves[_asset].configuration;\\n    }\\n\\n    function setConfiguration(address _asset, uint256 configuration) internal {\\n        _reserves[_asset].configuration.data = configuration;\\n    }\\n\\n    function getLiquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].getLiquidityRate(_tranche);\\n    }\\n\\n    function getJuniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].juniorLiquidityIndex;\\n    }\\n\\n    function getSeniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].seniorLiquidityIndex;\\n    }\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) public view returns (uint256) {\\n        return _reserves[_asset].getNormalizedIncome(_tranche);\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    function getDepositAndDebt()\\n        public\\n        view\\n        returns (DataTypes.DepositAndDebt memory)\\n    {\\n        DataTypes.DepositAndDebt memory res;\\n        res.juniorDepositAmount = juniorDepositAmount;\\n        res.seniorDepositAmount = seniorDepositAmount;\\n        res.totalDebt = totalDebt;\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x3bc43ddb3a07e62b7f95341d60aa7599c912a202275bce4169af7bbbbb2d5d54\",\"license\":\"GPL-3.0\"},\"contracts/component/staking/RewardsDistributionRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/ownership/Ownable.sol';\\n\\nabstract contract RewardsDistributionRecipient is Ownable {\\n    address public rewardsDistribution;\\n\\n    function notifyRewardAmount(uint256 reward) external virtual;\\n\\n    modifier onlyRewardsDistribution() {\\n        require(\\n            msg.sender == rewardsDistribution,\\n            'Caller is not RewardsDistribution contract'\\n        );\\n        _;\\n    }\\n\\n    function setRewardsDistribution(address _rewardsDistribution)\\n        external\\n        onlyOwner\\n    {\\n        rewardsDistribution = _rewardsDistribution;\\n    }\\n}\\n\",\"keccak256\":\"0x0ada077c7d1b5ed5f6786d032e0a6ebeccae5460cd08dcadc06f62ec4db0bfda\",\"license\":\"GPL-3.0\"},\"contracts/component/staking/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../../libraries/helpers/Pausable.sol';\\nimport 'openzeppelin-solidity/contracts/security/ReentrancyGuard.sol';\\nimport './RewardsDistributionRecipient.sol';\\n\\ncontract StakingRewards is\\n    ReentrancyGuard,\\n    RewardsDistributionRecipient,\\n    Pausable\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public stakingToken;\\n    IERC20 public rewardsToken;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardsDuration = 7 days;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    constructor(address _stakingToken, address _rewardsToken) {\\n        stakingToken = IERC20(_stakingToken);\\n        rewardsToken = IERC20(_rewardsToken);\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function stake(uint256 amount)\\n        external\\n        nonReentrant\\n        notPaused\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, 'Cannot stake 0');\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, 'Cannot withdraw 0');\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            _balances[account]\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(rewardsDuration);\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlyRewardsDistribution\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardsToken.balanceOf(address(this));\\n        require(\\n            rewardRate <= balance.div(rewardsDuration),\\n            'Provided reward too high'\\n        );\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n        require(\\n            block.timestamp > periodFinish,\\n            'Previous rewards period must be complete before changing the duration for the new period'\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n}\\n\",\"keccak256\":\"0xe1f5684233b7b5d2fb7eae0bbf0da879236e494aa3b654d58a2634cf1b182a39\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/SecurityDepositEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/Escrow.sol';\\nimport '../../libraries/ownership/Ownable.sol';\\n\\ncontract SecurityDepositEscrow is Escrow, Ownable {\\n    function getVersion() external view returns (string memory) {\\n        string memory version = 'SecurityDepositEscrow 0.0.1';\\n        return version;\\n    }\\n\\n    // placeholder function\\n    function slash(\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) public payable nonReentrant onlyOwner {\\n        transferToUser(_reserve, _to, _amount);\\n    }\\n\\n    function deposit(\\n        address _reserve,\\n        address _user,\\n        uint256 _amount\\n    ) public payable nonReentrant onlyOwner {\\n        _deposit(_reserve, _user, _amount);\\n    }\\n\\n    function withdraw(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        _withdraw(_reserve, _user, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x174c20ac5eb1614f739bf68f49e957a90ed16a8efdec7306cc200026d13154c4\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/security/ReentrancyGuard.sol';\\nimport './SecurityDepositEscrow.sol';\\nimport '../infra/AddressResolver.sol';\\nimport '../Voyager.sol';\\nimport '../staking/StakingRewards.sol';\\nimport '../../tokenization/SecurityDepositToken.sol';\\nimport '../../tokenization/StableDebtToken.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IVault.sol';\\nimport './VaultManager.sol';\\nimport '../../interfaces/IACLManager.sol';\\n\\ncontract Vault is ReentrancyGuard, IVault {\\n    using WadRayMath for uint256;\\n    bytes32 public constant BORROWER = keccak256('BORROWER');\\n\\n    address public factory;\\n    address public voyager;\\n    address[] public players;\\n    SecurityDepositEscrow public securityDepositEscrow;\\n    SecurityDepositToken public securityDepositToken;\\n    StableDebtToken public stableDebtToken;\\n    StakingRewards public stakingContract;\\n\\n    uint256 public totalDebt;\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == factory, 'only factory error');\\n        _;\\n    }\\n\\n    modifier onlyLoanManager() {\\n        _requireCallerLoanManager();\\n        _;\\n    }\\n\\n    constructor() public {\\n        factory = msg.sender;\\n        securityDepositEscrow = SecurityDepositEscrow(deployEscrow());\\n    }\\n\\n    function deployEscrow() private returns (address) {\\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender));\\n        bytes memory bytecode = type(SecurityDepositEscrow).creationCode;\\n        address deployedEscrow;\\n        assembly {\\n            deployedEscrow := create2(\\n                0,\\n                add(bytecode, 32),\\n                mload(bytecode),\\n                salt\\n            )\\n        }\\n        return deployedEscrow;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _voyager, address borrower) external {\\n        require(msg.sender == factory, 'Voyager Vault: FORBIDDEN'); // sufficient check\\n        voyager = _voyager;\\n    }\\n\\n    function getVaultManagerProxyAddress() private returns (address) {\\n        Voyager voyager = Voyager(voyager);\\n        address addressResolver = voyager.getAddressResolverAddress();\\n        return\\n            AddressResolver(addressResolver).getAddress(\\n                voyager.getVaultManagerProxyName()\\n            );\\n    }\\n\\n    function initSecurityDepositToken(address _reserve) external onlyFactory {\\n        require(\\n            address(securityDepositToken) == address(0),\\n            'Vault: security deposit token has been initialized'\\n        );\\n        ERC20 token = ERC20(_reserve);\\n        securityDepositToken = new SecurityDepositToken(\\n            _reserve,\\n            token.decimals(),\\n            token.name(),\\n            token.symbol()\\n        );\\n    }\\n\\n    function initStakingContract(address _reserve) external onlyFactory {\\n        require(\\n            address(stakingContract) == address(0),\\n            'Vault: staking contract has been initialized'\\n        );\\n        require(\\n            address(securityDepositToken) != address(0),\\n            'Vault: security deposit token has not been initialized'\\n        );\\n        stakingContract = new StakingRewards(\\n            address(securityDepositToken),\\n            _reserve\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer some deposit security\\n     * @param _sponsor user address who deposit to this escrow\\n     * @param _reserve reserve address\\n     * @param _amount deposit amount\\n     **/\\n    function depositSecurity(\\n        address _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable nonReentrant onlyFactory {\\n        // check max security deposit amount for this _reserve\\n        uint256 maxAllowedAmount = Voyager(voyager).getMaxSecurityDeposit(\\n            _reserve\\n        );\\n        uint256 depositedAmount = securityDepositEscrow.getDepositAmount(\\n            _reserve\\n        );\\n        require(\\n            depositedAmount + _amount < maxAllowedAmount,\\n            'Vault: deposit amount exceed'\\n        );\\n        securityDepositEscrow.deposit(_reserve, _sponsor, _amount);\\n        securityDepositToken.mintOnDeposit(_sponsor, _amount);\\n    }\\n\\n    /**\\n     * @dev get current security amount\\n     * @param _reserve underlying asset address\\n     **/\\n    function getCurrentSecurityDeposit(address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return securityDepositEscrow.getDepositAmount(_reserve);\\n    }\\n\\n    function getActualSecurityDeposit(address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return ERC20(_reserve).balanceOf(address(securityDepositEscrow));\\n    }\\n\\n    /**\\n     * @dev Get total debt of the vault\\n     **/\\n    function getTotalDebt() public view returns (uint256) {\\n        return totalDebt;\\n    }\\n\\n    /**\\n     * @dev Get unused deposits\\n     * @param _sponsor sponsor address\\n     * @param _reserve reserve address\\n     **/\\n    function getUnusedDeposits(address _sponsor, address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 securityRequirement = VaultManager(factory)\\n            .getSecurityDepositRequirement(_reserve);\\n        return\\n            securityDepositToken.balanceOf(_sponsor) -\\n            totalDebt.wadToRay().rayMul(securityRequirement);\\n    }\\n\\n    /**\\n     * @dev Redeem underlying reserve\\n     * @param _sponsor sponsor address\\n     * @param _reserve reserve address\\n     * @param _amount redeem amount\\n     **/\\n    function redeemSecurity(\\n        address payable _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable nonReentrant onlyFactory {\\n        require(\\n            _amount <= getUnusedDeposits(_sponsor, _reserve),\\n            'Vault: cannot redeem more than unused deposits'\\n        );\\n        securityDepositEscrow.withdraw(\\n            _reserve,\\n            _sponsor,\\n            underlyingBalance(_sponsor, _reserve)\\n        );\\n        securityDepositToken.burnOnRedeem(_sponsor, _amount);\\n    }\\n\\n    function underlyingBalance(address _sponsor, address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 amountToRedeemInRay = securityDepositToken\\n            .balanceOf(_sponsor)\\n            .wadToRay()\\n            .rayDiv(securityDepositToken.totalSupply().wadToRay())\\n            .rayMul(getActualSecurityDeposit(_reserve).wadToRay());\\n        return amountToRedeemInRay.rayToWad();\\n    }\\n\\n    function eligibleAmount(address _reserve, address _sponsor)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return securityDepositEscrow.eligibleAmount(_reserve, _sponsor);\\n    }\\n\\n    function increaseTotalDebt(uint256 _amount) external onlyLoanManager {\\n        totalDebt += _amount;\\n    }\\n\\n    // placeholder function\\n    function slash(\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) public nonReentrant onlyFactory {\\n        securityDepositEscrow.slash(_reserve, _to, _amount);\\n    }\\n\\n    function getSecurityDepositTokenAddress() external view returns (address) {\\n        return address(securityDepositToken);\\n    }\\n\\n    function getStakingContractAddress() external view returns (address) {\\n        return address(stakingContract);\\n    }\\n\\n    /**\\n     * @dev Get SecurityDepositEscrow contract address\\n     * @return address\\n     **/\\n    function getSecurityDepositEscrowAddress() external view returns (address) {\\n        return address(securityDepositEscrow);\\n    }\\n\\n    function getVersion() external view returns (string memory) {\\n        string memory version = 'Vault 0.0.1';\\n        return version;\\n    }\\n\\n    function _requireCallerLoanManager() internal {\\n        Voyager v = Voyager(voyager);\\n        IACLManager aclManager = IACLManager(\\n            v.addressResolver().getAddress(v.getACLManagerName())\\n        );\\n        require(aclManager.isLoanManager(msg.sender), 'Not liquidity manager');\\n    }\\n}\\n\",\"keccak256\":\"0x3a6172de5845fdcd3e0e28508df1bb44a364105508f5d1f591f906278b8fd3e5\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/access/AccessControl.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\\nimport 'openzeppelin-solidity/contracts/security/ReentrancyGuard.sol';\\nimport '../../libraries/proxy/Proxyable.sol';\\nimport '../../tokenization/SecurityDepositToken.sol';\\nimport '../../mock/Tus.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport './Vault.sol';\\nimport '../../interfaces/IVaultManager.sol';\\nimport '../../interfaces/IACLManager.sol';\\nimport '../Voyager.sol';\\nimport '../infra/AddressResolver.sol';\\nimport './VaultStorage.sol';\\n\\ncontract VaultManager is ReentrancyGuard, Proxyable, IVaultManager {\\n    using SafeERC20 for ERC20;\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n\\n    address public voyager;\\n    mapping(address => uint256) public maxSecurityDeposit;\\n    // reserve address => requirement expressed in ray\\n    mapping(address => uint256) public securityDepositRequirement;\\n\\n    constructor(address payable _proxy, address _voyager)\\n        public\\n        Proxyable(_proxy)\\n    {\\n        voyager = _voyager;\\n    }\\n\\n    modifier onlyAdmin() {\\n        _requireCallerAdmin();\\n        _;\\n    }\\n\\n    /************************************** User Functions **************************************/\\n\\n    /**\\n     * @dev Create a Vault for user\\n     * @param _user the address of the player\\n     **/\\n    function createVault(address _user)\\n        external\\n        onlyProxy\\n        returns (address vault)\\n    {\\n        bytes memory bytecode = type(Vault).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(_user));\\n        assembly {\\n            vault := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        Vault(vault).initialize(voyager, _user);\\n        uint256 len = VaultStorage(getVaultStorageAddress()).pushNewVault(\\n            _user,\\n            vault\\n        );\\n        proxy._emit(\\n            abi.encode(vault, len),\\n            2,\\n            keccak256('VaultCreated(address, address, uint256)'),\\n            bytes32(abi.encodePacked(_user)),\\n            0,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @dev Delegate call to Vault's depositSecurity\\n     * @param _sponsor who actual deposits the reserve into the amount\\n     * @param _vaultUser user address\\n     * @param _reserve reserve address\\n     * @param _amount amount user is willing to deposit\\n     */\\n    function depositSecurity(\\n        address _sponsor,\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyProxy {\\n        address vaultAddress = _getVault(_vaultUser);\\n        Vault(vaultAddress).depositSecurity(_sponsor, _reserve, _amount);\\n        proxy._emit(\\n            abi.encode(_vaultUser, _reserve, _amount),\\n            2,\\n            keccak256('SecurityDeposited(address, address, address, uint256)'),\\n            bytes32(abi.encodePacked(_sponsor)),\\n            0,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @dev  Delegate call to Vault's redeemSecurity\\n     * @param _sponsor sponsor address\\n     * @param _vaultUser user address\\n     * @param _reserve reserve address\\n     * @param _amount redeem amount\\n     **/\\n    function redeemSecurity(\\n        address payable _sponsor,\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyProxy {\\n        address vaultAddress = _getVault(_vaultUser);\\n        Vault(vaultAddress).redeemSecurity(_sponsor, _reserve, _amount);\\n        proxy._emit(\\n            abi.encode(_vaultUser, _reserve, _amount),\\n            2,\\n            keccak256('SecurityRedeemed(address, address, address, uint256)'),\\n            bytes32(abi.encodePacked(_sponsor)),\\n            0,\\n            0\\n        );\\n    }\\n\\n    // placeholder function\\n    function slash(\\n        address _vaultUser,\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) public nonReentrant onlyProxy {\\n        address vaultAddress = _getVault(_vaultUser);\\n        return Vault(vaultAddress).slash(_reserve, _to, _amount);\\n    }\\n\\n    /************************ HouseKeeping Function ******************************/\\n\\n    /**\\n     * Init a deployed Vault, ensure it has overlying security deposit token and corresponding staking contract\\n     * _vaultUser the user/owner of this vault\\n     * _reserve the underlying asset address e.g. TUS\\n     **/\\n    function initVault(address _user, address _reserve) external {\\n        initSecurityDepositToken(_user, _reserve);\\n        initStakingContract(_user, _reserve);\\n    }\\n\\n    function initSecurityDepositToken(address _vaultUser, address _reserve)\\n        public\\n        onlyProxy\\n        onlyAdmin\\n    {\\n        address vaultAddress = _getVault(_vaultUser);\\n        Vault(vaultAddress).initSecurityDepositToken(_reserve);\\n        proxy._emit(\\n            abi.encode(_reserve),\\n            2,\\n            keccak256('SecurityDepositTokenInited(address, address)'),\\n            bytes32(abi.encodePacked(_vaultUser)),\\n            0,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * Init a deployed Vault, ensure it has overlying security deposit token and corresponding staking contract\\n     * _vaultUser the user/owner of this vault\\n     * _reserve the underlying asset address e.g. TUS\\n     **/\\n    function initStakingContract(address _vaultUser, address _reserve)\\n        public\\n        onlyProxy\\n        onlyAdmin\\n    {\\n        address vaultAddress = _getVault(_vaultUser);\\n        Vault(vaultAddress).initStakingContract(_reserve);\\n        proxy._emit(\\n            abi.encode(_reserve),\\n            2,\\n            keccak256('StakingContractInited(address, address)'),\\n            bytes32(abi.encodePacked(_vaultUser)),\\n            0,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @dev Set max security deposit for _reserve\\n     * @param _reserve reserve address\\n     * @param _amount max amount sponsor can deposit\\n     */\\n    function setMaxSecurityDeposit(address _reserve, uint256 _amount)\\n        external\\n        onlyProxy\\n        onlyAdmin\\n    {\\n        maxSecurityDeposit[_reserve] = _amount;\\n        proxy._emit(\\n            abi.encode(_amount),\\n            2,\\n            keccak256('MaxSecurityDepositUpdated(address, uint256)'),\\n            bytes32(abi.encodePacked(_reserve)),\\n            0,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @dev Remove max security deposit for _reserve\\n     * @param _reserve reserve address\\n     */\\n    function removeMaxSecurityDeposit(address _reserve)\\n        external\\n        onlyProxy\\n        onlyAdmin\\n    {\\n        delete maxSecurityDeposit[_reserve];\\n        proxy._emit(\\n            abi.encode(_reserve),\\n            2,\\n            keccak256('MaxSecurityDepositDeleted(address)'),\\n            bytes32(abi.encodePacked(_reserve)),\\n            0,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @dev Update the security deposit requirement\\n     * @param _reserve reserve address\\n     * @param _requirement expressed in Ray\\n     */\\n    function updateSecurityDepositRequirement(\\n        address _reserve,\\n        uint256 _requirement\\n    ) external onlyProxy onlyAdmin {\\n        securityDepositRequirement[_reserve] = _requirement;\\n        proxy._emit(\\n            abi.encode(_requirement),\\n            2,\\n            keccak256('SecurityDepositRequirementSet(address, uint256)'),\\n            bytes32(abi.encodePacked(_reserve)),\\n            0,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @dev Remove security deposit\\n     * @param _reserve reserve address\\n     */\\n    function removeSecurityDepositRequirement(address _reserve)\\n        external\\n        onlyProxy\\n        onlyAdmin\\n    {\\n        delete securityDepositRequirement[_reserve];\\n        proxy._emit(\\n            abi.encode(_reserve),\\n            2,\\n            keccak256('SecurityDepositRequirementDeleted(address)'),\\n            bytes32(abi.encodePacked(_reserve)),\\n            0,\\n            0\\n        );\\n    }\\n\\n    /************************************** View Functions **************************************/\\n\\n    function getSecurityDepositRequirement(address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return securityDepositRequirement[_reserve];\\n    }\\n\\n    function getMaxSecurityDeposit(address _reserve)\\n        external\\n        view\\n        onlyProxy\\n        returns (uint256)\\n    {\\n        return maxSecurityDeposit[_reserve];\\n    }\\n\\n    function underlyingBalance(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) public view returns (uint256) {\\n        address vaultAddress = _getVault(_vaultUser);\\n        return Vault(vaultAddress).underlyingBalance(_sponsor, _reserve);\\n    }\\n\\n    /**\\n     * @dev Get available credit\\n     * @param _user user address\\n     * @param _reserve reserve address\\n     **/\\n    function getAvailableCredit(address _user, address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 creditLimit = getCreditLimit(_user, _reserve);\\n        uint256 accumulatedDebt = Vault(_getVault(_user)).getTotalDebt();\\n        return creditLimit - accumulatedDebt;\\n    }\\n\\n    /**\\n     * @dev Get credit limit for a specific reserve\\n     * @param _user user address\\n     * @return _reserve reserve address\\n     **/\\n    function getCreditLimit(address _user, address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 currentSecurityDeposit = _getSecurityDeposit(_user, _reserve);\\n        uint256 securityDepositRequirement = securityDepositRequirement[\\n            _reserve\\n        ];\\n        require(\\n            securityDepositRequirement != 0,\\n            'security deposit requirement cannot be 0'\\n        );\\n        uint256 creditLimitInRay = currentSecurityDeposit.wadToRay().rayDiv(\\n            securityDepositRequirement\\n        );\\n        return creditLimitInRay.rayToWad();\\n    }\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getSecurityDeposit(_user, _reserve);\\n    }\\n\\n    function getVaultStorageAddress() private view returns (address) {\\n        Voyager v = Voyager(voyager);\\n        address resolver = v.getAddressResolverAddress();\\n        return AddressResolver(resolver).getAddress(v.getVaultStorageName());\\n    }\\n\\n    function getSecurityDepositTokenAddress(address vault)\\n        private\\n        view\\n        returns (address)\\n    {\\n        return Vault(vault).getSecurityDepositTokenAddress();\\n    }\\n\\n    /**\\n     * @dev Get existing Vault contract address for user\\n     * @param _user the address of the player\\n     * @return Vault address\\n     **/\\n    function getVault(address _user) external view returns (address) {\\n        return _getVault(_user);\\n    }\\n\\n    function eligibleAmount(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) public view returns (uint256) {\\n        address vaultAddress = _getVault(_vaultUser);\\n        return Vault(vaultAddress).eligibleAmount(_reserve, _sponsor);\\n    }\\n\\n    /************************************** Private Functions **************************************/\\n\\n    function _getSecurityDeposit(address _user, address _reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        address vaultAddress = _getVault(_user);\\n        uint256 currentSecurityDeposit = Vault(vaultAddress)\\n            .getCurrentSecurityDeposit(_reserve);\\n        return currentSecurityDeposit;\\n    }\\n\\n    function _getVault(address _user) internal view returns (address) {\\n        return VaultStorage(getVaultStorageAddress()).getVaultAddress(_user);\\n    }\\n\\n    function _requireCallerAdmin() internal {\\n        Voyager v = Voyager(voyager);\\n        IACLManager aclManager = IACLManager(\\n            v.addressResolver().getAddress(v.getACLManagerName())\\n        );\\n        require(aclManager.isVaultManager(messageSender), 'Not vault admin');\\n    }\\n}\\n\",\"keccak256\":\"0x0ed3513f8a1bff39cb6e23ce66d18a850268414dbff242cfd9a9170c14da33f8\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/proxy/Proxy.sol';\\nimport '../../interfaces/IVaultManager.sol';\\n\\ncontract VaultManagerProxy is Proxy {\\n    /************************** Immutable static call for target contract **************************/\\n\\n    function getMaxSecurityDeposit(address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return IVaultManager(address(target)).getMaxSecurityDeposit(_reserve);\\n    }\\n\\n    function getSecurityDepositRequirement(address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultManager(address(target)).getSecurityDepositRequirement(\\n                _reserve\\n            );\\n    }\\n\\n    function getCreditLimit(address _user, address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return IVaultManager(address(target)).getCreditLimit(_user, _reserve);\\n    }\\n\\n    function eligibleAmount(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256) {\\n        return\\n            IVaultManager(address(target)).eligibleAmount(\\n                _vaultUser,\\n                _reserve,\\n                _sponsor\\n            );\\n    }\\n\\n    function underlyingBalance(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256) {\\n        return\\n            IVaultManager(address(target)).underlyingBalance(\\n                _vaultUser,\\n                _reserve,\\n                _sponsor\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xb4fcb149bb0e199de21adeff30e7f10b380579c39e92e0c8e94f7890423553a7\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/state/State.sol';\\nimport '../../libraries/types/DataTypes.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n// central storage for all vaults\\ncontract VaultStorage is State {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n\\n    address[] public allVaults;\\n    // player address => vault address\\n    mapping(address => address) public getVault;\\n\\n    constructor(address _vaultManager) State(_vaultManager) {}\\n\\n    function pushNewVault(address _player, address vault)\\n        external\\n        onlyAssociatedContract\\n        returns (uint256)\\n    {\\n        allVaults.push(vault);\\n        getVault[_player] = vault;\\n        return allVaults.length;\\n    }\\n\\n    /**\\n     * @dev Get Vault address for a specific user\\n     * @param _user the address of the player\\n     **/\\n    function getVaultAddress(address _user) external view returns (address) {\\n        return getVault[_user];\\n    }\\n\\n    /**\\n     * @dev Get all credit account addresses\\n     **/\\n    function getAllVaults() external view returns (address[] memory) {\\n        return allVaults;\\n    }\\n}\\n\",\"keccak256\":\"0xd28f410680cfc2e9a9d523a4bfe1baf707087bb4a6c8c2ad02092ffe3c6e9d7f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IACLManager {\\n    function grantLiquidityManager(address _admin) external;\\n\\n    function isLiquidityManager(address _admin) external view returns (bool);\\n\\n    function grantVaultManager(address _admin) external;\\n\\n    function isVaultManager(address _admin) external view returns (bool);\\n\\n    function grantPoolManager(address _admin) external;\\n\\n    function grantLoanManager(address _admin) external;\\n\\n    function isLoanManager(address _admin) external view returns (bool);\\n\\n    function isProtocolManager(address _admin) external view returns (bool);\\n\\n    function grantLiquidityManagerContract(address _admin) external;\\n\\n    function isLiquidityManagerContract(address _admin)\\n        external\\n        view\\n        returns (bool);\\n\\n    function grantLoanManagerContract(address _admin) external;\\n\\n    function isLoanManagerContract(address _admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4cd4bee9052dc69cbe401f12e7bf96a6d395bd3911af4d37166686cf8c9a9884\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function importAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external;\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address);\\n\\n    function getLiquidityManagerProxy() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2d3659f5a65316556a4cf6e70faf506eb6f0fa2a4899c89bba51609ac4884f7c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IStableDebtToken {\\n    /**\\n     * @dev Emitted when new stable debt is minted\\n     * @param user The address of the user who triggered the minting\\n     * @param amount The amount minted (user entered amount + balance increase from interest)\\n     * @param currentBalance The current balance of the user\\n     * @param balanceIncrease The increase in balance since the last action of the user\\n     * @param newRate The rate of the debt after the minting\\n     * @param avgStableRate The next average stable rate after the minting\\n     * @param newTotalSupply The next total supply of the stable debt token after the action\\n     **/\\n    event Mint(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 currentBalance,\\n        uint256 balanceIncrease,\\n        uint256 newRate,\\n        uint256 avgStableRate,\\n        uint256 newTotalSupply\\n    );\\n\\n    function getAverageStableRate() external view returns (uint256);\\n\\n    function getTotalSupplyAndAvgRate()\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getAggregateOptimalRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAggregateActualRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xe2f108067bebe79426ae636585fd801a5e0c0efcb97e2116ba5ec57d167be796\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nabstract contract IInitializableDebtToken {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    uint256 private lastInitializedRevision = 0;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Emitted when a debt token is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param debtTokenDecimals the decimals of the debt token\\n     * @param debtTokenName the name of the debt token\\n     * @param debtTokenSymbol the symbol of the debt token\\n     * @param params A set of encoded parameters for additional initialization\\n     **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        uint8 debtTokenDecimals,\\n        string debtTokenName,\\n        string debtTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        uint256 revision = getRevision();\\n        require(\\n            initializing ||\\n                isConstructor() ||\\n                revision > lastInitializedRevision,\\n            'Contract instance has already been initialized'\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            lastInitializedRevision = revision;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the revision number of the contract\\n     * Needs to be defined in the inherited class as a constant.\\n     **/\\n    function getRevision() internal pure virtual returns (uint256);\\n\\n    /**\\n     * @dev Returns true if the contract has been initialized\\n     **/\\n    function isInitialized() public view returns (bool) {\\n        return !initializing && getRevision() <= lastInitializedRevision;\\n    }\\n\\n    // todo return value\\n    function mint(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _tenure,\\n        uint256 _rate\\n    ) external virtual;\\n\\n    /**\\n     * @dev Returns true if and only if the function is running in the constructor\\n     **/\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x039d40f57de228bbc6991bb2d7ca3203986f3bf803d4da625e635bce71c5d29d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/logic/ReserveLogic.sol';\\n\\ninterface ILiquidityManager {\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256);\\n\\n    function getEscrowAddress() external view returns (address);\\n\\n    function deposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address _user,\\n        address _onBehalfOf\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc6373ae3e7056a017268e08a094f7479c99432200b5cb2fd89c08a58614281f9\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquidityManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/logic/ReserveLogic.sol';\\n\\ninterface ILiquidityManagerProxy {\\n    function getLiquidityRate(address _reserve, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getReserveData(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function getFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        );\\n\\n    function getConfiguration(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x39a3366fb40652d00f102f17bdb3eee45f174cbbf2e512b8c0a0f65792b65df2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/types/DataTypes.sol';\\n\\ninterface IMessageBus {\\n    function getAddressResolverAddress() external view returns (address);\\n\\n    function getVault(address _user) external view returns (address);\\n\\n    function getMaxSecurityDeposit(address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSecurityDepositRequirement(address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getReserveData(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCompoundedDebt(address _user) external view returns (uint256);\\n\\n    function getAggregateOptimalRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAggregateActualRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x530041e70e5134538847fac449a48f18d3920287e699c00a6b783da49395fed9\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n@title IReserveInterestRateStrategyInterface interface\\n@notice Interface for the calculation of the interest rates.\\n*/\\n\\ninterface IReserveInterestRateStrategy {\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xb45b6fadbd52886b83832ccf42a5f2e3f41aaee4f5132f9ad1b19fad2070b57e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserveManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/logic/ReserveLogic.sol';\\n\\ninterface IReserveManager {\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress\\n    ) external;\\n\\n    function activeReserve(address _asset) external;\\n\\n    function getReserveData(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function getReserveList() external view returns (address[] memory);\\n\\n    function getConfiguration(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    function getFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        );\\n\\n    function getLiquidityRate(address _reserve, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x7734732932d0807069d5443a87d5b4edf03e4f6364e2277ac24966ffe3c38fb9\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IVault {\\n    function depositSecurity(\\n        address _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function redeemSecurity(\\n        address payable _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function increaseTotalDebt(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf870b907574b3e8d41e1cb618fa5a2f5c74602140c361c76e6a22e9986f738d2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IVaultManager {\\n    function getMaxSecurityDeposit(address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSecurityDepositRequirement(address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCreditLimit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function eligibleAmount(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256);\\n\\n    function underlyingBalance(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256);\\n\\n    function createVault(address _user) external returns (address vault);\\n\\n    function getVault(address _user) external view returns (address);\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x1f30e846c543f7abbbeaf3e8378b07127591de1c1c8e197b9579f0ead5a8b4d2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVoyagerComponent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../component/Voyager.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport '../component/shared/storage/LiquidityManagerStorage.sol';\\nimport '../component/shared/escrow/LiquidityDepositEscrow.sol';\\nimport '../libraries/types/DataTypes.sol';\\n\\nabstract contract IVoyagerComponent {\\n    Voyager public voyager;\\n\\n    modifier requireNotPaused() {\\n        _whenNotPaused();\\n        _;\\n    }\\n\\n    function liquidityManagerStorageAddress() internal view returns (address) {\\n        return\\n            AddressResolver(voyager.getAddressResolverAddress()).getAddress(\\n                voyager.getLiquidityManagerStorageName()\\n            );\\n    }\\n\\n    function _whenNotPaused() internal view {\\n        require(!paused(), Errors.LP_IS_PAUSED);\\n    }\\n\\n    function paused() internal view returns (bool) {\\n        address storageAddress = liquidityManagerStorageAddress();\\n        return LiquidityManagerStorage(storageAddress).paused();\\n    }\\n\\n    function getDepositAndDebt()\\n        public\\n        view\\n        returns (DataTypes.DepositAndDebt memory)\\n    {\\n        address storageAddress = liquidityManagerStorageAddress();\\n        return LiquidityManagerStorage(storageAddress).getDepositAndDebt();\\n    }\\n\\n    function escrow() internal view virtual returns (LiquidityDepositEscrow);\\n}\\n\",\"keccak256\":\"0xb3414eba7d6bebfb40d5789b79e0f6d3c00fcfdc3e0118d3b6e7b381259bad76\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/Address.sol';\\nimport 'openzeppelin-solidity/contracts/security/ReentrancyGuard.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\\nimport './EthAddressLib.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\ncontract Escrow is ReentrancyGuard {\\n    using Address for address payable;\\n    using SafeERC20 for ERC20;\\n\\n    struct Deposit {\\n        uint256 amount;\\n        uint40 depositTime;\\n    }\\n\\n    event Deposited(address indexed payee, address token, uint256 amount);\\n    event Withdrawn(address indexed payee, address token, uint256 amount);\\n\\n    // reserve address => amount\\n    mapping(address => uint256) private _deposits;\\n    // reserve address => user address => deposit record\\n    mapping(address => mapping(address => Deposit[])) private _depositRecords;\\n\\n    uint40 private _lockupTimeInSeconds = 7 days;\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param _reserve the asset address\\n     * @param _user user address who deposit to this escrow\\n     * @param _amount token amount\\n     */\\n    function _deposit(\\n        address _reserve,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        if (_reserve != EthAddressLib.ethAddress()) {\\n            require(\\n                msg.value == 0,\\n                'User is sending ETH along with the ERC20 transfer.'\\n            );\\n            ERC20(_reserve).safeTransferFrom(_user, address(this), _amount);\\n        } else {\\n            require(\\n                msg.value == _amount,\\n                'The amount and the value sent to deposit do not match'\\n            );\\n        }\\n        _deposits[_reserve] += _amount;\\n        Deposit memory deposit = Deposit(_amount, uint40(block.timestamp));\\n        _depositRecords[_reserve][_user].push(deposit);\\n        emit Deposited(_user, _reserve, _amount);\\n    }\\n\\n    function eligibleAmount(address _reserve, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Deposit[] storage deposits = _depositRecords[_reserve][_user];\\n        uint256 eligibleAmount = 0;\\n        for (uint256 i = 0; i < deposits.length; i++) {\\n            if (\\n                uint40(block.timestamp) - deposits[i].depositTime >\\n                _lockupTimeInSeconds\\n            ) {\\n                eligibleAmount += deposits[i].amount;\\n            }\\n        }\\n        return eligibleAmount;\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, only beyond _lockupTimeInSeconds\\n     * @param _reserve the asset address\\n     * @param _user user address who deposit to this escrow\\n     */\\n    function _withdraw(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) internal {\\n        Deposit[] storage deposits = _depositRecords[_reserve][_user];\\n        uint256 eligibleAmount = 0;\\n        uint40 lastUpdateTime;\\n        for (uint256 i = 0; i < deposits.length; i++) {\\n            if (\\n                uint40(block.timestamp) - deposits[i].depositTime >\\n                _lockupTimeInSeconds\\n            ) {\\n                eligibleAmount += deposits[i].amount;\\n                lastUpdateTime = deposits[i].depositTime;\\n                delete deposits[i];\\n            }\\n        }\\n\\n        require(\\n            eligibleAmount >= _amount,\\n            'Do not have enough amount to withdraw'\\n        );\\n\\n        // if there is any amount left from eligible amount, push it back\\n        if (eligibleAmount > _amount) {\\n            uint256 leftAmount = eligibleAmount - _amount;\\n            Deposit memory leftDeposit = Deposit(leftAmount, lastUpdateTime);\\n            _depositRecords[_reserve][_user].push(leftDeposit);\\n        }\\n\\n        _deposits[_reserve] -= _amount;\\n        transferToUser(_reserve, _user, _amount);\\n        emit Withdrawn(_user, _reserve, _amount);\\n    }\\n\\n    /**\\n     * @dev get accumulated amount of deposit.\\n     * @param _reserve the address of the reserve where the transfer is happening\\n     * @return accumulated deposit amount\\n     **/\\n    function getDepositAmount(address _reserve) public view returns (uint256) {\\n        return _deposits[_reserve];\\n    }\\n\\n    /**\\n     * @dev get all records of deposit.\\n     * @param _reserve the address of the reserve where the transfer is happening\\n     * @param _user the address of the user receiving the transfer\\n     * @return deposit records\\n     **/\\n    function getDepositRecords(address _reserve, address _user)\\n        public\\n        view\\n        returns (Deposit[] memory)\\n    {\\n        Deposit[] storage deposits = _depositRecords[_reserve][_user];\\n        return deposits;\\n    }\\n\\n    /**\\n     * @dev transfers to the user a specific amount from the reserve.\\n     * @param _reserve the address of the reserve where the transfer is happening\\n     * @param _user the address of the user receiving the transfer\\n     * @param _amount the amount being transferred\\n     **/\\n    function transferToUser(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) internal {\\n        if (_reserve != EthAddressLib.ethAddress()) {\\n            ERC20(_reserve).safeTransfer(_user, _amount);\\n        } else {\\n            //solium-disable-next-line\\n            (bool result, ) = _user.call{value: _amount}('');\\n            require(result, 'Transfer of ETH failed');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7bc4af00533155737d2a2e6c40e5413858b737109973183dddbd42ad060978e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/EthAddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary EthAddressLib {\\n    /**\\n     * @dev returns the address used within the protocol to identify ETH\\n     * @return the address assigned to ETH\\n     */\\n    function ethAddress() internal pure returns (address) {\\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    }\\n}\\n\",\"keccak256\":\"0xd804184a4493b89dbe84b06927f119535944d46889c5ffcd5d8ca6f4172a541f\",\"license\":\"GPL-3.0\"},\"contracts/libraries/acl/ExtCallACL.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../proxy/Proxyable.sol';\\nimport './IExtCallACL.sol';\\n\\ncontract ExtCallACL is Proxyable, IExtCallACL {\\n    mapping(address => bool) public whitelistedAddress;\\n    mapping(bytes32 => bool) public whitelistedFunctions;\\n\\n    constructor(address payable _proxy) public Proxyable(_proxy) {}\\n\\n    function whitelistAddress(address[] calldata _address) external onlyProxy {\\n        uint256 arrayLength = _address.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            whitelistedAddress[_address[i]] = true;\\n        }\\n    }\\n\\n    function blockAddress(address[] calldata _address) external onlyProxy {\\n        uint256 arrayLength = _address.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            delete whitelistedAddress[_address[i]];\\n        }\\n    }\\n\\n    function isWhitelistedAddress(address _address)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return whitelistedAddress[_address];\\n    }\\n\\n    function whitelistFunction(bytes32[] calldata _func) external onlyProxy {\\n        uint256 arrayLength = _func.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            whitelistedFunctions[_func[i]] = true;\\n        }\\n    }\\n\\n    function blockFunction(bytes32[] calldata _func) external onlyProxy {\\n        uint256 arrayLength = _func.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            delete whitelistedFunctions[_func[i]];\\n        }\\n    }\\n\\n    function isWhitelistedFunction(bytes32 _func) external view returns (bool) {\\n        return whitelistedFunctions[_func];\\n    }\\n}\\n\",\"keccak256\":\"0x8c57abec824593830eea470bdcf85bec411e797e8e979b6b7075e8d09db12057\",\"license\":\"GPL-3.0\"},\"contracts/libraries/acl/ExtCallACLProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../proxy/Proxy.sol';\\nimport './IExtCallACL.sol';\\n\\ncontract ExtCallACLProxy is Proxy {\\n    function isWhitelistedAddress(address _address) public view returns (bool) {\\n        return IExtCallACL(address(target)).isWhitelistedAddress(_address);\\n    }\\n\\n    function isWhitelistedFunction(bytes32 _func) public view returns (bool) {\\n        return IExtCallACL(address(target)).isWhitelistedFunction(_func);\\n    }\\n}\\n\",\"keccak256\":\"0x3ec9525d0851c9ac3b990c8d2a0fb8c8a4de54d653acdee841a916145fa12dea\",\"license\":\"GPL-3.0\"},\"contracts/libraries/acl/IExtCallACL.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IExtCallACL {\\n    function whitelistAddress(address[] calldata _address) external;\\n\\n    function blockAddress(address[] calldata _address) external;\\n\\n    function isWhitelistedAddress(address _address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function whitelistFunction(bytes32[] calldata _func) external;\\n\\n    function blockFunction(bytes32[] calldata _func) external;\\n\\n    function isWhitelistedFunction(bytes32 _func) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8243da9760ba180c6c523f75b57ae2a819667a8aeed8bdd4068a36c585413e81\",\"license\":\"GPL-3.0\"},\"contracts/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Voyage\\n * @notice Implements the bitmap logic to handle the reserve configuration, inspired by Aave\\n **/\\nlibrary ReserveConfiguration {\\n    uint256 constant LIQUIDATE_BONUS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 constant DECIMAL_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80FFFF; // prettier-ignore\\n    uint256 constant ACTIVE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFF; // prettier-ignore\\n    uint256 constant FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFF; // prettier-ignore\\n    uint256 constant BORROWING_ENABLE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFF; // prettier-ignore\\n    uint256 constant RESERVED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF87FFFFFF; // prettier-ignore\\n    uint256 constant RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0007FFFFFFF; // prettier-ignore\\n    uint256 constant LOCKUP_PERIOD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80007FFFFFFFFFFF; // prettier-ignore\\n\\n    uint256 constant DECIMAL_MASK_BIT_POSITION = 16;\\n    uint256 constant ACTIVE_MASK_BIT_POSITION = 24;\\n    uint256 constant FROZEN_MASK_BIT_POSITION = 25;\\n    uint256 constant BORROWING_ENABLE_MASK_POSITION = 26;\\n    uint256 constant RESERVED_MASK_BIT_POSITION = 27;\\n    uint256 constant RESERVE_FACTOR_MASK_BIT_POSITION = 31;\\n    uint256 constant LOCKUP_PERIOD_MASK_BIT_POSITION = 47;\\n\\n    /**\\n     * Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flags representing active, frozen, borrowing enabled\\n     **/\\n    function getFlags(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_ENABLE_MASK) != 0\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     **/\\n    function setActive(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool active\\n    ) internal pure {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << ACTIVE_MASK_BIT_POSITION);\\n    }\\n\\n    function getActive(DataTypes.ReserveConfigurationMap storage self)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x23a62f92e3d54e0ea396ca9f3bdce06e7c38ef191b2c27ff582140207e5a28c2\",\"license\":\"GPL-3.0\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors library\\n * @author Voyager\\n * @notice Defines the error messages emitted by the different contracts of the Voyager protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - LM = LiquidityManager\\n *  - LOM = LoanManager\\n *  - CT = Common errors between tokens\\n *  - RL = ReserveLogic\\n */\\nlibrary Errors {\\n    string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n    string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n    string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL = '20';\\n    string public constant CT_CALLER_MUST_BE_LOAN_MANAGER = '21';\\n    string public constant CT_INVALID_MINT_AMOUNT = '21';\\n    string public constant CT_INVALID_BURN_AMOUNT = '22';\\n    string public constant LM_NOT_CONTRACT = '60';\\n    string public constant LP_IS_PAUSED = '61'; // 'Pool is paused'\\n    string public constant LOM_RESERVE_NOT_SUFFICIENT = '70';\\n    string public constant LOM_CREDIT_NOT_SUFFICIENT = '71';\\n    string public constant LOM_HEALTH_RISK_BELOW_ONE = '71';\\n    string public constant LOM_NOT_VAULT_OWNER = '72';\\n    string public constant RL_LIQUIDITY_RATE_OVERFLOW = '80'; //  Liquidity rate overflows uint128\\n    string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '81'; //  Stable borrow rate overflows uint128\\n}\\n\",\"keccak256\":\"0x99c4bd1d0e99adf35c543608d5ac127fd65983ad861424b1e30d8674671960bd\",\"license\":\"agpl-3.0\"},\"contracts/libraries/helpers/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../ownership/Ownable.sol';\\n\\nabstract contract Pausable is Ownable {\\n    uint256 public lastPauseTime;\\n    bool public paused;\\n\\n    constructor() {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner != address(0), 'Owner must be set');\\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\\n    }\\n\\n    /**\\n     * @notice Change the paused state of the contract\\n     * @dev Only the contract owner may call this.\\n     */\\n    function setPaused(bool _paused) external onlyOwner {\\n        // Ensure we're actually changing the state before we do anything\\n        if (_paused == paused) {\\n            return;\\n        }\\n\\n        // Set our paused state.\\n        paused = _paused;\\n\\n        // If applicable, set the last pause time.\\n        if (paused) {\\n            lastPauseTime = block.timestamp;\\n        }\\n\\n        // Let everyone know that our pause state has changed.\\n        emit PauseChanged(paused);\\n    }\\n\\n    event PauseChanged(bool isPaused);\\n\\n    modifier notPaused() {\\n        require(\\n            !paused,\\n            'This action cannot be performed while the contract is paused'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xeb00aba958ad4f51f456bca0b5feba360518817b6f62b894fa16a923f425454a\",\"license\":\"agpl-3.0\"},\"contracts/libraries/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport '../math/WadRayMath.sol';\\nimport '../math/MathUtils.sol';\\nimport '../types/DataTypes.sol';\\nimport '../helpers/Errors.sol';\\nimport '../../interfaces/IDebtToken.sol';\\nimport '../../component/liquiditymanager/DefaultReserveInterestRateStrategy.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author Voyager\\n * @notice Implements the logic to update the reserves state\\n **/\\nlibrary ReserveLogic {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    using ReserveLogic for DataTypes.ReserveData;\\n\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed asset,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 liquidityIndex\\n    );\\n\\n    function init(\\n        DataTypes.ReserveData storage reserve,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress\\n    ) external {\\n        reserve.juniorLiquidityIndex = WadRayMath.ray();\\n        reserve.seniorLiquidityIndex = WadRayMath.ray();\\n        reserve.juniorDepositTokenAddress = _juniorDepositTokenAddress;\\n        reserve.seniorDepositTokenAddress = _seniorDepositTokenAddress;\\n        //reserve.currentOverallLiquidityRate = WadRayMath.ray();\\n        reserve.currentJuniorIncomeAllocation = _juniorIncomeAllocation;\\n        reserve.currentSeniorIncomeAllocation = _seniorIncomeAllocation;\\n        reserve.stableDebtAddress = _stableDebtAddress;\\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\\n        reserve.healthStrategyAddress = _healthStrategyAddress;\\n    }\\n\\n    function updateState(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public {\\n        _updateIndexes(reserve, _tranche);\\n    }\\n\\n    function getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public view returns (uint256) {\\n        return reserve._getLiquidityRate(_tranche);\\n    }\\n\\n    struct UpdateInterestRatesLocalVars {\\n        address stableDebtTokenAddress;\\n        uint256 availableLiquidity;\\n        uint256 totalStableDebt;\\n        uint256 newLiquidityRate;\\n        uint256 newStableRate;\\n        uint256 avgStableRate;\\n    }\\n\\n    function updateInterestRates(\\n        DataTypes.ReserveData storage _reserve,\\n        address _reserveAddress,\\n        uint256 _juniorLiquidityAdded,\\n        uint256 _juniorLiquidityTaken,\\n        uint256 _seniorLiquidityAdded,\\n        uint256 _seniorLiquidityTaken\\n    ) public {\\n        UpdateInterestRatesLocalVars memory vars;\\n\\n        vars.stableDebtTokenAddress = _reserve.stableDebtAddress;\\n        uint256 liquidityAdded = _juniorLiquidityAdded.add(\\n            _seniorLiquidityAdded\\n        );\\n        uint256 liquidityTaken = _juniorLiquidityTaken.add(\\n            _seniorLiquidityTaken\\n        );\\n\\n        (vars.totalStableDebt, vars.avgStableRate) = IStableDebtToken(\\n            _reserve.stableDebtAddress\\n        ).getTotalSupplyAndAvgRate();\\n\\n        (\\n            vars.newLiquidityRate,\\n            vars.newStableRate\\n        ) = IReserveInterestRateStrategy(_reserve.interestRateStrategyAddress)\\n            .calculateInterestRates(\\n                _reserveAddress,\\n                _reserve.juniorDepositTokenAddress,\\n                _reserve.seniorDepositTokenAddress,\\n                liquidityAdded,\\n                liquidityTaken,\\n                _reserve.totalBorrows,\\n                vars.avgStableRate\\n            );\\n        require(\\n            vars.newLiquidityRate <= type(uint128).max,\\n            Errors.RL_LIQUIDITY_RATE_OVERFLOW\\n        );\\n        require(\\n            vars.newStableRate <= type(uint128).max,\\n            Errors.RL_STABLE_BORROW_RATE_OVERFLOW\\n        );\\n        _reserve.currentOverallLiquidityRate = vars.newLiquidityRate;\\n        _reserve.currentBorrowRate = vars.newStableRate;\\n\\n        emit ReserveDataUpdated(\\n            _reserveAddress,\\n            vars.newLiquidityRate,\\n            vars.newStableRate,\\n            vars.newLiquidityRate\\n        );\\n    }\\n\\n    function getNormalizedIncome(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        uint40 timestamp;\\n        uint256 liquidityIndex;\\n        if (_tranche == Tranche.JUNIOR) {\\n            timestamp = reserve.juniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.juniorLiquidityIndex;\\n        } else {\\n            timestamp = reserve.seniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.seniorLiquidityIndex;\\n        }\\n\\n        //solium-disable-next-line\\n        if (timestamp == uint40(block.timestamp)) {\\n            return liquidityIndex;\\n        }\\n\\n        uint256 cumulated = MathUtils\\n            .calculateLinearInterest(\\n                reserve._getLiquidityRate(_tranche),\\n                timestamp\\n            )\\n            .rayMul(liquidityIndex);\\n        return cumulated;\\n    }\\n\\n    function _getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        uint256 totalAllocationInRay = reserve\\n            .currentJuniorIncomeAllocation\\n            .add(reserve.currentSeniorIncomeAllocation);\\n        if (_tranche == Tranche.JUNIOR) {\\n            return\\n                reserve.currentOverallLiquidityRate.rayMul(\\n                    reserve.currentJuniorIncomeAllocation.rayDiv(\\n                        totalAllocationInRay\\n                    )\\n                );\\n        } else {\\n            return\\n                reserve.currentOverallLiquidityRate.rayMul(\\n                    reserve.currentSeniorIncomeAllocation.rayDiv(\\n                        totalAllocationInRay\\n                    )\\n                );\\n        }\\n    }\\n\\n    function _updateIndexes(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal {\\n        if (_tranche == Tranche.JUNIOR) {\\n            uint256 previousJuniorLiquidityIndex = reserve.juniorLiquidityIndex;\\n            uint256 lastJuniorUpdatedTimestamp = reserve\\n                .juniorLastUpdateTimestamp;\\n            reserve._updateJuniorLiquidityIndex(\\n                previousJuniorLiquidityIndex,\\n                uint40(lastJuniorUpdatedTimestamp)\\n            );\\n        } else {\\n            uint256 previousSeniorLiquidityIndex = reserve.seniorLiquidityIndex;\\n            uint256 lastSeniorUpdatedTimestamp = reserve\\n                .seniorLastUpdateTimestamp;\\n            reserve._updateSeniorLiquidityIndex(\\n                previousSeniorLiquidityIndex,\\n                uint40(lastSeniorUpdatedTimestamp)\\n            );\\n        }\\n    }\\n\\n    function _updateJuniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 juniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 juniorLiquidityRate = reserve._getLiquidityRate(Tranche.JUNIOR);\\n        uint256 newJuniorLiquidityIndex = juniorLiquidityIndex;\\n\\n        // only cumulating if there is any income being produced\\n        if (juniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(juniorLiquidityRate, timestamp);\\n            newJuniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                juniorLiquidityIndex\\n            );\\n            reserve.juniorLiquidityIndex = newJuniorLiquidityIndex;\\n        }\\n\\n        reserve.juniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newJuniorLiquidityIndex;\\n    }\\n\\n    function _updateSeniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 seniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 seniorLiquidityRate = reserve._getLiquidityRate(Tranche.SENIOR);\\n        uint256 newSeniorLiquidityIndex = seniorLiquidityIndex;\\n\\n        if (seniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(seniorLiquidityRate, timestamp);\\n            newSeniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                seniorLiquidityIndex\\n            );\\n            reserve.seniorLiquidityIndex = newSeniorLiquidityIndex;\\n        }\\n        reserve.seniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newSeniorLiquidityIndex;\\n    }\\n}\\n\",\"keccak256\":\"0x2e94c975bac3c65607885e200905918702f098f30a3c128e2a22d3af73d863ef\",\"license\":\"GPL-3.0\"},\"contracts/libraries/logic/ValidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../types/DataTypes.sol';\\nimport '../configuration/ReserveConfiguration.sol';\\nimport '../helpers/Errors.sol';\\n\\nlibrary ValidationLogic {\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    /**\\n     * @dev Validates a deposit token\\n     * @param reserve The reserve object on which the user is depositing\\n     * @param amount The amount to be deposited\\n     **/\\n    function validateDeposit(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amount\\n    ) external view {\\n        (bool isActive, bool isFrozen, ) = reserve.configuration.getFlags();\\n        require(amount != 0, Errors.VL_INVALID_AMOUNT);\\n        require(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n        require(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n    }\\n}\\n\",\"keccak256\":\"0xdd470946bea9515caf3bfdc20ae4e78f2138dc785ae3650a0ac8951dedf3581e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(\\n            uint256(lastUpdateTimestamp)\\n        );\\n\\n        return\\n            (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n     * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        if (exp == 0) {\\n            return WadRayMath.ray();\\n        }\\n\\n        uint256 expMinusOne = exp - 1;\\n\\n        uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n        uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n        uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n        uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n        uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n        uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(\\n            basePowerThree\\n        ) / 6;\\n\\n        return\\n            WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(\\n                thirdTerm\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xeb644d3d04ac6c043657b2b835fbf71d1f2795f1f713b900cc43582158f31eac\",\"license\":\"agpl-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87bc93b45f82b290b2b6a9f00ce09f8c5c2b758931a85b37fb5d117a79031d3f\"},\"contracts/libraries/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(owner, pendingOwner);\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x5dca7c2446290ea3519aa0f9295e1edfbff47a1474edbe126f08dca92843e2c8\"},\"contracts/libraries/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../ownership/Ownable.sol';\\nimport './Proxyable.sol';\\n\\ncontract Proxy is Ownable {\\n    Proxyable public target;\\n\\n    event TargetUpdated(Proxyable newTarget);\\n\\n    modifier onlyTarget() {\\n        require(Proxyable(msg.sender) == target, 'Must be proxy target');\\n        _;\\n    }\\n\\n    function setTarget(Proxyable _target) external onlyOwner {\\n        target = _target;\\n        emit TargetUpdated(_target);\\n    }\\n\\n    function _emit(\\n        bytes calldata callData,\\n        uint256 numTopics,\\n        bytes32 topic1,\\n        bytes32 topic2,\\n        bytes32 topic3,\\n        bytes32 topic4\\n    ) external onlyTarget {\\n        uint256 size = callData.length;\\n        bytes memory _callData = callData;\\n\\n        assembly {\\n            /* The first 32 bytes of callData contain its length (as specified by the abi).\\n             * Length is assumed to be a uint256 and therefore maximum of 32 bytes\\n             * in length. It is also leftpadded to be a multiple of 32 bytes.\\n             * This means moving call_data across 32 bytes guarantees we correctly access\\n             * the data itself. */\\n            switch numTopics\\n            case 0 {\\n                log0(add(_callData, 32), size)\\n            }\\n            case 1 {\\n                log1(add(_callData, 32), size, topic1)\\n            }\\n            case 2 {\\n                log2(add(_callData, 32), size, topic1, topic2)\\n            }\\n            case 3 {\\n                log3(add(_callData, 32), size, topic1, topic2, topic3)\\n            }\\n            case 4 {\\n                log4(add(_callData, 32), size, topic1, topic2, topic3, topic4)\\n            }\\n        }\\n    }\\n\\n    // solhint-disable no-complex-fallback\\n    fallback() external payable {\\n        // Mutable call setting Proxyable.messageSender as this is using call not delegatecall\\n        target.setMessageSender(msg.sender);\\n\\n        assembly {\\n            let free_ptr := mload(0x40)\\n            calldatacopy(free_ptr, 0, calldatasize())\\n\\n            /* We must explicitly forward ether to the underlying contract as well. */\\n            let result := call(\\n                gas(),\\n                sload(target.slot),\\n                callvalue(),\\n                free_ptr,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(free_ptr, 0, returndatasize())\\n\\n            if iszero(result) {\\n                revert(free_ptr, returndatasize())\\n            }\\n            return(free_ptr, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x54fc918a0dbcb1ab42b9bea06b8dc10f26d2fcfa7c1cb1d813e1b017df4c9b9e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/proxy/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './Proxy.sol';\\nimport '../ownership/Ownable.sol';\\n\\nabstract contract Proxyable is Ownable {\\n    /* The proxy this contract exists behind. */\\n    Proxy public proxy;\\n\\n    /* The caller of the proxy, passed through to this contract.\\n     * Note that every function using this member must apply the onlyProxy or\\n     * optionalProxy modifiers, otherwise their invocations can use stale values. */\\n    address public messageSender;\\n\\n    modifier onlyProxy() {\\n        _onlyProxy();\\n        _;\\n    }\\n\\n    modifier optionalProxy_onlyOwner() {\\n        _optionalProxy_onlyOwner();\\n        _;\\n    }\\n\\n    event ProxyUpdated(address proxyAddress);\\n\\n    constructor(address payable _proxy) internal {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner != address(0), 'Owner must be set');\\n\\n        proxy = Proxy(_proxy);\\n        emit ProxyUpdated(_proxy);\\n    }\\n\\n    function _onlyProxy() private view {\\n        require(msg.sender == address(proxy), 'Only the proxy can call');\\n    }\\n\\n    function setProxy(address payable _proxy) external onlyOwner {\\n        proxy = Proxy(_proxy);\\n        emit ProxyUpdated(_proxy);\\n    }\\n\\n    function setMessageSender(address sender) external onlyProxy {\\n        messageSender = sender;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _optionalProxy_onlyOwner() private {\\n        if (msg.sender != address(proxy) && messageSender != msg.sender) {\\n            messageSender = msg.sender;\\n        }\\n        require(messageSender == owner, 'Owner only function');\\n    }\\n}\\n\",\"keccak256\":\"0x8107e4e558c8336f3d96f8ebdb63bc67c18b983b5149f0e38a037e35a7e53bb8\",\"license\":\"GPL-3.0\"},\"contracts/libraries/state/State.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../ownership/Ownable.sol';\\n\\nabstract contract State is Ownable {\\n    mapping(address => bool) public associatedContracts;\\n\\n    constructor(address _associatedContract) {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner != address(0), 'Owner must be set');\\n\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n\\n    event AssociatedContractUpdated(address associatedContract);\\n\\n    modifier onlyAssociatedContract() {\\n        require(\\n            associatedContracts[msg.sender],\\n            'Only the associated contract can perform this action'\\n        );\\n        _;\\n    }\\n\\n    // Change the associated contract to a new address\\n    function setAssociatedContract(address _associatedContract)\\n        external\\n        onlyOwner\\n    {\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n}\\n\",\"keccak256\":\"0x835e4507f1c45e5cb1ac2ab722b38969af0c5e2bd4e4fb8fc34046d56d555b9f\",\"license\":\"GPL-3.0\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary DataTypes {\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        // for calculating overall interested accumulated\\n        // then split it into two indexs base on two allocations\\n        uint256 currentOverallLiquidityRate;\\n        // Expressed in ray\\n        uint256 currentSeniorIncomeAllocation;\\n        // Expressed in ray\\n        uint256 currentJuniorIncomeAllocation;\\n        uint256 juniorLiquidityIndex;\\n        uint256 seniorLiquidityIndex;\\n        uint256 totalBorrows;\\n        uint256 currentBorrowRate;\\n        // Expressed in ray\\n        uint256 securityRequirement;\\n        //the decimals of the reserve asset\\n        uint256 decimals;\\n        address interestRateStrategyAddress;\\n        address healthStrategyAddress;\\n        address juniorDepositTokenAddress;\\n        address seniorDepositTokenAddress;\\n        address stableDebtAddress;\\n        uint40 juniorLastUpdateTimestamp;\\n        uint40 seniorLastUpdateTimestamp;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: Liquidate bonus\\n        //bit 16-23: Decimals\\n        //bit 24: Reserve is active\\n        //bit 25: reserve is frozen\\n        //bit 26: borrowing is enabled\\n        //bit 27-30: reserved\\n        //bit 31-46: reserve factor\\n        //bit 47-62: lock up period in seconds\\n        uint256 data;\\n    }\\n\\n    struct FungibleTokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    struct BorrowData {\\n        uint256 drawDownNumber;\\n        uint256 totalDebt;\\n        mapping(uint256 => DrawDown) drawDowns;\\n        mapping(uint256 => Repayment) repayments;\\n    }\\n\\n    struct DrawDown {\\n        uint256 amount;\\n        uint256 tenure;\\n        uint40 timestamp;\\n        uint256 borrowRate;\\n        Repayment repayment;\\n    }\\n\\n    struct Repayment {\\n        uint256 totalPaid;\\n        // tenure => amount\\n        // todo wrapper this in the future\\n        mapping(uint256 => uint256) repayment;\\n    }\\n\\n    // tmp struct to avoid stack too long\\n\\n    struct DepositAndDebt {\\n        uint256 juniorDepositAmount;\\n        uint256 seniorDepositAmount;\\n        uint256 totalDebt;\\n    }\\n\\n    struct HealthRiskParameter {\\n        uint256 securityDeposit;\\n        uint256 currentBorrowRate;\\n        uint256 compoundedDebt;\\n        uint256 grossAssetValue;\\n        uint256 aggregateOptimalRepaymentRate;\\n        uint256 aggregateActualRepaymentRate;\\n    }\\n}\\n\",\"keccak256\":\"0x2475d0cacc4f46847d0f7c21081a6957410f0bfe47a4c4e919d97f4b8fd1cb73\",\"license\":\"GPL-3.0\"},\"contracts/mock/Tus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\\n\\ncontract Tus is ERC20 {\\n    constructor(uint256 initialSupply) ERC20('Treasure Under Sea', 'TUS') {\\n        _mint(msg.sender, initialSupply);\\n    }\\n}\\n\",\"keccak256\":\"0xf7feeef40f2043950c6c47b1ae66050770132148eb6c9bd7cff72f48b98f7b00\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/BaseERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Context.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract BaseERC20 is Context, IERC20, IERC20Metadata {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint256 internal _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 _decimals\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return The balance of the token\\n     **/\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            'ERC20: transfer amount exceeds allowance'\\n        );\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            'ERC20: decreased allowance below zero'\\n        );\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), 'ERC20: transfer from the zero address');\\n        require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            'ERC20: transfer amount exceeds balance'\\n        );\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: mint to the zero address');\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply.add(amount);\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        _balances[account] = oldAccountBalance.add(amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: burn from the zero address');\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply.sub(amount);\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        _balances[account] = oldAccountBalance.sub(\\n            amount,\\n            'ERC20: burn amount exceeds balance'\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), 'ERC20: approve from the zero address');\\n        require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _setName(string memory newName) internal {\\n        _name = newName;\\n    }\\n\\n    function _setSymbol(string memory newSymbol) internal {\\n        _symbol = newSymbol;\\n    }\\n\\n    function _setDecimals(uint8 newDecimals) internal {\\n        _decimals = newDecimals;\\n    }\\n}\\n\",\"keccak256\":\"0x2e6345cb5f601dcd27e5792f9363032f8b789f372edfa3caa4a4fdd83916f960\",\"license\":\"MIT\"},\"contracts/tokenization/DebtTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './BaseERC20.sol';\\n\\nabstract contract DebtTokenBase is\\n    BaseERC20('DEBTTOKEN_IMPL', 'DEBTTOKEN_IMPL', 0)\\n{\\n    mapping(address => mapping(address => uint256)) internal _borrowAllowances;\\n\\n    /**\\n     * @dev Being non transferrable, the debt token does not implement any of the\\n     * standard ERC20 functions for transfer and allowance.\\n     **/\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        recipient;\\n        amount;\\n        revert('TRANSFER_NOT_SUPPORTED');\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        owner;\\n        spender;\\n        revert('ALLOWANCE_NOT_SUPPORTED');\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        spender;\\n        amount;\\n        revert('APPROVAL_NOT_SUPPORTED');\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        sender;\\n        recipient;\\n        amount;\\n        revert('TRANSFER_NOT_SUPPORTED');\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        spender;\\n        addedValue;\\n        revert('ALLOWANCE_NOT_SUPPORTED');\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        spender;\\n        subtractedValue;\\n        revert('ALLOWANCE_NOT_SUPPORTED');\\n    }\\n\\n    function _getUnderlyingAssetAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x33907655bfd1387f4637553f76e0d7ce773c4d59cd5e6e6ab560ba55da3d1207\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/IInitializableDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title IDepositToken\\n * @notice Interface for the initialize function on JuniorDepositToken and SeniorDepositToken\\n **/\\nabstract contract IInitializableDepositToken {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    uint256 private lastInitializedRevision = 0;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        uint256 revision = getRevision();\\n        require(\\n            initializing ||\\n                isConstructor() ||\\n                revision > lastInitializedRevision,\\n            'Contract instance has already been initialized'\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            lastInitializedRevision = revision;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the revision number of the contract\\n     * Needs to be defined in the inherited class as a constant.\\n     **/\\n    function getRevision() internal pure virtual returns (uint256);\\n\\n    /**\\n     * @dev Emitted when an depositToken is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param liquidityManagerProxy The address of the associated liquidity manager proxy\\n     * @param tokenDecimals the decimals of the underlying\\n     * @param tokenName the name of the depositToken\\n     * @param tokenSymbol the symbol of the depositToken\\n     * @param params A set of encoded parameters for additional initialization\\n     **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed liquidityManagerProxy,\\n        uint8 tokenDecimals,\\n        string tokenName,\\n        string tokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Mint(address indexed from, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Emitted after aTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param target The address that will receive the underlying\\n     * @param value The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Burn(\\n        address indexed from,\\n        address indexed target,\\n        uint256 value,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Returns true if the contract has been initialized\\n     **/\\n    function isInitialized() public view returns (bool) {\\n        return !initializing && getRevision() <= lastInitializedRevision;\\n    }\\n\\n    /**\\n     * @dev Returns true if and only if the function is running in the constructor\\n     **/\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x37cb1771c13a7a961443eb9d3ef2444b356e13b3d1c27f14d19bbe82e412dc46\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/JuniorDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../contracts/component/liquiditymanager/LiquidityManagerProxy.sol';\\nimport '../libraries/helpers/Errors.sol';\\nimport './IInitializableDepositToken.sol';\\nimport '../interfaces/ILiquidityManagerProxy.sol';\\nimport './BaseERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Context.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../libraries/logic/ReserveLogic.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\ncontract JuniorDepositToken is\\n    Context,\\n    IInitializableDepositToken,\\n    BaseERC20('JuniorDepositToken_IMPL', 'JuniorDepositToken_IMPL', 0)\\n{\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    AddressResolver internal addressResolver;\\n    address internal underlyingAsset;\\n\\n    uint256 public constant JUNIOR_DEPOSIT_TOKEN_REVISION = 0x1;\\n\\n    modifier onlyLiquidityManagerProxy() {\\n        require(\\n            _msgSender() == addressResolver.getAddress('liquidityManager'),\\n            Errors.CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the JuniorDepositToken\\n     * @param _addressResolver The address of the AddressResolver\\n     * @param _underlyingAsset The address of the underlying asset of this JuniorDepositToken\\n     * @param _juniorDepositTokenDecimals The decimals of the JuniorDepositToken, same as the underlying asset's\\n     * @param _juniorDepositTokenName The name of the JuniorDepositToken\\n     * @param _juniorDepositTokenSymbol The symbol of the JuniorDepositToken\\n     **/\\n    function initialize(\\n        AddressResolver _addressResolver,\\n        address _underlyingAsset,\\n        uint8 _juniorDepositTokenDecimals,\\n        string calldata _juniorDepositTokenName,\\n        string calldata _juniorDepositTokenSymbol,\\n        bytes calldata _params\\n    ) external initializer {\\n        _setName(_juniorDepositTokenName);\\n        _setSymbol(_juniorDepositTokenSymbol);\\n        _setDecimals(_juniorDepositTokenDecimals);\\n\\n        addressResolver = _addressResolver;\\n        underlyingAsset = _underlyingAsset;\\n\\n        emit Initialized(\\n            _underlyingAsset,\\n            addressResolver.getAddress('liquidityManager'),\\n            _juniorDepositTokenDecimals,\\n            _juniorDepositTokenName,\\n            _juniorDepositTokenSymbol,\\n            _params\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `_amount` junior deposit token to `_user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The new liquidity index of the reserve\\n     * @return `true` if the previous balance of the user was 0\\n     **/\\n    function mint(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external onlyLiquidityManagerProxy returns (bool) {\\n        uint256 previousBalance = super.balanceOf(_user);\\n        uint256 amountScaled = _amount.rayDiv(_index);\\n        require(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\\n        _mint(_user, amountScaled);\\n        emit Transfer(address(0), _user, _amount);\\n        emit Mint(_user, _amount, _index);\\n\\n        return previousBalance == 0;\\n    }\\n\\n    /**\\n     * @dev Burns JuniorDepositToken from `_user` and sends the equivalent amount of underlying to `_receiverOfUnderlying`\\n     * - Only callable by the LiquidityManagerProxy, as extra state updates there need to the managed\\n     * @param _user The owner of the JuniorDepositToken, getting them burned\\n     * @param _receiverOfUnderlying The address that will receive the underlying\\n     * @param _amount The amount being burned\\n     * @param _index The new liquidity index of the reserve\\n     **/\\n    function burn(\\n        address _user,\\n        address _receiverOfUnderlying,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external onlyLiquidityManagerProxy {\\n        uint256 amountScaled = _amount.rayDiv(_index);\\n        require(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\\n        _burn(_user, amountScaled);\\n        IERC20(underlyingAsset).safeTransfer(_receiverOfUnderlying, _amount);\\n        emit Transfer(_user, address(0), _amount);\\n        emit Burn(_user, _receiverOfUnderlying, _amount, _index);\\n    }\\n\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the updated\\n     * stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param _user The user whose balance is calculated\\n     * @return THe scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address _user) external view returns (uint256) {\\n        return super.balanceOf(_user);\\n    }\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param _user The user whose balance is calculated\\n     * @return The balance of the user\\n     **/\\n    function balanceOf(address _user)\\n        public\\n        view\\n        override(BaseERC20)\\n        returns (uint256)\\n    {\\n        ILiquidityManagerProxy liquidityManagerProxy = getLiquidityManagerProxy();\\n        return\\n            super.balanceOf(_user).rayMul(\\n                liquidityManagerProxy.getReserveNormalizedIncome(\\n                    underlyingAsset,\\n                    ReserveLogic.Tranche.JUNIOR\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev calculates the total supply of the specific junior deposit token\\n     * since the balance of every single user increases over time, the totally supply does that too.\\n     * @return the current total supply\\n     **/\\n    function totalSupply() public view override(BaseERC20) returns (uint256) {\\n        uint256 currentSupplyScaled = super.totalSupply();\\n        if (currentSupplyScaled == 0) {\\n            return 0;\\n        }\\n        ILiquidityManagerProxy liquidityManagerProxy = getLiquidityManagerProxy();\\n\\n        return\\n            currentSupplyScaled.rayMul(\\n                liquidityManagerProxy.getLiquidityRate(\\n                    underlyingAsset,\\n                    ReserveLogic.Tranche.JUNIOR\\n                )\\n            );\\n    }\\n\\n    function scaledTotalSupply() public view returns (uint256) {\\n        return super.totalSupply();\\n    }\\n\\n    /**\\n     * @dev Return instance of ILiquidityManagerProxy\\n     **/\\n    function getLiquidityManagerProxy()\\n        internal\\n        view\\n        returns (ILiquidityManagerProxy)\\n    {\\n        address liquidityManagerProxyAddress = addressResolver.getAddress(\\n            'liquidityManagerProxy'\\n        );\\n        return ILiquidityManagerProxy(liquidityManagerProxyAddress);\\n    }\\n\\n    function getRevision() internal pure virtual override returns (uint256) {\\n        return JUNIOR_DEPOSIT_TOKEN_REVISION;\\n    }\\n}\\n\",\"keccak256\":\"0x5d5bb64bebcfc2855ed41decdeb24ed04c82c850fbc39ba1d8aad6e4d0c28824\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/SecurityDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/access/AccessControl.sol';\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../component/vault/Vault.sol';\\n\\ncontract SecurityDepositToken is ERC20, AccessControl {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant VAULT = keccak256('VAULT');\\n\\n    address public underlyingAsset;\\n    uint8 public underlyingAssetDecimals;\\n    Vault public vault;\\n\\n    event MintOnDeposit(address indexed account, uint256 amount);\\n\\n    event BurnOnRedeem(address indexed account, uint256 amount);\\n\\n    constructor(\\n        address _underlyingAsset,\\n        uint8 _underlyingAssetDecimals,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        _setupRole(VAULT, msg.sender);\\n        vault = Vault(msg.sender);\\n        underlyingAsset = _underlyingAsset;\\n        underlyingAssetDecimals = _underlyingAssetDecimals;\\n    }\\n\\n    function mintOnDeposit(address account, uint256 amount)\\n        external\\n        onlyRole(VAULT)\\n    {\\n        _mint(account, amount);\\n        emit MintOnDeposit(account, amount);\\n    }\\n\\n    function burnOnRedeem(address account, uint256 amount)\\n        external\\n        onlyRole(VAULT)\\n    {\\n        _burn(account, amount);\\n        emit BurnOnRedeem(account, amount);\\n    }\\n\\n    function underlyingBalanceOf(address _sponsor)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return vault.underlyingBalance(_sponsor, underlyingAsset);\\n    }\\n}\\n\",\"keccak256\":\"0x6498a01f94d3f02edb15a6184ac2433afa04d2f4d06ac3cdc9e1120102af3451\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/SeniorDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../contracts/component/liquiditymanager/LiquidityManagerProxy.sol';\\nimport '../libraries/helpers/Errors.sol';\\nimport './IInitializableDepositToken.sol';\\nimport '../interfaces/ILiquidityManagerProxy.sol';\\nimport './BaseERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Context.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../libraries/logic/ReserveLogic.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\ncontract SeniorDepositToken is\\n    Context,\\n    IInitializableDepositToken,\\n    BaseERC20('SeniorDepositToken_IMPL', 'SeniorDepositToken_IMPL', 0)\\n{\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    AddressResolver internal addressResolver;\\n    address internal underlyingAsset;\\n\\n    uint256 public constant SENIOR_DEPOSIT_TOKEN_REVISION = 0x1;\\n\\n    modifier onlyLiquidityManagerProxy() {\\n        require(\\n            _msgSender() == addressResolver.getAddress('liquidityManager'),\\n            Errors.CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the JuniorDepositToken\\n     * @param _addressResolver The address of the AddressResolver\\n     * @param _underlyingAsset The address of the underlying asset of this SeniorDepositToken\\n     * @param _seniorDepositTokenDecimals The decimals of the SeniorDepositToken, same as the underlying asset's\\n     * @param _seniorDepositTokenName The name of the SeniorDepositToken\\n     * @param _seniorDepositTokenSymbol The symbol of the SeniorDepositToken\\n     **/\\n    function initialize(\\n        AddressResolver _addressResolver,\\n        address _underlyingAsset,\\n        uint8 _seniorDepositTokenDecimals,\\n        string calldata _seniorDepositTokenName,\\n        string calldata _seniorDepositTokenSymbol,\\n        bytes calldata _params\\n    ) external initializer {\\n        _setName(_seniorDepositTokenName);\\n        _setSymbol(_seniorDepositTokenSymbol);\\n        _setDecimals(_seniorDepositTokenDecimals);\\n\\n        addressResolver = _addressResolver;\\n        underlyingAsset = _underlyingAsset;\\n\\n        emit Initialized(\\n            _underlyingAsset,\\n            addressResolver.getAddress('liquidityManager'),\\n            _seniorDepositTokenDecimals,\\n            _seniorDepositTokenName,\\n            _seniorDepositTokenSymbol,\\n            _params\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `_amount` junior deposit token to `_user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The new liquidity index of the reserve\\n     * @return `true` if the previous balance of the user was 0\\n     **/\\n    function mint(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external onlyLiquidityManagerProxy returns (bool) {\\n        uint256 previousBalance = super.balanceOf(_user);\\n        uint256 amountScaled = _amount.rayDiv(_index);\\n        require(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\\n        _mint(_user, amountScaled);\\n        emit Transfer(address(0), _user, _amount);\\n        emit Mint(_user, _amount, _index);\\n\\n        return previousBalance == 0;\\n    }\\n\\n    /**\\n     * @dev Burns JuniorDepositToken from `_user` and sends the equivalent amount of underlying to `_receiverOfUnderlying`\\n     * - Only callable by the LiquidityManagerProxy, as extra state updates there need to the managed\\n     * @param _user The owner of the JuniorDepositToken, getting them burned\\n     * @param _receiverOfUnderlying The address that will receive the underlying\\n     * @param _amount The amount being burned\\n     * @param _index The new liquidity index of the reserve\\n     **/\\n    function burn(\\n        address _user,\\n        address _receiverOfUnderlying,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external onlyLiquidityManagerProxy {\\n        uint256 amountScaled = _amount.rayDiv(_index);\\n        require(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\\n        _burn(_user, amountScaled);\\n        IERC20(underlyingAsset).safeTransfer(_receiverOfUnderlying, _amount);\\n        emit Transfer(_user, address(0), _amount);\\n        emit Burn(_user, _receiverOfUnderlying, _amount, _index);\\n    }\\n\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the updated\\n     * stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param _user The user whose balance is calculated\\n     * @return THe scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address _user) external view returns (uint256) {\\n        return super.balanceOf(_user);\\n    }\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param _user The user whose balance is calculated\\n     * @return The balance of the user\\n     **/\\n    function balanceOf(address _user)\\n        public\\n        view\\n        override(BaseERC20)\\n        returns (uint256)\\n    {\\n        ILiquidityManagerProxy liquidityManagerProxy = getLiquidityManagerProxy();\\n        return\\n            super.balanceOf(_user).rayMul(\\n                liquidityManagerProxy.getReserveNormalizedIncome(\\n                    underlyingAsset,\\n                    ReserveLogic.Tranche.SENIOR\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev calculates the total supply of the specific junior deposit token\\n     * since the balance of every single user increases over time, the totally supply does that too.\\n     * @return the current total supply\\n     **/\\n    function totalSupply() public view override(BaseERC20) returns (uint256) {\\n        uint256 currentSupplyScaled = super.totalSupply();\\n        if (currentSupplyScaled == 0) {\\n            return 0;\\n        }\\n        ILiquidityManagerProxy liquidityManagerProxy = getLiquidityManagerProxy();\\n\\n        return\\n            currentSupplyScaled.rayMul(\\n                liquidityManagerProxy.getLiquidityRate(\\n                    underlyingAsset,\\n                    ReserveLogic.Tranche.SENIOR\\n                )\\n            );\\n    }\\n\\n    function scaledTotalSupply() public view returns (uint256) {\\n        return super.totalSupply();\\n    }\\n\\n    /**\\n     * @dev Return instance of ILiquidityManagerProxy\\n     **/\\n    function getLiquidityManagerProxy()\\n        internal\\n        view\\n        returns (ILiquidityManagerProxy)\\n    {\\n        address liquidityManagerProxyAddress = addressResolver.getAddress(\\n            'liquidityManagerProxy'\\n        );\\n        return ILiquidityManagerProxy(liquidityManagerProxyAddress);\\n    }\\n\\n    function getRevision() internal pure virtual override returns (uint256) {\\n        return SENIOR_DEPOSIT_TOKEN_REVISION;\\n    }\\n}\\n\",\"keccak256\":\"0xb954e46eadf1174c6a5c3d6b29dee11416d3227f5bb3cc73deafd46471d149c4\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/StableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../libraries/math/MathUtils.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport './DebtTokenBase.sol';\\nimport '../interfaces/IDebtToken.sol';\\nimport '../libraries/types/DataTypes.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeCast.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Context.sol';\\nimport '../libraries/helpers/Errors.sol';\\nimport '../interfaces/IInitializableDebtToken.sol';\\n\\ncontract StableDebtToken is\\n    Context,\\n    IInitializableDebtToken,\\n    IStableDebtToken,\\n    DebtTokenBase\\n{\\n    using WadRayMath for uint256;\\n    using SafeCast for uint256;\\n\\n    modifier onlyLoanManager() {\\n        require(\\n            _msgSender() == addressResolver.getAddress('loanManager'),\\n            Errors.CT_CALLER_MUST_BE_LOAN_MANAGER\\n        );\\n        _;\\n    }\\n\\n    uint256 public constant DEBT_TOKEN_REVISION = 0x1;\\n    uint256 public constant SECONDS_PER_DAY = 1 days;\\n\\n    uint256 internal _avgStableRate;\\n    mapping(address => uint256) internal _usersStableRate;\\n    uint40 internal _totalSupplyTimestamp;\\n    mapping(address => DataTypes.BorrowData) internal _borrowData;\\n\\n    AddressResolver internal addressResolver;\\n    address internal underlyingAsset;\\n\\n    function initialize(\\n        address _underlyingAsset,\\n        uint8 _debtTokenDecimals,\\n        string memory _debtTokenName,\\n        string memory _debtTokenSymbol,\\n        bytes calldata _params\\n    ) external initializer {\\n        _setName(_debtTokenName);\\n        _setSymbol(_debtTokenSymbol);\\n        _setDecimals(_debtTokenDecimals);\\n\\n        underlyingAsset = _underlyingAsset;\\n\\n        emit Initialized(\\n            underlyingAsset,\\n            _debtTokenDecimals,\\n            _debtTokenName,\\n            _debtTokenSymbol,\\n            _params\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the average stable rate\\n     **/\\n    function getAverageStableRate() external view override returns (uint256) {\\n        return _avgStableRate;\\n    }\\n\\n    /**\\n     * @dev Calculate the current user debt principal\\n     **/\\n    function principalOf(address _account) public view returns (uint256) {\\n        DataTypes.BorrowData storage borrowData = _borrowData[_account];\\n        uint256 principal;\\n        for (uint256 i = 0; i < borrowData.drawDownNumber; i++) {\\n            principal += borrowData.drawDowns[i].amount;\\n        }\\n\\n        return principal;\\n    }\\n\\n    /**\\n     * @dev Calculates the current user debt balance\\n     * @return The accumulated debt of the user\\n     **/\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        DataTypes.BorrowData storage borrowData = _borrowData[_account];\\n        uint256 cumulatedBalance;\\n        for (uint256 i = 0; i < borrowData.drawDownNumber; i++) {\\n            uint256 stableRate = borrowData.drawDowns[i].borrowRate;\\n            uint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(\\n                stableRate,\\n                borrowData.drawDowns[i].timestamp\\n            );\\n            cumulatedBalance += borrowData.drawDowns[i].amount.rayMul(\\n                cumulatedInterest\\n            );\\n        }\\n        return cumulatedBalance;\\n    }\\n\\n    function _mint(address _account) internal {\\n        DataTypes.BorrowData storage borrowData = _borrowData[_account];\\n        for (uint256 i = 0; i < borrowData.drawDownNumber; i++) {\\n            DataTypes.DrawDown storage drawDown = borrowData.drawDowns[i];\\n            uint256 stableRate = drawDown.borrowRate;\\n            uint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(\\n                stableRate,\\n                drawDown.timestamp\\n            );\\n            drawDown.amount = drawDown.amount.rayMul(cumulatedInterest);\\n            drawDown.timestamp = uint40(block.timestamp);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the the total supply and the average stable rate\\n     **/\\n    function getTotalSupplyAndAvgRate()\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        uint256 avgRate = _avgStableRate;\\n        return (_calcTotalSupply(avgRate), avgRate);\\n    }\\n\\n    /**\\n     * @dev Calculates the total supply\\n     * @param avgRate The average rate at which the total supply increases\\n     * @return The debt balance of the user since the last burn/mint action\\n     **/\\n    function _calcTotalSupply(uint256 avgRate)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 principalSupply = super.totalSupply();\\n\\n        if (principalSupply == 0) {\\n            return 0;\\n        }\\n\\n        uint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(\\n            avgRate,\\n            _totalSupplyTimestamp\\n        );\\n\\n        return principalSupply.rayMul(cumulatedInterest);\\n    }\\n\\n    function _getUnderlyingAssetAddress()\\n        internal\\n        view\\n        override\\n        returns (address)\\n    {\\n        return underlyingAsset;\\n    }\\n\\n    function getRevision() internal pure virtual override returns (uint256) {\\n        return DEBT_TOKEN_REVISION;\\n    }\\n\\n    function getAggregateOptimalRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        DataTypes.BorrowData storage bd = _borrowData[_user];\\n        uint256 stableRate = _usersStableRate[_user];\\n        uint256 aggregateOptimalRepaymentRate;\\n        for (uint256 i = 0; i < bd.drawDownNumber; i++) {\\n            DataTypes.DrawDown storage drawDone = bd.drawDowns[i];\\n            uint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(\\n                stableRate,\\n                drawDone.timestamp\\n            );\\n            uint256 cumulatedBalance = drawDone.amount.rayMul(\\n                cumulatedInterest\\n            );\\n            aggregateOptimalRepaymentRate += cumulatedBalance.rayDiv(\\n                drawDone.tenure.rayMul(SECONDS_PER_DAY * WadRayMath.ray())\\n            );\\n        }\\n        return aggregateOptimalRepaymentRate;\\n    }\\n\\n    function getAggregateActualRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        DataTypes.BorrowData storage bd = _borrowData[_user];\\n        uint256 aggregateActualRepayment;\\n        for (uint256 i = 0; i < bd.drawDownNumber; i++) {\\n            DataTypes.DrawDown storage drawDone = bd.drawDowns[i];\\n            DataTypes.Repayment storage repayment = drawDone.repayment;\\n            if (\\n                repayment.totalPaid != 0 && block.timestamp > drawDone.timestamp\\n            ) {\\n                aggregateActualRepayment += repayment.totalPaid.rayDiv(\\n                    (block.timestamp - drawDone.timestamp) * WadRayMath.ray()\\n                );\\n            }\\n        }\\n        return aggregateActualRepayment;\\n    }\\n\\n    struct MintLocalVars {\\n        uint256 previousSupply;\\n        uint256 nextSupply;\\n        uint256 amountInRay;\\n        uint256 currentStableRate;\\n        uint256 nextStableRate;\\n        uint256 currentAvgStableRate;\\n    }\\n\\n    function mint(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _tenure,\\n        uint256 _rate\\n    ) external override onlyLoanManager {\\n        MintLocalVars memory vars;\\n\\n        (\\n            ,\\n            uint256 currentBalance,\\n            uint256 balanceIncrease\\n        ) = _calculateBalanceIncrease(_user);\\n\\n        vars.previousSupply = totalSupply();\\n        vars.currentAvgStableRate = _avgStableRate;\\n        vars.nextSupply = _totalSupply = vars.previousSupply + _amount;\\n\\n        vars.amountInRay = _amount.wadToRay();\\n        vars.currentStableRate = _usersStableRate[_user];\\n\\n        DataTypes.BorrowData storage bd = _borrowData[_user];\\n        uint256 currentDrawDownNumber = bd.drawDownNumber;\\n        bd.drawDowns[currentDrawDownNumber].amount = _amount;\\n        bd.drawDowns[currentDrawDownNumber].tenure = _tenure;\\n        bd.drawDowns[currentDrawDownNumber].borrowRate = _rate;\\n        bd.drawDowns[currentDrawDownNumber].timestamp = uint40(block.timestamp);\\n        bd.drawDownNumber++;\\n\\n        vars.nextStableRate = (vars.currentStableRate.rayMul(\\n            currentBalance.wadToRay()\\n        ) + vars.amountInRay.rayMul(_rate)).rayDiv(\\n                (currentBalance + _amount).wadToRay()\\n            );\\n\\n        _usersStableRate[_user] = vars.nextStableRate.toUint128();\\n\\n        _totalSupplyTimestamp = uint40(block.timestamp);\\n\\n        // Calculates the updated average stable rate\\n        vars.currentAvgStableRate = _avgStableRate = (\\n            (vars.currentAvgStableRate.rayMul(vars.previousSupply.wadToRay()) +\\n                _rate.rayMul(vars.amountInRay)).rayDiv(\\n                    vars.nextSupply.wadToRay()\\n                )\\n        ).toUint128();\\n        _mint(_user);\\n        emit Mint(\\n            _user,\\n            _amount,\\n            currentBalance,\\n            balanceIncrease,\\n            vars.nextStableRate,\\n            vars.currentAvgStableRate,\\n            vars.nextSupply\\n        );\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _calcTotalSupply(_avgStableRate);\\n    }\\n\\n    function getTotalSupplyLastUpdated() external view returns (uint40) {\\n        return _totalSupplyTimestamp;\\n    }\\n\\n    function underlyingAssetAddress() external view returns (address) {\\n        return underlyingAsset;\\n    }\\n\\n    /**\\n     * @dev Calculates the increase in balance since the last user interaction\\n     * @param _user The address of the user for which the\\n     * @return The previous principal balance\\n     * @return The new principal balance\\n     * @return The balance increase\\n     **/\\n    function _calculateBalanceIncrease(address _user)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 principal = principalOf(_user);\\n        if (principal == 0) {\\n            return (0, 0, 0);\\n        }\\n\\n        uint256 newPrincipalBalance = balanceOf(_user);\\n        return (\\n            principal,\\n            newPrincipalBalance,\\n            newPrincipalBalance - principal\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x995a699c716368a1e60b7543b09c5d3ef154b373d5536fb7ae0bfab434f9f7a5\",\"license\":\"GPL-3.0\"},\"openzeppelin-solidity/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200601e3803806200601e83398181016040528101906200003791906200045b565b818181336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000188576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017f9062000503565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ffc80377ca9c49cc11ae6982f390a42db976d5530af7c43889264b13fbbd7c57e81604051620001fa919062000590565b60405180910390a15080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620002566200032f60201b60201c565b600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319ab453c826040518263ffffffff1660e01b8152600401620002f39190620005be565b600060405180830381600087803b1580156200030e57600080fd5b505af115801562000323573d6000803e3d6000fd5b50505050505062000648565b600080336040516020016200034591906200062b565b60405160208183030381529060405280519060200120905060006040518060200162000371906200039e565b6020820181038252601f19601f8201166040525090506000828251602084016000f5905080935050505090565b6125208062003afe83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003de82620003b1565b9050919050565b620003f081620003d1565b8114620003fc57600080fd5b50565b6000815190506200041081620003e5565b92915050565b60006200042382620003b1565b9050919050565b620004358162000416565b81146200044157600080fd5b50565b60008151905062000455816200042a565b92915050565b60008060408385031215620004755762000474620003ac565b5b60006200048585828601620003ff565b9250506020620004988582860162000444565b9150509250929050565b600082825260208201905092915050565b7f4f776e6572206d75737420626520736574000000000000000000000000000000600082015250565b6000620004eb601183620004a2565b9150620004f882620004b3565b602082019050919050565b600060208201905081810360008301526200051e81620004dc565b9050919050565b6000819050919050565b6000620005506200054a6200054484620003b1565b62000525565b620003b1565b9050919050565b600062000564826200052f565b9050919050565b6000620005788262000557565b9050919050565b6200058a816200056b565b82525050565b6000602082019050620005a760008301846200057f565b92915050565b620005b88162000416565b82525050565b6000602082019050620005d56000830184620005ad565b92915050565b60008160601b9050919050565b6000620005f582620005db565b9050919050565b60006200060982620005e8565b9050919050565b620006256200061f8262000416565b620005fc565b82525050565b600062000639828462000610565b60148201915081905092915050565b6134a680620006586000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806397107d6d116100de578063d67bdd2511610097578063f2fde38b11610071578063f2fde38b14610477578063f448e14014610493578063f7b188a5146104b1578063f8204149146104bb5761018e565b8063d67bdd251461041d578063e30c39781461043b578063ec556889146104595761018e565b806397107d6d1461034b5780639cc67a0f14610367578063b544639a14610397578063bc67f832146103b5578063c44b11f7146103d1578063c907e29a146104015761018e565b806366d4c4131161014b57806381f781511161012557806381f78151146102e95780638456cb59146103055780638da5cb5b1461030f5780638f32d59b1461032d5761018e565b806366d4c41314610269578063776f689114610287578063817ad5d3146102b75761018e565b806303d6fa95146101935780630d458395146101c3578063122fd48a146101e1578063284592b2146101ff57806335ea6a751461022f5780634e71e0c81461025f575b600080fd5b6101ad60048036038101906101a89190611f7d565b6104d7565b6040516101ba9190611fc3565b60405180910390f35b6101cb610570565b6040516101d8919061202f565b60405180910390f35b6101e9610608565b6040516101f69190612059565b60405180910390f35b61021960048036038101906102149190612099565b610617565b6040516102269190611fc3565b60405180910390f35b61024960048036038101906102449190611f7d565b610734565b6040516102569190612283565b60405180910390f35b610267610855565b005b6102716109f1565b60405161027e919061234e565b60405180910390f35b6102a1600480360381019061029c9190612099565b610a82565b6040516102ae9190611fc3565b60405180910390f35b6102d160048036038101906102cc9190611f7d565b610b9f565b6040516102e09392919061238b565b60405180910390f35b61030360048036038101906102fe9190611f7d565b610c41565b005b61030d610d47565b005b610317610dc0565b6040516103249190612059565b60405180910390f35b610335610de4565b60405161034291906123c2565b60405180910390f35b6103656004803603810190610360919061241b565b610e3b565b005b610381600480360381019061037c9190611f7d565b610efd565b60405161038e9190611fc3565b60405180910390f35b61039f610f96565b6040516103ac91906124a7565b60405180910390f35b6103cf60048036038101906103ca9190611f7d565b610fbc565b005b6103eb60048036038101906103e69190611f7d565b611008565b6040516103f891906124de565b60405180910390f35b61041b60048036038101906104169190612525565b611128565b005b6104256114c5565b6040516104329190612059565b60405180910390f35b6104436114eb565b6040516104509190612059565b60405180910390f35b610461611511565b60405161046e91906125d3565b60405180910390f35b610491600480360381019061048c9190611f7d565b611537565b005b61049b6115c2565b6040516104a8919061260f565b60405180910390f35b6104b96115e8565b005b6104d560048036038101906104d0919061262a565b611661565b005b60006104e1611888565b73ffffffffffffffffffffffffffffffffffffffff166303d6fa95836040518263ffffffff1660e01b81526004016105199190612059565b60206040518083038186803b15801561053157600080fd5b505afa158015610545573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056991906126f5565b9050919050565b610578611dd1565b6000610582611888565b90508073ffffffffffffffffffffffffffffffffffffffff16630d4583956040518163ffffffff1660e01b815260040160606040518083038186803b1580156105ca57600080fd5b505afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106029190612817565b91505090565b6000610612611a56565b905090565b600061062283611a80565b6040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525090610699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069091906128cc565b60405180910390fd5b506106a2611888565b73ffffffffffffffffffffffffffffffffffffffff1663284592b284846040518363ffffffff1660e01b81526004016106dc929190612965565b60206040518083038186803b1580156106f457600080fd5b505afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c91906126f5565b905092915050565b61073c611df2565b61074582611a80565b6040518060400160405280600281526020017f3630000000000000000000000000000000000000000000000000000000000000815250906107bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b391906128cc565b60405180910390fd5b506107c5611888565b73ffffffffffffffffffffffffffffffffffffffff166335ea6a75836040518263ffffffff1660e01b81526004016107fd9190612059565b6102206040518083038186803b15801561081657600080fd5b505afa15801561082a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084e9190612b9b565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108af57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60606109fb611888565b73ffffffffffffffffffffffffffffffffffffffff166366d4c4136040518163ffffffff1660e01b815260040160006040518083038186803b158015610a4057600080fd5b505afa158015610a54573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a7d9190612c96565b905090565b6000610a8d83611a80565b6040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525090610b04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afb91906128cc565b60405180910390fd5b50610b0d611888565b73ffffffffffffffffffffffffffffffffffffffff1663776f689184846040518363ffffffff1660e01b8152600401610b47929190612965565b60206040518083038186803b158015610b5f57600080fd5b505afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9791906126f5565b905092915050565b6000806000610bac611888565b73ffffffffffffffffffffffffffffffffffffffff1663817ad5d3856040518263ffffffff1660e01b8152600401610be49190612059565b60606040518083038186803b158015610bfc57600080fd5b505afa158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190612d0b565b9250925092509193909250565b610c49611aa3565b610c51611b35565b610c5a81611a80565b6040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525090610cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc891906128cc565b60405180910390fd5b50610cda611888565b73ffffffffffffffffffffffffffffffffffffffff166381f78151826040518263ffffffff1660e01b8152600401610d129190612059565b600060405180830381600087803b158015610d2c57600080fd5b505af1158015610d40573d6000803e3d6000fd5b5050505050565b610d4f611aa3565b610d57611b35565b610d5f611888565b73ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610da657600080fd5b505af1158015610dba573d6000803e3d6000fd5b50505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b610e43610de4565b610e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7990612daa565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ffc80377ca9c49cc11ae6982f390a42db976d5530af7c43889264b13fbbd7c57e81604051610ef29190612deb565b60405180910390a150565b6000610f07611888565b73ffffffffffffffffffffffffffffffffffffffff16639cc67a0f836040518263ffffffff1660e01b8152600401610f3f9190612059565b60206040518083038186803b158015610f5757600080fd5b505afa158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f91906126f5565b9050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610fc4611aa3565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611010611ef8565b61101982611a80565b6040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525090611090576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108791906128cc565b60405180910390fd5b50611099611888565b73ffffffffffffffffffffffffffffffffffffffff1663c44b11f7836040518263ffffffff1660e01b81526004016110d19190612059565b60206040518083038186803b1580156110e957600080fd5b505afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111219190612e06565b9050919050565b611130611aa3565b600061113a611888565b9050600061114787610734565b90508173ffffffffffffffffffffffffffffffffffffffff1663c8caf6808888886040518463ffffffff1660e01b815260040161118693929190612e33565b600060405180830381600087803b1580156111a057600080fd5b505af11580156111b4573d6000803e3d6000fd5b505050508560018111156111cb576111ca6128ee565b5b600060018111156111df576111de6128ee565b5b14156112875780610180015173ffffffffffffffffffffffffffffffffffffffff1663156e29f684876112118b6104d7565b6040518463ffffffff1660e01b815260040161122f93929190612e6a565b602060405180830381600087803b15801561124957600080fd5b505af115801561125d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112819190612ea1565b50611325565b806101a0015173ffffffffffffffffffffffffffffffffffffffff1663156e29f684876112b38b610efd565b6040518463ffffffff1660e01b81526004016112d193929190612e6a565b602060405180830381600087803b1580156112eb57600080fd5b505af11580156112ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113239190612ea1565b505b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638340f5498886886040518463ffffffff1660e01b815260040161138493929190612ece565b600060405180830381600087803b15801561139e57600080fd5b505af11580156113b2573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663907dff978786868960405160200161140b9493929190612f05565b60405160208183030381529060405260027fe0ad63c2e86a8ebf7f823e085c5359b98f68acaa20bcebbf2ca47c5ec7be00df8b60405160200161144e9190612f92565b60405160208183030381529060405261146690612ff4565b6000806040518763ffffffff1660e01b815260040161148a96959493929190613137565b600060405180830381600087803b1580156114a457600080fd5b505af11580156114b8573d6000803e3d6000fd5b5050505050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61153f610de4565b61157e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157590612daa565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6115f0611aa3565b6115f8611b35565b611600611888565b73ffffffffffffffffffffffffffffffffffffffff1663f7b188a56040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561164757600080fd5b505af115801561165b573d6000803e3d6000fd5b50505050565b611669611aa3565b611671611b35565b61167a88611a80565b6040518060400160405280600281526020017f3630000000000000000000000000000000000000000000000000000000000000815250906116f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e891906128cc565b60405180910390fd5b506116fa611888565b73ffffffffffffffffffffffffffffffffffffffff1663f820414989898989898989896040518963ffffffff1660e01b815260040161174098979695949392919061319f565b600060405180830381600087803b15801561175a57600080fd5b505af115801561176e573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663907dff97888888888888886040516020016117cd979695949392919061321d565b60405160208183030381529060405260027fe6fb69e9b1bcbe6be8cdfff8335420ef59e9a8c88539df9ed763a645fba626ae8c6040516020016118109190612f92565b60405160208183030381529060405261182890612ff4565b6000806040518763ffffffff1660e01b815260040161184c96959493929190613137565b600060405180830381600087803b15801561186657600080fd5b505af115801561187a573d6000803e3d6000fd5b505050505050505050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166394f674436040518163ffffffff1660e01b815260040160206040518083038186803b1580156118f257600080fd5b505afa158015611906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192a919061328c565b73ffffffffffffffffffffffffffffffffffffffff166321f8a721600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7bf1ece6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ad57600080fd5b505afa1580156119c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e591906132e5565b6040518263ffffffff1660e01b8152600401611a019190613312565b60206040518083038186803b158015611a1957600080fd5b505afa158015611a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a51919061328c565b905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2a90613379565b60405180910390fd5b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166305a2ee2a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ba457600080fd5b505afa158015611bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdc91906133d7565b73ffffffffffffffffffffffffffffffffffffffff166321f8a7218373ffffffffffffffffffffffffffffffffffffffff1663c1943f596040518163ffffffff1660e01b815260040160206040518083038186803b158015611c3d57600080fd5b505afa158015611c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7591906132e5565b6040518263ffffffff1660e01b8152600401611c919190613312565b60206040518083038186803b158015611ca957600080fd5b505afa158015611cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce1919061328c565b90508073ffffffffffffffffffffffffffffffffffffffff1663df89b344600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401611d3e9190612059565b60206040518083038186803b158015611d5657600080fd5b505afa158015611d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8e9190612ea1565b611dcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc490613450565b60405180910390fd5b5050565b60405180606001604052806000815260200160008152602001600081525090565b604051806102200160405280611e06611ef8565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600064ffffffffff1681525090565b6040518060200160405280600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f4a82611f1f565b9050919050565b611f5a81611f3f565b8114611f6557600080fd5b50565b600081359050611f7781611f51565b92915050565b600060208284031215611f9357611f92611f15565b5b6000611fa184828501611f68565b91505092915050565b6000819050919050565b611fbd81611faa565b82525050565b6000602082019050611fd86000830184611fb4565b92915050565b611fe781611faa565b82525050565b6060820160008201516120036000850182611fde565b5060208201516120166020850182611fde565b5060408201516120296040850182611fde565b50505050565b60006060820190506120446000830184611fed565b92915050565b61205381611f3f565b82525050565b600060208201905061206e600083018461204a565b92915050565b6002811061208157600080fd5b50565b60008135905061209381612074565b92915050565b600080604083850312156120b0576120af611f15565b5b60006120be85828601611f68565b92505060206120cf85828601612084565b9150509250929050565b6020820160008201516120ef6000850182611fde565b50505050565b6120fe81611f3f565b82525050565b600064ffffffffff82169050919050565b61211e81612104565b82525050565b6102208201600082015161213b60008501826120d9565b50602082015161214e6020850182611fde565b5060408201516121616040850182611fde565b5060608201516121746060850182611fde565b5060808201516121876080850182611fde565b5060a082015161219a60a0850182611fde565b5060c08201516121ad60c0850182611fde565b5060e08201516121c060e0850182611fde565b506101008201516121d5610100850182611fde565b506101208201516121ea610120850182611fde565b506101408201516121ff6101408501826120f5565b506101608201516122146101608501826120f5565b506101808201516122296101808501826120f5565b506101a082015161223e6101a08501826120f5565b506101c08201516122536101c08501826120f5565b506101e08201516122686101e0850182612115565b5061020082015161227d610200850182612115565b50505050565b6000610220820190506122996000830184612124565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006122d783836120f5565b60208301905092915050565b6000602082019050919050565b60006122fb8261229f565b61230581856122aa565b9350612310836122bb565b8060005b8381101561234157815161232888826122cb565b9750612333836122e3565b925050600181019050612314565b5085935050505092915050565b6000602082019050818103600083015261236881846122f0565b905092915050565b60008115159050919050565b61238581612370565b82525050565b60006060820190506123a0600083018661237c565b6123ad602083018561237c565b6123ba604083018461237c565b949350505050565b60006020820190506123d7600083018461237c565b92915050565b60006123e882611f1f565b9050919050565b6123f8816123dd565b811461240357600080fd5b50565b600081359050612415816123ef565b92915050565b60006020828403121561243157612430611f15565b5b600061243f84828501612406565b91505092915050565b6000819050919050565b600061246d61246861246384611f1f565b612448565b611f1f565b9050919050565b600061247f82612452565b9050919050565b600061249182612474565b9050919050565b6124a181612486565b82525050565b60006020820190506124bc6000830184612498565b92915050565b6020820160008201516124d86000850182611fde565b50505050565b60006020820190506124f360008301846124c2565b92915050565b61250281611faa565b811461250d57600080fd5b50565b60008135905061251f816124f9565b92915050565b600080600080600060a0868803121561254157612540611f15565b5b600061254f88828901611f68565b955050602061256088828901612084565b945050604061257188828901612510565b935050606061258288828901611f68565b925050608061259388828901611f68565b9150509295509295909350565b60006125ab82612452565b9050919050565b60006125bd826125a0565b9050919050565b6125cd816125b2565b82525050565b60006020820190506125e860008301846125c4565b92915050565b60006125f982612474565b9050919050565b612609816125ee565b82525050565b60006020820190506126246000830184612600565b92915050565b600080600080600080600080610100898b03121561264b5761264a611f15565b5b60006126598b828c01611f68565b985050602061266a8b828c01611f68565b975050604061267b8b828c01611f68565b965050606061268c8b828c01612510565b955050608061269d8b828c01612510565b94505060a06126ae8b828c01611f68565b93505060c06126bf8b828c01611f68565b92505060e06126d08b828c01611f68565b9150509295985092959890939650565b6000815190506126ef816124f9565b92915050565b60006020828403121561270b5761270a611f15565b5b6000612719848285016126e0565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61277082612727565b810181811067ffffffffffffffff8211171561278f5761278e612738565b5b80604052505050565b60006127a2611f0b565b90506127ae8282612767565b919050565b6000606082840312156127c9576127c8612722565b5b6127d36060612798565b905060006127e3848285016126e0565b60008301525060206127f7848285016126e0565b602083015250604061280b848285016126e0565b60408301525092915050565b60006060828403121561282d5761282c611f15565b5b600061283b848285016127b3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561287e578082015181840152602081019050612863565b8381111561288d576000848401525b50505050565b600061289e82612844565b6128a8818561284f565b93506128b8818560208601612860565b6128c181612727565b840191505092915050565b600060208201905081810360008301526128e68184612893565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061292e5761292d6128ee565b5b50565b600081905061293f8261291d565b919050565b600061294f82612931565b9050919050565b61295f81612944565b82525050565b600060408201905061297a600083018561204a565b6129876020830184612956565b9392505050565b6000602082840312156129a4576129a3612722565b5b6129ae6020612798565b905060006129be848285016126e0565b60008301525092915050565b6000815190506129d981611f51565b92915050565b6129e881612104565b81146129f357600080fd5b50565b600081519050612a05816129df565b92915050565b60006102208284031215612a2257612a21612722565b5b612a2d610220612798565b90506000612a3d8482850161298e565b6000830152506020612a51848285016126e0565b6020830152506040612a65848285016126e0565b6040830152506060612a79848285016126e0565b6060830152506080612a8d848285016126e0565b60808301525060a0612aa1848285016126e0565b60a08301525060c0612ab5848285016126e0565b60c08301525060e0612ac9848285016126e0565b60e083015250610100612ade848285016126e0565b61010083015250610120612af4848285016126e0565b61012083015250610140612b0a848285016129ca565b61014083015250610160612b20848285016129ca565b61016083015250610180612b36848285016129ca565b610180830152506101a0612b4c848285016129ca565b6101a0830152506101c0612b62848285016129ca565b6101c0830152506101e0612b78848285016129f6565b6101e083015250610200612b8e848285016129f6565b6102008301525092915050565b60006102208284031215612bb257612bb1611f15565b5b6000612bc084828501612a0b565b91505092915050565b600080fd5b600067ffffffffffffffff821115612be957612be8612738565b5b602082029050602081019050919050565b600080fd5b6000612c12612c0d84612bce565b612798565b90508083825260208201905060208402830185811115612c3557612c34612bfa565b5b835b81811015612c5e5780612c4a88826129ca565b845260208401935050602081019050612c37565b5050509392505050565b600082601f830112612c7d57612c7c612bc9565b5b8151612c8d848260208601612bff565b91505092915050565b600060208284031215612cac57612cab611f15565b5b600082015167ffffffffffffffff811115612cca57612cc9611f1a565b5b612cd684828501612c68565b91505092915050565b612ce881612370565b8114612cf357600080fd5b50565b600081519050612d0581612cdf565b92915050565b600080600060608486031215612d2457612d23611f15565b5b6000612d3286828701612cf6565b9350506020612d4386828701612cf6565b9250506040612d5486828701612cf6565b9150509250925092565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612d9460208361284f565b9150612d9f82612d5e565b602082019050919050565b60006020820190508181036000830152612dc381612d87565b9050919050565b6000612dd582612474565b9050919050565b612de581612dca565b82525050565b6000602082019050612e006000830184612ddc565b92915050565b600060208284031215612e1c57612e1b611f15565b5b6000612e2a8482850161298e565b91505092915050565b6000606082019050612e48600083018661204a565b612e556020830185612956565b612e626040830184611fb4565b949350505050565b6000606082019050612e7f600083018661204a565b612e8c6020830185611fb4565b612e996040830184611fb4565b949350505050565b600060208284031215612eb757612eb6611f15565b5b6000612ec584828501612cf6565b91505092915050565b6000606082019050612ee3600083018661204a565b612ef0602083018561204a565b612efd6040830184611fb4565b949350505050565b6000608082019050612f1a6000830187612956565b612f27602083018661204a565b612f34604083018561204a565b612f416060830184611fb4565b95945050505050565b60008160601b9050919050565b6000612f6282612f4a565b9050919050565b6000612f7482612f57565b9050919050565b612f8c612f8782611f3f565b612f69565b82525050565b6000612f9e8284612f7b565b60148201915081905092915050565b600081519050919050565b6000819050602082019050919050565b6000819050919050565b6000612fde8251612fc8565b80915050919050565b600082821b905092915050565b6000612fff82612fad565b8261300984612fb8565b905061301481612fd2565b925060208210156130545761304f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802612fe7565b831692505b5050919050565b600082825260208201905092915050565b600061307782612fad565b613081818561305b565b9350613091818560208601612860565b61309a81612727565b840191505092915050565b6000819050919050565b60006130ca6130c56130c0846130a5565b612448565b611faa565b9050919050565b6130da816130af565b82525050565b6130e981612fc8565b82525050565b6000819050919050565b60008160001b9050919050565b600061312161311c613117846130ef565b6130f9565b612fc8565b9050919050565b61313181613106565b82525050565b600060c0820190508181036000830152613151818961306c565b905061316060208301886130d1565b61316d60408301876130e0565b61317a60608301866130e0565b6131876080830185613128565b61319460a0830184613128565b979650505050505050565b6000610100820190506131b5600083018b61204a565b6131c2602083018a61204a565b6131cf604083018961204a565b6131dc6060830188611fb4565b6131e96080830187611fb4565b6131f660a083018661204a565b61320360c083018561204a565b61321060e083018461204a565b9998505050505050505050565b600060e082019050613232600083018a61204a565b61323f602083018961204a565b61324c6040830188611fb4565b6132596060830187611fb4565b613266608083018661204a565b61327360a083018561204a565b61328060c083018461204a565b98975050505050505050565b6000602082840312156132a2576132a1611f15565b5b60006132b0848285016129ca565b91505092915050565b6132c281612fc8565b81146132cd57600080fd5b50565b6000815190506132df816132b9565b92915050565b6000602082840312156132fb576132fa611f15565b5b6000613309848285016132d0565b91505092915050565b600060208201905061332760008301846130e0565b92915050565b7f4f6e6c79207468652070726f78792063616e2063616c6c000000000000000000600082015250565b600061336360178361284f565b915061336e8261332d565b602082019050919050565b6000602082019050818103600083015261339281613356565b9050919050565b60006133a482611f3f565b9050919050565b6133b481613399565b81146133bf57600080fd5b50565b6000815190506133d1816133ab565b92915050565b6000602082840312156133ed576133ec611f15565b5b60006133fb848285016133c2565b91505092915050565b7f4e6f74207661756c742061646d696e0000000000000000000000000000000000600082015250565b600061343a600f8361284f565b915061344582613404565b602082019050919050565b600060208201905081810360008301526134698161342d565b905091905056fea2646970667358221220efbc84a9ee7f73632c134f83b1421cdfd33319496371c68266097b8d21766acf64736f6c63430008090033608060405262093a80600360006101000a81548164ffffffffff021916908364ffffffffff16021790555034801561003657600080fd5b5060016000819055506124d28061004e6000396000f3fe60806040526004361061007b5760003560e01c80639932f0361161004e5780639932f0361461013f578063b8ba16fd1461017c578063beabacc8146101b9578063d9caed12146101e25761007b565b806319ab453c1461008057806370a08231146100a95780638340f549146100e6578063930f8f5e14610102575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190611786565b61020b565b005b3480156100b557600080fd5b506100d060048036038101906100cb9190611786565b61027f565b6040516100dd91906117cc565b60405180910390f35b61010060048036038101906100fb9190611813565b610311565b005b34801561010e57600080fd5b5061012960048036038101906101249190611866565b61037f565b60405161013691906117cc565b60405180910390f35b34801561014b57600080fd5b5061016660048036038101906101619190611866565b6104cb565b60405161017391906119b3565b60405180910390f35b34801561018857600080fd5b506101a3600480360381019061019e9190611786565b6105e0565b6040516101b091906117cc565b60405180910390f35b3480156101c557600080fd5b506101e060048036038101906101db9190611a13565b610629565b005b3480156101ee57600080fd5b5061020960048036038101906102049190611a13565b6106c4565b005b600360199054906101000a900460ff1661027c5780600360056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360196101000a81548160ff0219169083151502179055505b50565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102ba9190611a75565b60206040518083038186803b1580156102d257600080fd5b505afa1580156102e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030a9190611aa5565b9050919050565b60026000541415610357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e90611b2f565b60405180910390fd5b60026000819055506103676106dc565b610372838383610978565b6001600081905550505050565b600080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000805b82805490508110156104bf57600360009054906101000a900464ffffffffff1664ffffffffff1683828154811061043e5761043d611b4f565b5b906000526020600020906002020160010160009054906101000a900464ffffffffff164261046c9190611bad565b64ffffffffff1611156104ac5782818154811061048c5761048b611b4f565b5b906000526020600020906002020160000154826104a99190611be1565b91505b80806104b790611c37565b915050610404565b50809250505092915050565b60606000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080805480602002602001604051908101604052809291908181526020016000905b828210156105d35783829060005260206000209060020201604051806040016040529081600082015481526020016001820160009054906101000a900464ffffffffff1664ffffffffff1664ffffffffff16815250508152602001906001019061056e565b5050505091505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610631610c11565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161066c929190611cdf565b602060405180830381600087803b15801561068657600080fd5b505af115801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190611d40565b50505050565b6106cc6106dc565b6106d7838383610e8b565b505050565b6000600360059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600360059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166305a2ee2a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561076d57600080fd5b505afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a59190611dab565b73ffffffffffffffffffffffffffffffffffffffff166321f8a7218373ffffffffffffffffffffffffffffffffffffffff1663c1943f596040518163ffffffff1660e01b815260040160206040518083038186803b15801561080657600080fd5b505afa15801561081a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083e9190611e0e565b6040518263ffffffff1660e01b815260040161085a9190611e4a565b60206040518083038186803b15801561087257600080fd5b505afa158015610886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa9190611e7a565b90508073ffffffffffffffffffffffffffffffffffffffff1663abd02480336040518263ffffffff1660e01b81526004016108e59190611a75565b60206040518083038186803b1580156108fd57600080fd5b505afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190611d40565b610974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096b90611ef3565b60405180910390fd5b5050565b61098061125e565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610a2757600034146109f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ec90611f85565b60405180910390fd5b610a228230838673ffffffffffffffffffffffffffffffffffffffff1661127a909392919063ffffffff16565b610a6a565b803414610a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6090612017565b60405180910390fd5b5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ab99190611be1565b92505081905550600060405180604001604052808381526020014264ffffffffff168152509050600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548164ffffffffff021916908364ffffffffff16021790555050508273ffffffffffffffffffffffffffffffffffffffff167f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a78584604051610c03929190612037565b60405180910390a250505050565b6000600360059054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166305a2ee2a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8057600080fd5b505afa158015610c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb89190611dab565b73ffffffffffffffffffffffffffffffffffffffff166321f8a7218373ffffffffffffffffffffffffffffffffffffffff1663c1943f596040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1957600080fd5b505afa158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d519190611e0e565b6040518263ffffffff1660e01b8152600401610d6d9190611e4a565b60206040518083038186803b158015610d8557600080fd5b505afa158015610d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbd9190611e7a565b90508073ffffffffffffffffffffffffffffffffffffffff166395b32a66336040518263ffffffff1660e01b8152600401610df89190611a75565b60206040518083038186803b158015610e1057600080fd5b505afa158015610e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e489190611d40565b610e87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7e90611ef3565b60405180910390fd5b5050565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008080600090505b838054905081101561104b57600360009054906101000a900464ffffffffff1664ffffffffff16848281548110610f4e57610f4d611b4f565b5b906000526020600020906002020160010160009054906101000a900464ffffffffff1642610f7c9190611bad565b64ffffffffff16111561103857838181548110610f9c57610f9b611b4f565b5b90600052602060002090600202016000015483610fb99190611be1565b9250838181548110610fce57610fcd611b4f565b5b906000526020600020906002020160010160009054906101000a900464ffffffffff16915083818154811061100657611005611b4f565b5b90600052602060002090600202016000808201600090556001820160006101000a81549064ffffffffff021916905550505b808061104390611c37565b915050610f14565b508382101561108f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611086906120d2565b60405180910390fd5b838211156111a557600084836110a591906120f2565b9050600060405180604001604052808381526020018464ffffffffff168152509050600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548164ffffffffff021916908364ffffffffff160217905550505050505b83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111f491906120f2565b92505081905550611206868686611303565b8473ffffffffffffffffffffffffffffffffffffffff167fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb878660405161124e929190612037565b60405180910390a2505050505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee905090565b6112fd846323b872dd60e01b85858560405160240161129b93929190612126565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611420565b50505050565b61130b61125e565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461136d5761136882828573ffffffffffffffffffffffffffffffffffffffff166114e79092919063ffffffff16565b61141b565b60008273ffffffffffffffffffffffffffffffffffffffff16826040516113939061218e565b60006040518083038185875af1925050503d80600081146113d0576040519150601f19603f3d011682016040523d82523d6000602084013e6113d5565b606091505b5050905080611419576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611410906121ef565b60405180910390fd5b505b505050565b6000611482826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661156d9092919063ffffffff16565b90506000815111156114e257808060200190518101906114a29190611d40565b6114e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d890612281565b60405180910390fd5b5b505050565b6115688363a9059cbb60e01b8484604051602401611506929190612037565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611420565b505050565b606061157c8484600085611585565b90509392505050565b6060824710156115ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c190612313565b60405180910390fd5b6115d385611699565b611612576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116099061237f565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161163b919061240e565b60006040518083038185875af1925050503d8060008114611678576040519150601f19603f3d011682016040523d82523d6000602084013e61167d565b606091505b509150915061168d8282866116bc565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156116cc5782905061171c565b6000835111156116df5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611713919061247a565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061175382611728565b9050919050565b61176381611748565b811461176e57600080fd5b50565b6000813590506117808161175a565b92915050565b60006020828403121561179c5761179b611723565b5b60006117aa84828501611771565b91505092915050565b6000819050919050565b6117c6816117b3565b82525050565b60006020820190506117e160008301846117bd565b92915050565b6117f0816117b3565b81146117fb57600080fd5b50565b60008135905061180d816117e7565b92915050565b60008060006060848603121561182c5761182b611723565b5b600061183a86828701611771565b935050602061184b86828701611771565b925050604061185c868287016117fe565b9150509250925092565b6000806040838503121561187d5761187c611723565b5b600061188b85828601611771565b925050602061189c85828601611771565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6118db816117b3565b82525050565b600064ffffffffff82169050919050565b6118fb816118e1565b82525050565b60408201600082015161191760008501826118d2565b50602082015161192a60208501826118f2565b50505050565b600061193c8383611901565b60408301905092915050565b6000602082019050919050565b6000611960826118a6565b61196a81856118b1565b9350611975836118c2565b8060005b838110156119a657815161198d8882611930565b975061199883611948565b925050600181019050611979565b5085935050505092915050565b600060208201905081810360008301526119cd8184611955565b905092915050565b60006119e082611728565b9050919050565b6119f0816119d5565b81146119fb57600080fd5b50565b600081359050611a0d816119e7565b92915050565b600080600060608486031215611a2c57611a2b611723565b5b6000611a3a86828701611771565b9350506020611a4b868287016119fe565b9250506040611a5c868287016117fe565b9150509250925092565b611a6f81611748565b82525050565b6000602082019050611a8a6000830184611a66565b92915050565b600081519050611a9f816117e7565b92915050565b600060208284031215611abb57611aba611723565b5b6000611ac984828501611a90565b91505092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611b19601f83611ad2565b9150611b2482611ae3565b602082019050919050565b60006020820190508181036000830152611b4881611b0c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611bb8826118e1565b9150611bc3836118e1565b925082821015611bd657611bd5611b7e565b5b828203905092915050565b6000611bec826117b3565b9150611bf7836117b3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611c2c57611c2b611b7e565b5b828201905092915050565b6000611c42826117b3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611c7557611c74611b7e565b5b600182019050919050565b6000819050919050565b6000611ca5611ca0611c9b84611728565b611c80565b611728565b9050919050565b6000611cb782611c8a565b9050919050565b6000611cc982611cac565b9050919050565b611cd981611cbe565b82525050565b6000604082019050611cf46000830185611cd0565b611d0160208301846117bd565b9392505050565b60008115159050919050565b611d1d81611d08565b8114611d2857600080fd5b50565b600081519050611d3a81611d14565b92915050565b600060208284031215611d5657611d55611723565b5b6000611d6484828501611d2b565b91505092915050565b6000611d7882611748565b9050919050565b611d8881611d6d565b8114611d9357600080fd5b50565b600081519050611da581611d7f565b92915050565b600060208284031215611dc157611dc0611723565b5b6000611dcf84828501611d96565b91505092915050565b6000819050919050565b611deb81611dd8565b8114611df657600080fd5b50565b600081519050611e0881611de2565b92915050565b600060208284031215611e2457611e23611723565b5b6000611e3284828501611df9565b91505092915050565b611e4481611dd8565b82525050565b6000602082019050611e5f6000830184611e3b565b92915050565b600081519050611e748161175a565b92915050565b600060208284031215611e9057611e8f611723565b5b6000611e9e84828501611e65565b91505092915050565b7f4e6f74206c6971756964697479206d616e6167657220636f6e74726163740000600082015250565b6000611edd601e83611ad2565b9150611ee882611ea7565b602082019050919050565b60006020820190508181036000830152611f0c81611ed0565b9050919050565b7f557365722069732073656e64696e672045544820616c6f6e672077697468207460008201527f6865204552433230207472616e736665722e0000000000000000000000000000602082015250565b6000611f6f603283611ad2565b9150611f7a82611f13565b604082019050919050565b60006020820190508181036000830152611f9e81611f62565b9050919050565b7f54686520616d6f756e7420616e64207468652076616c75652073656e7420746f60008201527f206465706f73697420646f206e6f74206d617463680000000000000000000000602082015250565b6000612001603583611ad2565b915061200c82611fa5565b604082019050919050565b6000602082019050818103600083015261203081611ff4565b9050919050565b600060408201905061204c6000830185611a66565b61205960208301846117bd565b9392505050565b7f446f206e6f74206861766520656e6f75676820616d6f756e7420746f2077697460008201527f6864726177000000000000000000000000000000000000000000000000000000602082015250565b60006120bc602583611ad2565b91506120c782612060565b604082019050919050565b600060208201905081810360008301526120eb816120af565b9050919050565b60006120fd826117b3565b9150612108836117b3565b92508282101561211b5761211a611b7e565b5b828203905092915050565b600060608201905061213b6000830186611a66565b6121486020830185611a66565b61215560408301846117bd565b949350505050565b600081905092915050565b50565b600061217860008361215d565b915061218382612168565b600082019050919050565b60006121998261216b565b9150819050919050565b7f5472616e73666572206f6620455448206661696c656400000000000000000000600082015250565b60006121d9601683611ad2565b91506121e4826121a3565b602082019050919050565b60006020820190508181036000830152612208816121cc565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061226b602a83611ad2565b91506122768261220f565b604082019050919050565b6000602082019050818103600083015261229a8161225e565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006122fd602683611ad2565b9150612308826122a1565b604082019050919050565b6000602082019050818103600083015261232c816122f0565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612369601d83611ad2565b915061237482612333565b602082019050919050565b600060208201905081810360008301526123988161235c565b9050919050565b600081519050919050565b60005b838110156123c85780820151818401526020810190506123ad565b838111156123d7576000848401525b50505050565b60006123e88261239f565b6123f2818561215d565b93506124028185602086016123aa565b80840191505092915050565b600061241a82846123dd565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061244c82612425565b6124568185611ad2565b93506124668185602086016123aa565b61246f81612430565b840191505092915050565b600060208201905081810360008301526124948184612441565b90509291505056fea264697066735822122027d690c8ee08012e2f7d1cfd330999be00c6bd5113880845b731dc1ecbda1e9264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c806397107d6d116100de578063d67bdd2511610097578063f2fde38b11610071578063f2fde38b14610477578063f448e14014610493578063f7b188a5146104b1578063f8204149146104bb5761018e565b8063d67bdd251461041d578063e30c39781461043b578063ec556889146104595761018e565b806397107d6d1461034b5780639cc67a0f14610367578063b544639a14610397578063bc67f832146103b5578063c44b11f7146103d1578063c907e29a146104015761018e565b806366d4c4131161014b57806381f781511161012557806381f78151146102e95780638456cb59146103055780638da5cb5b1461030f5780638f32d59b1461032d5761018e565b806366d4c41314610269578063776f689114610287578063817ad5d3146102b75761018e565b806303d6fa95146101935780630d458395146101c3578063122fd48a146101e1578063284592b2146101ff57806335ea6a751461022f5780634e71e0c81461025f575b600080fd5b6101ad60048036038101906101a89190611f7d565b6104d7565b6040516101ba9190611fc3565b60405180910390f35b6101cb610570565b6040516101d8919061202f565b60405180910390f35b6101e9610608565b6040516101f69190612059565b60405180910390f35b61021960048036038101906102149190612099565b610617565b6040516102269190611fc3565b60405180910390f35b61024960048036038101906102449190611f7d565b610734565b6040516102569190612283565b60405180910390f35b610267610855565b005b6102716109f1565b60405161027e919061234e565b60405180910390f35b6102a1600480360381019061029c9190612099565b610a82565b6040516102ae9190611fc3565b60405180910390f35b6102d160048036038101906102cc9190611f7d565b610b9f565b6040516102e09392919061238b565b60405180910390f35b61030360048036038101906102fe9190611f7d565b610c41565b005b61030d610d47565b005b610317610dc0565b6040516103249190612059565b60405180910390f35b610335610de4565b60405161034291906123c2565b60405180910390f35b6103656004803603810190610360919061241b565b610e3b565b005b610381600480360381019061037c9190611f7d565b610efd565b60405161038e9190611fc3565b60405180910390f35b61039f610f96565b6040516103ac91906124a7565b60405180910390f35b6103cf60048036038101906103ca9190611f7d565b610fbc565b005b6103eb60048036038101906103e69190611f7d565b611008565b6040516103f891906124de565b60405180910390f35b61041b60048036038101906104169190612525565b611128565b005b6104256114c5565b6040516104329190612059565b60405180910390f35b6104436114eb565b6040516104509190612059565b60405180910390f35b610461611511565b60405161046e91906125d3565b60405180910390f35b610491600480360381019061048c9190611f7d565b611537565b005b61049b6115c2565b6040516104a8919061260f565b60405180910390f35b6104b96115e8565b005b6104d560048036038101906104d0919061262a565b611661565b005b60006104e1611888565b73ffffffffffffffffffffffffffffffffffffffff166303d6fa95836040518263ffffffff1660e01b81526004016105199190612059565b60206040518083038186803b15801561053157600080fd5b505afa158015610545573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056991906126f5565b9050919050565b610578611dd1565b6000610582611888565b90508073ffffffffffffffffffffffffffffffffffffffff16630d4583956040518163ffffffff1660e01b815260040160606040518083038186803b1580156105ca57600080fd5b505afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106029190612817565b91505090565b6000610612611a56565b905090565b600061062283611a80565b6040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525090610699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069091906128cc565b60405180910390fd5b506106a2611888565b73ffffffffffffffffffffffffffffffffffffffff1663284592b284846040518363ffffffff1660e01b81526004016106dc929190612965565b60206040518083038186803b1580156106f457600080fd5b505afa158015610708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c91906126f5565b905092915050565b61073c611df2565b61074582611a80565b6040518060400160405280600281526020017f3630000000000000000000000000000000000000000000000000000000000000815250906107bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b391906128cc565b60405180910390fd5b506107c5611888565b73ffffffffffffffffffffffffffffffffffffffff166335ea6a75836040518263ffffffff1660e01b81526004016107fd9190612059565b6102206040518083038186803b15801561081657600080fd5b505afa15801561082a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084e9190612b9b565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108af57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60606109fb611888565b73ffffffffffffffffffffffffffffffffffffffff166366d4c4136040518163ffffffff1660e01b815260040160006040518083038186803b158015610a4057600080fd5b505afa158015610a54573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a7d9190612c96565b905090565b6000610a8d83611a80565b6040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525090610b04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afb91906128cc565b60405180910390fd5b50610b0d611888565b73ffffffffffffffffffffffffffffffffffffffff1663776f689184846040518363ffffffff1660e01b8152600401610b47929190612965565b60206040518083038186803b158015610b5f57600080fd5b505afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9791906126f5565b905092915050565b6000806000610bac611888565b73ffffffffffffffffffffffffffffffffffffffff1663817ad5d3856040518263ffffffff1660e01b8152600401610be49190612059565b60606040518083038186803b158015610bfc57600080fd5b505afa158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190612d0b565b9250925092509193909250565b610c49611aa3565b610c51611b35565b610c5a81611a80565b6040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525090610cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc891906128cc565b60405180910390fd5b50610cda611888565b73ffffffffffffffffffffffffffffffffffffffff166381f78151826040518263ffffffff1660e01b8152600401610d129190612059565b600060405180830381600087803b158015610d2c57600080fd5b505af1158015610d40573d6000803e3d6000fd5b5050505050565b610d4f611aa3565b610d57611b35565b610d5f611888565b73ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610da657600080fd5b505af1158015610dba573d6000803e3d6000fd5b50505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b610e43610de4565b610e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7990612daa565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ffc80377ca9c49cc11ae6982f390a42db976d5530af7c43889264b13fbbd7c57e81604051610ef29190612deb565b60405180910390a150565b6000610f07611888565b73ffffffffffffffffffffffffffffffffffffffff16639cc67a0f836040518263ffffffff1660e01b8152600401610f3f9190612059565b60206040518083038186803b158015610f5757600080fd5b505afa158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f91906126f5565b9050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610fc4611aa3565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611010611ef8565b61101982611a80565b6040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525090611090576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108791906128cc565b60405180910390fd5b50611099611888565b73ffffffffffffffffffffffffffffffffffffffff1663c44b11f7836040518263ffffffff1660e01b81526004016110d19190612059565b60206040518083038186803b1580156110e957600080fd5b505afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111219190612e06565b9050919050565b611130611aa3565b600061113a611888565b9050600061114787610734565b90508173ffffffffffffffffffffffffffffffffffffffff1663c8caf6808888886040518463ffffffff1660e01b815260040161118693929190612e33565b600060405180830381600087803b1580156111a057600080fd5b505af11580156111b4573d6000803e3d6000fd5b505050508560018111156111cb576111ca6128ee565b5b600060018111156111df576111de6128ee565b5b14156112875780610180015173ffffffffffffffffffffffffffffffffffffffff1663156e29f684876112118b6104d7565b6040518463ffffffff1660e01b815260040161122f93929190612e6a565b602060405180830381600087803b15801561124957600080fd5b505af115801561125d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112819190612ea1565b50611325565b806101a0015173ffffffffffffffffffffffffffffffffffffffff1663156e29f684876112b38b610efd565b6040518463ffffffff1660e01b81526004016112d193929190612e6a565b602060405180830381600087803b1580156112eb57600080fd5b505af11580156112ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113239190612ea1565b505b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638340f5498886886040518463ffffffff1660e01b815260040161138493929190612ece565b600060405180830381600087803b15801561139e57600080fd5b505af11580156113b2573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663907dff978786868960405160200161140b9493929190612f05565b60405160208183030381529060405260027fe0ad63c2e86a8ebf7f823e085c5359b98f68acaa20bcebbf2ca47c5ec7be00df8b60405160200161144e9190612f92565b60405160208183030381529060405261146690612ff4565b6000806040518763ffffffff1660e01b815260040161148a96959493929190613137565b600060405180830381600087803b1580156114a457600080fd5b505af11580156114b8573d6000803e3d6000fd5b5050505050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61153f610de4565b61157e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157590612daa565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6115f0611aa3565b6115f8611b35565b611600611888565b73ffffffffffffffffffffffffffffffffffffffff1663f7b188a56040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561164757600080fd5b505af115801561165b573d6000803e3d6000fd5b50505050565b611669611aa3565b611671611b35565b61167a88611a80565b6040518060400160405280600281526020017f3630000000000000000000000000000000000000000000000000000000000000815250906116f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e891906128cc565b60405180910390fd5b506116fa611888565b73ffffffffffffffffffffffffffffffffffffffff1663f820414989898989898989896040518963ffffffff1660e01b815260040161174098979695949392919061319f565b600060405180830381600087803b15801561175a57600080fd5b505af115801561176e573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663907dff97888888888888886040516020016117cd979695949392919061321d565b60405160208183030381529060405260027fe6fb69e9b1bcbe6be8cdfff8335420ef59e9a8c88539df9ed763a645fba626ae8c6040516020016118109190612f92565b60405160208183030381529060405261182890612ff4565b6000806040518763ffffffff1660e01b815260040161184c96959493929190613137565b600060405180830381600087803b15801561186657600080fd5b505af115801561187a573d6000803e3d6000fd5b505050505050505050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166394f674436040518163ffffffff1660e01b815260040160206040518083038186803b1580156118f257600080fd5b505afa158015611906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192a919061328c565b73ffffffffffffffffffffffffffffffffffffffff166321f8a721600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7bf1ece6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ad57600080fd5b505afa1580156119c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e591906132e5565b6040518263ffffffff1660e01b8152600401611a019190613312565b60206040518083038186803b158015611a1957600080fd5b505afa158015611a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a51919061328c565b905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2a90613379565b60405180910390fd5b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166305a2ee2a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ba457600080fd5b505afa158015611bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdc91906133d7565b73ffffffffffffffffffffffffffffffffffffffff166321f8a7218373ffffffffffffffffffffffffffffffffffffffff1663c1943f596040518163ffffffff1660e01b815260040160206040518083038186803b158015611c3d57600080fd5b505afa158015611c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7591906132e5565b6040518263ffffffff1660e01b8152600401611c919190613312565b60206040518083038186803b158015611ca957600080fd5b505afa158015611cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce1919061328c565b90508073ffffffffffffffffffffffffffffffffffffffff1663df89b344600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401611d3e9190612059565b60206040518083038186803b158015611d5657600080fd5b505afa158015611d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8e9190612ea1565b611dcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc490613450565b60405180910390fd5b5050565b60405180606001604052806000815260200160008152602001600081525090565b604051806102200160405280611e06611ef8565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600064ffffffffff1681525090565b6040518060200160405280600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f4a82611f1f565b9050919050565b611f5a81611f3f565b8114611f6557600080fd5b50565b600081359050611f7781611f51565b92915050565b600060208284031215611f9357611f92611f15565b5b6000611fa184828501611f68565b91505092915050565b6000819050919050565b611fbd81611faa565b82525050565b6000602082019050611fd86000830184611fb4565b92915050565b611fe781611faa565b82525050565b6060820160008201516120036000850182611fde565b5060208201516120166020850182611fde565b5060408201516120296040850182611fde565b50505050565b60006060820190506120446000830184611fed565b92915050565b61205381611f3f565b82525050565b600060208201905061206e600083018461204a565b92915050565b6002811061208157600080fd5b50565b60008135905061209381612074565b92915050565b600080604083850312156120b0576120af611f15565b5b60006120be85828601611f68565b92505060206120cf85828601612084565b9150509250929050565b6020820160008201516120ef6000850182611fde565b50505050565b6120fe81611f3f565b82525050565b600064ffffffffff82169050919050565b61211e81612104565b82525050565b6102208201600082015161213b60008501826120d9565b50602082015161214e6020850182611fde565b5060408201516121616040850182611fde565b5060608201516121746060850182611fde565b5060808201516121876080850182611fde565b5060a082015161219a60a0850182611fde565b5060c08201516121ad60c0850182611fde565b5060e08201516121c060e0850182611fde565b506101008201516121d5610100850182611fde565b506101208201516121ea610120850182611fde565b506101408201516121ff6101408501826120f5565b506101608201516122146101608501826120f5565b506101808201516122296101808501826120f5565b506101a082015161223e6101a08501826120f5565b506101c08201516122536101c08501826120f5565b506101e08201516122686101e0850182612115565b5061020082015161227d610200850182612115565b50505050565b6000610220820190506122996000830184612124565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006122d783836120f5565b60208301905092915050565b6000602082019050919050565b60006122fb8261229f565b61230581856122aa565b9350612310836122bb565b8060005b8381101561234157815161232888826122cb565b9750612333836122e3565b925050600181019050612314565b5085935050505092915050565b6000602082019050818103600083015261236881846122f0565b905092915050565b60008115159050919050565b61238581612370565b82525050565b60006060820190506123a0600083018661237c565b6123ad602083018561237c565b6123ba604083018461237c565b949350505050565b60006020820190506123d7600083018461237c565b92915050565b60006123e882611f1f565b9050919050565b6123f8816123dd565b811461240357600080fd5b50565b600081359050612415816123ef565b92915050565b60006020828403121561243157612430611f15565b5b600061243f84828501612406565b91505092915050565b6000819050919050565b600061246d61246861246384611f1f565b612448565b611f1f565b9050919050565b600061247f82612452565b9050919050565b600061249182612474565b9050919050565b6124a181612486565b82525050565b60006020820190506124bc6000830184612498565b92915050565b6020820160008201516124d86000850182611fde565b50505050565b60006020820190506124f360008301846124c2565b92915050565b61250281611faa565b811461250d57600080fd5b50565b60008135905061251f816124f9565b92915050565b600080600080600060a0868803121561254157612540611f15565b5b600061254f88828901611f68565b955050602061256088828901612084565b945050604061257188828901612510565b935050606061258288828901611f68565b925050608061259388828901611f68565b9150509295509295909350565b60006125ab82612452565b9050919050565b60006125bd826125a0565b9050919050565b6125cd816125b2565b82525050565b60006020820190506125e860008301846125c4565b92915050565b60006125f982612474565b9050919050565b612609816125ee565b82525050565b60006020820190506126246000830184612600565b92915050565b600080600080600080600080610100898b03121561264b5761264a611f15565b5b60006126598b828c01611f68565b985050602061266a8b828c01611f68565b975050604061267b8b828c01611f68565b965050606061268c8b828c01612510565b955050608061269d8b828c01612510565b94505060a06126ae8b828c01611f68565b93505060c06126bf8b828c01611f68565b92505060e06126d08b828c01611f68565b9150509295985092959890939650565b6000815190506126ef816124f9565b92915050565b60006020828403121561270b5761270a611f15565b5b6000612719848285016126e0565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61277082612727565b810181811067ffffffffffffffff8211171561278f5761278e612738565b5b80604052505050565b60006127a2611f0b565b90506127ae8282612767565b919050565b6000606082840312156127c9576127c8612722565b5b6127d36060612798565b905060006127e3848285016126e0565b60008301525060206127f7848285016126e0565b602083015250604061280b848285016126e0565b60408301525092915050565b60006060828403121561282d5761282c611f15565b5b600061283b848285016127b3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561287e578082015181840152602081019050612863565b8381111561288d576000848401525b50505050565b600061289e82612844565b6128a8818561284f565b93506128b8818560208601612860565b6128c181612727565b840191505092915050565b600060208201905081810360008301526128e68184612893565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061292e5761292d6128ee565b5b50565b600081905061293f8261291d565b919050565b600061294f82612931565b9050919050565b61295f81612944565b82525050565b600060408201905061297a600083018561204a565b6129876020830184612956565b9392505050565b6000602082840312156129a4576129a3612722565b5b6129ae6020612798565b905060006129be848285016126e0565b60008301525092915050565b6000815190506129d981611f51565b92915050565b6129e881612104565b81146129f357600080fd5b50565b600081519050612a05816129df565b92915050565b60006102208284031215612a2257612a21612722565b5b612a2d610220612798565b90506000612a3d8482850161298e565b6000830152506020612a51848285016126e0565b6020830152506040612a65848285016126e0565b6040830152506060612a79848285016126e0565b6060830152506080612a8d848285016126e0565b60808301525060a0612aa1848285016126e0565b60a08301525060c0612ab5848285016126e0565b60c08301525060e0612ac9848285016126e0565b60e083015250610100612ade848285016126e0565b61010083015250610120612af4848285016126e0565b61012083015250610140612b0a848285016129ca565b61014083015250610160612b20848285016129ca565b61016083015250610180612b36848285016129ca565b610180830152506101a0612b4c848285016129ca565b6101a0830152506101c0612b62848285016129ca565b6101c0830152506101e0612b78848285016129f6565b6101e083015250610200612b8e848285016129f6565b6102008301525092915050565b60006102208284031215612bb257612bb1611f15565b5b6000612bc084828501612a0b565b91505092915050565b600080fd5b600067ffffffffffffffff821115612be957612be8612738565b5b602082029050602081019050919050565b600080fd5b6000612c12612c0d84612bce565b612798565b90508083825260208201905060208402830185811115612c3557612c34612bfa565b5b835b81811015612c5e5780612c4a88826129ca565b845260208401935050602081019050612c37565b5050509392505050565b600082601f830112612c7d57612c7c612bc9565b5b8151612c8d848260208601612bff565b91505092915050565b600060208284031215612cac57612cab611f15565b5b600082015167ffffffffffffffff811115612cca57612cc9611f1a565b5b612cd684828501612c68565b91505092915050565b612ce881612370565b8114612cf357600080fd5b50565b600081519050612d0581612cdf565b92915050565b600080600060608486031215612d2457612d23611f15565b5b6000612d3286828701612cf6565b9350506020612d4386828701612cf6565b9250506040612d5486828701612cf6565b9150509250925092565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612d9460208361284f565b9150612d9f82612d5e565b602082019050919050565b60006020820190508181036000830152612dc381612d87565b9050919050565b6000612dd582612474565b9050919050565b612de581612dca565b82525050565b6000602082019050612e006000830184612ddc565b92915050565b600060208284031215612e1c57612e1b611f15565b5b6000612e2a8482850161298e565b91505092915050565b6000606082019050612e48600083018661204a565b612e556020830185612956565b612e626040830184611fb4565b949350505050565b6000606082019050612e7f600083018661204a565b612e8c6020830185611fb4565b612e996040830184611fb4565b949350505050565b600060208284031215612eb757612eb6611f15565b5b6000612ec584828501612cf6565b91505092915050565b6000606082019050612ee3600083018661204a565b612ef0602083018561204a565b612efd6040830184611fb4565b949350505050565b6000608082019050612f1a6000830187612956565b612f27602083018661204a565b612f34604083018561204a565b612f416060830184611fb4565b95945050505050565b60008160601b9050919050565b6000612f6282612f4a565b9050919050565b6000612f7482612f57565b9050919050565b612f8c612f8782611f3f565b612f69565b82525050565b6000612f9e8284612f7b565b60148201915081905092915050565b600081519050919050565b6000819050602082019050919050565b6000819050919050565b6000612fde8251612fc8565b80915050919050565b600082821b905092915050565b6000612fff82612fad565b8261300984612fb8565b905061301481612fd2565b925060208210156130545761304f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802612fe7565b831692505b5050919050565b600082825260208201905092915050565b600061307782612fad565b613081818561305b565b9350613091818560208601612860565b61309a81612727565b840191505092915050565b6000819050919050565b60006130ca6130c56130c0846130a5565b612448565b611faa565b9050919050565b6130da816130af565b82525050565b6130e981612fc8565b82525050565b6000819050919050565b60008160001b9050919050565b600061312161311c613117846130ef565b6130f9565b612fc8565b9050919050565b61313181613106565b82525050565b600060c0820190508181036000830152613151818961306c565b905061316060208301886130d1565b61316d60408301876130e0565b61317a60608301866130e0565b6131876080830185613128565b61319460a0830184613128565b979650505050505050565b6000610100820190506131b5600083018b61204a565b6131c2602083018a61204a565b6131cf604083018961204a565b6131dc6060830188611fb4565b6131e96080830187611fb4565b6131f660a083018661204a565b61320360c083018561204a565b61321060e083018461204a565b9998505050505050505050565b600060e082019050613232600083018a61204a565b61323f602083018961204a565b61324c6040830188611fb4565b6132596060830187611fb4565b613266608083018661204a565b61327360a083018561204a565b61328060c083018461204a565b98975050505050505050565b6000602082840312156132a2576132a1611f15565b5b60006132b0848285016129ca565b91505092915050565b6132c281612fc8565b81146132cd57600080fd5b50565b6000815190506132df816132b9565b92915050565b6000602082840312156132fb576132fa611f15565b5b6000613309848285016132d0565b91505092915050565b600060208201905061332760008301846130e0565b92915050565b7f4f6e6c79207468652070726f78792063616e2063616c6c000000000000000000600082015250565b600061336360178361284f565b915061336e8261332d565b602082019050919050565b6000602082019050818103600083015261339281613356565b9050919050565b60006133a482611f3f565b9050919050565b6133b481613399565b81146133bf57600080fd5b50565b6000815190506133d1816133ab565b92915050565b6000602082840312156133ed576133ec611f15565b5b60006133fb848285016133c2565b91505092915050565b7f4e6f74207661756c742061646d696e0000000000000000000000000000000000600082015250565b600061343a600f8361284f565b915061344582613404565b602082019050919050565b600060208201905081810360008301526134698161342d565b905091905056fea2646970667358221220efbc84a9ee7f73632c134f83b1421cdfd33319496371c68266097b8d21766acf64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activeReserve(address)": {
        "details": "Active a reserve for borrowing",
        "params": {
          "_asset": "The address of the reserve*"
        }
      },
      "claimOwnership()": {
        "details": "Allows the pendingOwner address to finalize the transfer."
      },
      "initReserve(address,address,address,uint256,uint256,address,address,address)": {
        "details": "Initializes a reserve, activating it, assigning two deposit tokens and an interest rate strategy Only callable by protocol operator",
        "params": {
          "_asset": "The address of the underlying asset of the reserve",
          "_interestRateStrategyAddress": "The address of the interest rate strategy contract*",
          "_juniorDepositTokenAddress": "The address of the junior deposit token that will be assigned to the reserve",
          "_juniorIncomeAllocation": "Junior income allocation, express in RAY",
          "_seniorDepositTokenAddress": "The address of the senior deposit token that will be assigned to the reserve",
          "_seniorIncomeAllocation": "Senior income allocation, express in RAY",
          "_stableDebtAddress": "The address of the StableDebtToken that will be assigned to the reserve"
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "pause()": {
        "details": "Pause the protocol*"
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to set the pendingOwner address.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      },
      "unPause()": {
        "details": "UnPause the protocol*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7987,
        "contract": "contracts/component/liquiditymanager/LiquidityManager.sol:LiquidityManager",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7989,
        "contract": "contracts/component/liquiditymanager/LiquidityManager.sol:LiquidityManager",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8180,
        "contract": "contracts/component/liquiditymanager/LiquidityManager.sol:LiquidityManager",
        "label": "proxy",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Proxy)8171"
      },
      {
        "astId": 8182,
        "contract": "contracts/component/liquiditymanager/LiquidityManager.sol:LiquidityManager",
        "label": "messageSender",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5887,
        "contract": "contracts/component/liquiditymanager/LiquidityManager.sol:LiquidityManager",
        "label": "voyager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(Voyager)486"
      },
      {
        "astId": 1230,
        "contract": "contracts/component/liquiditymanager/LiquidityManager.sol:LiquidityManager",
        "label": "liquidityDepositEscrow",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(LiquidityDepositEscrow)2427"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(LiquidityDepositEscrow)2427": {
        "encoding": "inplace",
        "label": "contract LiquidityDepositEscrow",
        "numberOfBytes": "20"
      },
      "t_contract(Proxy)8171": {
        "encoding": "inplace",
        "label": "contract Proxy",
        "numberOfBytes": "20"
      },
      "t_contract(Voyager)486": {
        "encoding": "inplace",
        "label": "contract Voyager",
        "numberOfBytes": "20"
      }
    }
  }
}