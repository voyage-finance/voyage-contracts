{
  "address": "0xaF7dCD6c4B3D5D8a5Cb0d7b2DE39b441059a3BD5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "associatedContract",
          "type": "address"
        }
      ],
      "name": "AssociatedContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "activeReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "associatedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ReserveConfigurationMap",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getFlags",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getJuniorLiquidityIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        }
      ],
      "name": "getLiquidityRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "data",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.ReserveConfigurationMap",
              "name": "configuration",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentOverallLiquidityRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentSeniorIncomeAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentJuniorIncomeAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "juniorLiquidityIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "seniorLiquidityIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "securityRequirement",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "juniorDepositTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seniorDepositTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableDebtAddress",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "juniorLastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "seniorLastUpdateTimestamp",
              "type": "uint40"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        }
      ],
      "name": "getReserveNormalizedIncome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getSeniorLiquidityIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_juniorDepositTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seniorDepositTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_juniorIncomeAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_seniorIncomeAllocation",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stableDebtAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestRateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "initReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_associatedContract",
          "type": "address"
        }
      ],
      "name": "setAssociatedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updateStateOnDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x526f02788d8e3278b9b306ccb0828278030bf770f83951c31c86f9d71d0d7311",
  "receipt": {
    "to": null,
    "from": "0xc4940D382C8EAFD2526D1ad56B36CD9674285c43",
    "contractAddress": "0xaF7dCD6c4B3D5D8a5Cb0d7b2DE39b441059a3BD5",
    "transactionIndex": 3,
    "gasUsed": "1913273",
    "logsBloom": "0x
    "blockHash": "0x8098c04f52c84b8e2b14d0b523373688e1d7a3b99e514caaba7d2055725936da",
    "transactionHash": "0x526f02788d8e3278b9b306ccb0828278030bf770f83951c31c86f9d71d0d7311",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 8265298,
        "transactionHash": "0x526f02788d8e3278b9b306ccb0828278030bf770f83951c31c86f9d71d0d7311",
        "address": "0xaF7dCD6c4B3D5D8a5Cb0d7b2DE39b441059a3BD5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c4940d382c8eafd2526d1ad56b36cd9674285c43"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x8098c04f52c84b8e2b14d0b523373688e1d7a3b99e514caaba7d2055725936da"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 8265298,
        "transactionHash": "0x526f02788d8e3278b9b306ccb0828278030bf770f83951c31c86f9d71d0d7311",
        "address": "0xaF7dCD6c4B3D5D8a5Cb0d7b2DE39b441059a3BD5",
        "topics": [
          "0x73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e03"
        ],
        "data": "0x00000000000000000000000093dcdb4a26c3be8df7ccc47cae6052b73e7105d3",
        "logIndex": 8,
        "blockHash": "0x8098c04f52c84b8e2b14d0b523373688e1d7a3b99e514caaba7d2055725936da"
      }
    ],
    "blockNumber": 8265298,
    "cumulativeGasUsed": "3037274",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x93dCdb4A26C3bE8DF7CCC47cae6052b73e7105D3"
  ],
  "numDeployments": 1,
  "solcInputHash": "2196d022291140b1b6ee21061c33a3c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"associatedContract\",\"type\":\"address\"}],\"name\":\"AssociatedContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"activeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"associatedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getFlags\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getJuniorLiquidityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"getLiquidityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentOverallLiquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSeniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentJuniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorLiquidityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorLiquidityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"securityRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"juniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"juniorLastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"seniorLastUpdateTimestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getSeniorLiquidityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_juniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_juniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_associatedContract\",\"type\":\"address\"}],\"name\":\"setAssociatedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateStateOnDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimOwnership()\":{\"details\":\"Allows the pendingOwner address to finalize the transfer.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to set the pendingOwner address.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/component/shared/storage/LiquidityManagerStorage.sol\":\"LiquidityManagerStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/component/liquiditymanager/DefaultReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IReserveInterestRateStrategy.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    /**\\n     * this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates\\n     * Expressed in RAY\\n     **/\\n    uint256 public immutable OPTIMAL_UTILIZATION_RATE;\\n\\n    // Base interest rate set by governance. Expressed in ray\\n    uint256 internal immutable baseBorrowRate;\\n\\n    // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope1;\\n\\n    // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope2;\\n\\n    constructor(\\n        uint256 _optimalUtilizationRate,\\n        uint256 _stableRateSlope1,\\n        uint256 _stableRateSlope2,\\n        uint256 _baseBorrowRate\\n    ) public {\\n        OPTIMAL_UTILIZATION_RATE = _optimalUtilizationRate;\\n        baseBorrowRate = _baseBorrowRate;\\n        stableRateSlope1 = _stableRateSlope1;\\n        stableRateSlope2 = _stableRateSlope2;\\n    }\\n\\n    struct CalcInterestRatesLocalVars {\\n        uint256 totalDebt;\\n        uint256 currentStableBorrowRate;\\n        uint256 currentLiquidityRate;\\n        uint256 utilizationRate;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configuration\\n     * @param reserve The address of the reserve\\n     * @param juniorDepositToken The address of junior deposit token\\n     * @param seniorDepositToken The address of senior deposit token\\n     * @param liquidityAdded The liquidity added during the operation\\n     * @param liquidityTaken The liquidity taken during the operation\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256) {\\n        uint256 availableJuniorLiquidity = IERC20(reserve).balanceOf(\\n            juniorDepositToken\\n        );\\n        uint256 availableSeniorLiquidity = IERC20(reserve).balanceOf(\\n            seniorDepositToken\\n        );\\n        uint256 availableLiquidity = availableJuniorLiquidity.add(\\n            availableSeniorLiquidity\\n        );\\n        availableLiquidity = availableLiquidity.add(liquidityAdded).sub(\\n            liquidityTaken\\n        );\\n        return\\n            calculateInterestRates(\\n                reserve,\\n                availableLiquidity,\\n                totalStableDebt,\\n                averageBorrowRate\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * @param reserve The address of the reserve\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @return The liquidity rate, the stable borrow rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) public view returns (uint256, uint256) {\\n        CalcInterestRatesLocalVars memory vars;\\n\\n        vars.totalDebt = totalStableDebt;\\n        vars.currentStableBorrowRate = baseBorrowRate;\\n        vars.currentLiquidityRate = 0;\\n\\n        vars.utilizationRate = vars.totalDebt == 0\\n            ? 0\\n            : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\\n\\n        if (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n            vars.currentStableBorrowRate = vars\\n                .currentStableBorrowRate\\n                .add(stableRateSlope1)\\n                .add(\\n                    stableRateSlope2\\n                        .rayMul(\\n                            vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE)\\n                        )\\n                        .rayDiv(WadRayMath.Ray().sub(OPTIMAL_UTILIZATION_RATE))\\n                );\\n        } else {\\n            vars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\\n                stableRateSlope1.rayMul(vars.utilizationRate).rayDiv(\\n                    OPTIMAL_UTILIZATION_RATE\\n                )\\n            );\\n        }\\n\\n        vars.currentLiquidityRate = averageBorrowRate.rayMul(\\n            vars.utilizationRate\\n        );\\n        return (vars.currentLiquidityRate, vars.currentStableBorrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0x501b0d30efd4654196b7940e1b24d0c44a4dcd82c32288da095e9c63625bd9c6\",\"license\":\"GPL-3.0\"},\"contracts/component/shared/storage/LiquidityManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../../libraries/state/State.sol';\\nimport '../../../libraries/types/DataTypes.sol';\\nimport '../../../libraries/logic/ReserveLogic.sol';\\nimport '../../../libraries/logic/ValidationLogic.sol';\\nimport '../../../libraries/configuration/ReserveConfiguration.sol';\\n\\ncontract LiquidityManagerStorage is State {\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    mapping(address => DataTypes.ReserveData) internal _reserves;\\n\\n    bool internal _paused;\\n\\n    constructor(address _liquidityManager) State(_liquidityManager) {}\\n\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress\\n    ) external onlyAssociatedContract {\\n        _reserves[_asset].init(\\n            _juniorDepositTokenAddress,\\n            _seniorDepositTokenAddress,\\n            _juniorIncomeAllocation,\\n            _seniorIncomeAllocation,\\n            _stableDebtAddress,\\n            _interestRateStrategyAddress\\n        );\\n    }\\n\\n    function updateStateOnDeposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount\\n    ) public onlyAssociatedContract {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        ValidationLogic.validateDeposit(reserve, _amount);\\n        reserve.updateState(_tranche);\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            reserve.updateInterestRates(_asset, _amount, 0, 0, 0);\\n        } else {\\n            reserve.updateInterestRates(_asset, 0, 0, _amount, 0);\\n        }\\n    }\\n\\n    function activeReserve(address _asset) public onlyAssociatedContract {\\n        DataTypes.ReserveConfigurationMap\\n            memory currentConfig = getConfiguration(_asset);\\n        currentConfig.setActive(true);\\n        setConfiguration(_asset, currentConfig.data);\\n    }\\n\\n    /*********************************************** View functions ***********************************************/\\n\\n    function getFlags(address _asset)\\n        public\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        DataTypes.ReserveConfigurationMap\\n            memory currentConfig = getConfiguration(_asset);\\n        return currentConfig.getFlags();\\n    }\\n\\n    function getReserveData(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        return _reserves[_asset];\\n    }\\n\\n    function getConfiguration(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        return _reserves[_asset].configuration;\\n    }\\n\\n    function setConfiguration(address _asset, uint256 configuration) internal {\\n        _reserves[_asset].configuration.data = configuration;\\n    }\\n\\n    function getLiquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].getLiquidityRate(_tranche);\\n    }\\n\\n    function getJuniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].juniorLiquidityIndex;\\n    }\\n\\n    function getSeniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].seniorLiquidityIndex;\\n    }\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) public view returns (uint256) {\\n        return _reserves[_asset].getNormalizedIncome(_tranche);\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n}\\n\",\"keccak256\":\"0x79d92c4a5f5f36e4d03ee3d7766d2ee72779abb4d31e3bc2f68f6cba561b43aa\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IStableDebtToken {\\n    function getAverageStableRate() external view returns (uint256);\\n\\n    function getTotalSupplyAndAvgRate()\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x535bfa631faf7d4836901d80eef474cc530eccdb3afcd488b3e506ea78cced85\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/**\\n@title IReserveInterestRateStrategyInterface interface\\n@notice Interface for the calculation of the interest rates.\\n*/\\n\\ninterface IReserveInterestRateStrategy {\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xa80f4dca04db5b06c6ca898242c96f9d72816cf05e921ed4ba4081b90480c70e\"},\"contracts/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Voyage\\n * @notice Implements the bitmap logic to handle the reserve configuration, inspired by Aave\\n **/\\nlibrary ReserveConfiguration {\\n    uint256 constant LIQUIDATE_BONUS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 constant DECIMAL_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80FFFF; // prettier-ignore\\n    uint256 constant ACTIVE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFF; // prettier-ignore\\n    uint256 constant FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFF; // prettier-ignore\\n    uint256 constant BORROWING_ENABLE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFF; // prettier-ignore\\n    uint256 constant RESERVED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF87FFFFFF; // prettier-ignore\\n    uint256 constant RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0007FFFFFFF; // prettier-ignore\\n    uint256 constant LOCKUP_PERIOD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80007FFFFFFFFFFF; // prettier-ignore\\n\\n    uint256 constant DECIMAL_MASK_BIT_POSITION = 16;\\n    uint256 constant ACTIVE_MASK_BIT_POSITION = 24;\\n    uint256 constant FROZEN_MASK_BIT_POSITION = 25;\\n    uint256 constant BORROWING_ENABLE_MASK_POSITION = 26;\\n    uint256 constant RESERVED_MASK_BIT_POSITION = 27;\\n    uint256 constant RESERVE_FACTOR_MASK_BIT_POSITION = 31;\\n    uint256 constant LOCKUP_PERIOD_MASK_BIT_POSITION = 47;\\n\\n    /**\\n     * Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flags representing active, frozen, borrowing enabled\\n     **/\\n    function getFlags(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_ENABLE_MASK) != 0\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     **/\\n    function setActive(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool active\\n    ) internal pure {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << ACTIVE_MASK_BIT_POSITION);\\n    }\\n\\n    function getActive(DataTypes.ReserveConfigurationMap storage self)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x23a62f92e3d54e0ea396ca9f3bdce06e7c38ef191b2c27ff582140207e5a28c2\",\"license\":\"GPL-3.0\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors library\\n * @author Voyager\\n * @notice Defines the error messages emitted by the different contracts of the Voyager protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - LM = LiquidityManager\\n *  - CT = Common errors between tokens\\n *  - RL = ReserveLogic\\n */\\nlibrary Errors {\\n    string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n    string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n    string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL = '20';\\n    string public constant CT_INVALID_MINT_AMOUNT = '21';\\n    string public constant CT_INVALID_BURN_AMOUNT = '22';\\n    string public constant LM_NOT_CONTRACT = '60';\\n    string public constant RL_LIQUIDITY_RATE_OVERFLOW = '80'; //  Liquidity rate overflows uint128\\n    string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '81'; //  Stable borrow rate overflows uint128\\n}\\n\",\"keccak256\":\"0x7fd680f0b6d926ef626121d92f4102e8c87a74d21e6041ec377601da444fc56a\",\"license\":\"agpl-3.0\"},\"contracts/libraries/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport '../math/WadRayMath.sol';\\nimport '../math/MathUtils.sol';\\nimport '../types/DataTypes.sol';\\nimport '../helpers/Errors.sol';\\nimport '../../interfaces/IDebtToken.sol';\\nimport '../../component/liquiditymanager/DefaultReserveInterestRateStrategy.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author Voyager\\n * @notice Implements the logic to update the reserves state\\n **/\\nlibrary ReserveLogic {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    using ReserveLogic for DataTypes.ReserveData;\\n\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed asset,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 liquidityIndex\\n    );\\n\\n    function init(\\n        DataTypes.ReserveData storage reserve,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress\\n    ) external {\\n        reserve.juniorLiquidityIndex = WadRayMath.ray();\\n        reserve.seniorLiquidityIndex = WadRayMath.ray();\\n        reserve.juniorDepositTokenAddress = _juniorDepositTokenAddress;\\n        reserve.seniorDepositTokenAddress = _seniorDepositTokenAddress;\\n        //reserve.currentOverallLiquidityRate = WadRayMath.ray();\\n        reserve.currentJuniorIncomeAllocation = _juniorIncomeAllocation;\\n        reserve.currentSeniorIncomeAllocation = _seniorIncomeAllocation;\\n        reserve.stableDebtAddress = _stableDebtAddress;\\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\\n    }\\n\\n    function updateState(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public {\\n        _updateIndexes(reserve, _tranche);\\n    }\\n\\n    function getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public view returns (uint256) {\\n        return reserve._getLiquidityRate(_tranche);\\n    }\\n\\n    struct UpdateInterestRatesLocalVars {\\n        address stableDebtTokenAddress;\\n        uint256 availableLiquidity;\\n        uint256 totalStableDebt;\\n        uint256 newLiquidityRate;\\n        uint256 newStableRate;\\n        uint256 avgStableRate;\\n    }\\n\\n    function updateInterestRates(\\n        DataTypes.ReserveData storage _reserve,\\n        address _reserveAddress,\\n        uint256 _juniorLiquidityAdded,\\n        uint256 _juniorLiquidityTaken,\\n        uint256 _seniorLiquidityAdded,\\n        uint256 _seniorLiquidityTaken\\n    ) public {\\n        UpdateInterestRatesLocalVars memory vars;\\n\\n        vars.stableDebtTokenAddress = _reserve.stableDebtAddress;\\n        uint256 liquidityAdded = _juniorLiquidityAdded.add(\\n            _seniorLiquidityAdded\\n        );\\n        uint256 liquidityTaken = _juniorLiquidityTaken.add(\\n            _seniorLiquidityTaken\\n        );\\n\\n        (vars.totalStableDebt, vars.avgStableRate) = IStableDebtToken(\\n            _reserve.stableDebtAddress\\n        ).getTotalSupplyAndAvgRate();\\n\\n        (\\n            vars.newLiquidityRate,\\n            vars.newStableRate\\n        ) = IReserveInterestRateStrategy(_reserve.interestRateStrategyAddress)\\n            .calculateInterestRates(\\n                _reserveAddress,\\n                _reserve.juniorDepositTokenAddress,\\n                _reserve.seniorDepositTokenAddress,\\n                liquidityAdded,\\n                liquidityTaken,\\n                _reserve.totalBorrows,\\n                vars.avgStableRate\\n            );\\n        require(\\n            vars.newLiquidityRate <= type(uint128).max,\\n            Errors.RL_LIQUIDITY_RATE_OVERFLOW\\n        );\\n        require(\\n            vars.newStableRate <= type(uint128).max,\\n            Errors.RL_STABLE_BORROW_RATE_OVERFLOW\\n        );\\n        _reserve.currentOverallLiquidityRate = vars.newLiquidityRate;\\n        _reserve.currentBorrowRate = vars.newStableRate;\\n\\n        emit ReserveDataUpdated(\\n            _reserveAddress,\\n            vars.newLiquidityRate,\\n            vars.newStableRate,\\n            vars.newLiquidityRate\\n        );\\n    }\\n\\n    function getNormalizedIncome(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        uint40 timestamp;\\n        uint256 liquidityIndex;\\n        if (_tranche == Tranche.JUNIOR) {\\n            timestamp = reserve.juniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.juniorLiquidityIndex;\\n        } else {\\n            timestamp = reserve.seniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.seniorLiquidityIndex;\\n        }\\n\\n        //solium-disable-next-line\\n        if (timestamp == uint40(block.timestamp)) {\\n            return liquidityIndex;\\n        }\\n\\n        uint256 cumulated = MathUtils\\n            .calculateLinearInterest(\\n                reserve._getLiquidityRate(_tranche),\\n                timestamp\\n            )\\n            .rayMul(liquidityIndex);\\n        return cumulated;\\n    }\\n\\n    function _getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        uint256 totalAllocationInRay = reserve\\n            .currentJuniorIncomeAllocation\\n            .add(reserve.currentSeniorIncomeAllocation);\\n        if (_tranche == Tranche.JUNIOR) {\\n            return\\n                reserve.currentOverallLiquidityRate.rayMul(\\n                    reserve.currentJuniorIncomeAllocation.rayDiv(\\n                        totalAllocationInRay\\n                    )\\n                );\\n        } else {\\n            return\\n                reserve.currentOverallLiquidityRate.rayMul(\\n                    reserve.currentSeniorIncomeAllocation.rayDiv(\\n                        totalAllocationInRay\\n                    )\\n                );\\n        }\\n    }\\n\\n    function _updateIndexes(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal {\\n        if (_tranche == Tranche.JUNIOR) {\\n            uint256 previousJuniorLiquidityIndex = reserve.juniorLiquidityIndex;\\n            uint256 lastJuniorUpdatedTimestamp = reserve\\n                .juniorLastUpdateTimestamp;\\n            reserve._updateJuniorLiquidityIndex(\\n                previousJuniorLiquidityIndex,\\n                uint40(lastJuniorUpdatedTimestamp)\\n            );\\n        } else {\\n            uint256 previousSeniorLiquidityIndex = reserve.seniorLiquidityIndex;\\n            uint256 lastSeniorUpdatedTimestamp = reserve\\n                .seniorLastUpdateTimestamp;\\n            reserve._updateSeniorLiquidityIndex(\\n                previousSeniorLiquidityIndex,\\n                uint40(lastSeniorUpdatedTimestamp)\\n            );\\n        }\\n    }\\n\\n    function _updateJuniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 juniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 juniorLiquidityRate = reserve._getLiquidityRate(Tranche.JUNIOR);\\n        uint256 newJuniorLiquidityIndex = juniorLiquidityIndex;\\n\\n        // only cumulating if there is any income being produced\\n        if (juniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(juniorLiquidityRate, timestamp);\\n            newJuniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                juniorLiquidityIndex\\n            );\\n            reserve.juniorLiquidityIndex = newJuniorLiquidityIndex;\\n        }\\n\\n        reserve.juniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newJuniorLiquidityIndex;\\n    }\\n\\n    function _updateSeniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 seniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 seniorLiquidityRate = reserve._getLiquidityRate(Tranche.SENIOR);\\n        uint256 newSeniorLiquidityIndex = seniorLiquidityIndex;\\n\\n        if (seniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(seniorLiquidityRate, timestamp);\\n            newSeniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                seniorLiquidityIndex\\n            );\\n            reserve.seniorLiquidityIndex = newSeniorLiquidityIndex;\\n        }\\n        reserve.seniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newSeniorLiquidityIndex;\\n    }\\n}\\n\",\"keccak256\":\"0xbbdd75288e734f54c4fe1cb804e510419626ccc7dfcdb1e15790a417022d134e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/logic/ValidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../types/DataTypes.sol';\\nimport '../configuration/ReserveConfiguration.sol';\\nimport '../helpers/Errors.sol';\\n\\nlibrary ValidationLogic {\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    /**\\n     * @dev Validates a deposit token\\n     * @param reserve The reserve object on which the user is depositing\\n     * @param amount The amount to be deposited\\n     **/\\n    function validateDeposit(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amount\\n    ) external view {\\n        (bool isActive, bool isFrozen, ) = reserve.configuration.getFlags();\\n        require(amount != 0, Errors.VL_INVALID_AMOUNT);\\n        require(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n        require(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n    }\\n}\\n\",\"keccak256\":\"0xdd470946bea9515caf3bfdc20ae4e78f2138dc785ae3650a0ac8951dedf3581e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(\\n            uint256(lastUpdateTimestamp)\\n        );\\n\\n        return\\n            (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n     * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        if (exp == 0) {\\n            return WadRayMath.ray();\\n        }\\n\\n        uint256 expMinusOne = exp - 1;\\n\\n        uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n        uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n        uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n        uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n        uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n        uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(\\n            basePowerThree\\n        ) / 6;\\n\\n        return\\n            WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(\\n                thirdTerm\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xeb644d3d04ac6c043657b2b835fbf71d1f2795f1f713b900cc43582158f31eac\",\"license\":\"agpl-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87bc93b45f82b290b2b6a9f00ce09f8c5c2b758931a85b37fb5d117a79031d3f\"},\"contracts/libraries/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(owner, pendingOwner);\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x5dca7c2446290ea3519aa0f9295e1edfbff47a1474edbe126f08dca92843e2c8\"},\"contracts/libraries/state/State.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../ownership/Ownable.sol';\\n\\nabstract contract State is Ownable {\\n    mapping(address => bool) public associatedContracts;\\n\\n    constructor(address _associatedContract) {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner != address(0), 'Owner must be set');\\n\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n\\n    event AssociatedContractUpdated(address associatedContract);\\n\\n    modifier onlyAssociatedContract() {\\n        require(\\n            associatedContracts[msg.sender],\\n            'Only the associated contract can perform this action'\\n        );\\n        _;\\n    }\\n\\n    // Change the associated contract to a new address\\n    function setAssociatedContract(address _associatedContract)\\n        external\\n        onlyOwner\\n    {\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n}\\n\",\"keccak256\":\"0x835e4507f1c45e5cb1ac2ab722b38969af0c5e2bd4e4fb8fc34046d56d555b9f\",\"license\":\"GPL-3.0\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary DataTypes {\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        // for calculating overall interested accumulated\\n        // then split it into two indexs base on two allocations\\n        uint256 currentOverallLiquidityRate;\\n        // Expressed in ray\\n        uint256 currentSeniorIncomeAllocation;\\n        // Expressed in ray\\n        uint256 currentJuniorIncomeAllocation;\\n        uint256 juniorLiquidityIndex;\\n        uint256 seniorLiquidityIndex;\\n        uint256 totalBorrows;\\n        uint256 currentBorrowRate;\\n        // Expressed in ray\\n        uint256 securityRequirement;\\n        //the decimals of the reserve asset\\n        uint256 decimals;\\n        address interestRateStrategyAddress;\\n        address juniorDepositTokenAddress;\\n        address seniorDepositTokenAddress;\\n        address stableDebtAddress;\\n        uint40 juniorLastUpdateTimestamp;\\n        uint40 seniorLastUpdateTimestamp;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: Liquidate bonus\\n        //bit 16-23: Decimals\\n        //bit 24: Reserve is active\\n        //bit 25: reserve is frozen\\n        //bit 26: borrowing is enabled\\n        //bit 27-30: reserved\\n        //bit 31-46: reserve factor\\n        //bit 47-62: lock up period in seconds\\n        uint256 data;\\n    }\\n}\\n\",\"keccak256\":\"0x9bfbc7b717a74aaed343b3add5af6eec7c69dbefb556c4481cbbf96d10ef866b\",\"license\":\"GPL-3.0\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200241938038062002419833981810160405281019062000037919062000289565b80336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000186576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017d906200031c565b60405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e03816040516200020f91906200034f565b60405180910390a150506200036c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002518262000224565b9050919050565b620002638162000244565b81146200026f57600080fd5b50565b600081519050620002838162000258565b92915050565b600060208284031215620002a257620002a16200021f565b5b6000620002b28482850162000272565b91505092915050565b600082825260208201905092915050565b7f4f776e6572206d75737420626520736574000000000000000000000000000000600082015250565b600062000304601183620002bb565b91506200031182620002cc565b602082019050919050565b600060208201905081810360008301526200033781620002f5565b9050919050565b620003498162000244565b82525050565b60006020820190506200036660008301846200033e565b92915050565b61209d806200037c6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063817ad5d3116100a25780639cc67a0f116100715780639cc67a0f146102f5578063c44b11f714610325578063c8caf68014610355578063e30c397814610371578063f2fde38b1461038f57610116565b8063817ad5d31461026b57806381f781511461029d5780638da5cb5b146102b95780638f32d59b146102d757610116565b80634e71e0c8116100e95780634e71e0c8146101c757806352f445ca146101d15780635748ff18146101ed5780635c975abb1461021d578063776f68911461023b57610116565b806303d6fa951461011b5780631f1fc35f1461014b578063284592b21461016757806335ea6a7514610197575b600080fd5b610135600480360381019061013091906116ca565b6103ab565b6040516101429190611710565b60405180910390f35b61016560048036038101906101609190611757565b6103f7565b005b610181600480360381019061017c919061181e565b61053f565b60405161018e9190611710565b60405180910390f35b6101b160048036038101906101ac91906116ca565b610612565b6040516101be9190611a02565b60405180910390f35b6101cf61088e565b005b6101eb60048036038101906101e691906116ca565b610a2a565b005b610207600480360381019061020291906116ca565b610b03565b6040516102149190611a39565b60405180910390f35b610225610b23565b6040516102329190611a39565b60405180910390f35b6102556004803603810190610250919061181e565b610b3a565b6040516102629190611710565b60405180910390f35b610285600480360381019061028091906116ca565b610b95565b60405161029493929190611a54565b60405180910390f35b6102b760048036038101906102b291906116ca565b610bbd565b005b6102c1610c7c565b6040516102ce9190611a9a565b60405180910390f35b6102df610ca0565b6040516102ec9190611a39565b60405180910390f35b61030f600480360381019061030a91906116ca565b610cf7565b60405161031c9190611710565b60405180910390f35b61033f600480360381019061033a91906116ca565b610d43565b60405161034c9190611ad1565b60405180910390f35b61036f600480360381019061036a9190611aec565b610da9565b005b61037961106f565b6040516103869190611a9a565b60405180910390f35b6103a960048036038101906103a491906116ca565b611095565b005b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047a90611bc2565b60405180910390fd5b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020739c2b7104dA85dEcceD4A2e46563B9C99613c2d58630ff0199990918888888888886040518863ffffffff1660e01b81526004016105069796959493929190611c07565b60006040518083038186803b15801561051e57600080fd5b505af4158015610532573d6000803e3d6000fd5b5050505050505050505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020739c2b7104dA85dEcceD4A2e46563B9C99613c2d5863bb43fb809091846040518363ffffffff1660e01b81526004016105ba929190611ced565b60206040518083038186803b1580156105d257600080fd5b505af41580156105e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060a9190611d2b565b905092915050565b61061a61156b565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610200016040529081600082016040518060200160405290816000820154815250508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d820160149054906101000a900464ffffffffff1664ffffffffff1664ffffffffff168152602001600d820160199054906101000a900464ffffffffff1664ffffffffff1664ffffffffff16815250509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610a32610ca0565b610a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6890611da4565b60405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e0381604051610af89190611a9a565b60405180910390a150565b60026020528060005260406000206000915054906101000a900460ff1681565b6000600460009054906101000a900460ff16905090565b6000610b8d82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061112090919063ffffffff16565b905092915050565b600080600080610ba485610d43565b9050610baf816111f4565b935093509350509193909250565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4090611bc2565b60405180910390fd5b6000610c5482610d43565b9050610c6a60018261128790919063ffffffff16565b610c788282600001516112d2565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501549050919050565b610d4b611654565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016040518060200160405290816000820154815250509050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2c90611bc2565b60405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905073Fb9Efa22ae1A9C6D7A93a9393A9700EcA72B43F8630eca322b82846040518363ffffffff1660e01b8152600401610eb1929190611dc4565b60006040518083038186803b158015610ec957600080fd5b505af4158015610edd573d6000803e3d6000fd5b5050505080739c2b7104dA85dEcceD4A2e46563B9C99613c2d5863a4c88c079091856040518363ffffffff1660e01b8152600401610f1c929190611ced565b60006040518083038186803b158015610f3457600080fd5b505af4158015610f48573d6000803e3d6000fd5b50505050826001811115610f5f57610f5e611c76565b5b60006001811115610f7357610f72611c76565b5b1415610ff35780739c2b7104dA85dEcceD4A2e46563B9C99613c2d58636a2da27e9091868560008060006040518763ffffffff1660e01b8152600401610fbe96959493929190611e32565b60006040518083038186803b158015610fd657600080fd5b505af4158015610fea573d6000803e3d6000fd5b50505050611069565b80739c2b7104dA85dEcceD4A2e46563B9C99613c2d58636a2da27e9091866000808760006040518763ffffffff1660e01b815260040161103896959493929190611e93565b60006040518083038186803b15801561105057600080fd5b505af4158015611064573d6000803e3d6000fd5b505050505b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61109d610ca0565b6110dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d390611da4565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600080600181111561113857611137611c76565b5b84600181111561114b5761114a611c76565b5b14156111755784600d0160149054906101000a900464ffffffffff16915084600401549050611195565b84600d0160199054906101000a900464ffffffffff169150846005015490505b4264ffffffffff168264ffffffffff1614156111b55780925050506111ee565b60006111e5826111d76111d1888a61132090919063ffffffff16565b866113d9565b61143c90919063ffffffff16565b90508093505050505b92915050565b6000806000808460000151905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffff198216141560007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdffffff198316141560007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbffffff1984161415935093509350509193909250565b601881611295576000611298565b60015b60ff16901b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffff836000015116178260000181815250505050565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600001819055505050565b60008061133e846002015485600301546114a190919063ffffffff16565b90506000600181111561135457611353611c76565b5b83600181111561136757611366611c76565b5b14156113a25761139a6113878286600301546114b790919063ffffffff16565b856001015461143c90919063ffffffff16565b9150506113d3565b6113cf6113bc8286600201546114b790919063ffffffff16565b856001015461143c90919063ffffffff16565b9150505b92915050565b6000806113f68364ffffffffff164261151590919063ffffffff16565b905061143361140361152b565b6301e1338061141b848861153f90919063ffffffff16565b6114259190611f52565b6114a190919063ffffffff16565b91505092915050565b60006114996b033b2e3c9fd0803ce800000061148b611464858761153f90919063ffffffff16565b60026b033b2e3c9fd0803ce800000061147d9190611f52565b6114a190919063ffffffff16565b61155590919063ffffffff16565b905092915050565b600081836114af9190611f83565b905092915050565b6000806002836114c79190611f52565b905061150c836114fe6114ef6b033b2e3c9fd0803ce80000008861153f90919063ffffffff16565b846114a190919063ffffffff16565b61155590919063ffffffff16565b91505092915050565b600081836115239190611fd9565b905092915050565b60006b033b2e3c9fd0803ce8000000905090565b6000818361154d919061200d565b905092915050565b600081836115639190611f52565b905092915050565b60405180610200016040528061157f611654565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600064ffffffffff1681525090565b6040518060200160405280600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116978261166c565b9050919050565b6116a78161168c565b81146116b257600080fd5b50565b6000813590506116c48161169e565b92915050565b6000602082840312156116e0576116df611667565b5b60006116ee848285016116b5565b91505092915050565b6000819050919050565b61170a816116f7565b82525050565b60006020820190506117256000830184611701565b92915050565b611734816116f7565b811461173f57600080fd5b50565b6000813590506117518161172b565b92915050565b600080600080600080600060e0888a03121561177657611775611667565b5b60006117848a828b016116b5565b97505060206117958a828b016116b5565b96505060406117a68a828b016116b5565b95505060606117b78a828b01611742565b94505060806117c88a828b01611742565b93505060a06117d98a828b016116b5565b92505060c06117ea8a828b016116b5565b91505092959891949750929550565b6002811061180657600080fd5b50565b600081359050611818816117f9565b92915050565b6000806040838503121561183557611834611667565b5b6000611843858286016116b5565b925050602061185485828601611809565b9150509250929050565b611867816116f7565b82525050565b602082016000820151611883600085018261185e565b50505050565b6118928161168c565b82525050565b600064ffffffffff82169050919050565b6118b281611898565b82525050565b610200820160008201516118cf600085018261186d565b5060208201516118e2602085018261185e565b5060408201516118f5604085018261185e565b506060820151611908606085018261185e565b50608082015161191b608085018261185e565b5060a082015161192e60a085018261185e565b5060c082015161194160c085018261185e565b5060e082015161195460e085018261185e565b5061010082015161196961010085018261185e565b5061012082015161197e61012085018261185e565b50610140820151611993610140850182611889565b506101608201516119a8610160850182611889565b506101808201516119bd610180850182611889565b506101a08201516119d26101a0850182611889565b506101c08201516119e76101c08501826118a9565b506101e08201516119fc6101e08501826118a9565b50505050565b600061020082019050611a1860008301846118b8565b92915050565b60008115159050919050565b611a3381611a1e565b82525050565b6000602082019050611a4e6000830184611a2a565b92915050565b6000606082019050611a696000830186611a2a565b611a766020830185611a2a565b611a836040830184611a2a565b949350505050565b611a948161168c565b82525050565b6000602082019050611aaf6000830184611a8b565b92915050565b602082016000820151611acb600085018261185e565b50505050565b6000602082019050611ae66000830184611ab5565b92915050565b600080600060608486031215611b0557611b04611667565b5b6000611b13868287016116b5565b9350506020611b2486828701611809565b9250506040611b3586828701611742565b9150509250925092565b600082825260208201905092915050565b7f4f6e6c7920746865206173736f63696174656420636f6e74726163742063616e60008201527f20706572666f726d207468697320616374696f6e000000000000000000000000602082015250565b6000611bac603483611b3f565b9150611bb782611b50565b604082019050919050565b60006020820190508181036000830152611bdb81611b9f565b9050919050565b8082525050565b611bf28161168c565b82525050565b611c01816116f7565b82525050565b600060e082019050611c1c600083018a611be2565b611c296020830189611be9565b611c366040830188611be9565b611c436060830187611bf8565b611c506080830186611bf8565b611c5d60a0830185611be9565b611c6a60c0830184611be9565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611cb657611cb5611c76565b5b50565b6000819050611cc782611ca5565b919050565b6000611cd782611cb9565b9050919050565b611ce781611ccc565b82525050565b6000604082019050611d026000830185611be2565b611d0f6020830184611cde565b9392505050565b600081519050611d258161172b565b92915050565b600060208284031215611d4157611d40611667565b5b6000611d4f84828501611d16565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611d8e602083611b3f565b9150611d9982611d58565b602082019050919050565b60006020820190508181036000830152611dbd81611d81565b9050919050565b6000604082019050611dd96000830185611be2565b611de66020830184611bf8565b9392505050565b6000819050919050565b6000819050919050565b6000611e1c611e17611e1284611ded565b611df7565b6116f7565b9050919050565b611e2c81611e01565b82525050565b600060c082019050611e476000830189611be2565b611e546020830188611be9565b611e616040830187611bf8565b611e6e6060830186611e23565b611e7b6080830185611e23565b611e8860a0830184611e23565b979650505050505050565b600060c082019050611ea86000830189611be2565b611eb56020830188611be9565b611ec26040830187611e23565b611ecf6060830186611e23565b611edc6080830185611bf8565b611ee960a0830184611e23565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f5d826116f7565b9150611f68836116f7565b925082611f7857611f77611ef4565b5b828204905092915050565b6000611f8e826116f7565b9150611f99836116f7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611fce57611fcd611f23565b5b828201905092915050565b6000611fe4826116f7565b9150611fef836116f7565b92508282101561200257612001611f23565b5b828203905092915050565b6000612018826116f7565b9150612023836116f7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561205c5761205b611f23565b5b82820290509291505056fea2646970667358221220171880c426b3be0649e06ae1a0ab8c0ae5b734dac9eea3ed9c6a1a1c8d888b0a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063817ad5d3116100a25780639cc67a0f116100715780639cc67a0f146102f5578063c44b11f714610325578063c8caf68014610355578063e30c397814610371578063f2fde38b1461038f57610116565b8063817ad5d31461026b57806381f781511461029d5780638da5cb5b146102b95780638f32d59b146102d757610116565b80634e71e0c8116100e95780634e71e0c8146101c757806352f445ca146101d15780635748ff18146101ed5780635c975abb1461021d578063776f68911461023b57610116565b806303d6fa951461011b5780631f1fc35f1461014b578063284592b21461016757806335ea6a7514610197575b600080fd5b610135600480360381019061013091906116ca565b6103ab565b6040516101429190611710565b60405180910390f35b61016560048036038101906101609190611757565b6103f7565b005b610181600480360381019061017c919061181e565b61053f565b60405161018e9190611710565b60405180910390f35b6101b160048036038101906101ac91906116ca565b610612565b6040516101be9190611a02565b60405180910390f35b6101cf61088e565b005b6101eb60048036038101906101e691906116ca565b610a2a565b005b610207600480360381019061020291906116ca565b610b03565b6040516102149190611a39565b60405180910390f35b610225610b23565b6040516102329190611a39565b60405180910390f35b6102556004803603810190610250919061181e565b610b3a565b6040516102629190611710565b60405180910390f35b610285600480360381019061028091906116ca565b610b95565b60405161029493929190611a54565b60405180910390f35b6102b760048036038101906102b291906116ca565b610bbd565b005b6102c1610c7c565b6040516102ce9190611a9a565b60405180910390f35b6102df610ca0565b6040516102ec9190611a39565b60405180910390f35b61030f600480360381019061030a91906116ca565b610cf7565b60405161031c9190611710565b60405180910390f35b61033f600480360381019061033a91906116ca565b610d43565b60405161034c9190611ad1565b60405180910390f35b61036f600480360381019061036a9190611aec565b610da9565b005b61037961106f565b6040516103869190611a9a565b60405180910390f35b6103a960048036038101906103a491906116ca565b611095565b005b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047a90611bc2565b60405180910390fd5b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$d3b4366daeb9cadc7528af6145b50b2183$__630ff0199990918888888888886040518863ffffffff1660e01b81526004016105069796959493929190611c07565b60006040518083038186803b15801561051e57600080fd5b505af4158015610532573d6000803e3d6000fd5b5050505050505050505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$d3b4366daeb9cadc7528af6145b50b2183$__63bb43fb809091846040518363ffffffff1660e01b81526004016105ba929190611ced565b60206040518083038186803b1580156105d257600080fd5b505af41580156105e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060a9190611d2b565b905092915050565b61061a61156b565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610200016040529081600082016040518060200160405290816000820154815250508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d820160149054906101000a900464ffffffffff1664ffffffffff1664ffffffffff168152602001600d820160199054906101000a900464ffffffffff1664ffffffffff1664ffffffffff16815250509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610a32610ca0565b610a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6890611da4565b60405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e0381604051610af89190611a9a565b60405180910390a150565b60026020528060005260406000206000915054906101000a900460ff1681565b6000600460009054906101000a900460ff16905090565b6000610b8d82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061112090919063ffffffff16565b905092915050565b600080600080610ba485610d43565b9050610baf816111f4565b935093509350509193909250565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4090611bc2565b60405180910390fd5b6000610c5482610d43565b9050610c6a60018261128790919063ffffffff16565b610c788282600001516112d2565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501549050919050565b610d4b611654565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016040518060200160405290816000820154815250509050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2c90611bc2565b60405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905073__$5201a97c05ba6aa659e2f36a933dd51801$__630eca322b82846040518363ffffffff1660e01b8152600401610eb1929190611dc4565b60006040518083038186803b158015610ec957600080fd5b505af4158015610edd573d6000803e3d6000fd5b505050508073__$d3b4366daeb9cadc7528af6145b50b2183$__63a4c88c079091856040518363ffffffff1660e01b8152600401610f1c929190611ced565b60006040518083038186803b158015610f3457600080fd5b505af4158015610f48573d6000803e3d6000fd5b50505050826001811115610f5f57610f5e611c76565b5b60006001811115610f7357610f72611c76565b5b1415610ff3578073__$d3b4366daeb9cadc7528af6145b50b2183$__636a2da27e9091868560008060006040518763ffffffff1660e01b8152600401610fbe96959493929190611e32565b60006040518083038186803b158015610fd657600080fd5b505af4158015610fea573d6000803e3d6000fd5b50505050611069565b8073__$d3b4366daeb9cadc7528af6145b50b2183$__636a2da27e9091866000808760006040518763ffffffff1660e01b815260040161103896959493929190611e93565b60006040518083038186803b15801561105057600080fd5b505af4158015611064573d6000803e3d6000fd5b505050505b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61109d610ca0565b6110dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d390611da4565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600080600181111561113857611137611c76565b5b84600181111561114b5761114a611c76565b5b14156111755784600d0160149054906101000a900464ffffffffff16915084600401549050611195565b84600d0160199054906101000a900464ffffffffff169150846005015490505b4264ffffffffff168264ffffffffff1614156111b55780925050506111ee565b60006111e5826111d76111d1888a61132090919063ffffffff16565b866113d9565b61143c90919063ffffffff16565b90508093505050505b92915050565b6000806000808460000151905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffff198216141560007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdffffff198316141560007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbffffff1984161415935093509350509193909250565b601881611295576000611298565b60015b60ff16901b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffff836000015116178260000181815250505050565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600001819055505050565b60008061133e846002015485600301546114a190919063ffffffff16565b90506000600181111561135457611353611c76565b5b83600181111561136757611366611c76565b5b14156113a25761139a6113878286600301546114b790919063ffffffff16565b856001015461143c90919063ffffffff16565b9150506113d3565b6113cf6113bc8286600201546114b790919063ffffffff16565b856001015461143c90919063ffffffff16565b9150505b92915050565b6000806113f68364ffffffffff164261151590919063ffffffff16565b905061143361140361152b565b6301e1338061141b848861153f90919063ffffffff16565b6114259190611f52565b6114a190919063ffffffff16565b91505092915050565b60006114996b033b2e3c9fd0803ce800000061148b611464858761153f90919063ffffffff16565b60026b033b2e3c9fd0803ce800000061147d9190611f52565b6114a190919063ffffffff16565b61155590919063ffffffff16565b905092915050565b600081836114af9190611f83565b905092915050565b6000806002836114c79190611f52565b905061150c836114fe6114ef6b033b2e3c9fd0803ce80000008861153f90919063ffffffff16565b846114a190919063ffffffff16565b61155590919063ffffffff16565b91505092915050565b600081836115239190611fd9565b905092915050565b60006b033b2e3c9fd0803ce8000000905090565b6000818361154d919061200d565b905092915050565b600081836115639190611f52565b905092915050565b60405180610200016040528061157f611654565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600064ffffffffff1681525090565b6040518060200160405280600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116978261166c565b9050919050565b6116a78161168c565b81146116b257600080fd5b50565b6000813590506116c48161169e565b92915050565b6000602082840312156116e0576116df611667565b5b60006116ee848285016116b5565b91505092915050565b6000819050919050565b61170a816116f7565b82525050565b60006020820190506117256000830184611701565b92915050565b611734816116f7565b811461173f57600080fd5b50565b6000813590506117518161172b565b92915050565b600080600080600080600060e0888a03121561177657611775611667565b5b60006117848a828b016116b5565b97505060206117958a828b016116b5565b96505060406117a68a828b016116b5565b95505060606117b78a828b01611742565b94505060806117c88a828b01611742565b93505060a06117d98a828b016116b5565b92505060c06117ea8a828b016116b5565b91505092959891949750929550565b6002811061180657600080fd5b50565b600081359050611818816117f9565b92915050565b6000806040838503121561183557611834611667565b5b6000611843858286016116b5565b925050602061185485828601611809565b9150509250929050565b611867816116f7565b82525050565b602082016000820151611883600085018261185e565b50505050565b6118928161168c565b82525050565b600064ffffffffff82169050919050565b6118b281611898565b82525050565b610200820160008201516118cf600085018261186d565b5060208201516118e2602085018261185e565b5060408201516118f5604085018261185e565b506060820151611908606085018261185e565b50608082015161191b608085018261185e565b5060a082015161192e60a085018261185e565b5060c082015161194160c085018261185e565b5060e082015161195460e085018261185e565b5061010082015161196961010085018261185e565b5061012082015161197e61012085018261185e565b50610140820151611993610140850182611889565b506101608201516119a8610160850182611889565b506101808201516119bd610180850182611889565b506101a08201516119d26101a0850182611889565b506101c08201516119e76101c08501826118a9565b506101e08201516119fc6101e08501826118a9565b50505050565b600061020082019050611a1860008301846118b8565b92915050565b60008115159050919050565b611a3381611a1e565b82525050565b6000602082019050611a4e6000830184611a2a565b92915050565b6000606082019050611a696000830186611a2a565b611a766020830185611a2a565b611a836040830184611a2a565b949350505050565b611a948161168c565b82525050565b6000602082019050611aaf6000830184611a8b565b92915050565b602082016000820151611acb600085018261185e565b50505050565b6000602082019050611ae66000830184611ab5565b92915050565b600080600060608486031215611b0557611b04611667565b5b6000611b13868287016116b5565b9350506020611b2486828701611809565b9250506040611b3586828701611742565b9150509250925092565b600082825260208201905092915050565b7f4f6e6c7920746865206173736f63696174656420636f6e74726163742063616e60008201527f20706572666f726d207468697320616374696f6e000000000000000000000000602082015250565b6000611bac603483611b3f565b9150611bb782611b50565b604082019050919050565b60006020820190508181036000830152611bdb81611b9f565b9050919050565b8082525050565b611bf28161168c565b82525050565b611c01816116f7565b82525050565b600060e082019050611c1c600083018a611be2565b611c296020830189611be9565b611c366040830188611be9565b611c436060830187611bf8565b611c506080830186611bf8565b611c5d60a0830185611be9565b611c6a60c0830184611be9565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611cb657611cb5611c76565b5b50565b6000819050611cc782611ca5565b919050565b6000611cd782611cb9565b9050919050565b611ce781611ccc565b82525050565b6000604082019050611d026000830185611be2565b611d0f6020830184611cde565b9392505050565b600081519050611d258161172b565b92915050565b600060208284031215611d4157611d40611667565b5b6000611d4f84828501611d16565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611d8e602083611b3f565b9150611d9982611d58565b602082019050919050565b60006020820190508181036000830152611dbd81611d81565b9050919050565b6000604082019050611dd96000830185611be2565b611de66020830184611bf8565b9392505050565b6000819050919050565b6000819050919050565b6000611e1c611e17611e1284611ded565b611df7565b6116f7565b9050919050565b611e2c81611e01565b82525050565b600060c082019050611e476000830189611be2565b611e546020830188611be9565b611e616040830187611bf8565b611e6e6060830186611e23565b611e7b6080830185611e23565b611e8860a0830184611e23565b979650505050505050565b600060c082019050611ea86000830189611be2565b611eb56020830188611be9565b611ec26040830187611e23565b611ecf6060830186611e23565b611edc6080830185611bf8565b611ee960a0830184611e23565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f5d826116f7565b9150611f68836116f7565b925082611f7857611f77611ef4565b5b828204905092915050565b6000611f8e826116f7565b9150611f99836116f7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611fce57611fcd611f23565b5b828201905092915050565b6000611fe4826116f7565b9150611fef836116f7565b92508282101561200257612001611f23565b5b828203905092915050565b6000612018826116f7565b9150612023836116f7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561205c5761205b611f23565b5b82820290509291505056fea2646970667358221220171880c426b3be0649e06ae1a0ab8c0ae5b734dac9eea3ed9c6a1a1c8d888b0a64736f6c63430008090033",
  "libraries": {
    "ReserveLogic": "0x9c2b7104dA85dEcceD4A2e46563B9C99613c2d58",
    "ValidationLogic": "0xFb9Efa22ae1A9C6D7A93a9393A9700EcA72B43F8"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimOwnership()": {
        "details": "Allows the pendingOwner address to finalize the transfer."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to set the pendingOwner address.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6863,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6865,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7189,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "associatedContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1997,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "_reserves",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(ReserveData)7289_storage)"
      },
      {
        "astId": 1999,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "_paused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ReserveData)7289_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.ReserveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveData)7289_storage"
      },
      "t_struct(ReserveConfigurationMap)7292_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveConfigurationMap",
        "members": [
          {
            "astId": 7291,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ReserveData)7289_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveData",
        "members": [
          {
            "astId": 7258,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "configuration",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ReserveConfigurationMap)7292_storage"
          },
          {
            "astId": 7260,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "currentOverallLiquidityRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7262,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "currentSeniorIncomeAllocation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7264,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "currentJuniorIncomeAllocation",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7266,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "juniorLiquidityIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7268,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "seniorLiquidityIndex",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7270,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "totalBorrows",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7272,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "currentBorrowRate",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 7274,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "securityRequirement",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 7276,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "decimals",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 7278,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "interestRateStrategyAddress",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 7280,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "juniorDepositTokenAddress",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          },
          {
            "astId": 7282,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "seniorDepositTokenAddress",
            "offset": 0,
            "slot": "12",
            "type": "t_address"
          },
          {
            "astId": 7284,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "stableDebtAddress",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 7286,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "juniorLastUpdateTimestamp",
            "offset": 20,
            "slot": "13",
            "type": "t_uint40"
          },
          {
            "astId": 7288,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "seniorLastUpdateTimestamp",
            "offset": 25,
            "slot": "13",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}