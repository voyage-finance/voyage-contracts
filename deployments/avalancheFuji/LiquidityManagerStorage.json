{
  "address": "0xCEF670C13E09fa80c05F18e59BF2cd2E65c29CA6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "associatedContract",
          "type": "address"
        }
      ],
      "name": "AssociatedContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "activeReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "associatedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseJuniorDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseSeniorDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ReserveConfigurationMap",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositAndDebt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "juniorDepositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "seniorDepositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDebt",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.DepositAndDebt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getFlags",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getJuniorLiquidityIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        }
      ],
      "name": "getLiquidityRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "data",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.ReserveConfigurationMap",
              "name": "configuration",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentOverallLiquidityRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentSeniorIncomeAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentJuniorIncomeAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "juniorLiquidityIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "seniorLiquidityIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "securityRequirement",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "healthStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "juniorDepositTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seniorDepositTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableDebtAddress",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "juniorLastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "seniorLastUpdateTimestamp",
              "type": "uint40"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserveList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        }
      ],
      "name": "getReserveNormalizedIncome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getSeniorLiquidityIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseJuniorDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseSeniorDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseTotalDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_juniorDepositTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seniorDepositTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_juniorIncomeAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_seniorIncomeAllocation",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stableDebtAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestRateStrategyAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_healthStrategyAddress",
          "type": "address"
        }
      ],
      "name": "initReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juniorDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seniorDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_associatedContract",
          "type": "address"
        }
      ],
      "name": "setAssociatedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updateStateOnBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updateStateOnDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa8986ca4a03b9f35bb2ba0c7357eaca8a2a7898b5085835c0e20355d9282a4da",
  "receipt": {
    "to": null,
    "from": "0x4C616d9377Fa8d928385F0b11Ab16D4bf0f2d544",
    "contractAddress": "0xCEF670C13E09fa80c05F18e59BF2cd2E65c29CA6",
    "transactionIndex": 11,
    "gasUsed": "2691854",
    "logsBloom": "0x
    "blockHash": "0x1b881b1d9ff2754b77fda943c4178b21c6ad7fb8296efe7eb5e71d766a5c6623",
    "transactionHash": "0xa8986ca4a03b9f35bb2ba0c7357eaca8a2a7898b5085835c0e20355d9282a4da",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 8678114,
        "transactionHash": "0xa8986ca4a03b9f35bb2ba0c7357eaca8a2a7898b5085835c0e20355d9282a4da",
        "address": "0xCEF670C13E09fa80c05F18e59BF2cd2E65c29CA6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004c616d9377fa8d928385f0b11ab16d4bf0f2d544"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x1b881b1d9ff2754b77fda943c4178b21c6ad7fb8296efe7eb5e71d766a5c6623"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 8678114,
        "transactionHash": "0xa8986ca4a03b9f35bb2ba0c7357eaca8a2a7898b5085835c0e20355d9282a4da",
        "address": "0xCEF670C13E09fa80c05F18e59BF2cd2E65c29CA6",
        "topics": [
          "0x73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e03"
        ],
        "data": "0x0000000000000000000000007f941d367811770b4c69e4e753438cbe7f3a28de",
        "logIndex": 10,
        "blockHash": "0x1b881b1d9ff2754b77fda943c4178b21c6ad7fb8296efe7eb5e71d766a5c6623"
      }
    ],
    "blockNumber": 8678114,
    "cumulativeGasUsed": "3936787",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7f941D367811770b4c69E4E753438CBe7F3A28de"
  ],
  "numDeployments": 1,
  "solcInputHash": "0f898a17407875c075faf6ebb8a19730",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"associatedContract\",\"type\":\"address\"}],\"name\":\"AssociatedContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"activeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"associatedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseJuniorDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseSeniorDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositAndDebt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"juniorDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DepositAndDebt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getFlags\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getJuniorLiquidityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"getLiquidityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentOverallLiquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSeniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentJuniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorLiquidityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorLiquidityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"securityRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"healthStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"juniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"juniorLastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"seniorLastUpdateTimestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getSeniorLiquidityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseJuniorDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseSeniorDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseTotalDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_juniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_juniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_healthStrategyAddress\",\"type\":\"address\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juniorDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seniorDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_associatedContract\",\"type\":\"address\"}],\"name\":\"setAssociatedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateStateOnBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateStateOnDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimOwnership()\":{\"details\":\"Allows the pendingOwner address to finalize the transfer.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to set the pendingOwner address.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/component/shared/storage/LiquidityManagerStorage.sol\":\"LiquidityManagerStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/component/liquiditymanager/DefaultReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IReserveInterestRateStrategy.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    /**\\n     * this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates\\n     * Expressed in RAY\\n     **/\\n    uint256 public immutable OPTIMAL_UTILIZATION_RATE;\\n\\n    // Base interest rate set by governance. Expressed in ray\\n    uint256 internal immutable baseBorrowRate;\\n\\n    // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope1;\\n\\n    // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope2;\\n\\n    constructor(\\n        uint256 _optimalUtilizationRate,\\n        uint256 _stableRateSlope1,\\n        uint256 _stableRateSlope2,\\n        uint256 _baseBorrowRate\\n    ) public {\\n        OPTIMAL_UTILIZATION_RATE = _optimalUtilizationRate;\\n        baseBorrowRate = _baseBorrowRate;\\n        stableRateSlope1 = _stableRateSlope1;\\n        stableRateSlope2 = _stableRateSlope2;\\n    }\\n\\n    struct CalcInterestRatesLocalVars {\\n        uint256 totalDebt;\\n        uint256 currentStableBorrowRate;\\n        uint256 currentLiquidityRate;\\n        uint256 utilizationRate;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configuration\\n     * @param reserve The address of the reserve\\n     * @param juniorDepositToken The address of junior deposit token\\n     * @param seniorDepositToken The address of senior deposit token\\n     * @param liquidityAdded The liquidity added during the operation\\n     * @param liquidityTaken The liquidity taken during the operation\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256) {\\n        uint256 availableJuniorLiquidity = IERC20(reserve).balanceOf(\\n            juniorDepositToken\\n        );\\n        uint256 availableSeniorLiquidity = IERC20(reserve).balanceOf(\\n            seniorDepositToken\\n        );\\n        uint256 availableLiquidity = availableJuniorLiquidity.add(\\n            availableSeniorLiquidity\\n        );\\n        availableLiquidity = availableLiquidity.add(liquidityAdded).sub(\\n            liquidityTaken\\n        );\\n        return\\n            calculateInterestRates(\\n                reserve,\\n                availableLiquidity,\\n                totalStableDebt,\\n                averageBorrowRate\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * @param reserve The address of the reserve\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @return The liquidity rate, the stable borrow rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) public view returns (uint256, uint256) {\\n        CalcInterestRatesLocalVars memory vars;\\n\\n        vars.totalDebt = totalStableDebt;\\n        vars.currentStableBorrowRate = baseBorrowRate;\\n        vars.currentLiquidityRate = 0;\\n\\n        vars.utilizationRate = vars.totalDebt == 0\\n            ? 0\\n            : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\\n\\n        if (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n            vars.currentStableBorrowRate = vars\\n                .currentStableBorrowRate\\n                .add(stableRateSlope1)\\n                .add(\\n                    stableRateSlope2\\n                        .rayMul(\\n                            vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE)\\n                        )\\n                        .rayDiv(WadRayMath.Ray().sub(OPTIMAL_UTILIZATION_RATE))\\n                );\\n        } else {\\n            vars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\\n                stableRateSlope1.rayMul(vars.utilizationRate).rayDiv(\\n                    OPTIMAL_UTILIZATION_RATE\\n                )\\n            );\\n        }\\n\\n        vars.currentLiquidityRate = averageBorrowRate.rayMul(\\n            vars.utilizationRate\\n        );\\n        return (vars.currentLiquidityRate, vars.currentStableBorrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0x501b0d30efd4654196b7940e1b24d0c44a4dcd82c32288da095e9c63625bd9c6\",\"license\":\"GPL-3.0\"},\"contracts/component/shared/storage/LiquidityManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../../libraries/state/State.sol';\\nimport '../../../libraries/types/DataTypes.sol';\\nimport '../../../libraries/logic/ReserveLogic.sol';\\nimport '../../../libraries/logic/ValidationLogic.sol';\\nimport '../../../libraries/configuration/ReserveConfiguration.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\ncontract LiquidityManagerStorage is State {\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using SafeMath for uint256;\\n\\n    mapping(address => DataTypes.ReserveData) internal _reserves;\\n\\n    // List of reserves as a map (reserveId => reserve)\\n    mapping(uint256 => address) internal _reserveList;\\n\\n    // Maximum number of active reserves there have been in the protocol. It is the upper bound of the reserves list\\n    uint16 internal _reservesCount;\\n\\n    bool internal _paused;\\n    uint256 public juniorDepositAmount;\\n    uint256 public seniorDepositAmount;\\n    uint256 public totalDebt;\\n\\n    constructor(address _liquidityManager) State(_liquidityManager) {}\\n\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress\\n    ) external onlyAssociatedContract {\\n        _reserves[_asset].init(\\n            _juniorDepositTokenAddress,\\n            _seniorDepositTokenAddress,\\n            _juniorIncomeAllocation,\\n            _seniorIncomeAllocation,\\n            _stableDebtAddress,\\n            _interestRateStrategyAddress,\\n            _healthStrategyAddress\\n        );\\n\\n        _reserveList[_reservesCount] = _asset;\\n        _reservesCount++;\\n    }\\n\\n    function updateStateOnDeposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount\\n    ) public onlyAssociatedContract {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        ValidationLogic.validateDeposit(reserve, _amount);\\n        reserve.updateState(_tranche);\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            reserve.updateInterestRates(_asset, _amount, 0, 0, 0);\\n        } else {\\n            reserve.updateInterestRates(_asset, 0, 0, _amount, 0);\\n        }\\n    }\\n\\n    function updateStateOnBorrow(address _asset, uint256 _amount)\\n        public\\n        onlyAssociatedContract\\n    {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        reserve.updateState(ReserveLogic.Tranche.SENIOR);\\n        reserve.updateInterestRates(_asset, 0, 0, 0, _amount);\\n    }\\n\\n    function activeReserve(address _asset) public onlyAssociatedContract {\\n        DataTypes.ReserveConfigurationMap\\n            memory currentConfig = getConfiguration(_asset);\\n        currentConfig.setActive(true);\\n        setConfiguration(_asset, currentConfig.data);\\n    }\\n\\n    function pause() public onlyAssociatedContract {\\n        _paused = true;\\n    }\\n\\n    function unPause() public onlyAssociatedContract {\\n        _paused = false;\\n    }\\n\\n    function increaseJuniorDeposit(uint256 _amount)\\n        public\\n        onlyAssociatedContract\\n    {\\n        juniorDepositAmount += _amount;\\n    }\\n\\n    function increaseSeniorDeposit(uint256 _amount)\\n        public\\n        onlyAssociatedContract\\n    {\\n        seniorDepositAmount += _amount;\\n    }\\n\\n    function decreaseJuniorDeposit(uint256 _amount)\\n        public\\n        onlyAssociatedContract\\n    {\\n        juniorDepositAmount -= _amount;\\n    }\\n\\n    function decreaseSeniorDeposit(uint256 _amount)\\n        public\\n        onlyAssociatedContract\\n    {\\n        seniorDepositAmount -= _amount;\\n    }\\n\\n    function increaseTotalDebt(uint256 _amount) public onlyAssociatedContract {\\n        totalDebt += _amount;\\n    }\\n\\n    /*********************************************** View functions ***********************************************/\\n\\n    function getFlags(address _asset)\\n        public\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        DataTypes.ReserveConfigurationMap\\n            memory currentConfig = getConfiguration(_asset);\\n        return currentConfig.getFlags();\\n    }\\n\\n    function getReserveData(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        return _reserves[_asset];\\n    }\\n\\n    function getReserveList() public view returns (address[] memory) {\\n        address[] memory reserveList = new address[](_reservesCount);\\n        for (uint256 i = 0; i < _reservesCount; i++) {\\n            reserveList[i] = _reserveList[i];\\n        }\\n        return reserveList;\\n    }\\n\\n    function getConfiguration(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        return _reserves[_asset].configuration;\\n    }\\n\\n    function setConfiguration(address _asset, uint256 configuration) internal {\\n        _reserves[_asset].configuration.data = configuration;\\n    }\\n\\n    function getLiquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].getLiquidityRate(_tranche);\\n    }\\n\\n    function getJuniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].juniorLiquidityIndex;\\n    }\\n\\n    function getSeniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].seniorLiquidityIndex;\\n    }\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) public view returns (uint256) {\\n        return _reserves[_asset].getNormalizedIncome(_tranche);\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    function getDepositAndDebt()\\n        public\\n        view\\n        returns (DataTypes.DepositAndDebt memory)\\n    {\\n        DataTypes.DepositAndDebt memory res;\\n        res.juniorDepositAmount = juniorDepositAmount;\\n        res.seniorDepositAmount = seniorDepositAmount;\\n        res.totalDebt = totalDebt;\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x3bc43ddb3a07e62b7f95341d60aa7599c912a202275bce4169af7bbbbb2d5d54\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IStableDebtToken {\\n    /**\\n     * @dev Emitted when new stable debt is minted\\n     * @param user The address of the user who triggered the minting\\n     * @param amount The amount minted (user entered amount + balance increase from interest)\\n     * @param currentBalance The current balance of the user\\n     * @param balanceIncrease The increase in balance since the last action of the user\\n     * @param newRate The rate of the debt after the minting\\n     * @param avgStableRate The next average stable rate after the minting\\n     * @param newTotalSupply The next total supply of the stable debt token after the action\\n     **/\\n    event Mint(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 currentBalance,\\n        uint256 balanceIncrease,\\n        uint256 newRate,\\n        uint256 avgStableRate,\\n        uint256 newTotalSupply\\n    );\\n\\n    function getAverageStableRate() external view returns (uint256);\\n\\n    function getTotalSupplyAndAvgRate()\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getAggregateOptimalRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAggregateActualRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xe2f108067bebe79426ae636585fd801a5e0c0efcb97e2116ba5ec57d167be796\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n@title IReserveInterestRateStrategyInterface interface\\n@notice Interface for the calculation of the interest rates.\\n*/\\n\\ninterface IReserveInterestRateStrategy {\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xb45b6fadbd52886b83832ccf42a5f2e3f41aaee4f5132f9ad1b19fad2070b57e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Voyage\\n * @notice Implements the bitmap logic to handle the reserve configuration, inspired by Aave\\n **/\\nlibrary ReserveConfiguration {\\n    uint256 constant LIQUIDATE_BONUS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 constant DECIMAL_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80FFFF; // prettier-ignore\\n    uint256 constant ACTIVE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFF; // prettier-ignore\\n    uint256 constant FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFF; // prettier-ignore\\n    uint256 constant BORROWING_ENABLE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFF; // prettier-ignore\\n    uint256 constant RESERVED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF87FFFFFF; // prettier-ignore\\n    uint256 constant RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0007FFFFFFF; // prettier-ignore\\n    uint256 constant LOCKUP_PERIOD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80007FFFFFFFFFFF; // prettier-ignore\\n\\n    uint256 constant DECIMAL_MASK_BIT_POSITION = 16;\\n    uint256 constant ACTIVE_MASK_BIT_POSITION = 24;\\n    uint256 constant FROZEN_MASK_BIT_POSITION = 25;\\n    uint256 constant BORROWING_ENABLE_MASK_POSITION = 26;\\n    uint256 constant RESERVED_MASK_BIT_POSITION = 27;\\n    uint256 constant RESERVE_FACTOR_MASK_BIT_POSITION = 31;\\n    uint256 constant LOCKUP_PERIOD_MASK_BIT_POSITION = 47;\\n\\n    /**\\n     * Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flags representing active, frozen, borrowing enabled\\n     **/\\n    function getFlags(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_ENABLE_MASK) != 0\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     **/\\n    function setActive(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool active\\n    ) internal pure {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << ACTIVE_MASK_BIT_POSITION);\\n    }\\n\\n    function getActive(DataTypes.ReserveConfigurationMap storage self)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x23a62f92e3d54e0ea396ca9f3bdce06e7c38ef191b2c27ff582140207e5a28c2\",\"license\":\"GPL-3.0\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors library\\n * @author Voyager\\n * @notice Defines the error messages emitted by the different contracts of the Voyager protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - LM = LiquidityManager\\n *  - LOM = LoanManager\\n *  - CT = Common errors between tokens\\n *  - RL = ReserveLogic\\n */\\nlibrary Errors {\\n    string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n    string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n    string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL = '20';\\n    string public constant CT_CALLER_MUST_BE_LOAN_MANAGER = '21';\\n    string public constant CT_INVALID_MINT_AMOUNT = '21';\\n    string public constant CT_INVALID_BURN_AMOUNT = '22';\\n    string public constant LM_NOT_CONTRACT = '60';\\n    string public constant LP_IS_PAUSED = '61'; // 'Pool is paused'\\n    string public constant LOM_RESERVE_NOT_SUFFICIENT = '70';\\n    string public constant LOM_CREDIT_NOT_SUFFICIENT = '71';\\n    string public constant LOM_HEALTH_RISK_BELOW_ONE = '71';\\n    string public constant LOM_NOT_VAULT_OWNER = '72';\\n    string public constant RL_LIQUIDITY_RATE_OVERFLOW = '80'; //  Liquidity rate overflows uint128\\n    string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '81'; //  Stable borrow rate overflows uint128\\n}\\n\",\"keccak256\":\"0x99c4bd1d0e99adf35c543608d5ac127fd65983ad861424b1e30d8674671960bd\",\"license\":\"agpl-3.0\"},\"contracts/libraries/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport '../math/WadRayMath.sol';\\nimport '../math/MathUtils.sol';\\nimport '../types/DataTypes.sol';\\nimport '../helpers/Errors.sol';\\nimport '../../interfaces/IDebtToken.sol';\\nimport '../../component/liquiditymanager/DefaultReserveInterestRateStrategy.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author Voyager\\n * @notice Implements the logic to update the reserves state\\n **/\\nlibrary ReserveLogic {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    using ReserveLogic for DataTypes.ReserveData;\\n\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed asset,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 liquidityIndex\\n    );\\n\\n    function init(\\n        DataTypes.ReserveData storage reserve,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress\\n    ) external {\\n        reserve.juniorLiquidityIndex = WadRayMath.ray();\\n        reserve.seniorLiquidityIndex = WadRayMath.ray();\\n        reserve.juniorDepositTokenAddress = _juniorDepositTokenAddress;\\n        reserve.seniorDepositTokenAddress = _seniorDepositTokenAddress;\\n        //reserve.currentOverallLiquidityRate = WadRayMath.ray();\\n        reserve.currentJuniorIncomeAllocation = _juniorIncomeAllocation;\\n        reserve.currentSeniorIncomeAllocation = _seniorIncomeAllocation;\\n        reserve.stableDebtAddress = _stableDebtAddress;\\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\\n        reserve.healthStrategyAddress = _healthStrategyAddress;\\n    }\\n\\n    function updateState(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public {\\n        _updateIndexes(reserve, _tranche);\\n    }\\n\\n    function getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public view returns (uint256) {\\n        return reserve._getLiquidityRate(_tranche);\\n    }\\n\\n    struct UpdateInterestRatesLocalVars {\\n        address stableDebtTokenAddress;\\n        uint256 availableLiquidity;\\n        uint256 totalStableDebt;\\n        uint256 newLiquidityRate;\\n        uint256 newStableRate;\\n        uint256 avgStableRate;\\n    }\\n\\n    function updateInterestRates(\\n        DataTypes.ReserveData storage _reserve,\\n        address _reserveAddress,\\n        uint256 _juniorLiquidityAdded,\\n        uint256 _juniorLiquidityTaken,\\n        uint256 _seniorLiquidityAdded,\\n        uint256 _seniorLiquidityTaken\\n    ) public {\\n        UpdateInterestRatesLocalVars memory vars;\\n\\n        vars.stableDebtTokenAddress = _reserve.stableDebtAddress;\\n        uint256 liquidityAdded = _juniorLiquidityAdded.add(\\n            _seniorLiquidityAdded\\n        );\\n        uint256 liquidityTaken = _juniorLiquidityTaken.add(\\n            _seniorLiquidityTaken\\n        );\\n\\n        (vars.totalStableDebt, vars.avgStableRate) = IStableDebtToken(\\n            _reserve.stableDebtAddress\\n        ).getTotalSupplyAndAvgRate();\\n\\n        (\\n            vars.newLiquidityRate,\\n            vars.newStableRate\\n        ) = IReserveInterestRateStrategy(_reserve.interestRateStrategyAddress)\\n            .calculateInterestRates(\\n                _reserveAddress,\\n                _reserve.juniorDepositTokenAddress,\\n                _reserve.seniorDepositTokenAddress,\\n                liquidityAdded,\\n                liquidityTaken,\\n                _reserve.totalBorrows,\\n                vars.avgStableRate\\n            );\\n        require(\\n            vars.newLiquidityRate <= type(uint128).max,\\n            Errors.RL_LIQUIDITY_RATE_OVERFLOW\\n        );\\n        require(\\n            vars.newStableRate <= type(uint128).max,\\n            Errors.RL_STABLE_BORROW_RATE_OVERFLOW\\n        );\\n        _reserve.currentOverallLiquidityRate = vars.newLiquidityRate;\\n        _reserve.currentBorrowRate = vars.newStableRate;\\n\\n        emit ReserveDataUpdated(\\n            _reserveAddress,\\n            vars.newLiquidityRate,\\n            vars.newStableRate,\\n            vars.newLiquidityRate\\n        );\\n    }\\n\\n    function getNormalizedIncome(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        uint40 timestamp;\\n        uint256 liquidityIndex;\\n        if (_tranche == Tranche.JUNIOR) {\\n            timestamp = reserve.juniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.juniorLiquidityIndex;\\n        } else {\\n            timestamp = reserve.seniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.seniorLiquidityIndex;\\n        }\\n\\n        //solium-disable-next-line\\n        if (timestamp == uint40(block.timestamp)) {\\n            return liquidityIndex;\\n        }\\n\\n        uint256 cumulated = MathUtils\\n            .calculateLinearInterest(\\n                reserve._getLiquidityRate(_tranche),\\n                timestamp\\n            )\\n            .rayMul(liquidityIndex);\\n        return cumulated;\\n    }\\n\\n    function _getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        uint256 totalAllocationInRay = reserve\\n            .currentJuniorIncomeAllocation\\n            .add(reserve.currentSeniorIncomeAllocation);\\n        if (_tranche == Tranche.JUNIOR) {\\n            return\\n                reserve.currentOverallLiquidityRate.rayMul(\\n                    reserve.currentJuniorIncomeAllocation.rayDiv(\\n                        totalAllocationInRay\\n                    )\\n                );\\n        } else {\\n            return\\n                reserve.currentOverallLiquidityRate.rayMul(\\n                    reserve.currentSeniorIncomeAllocation.rayDiv(\\n                        totalAllocationInRay\\n                    )\\n                );\\n        }\\n    }\\n\\n    function _updateIndexes(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal {\\n        if (_tranche == Tranche.JUNIOR) {\\n            uint256 previousJuniorLiquidityIndex = reserve.juniorLiquidityIndex;\\n            uint256 lastJuniorUpdatedTimestamp = reserve\\n                .juniorLastUpdateTimestamp;\\n            reserve._updateJuniorLiquidityIndex(\\n                previousJuniorLiquidityIndex,\\n                uint40(lastJuniorUpdatedTimestamp)\\n            );\\n        } else {\\n            uint256 previousSeniorLiquidityIndex = reserve.seniorLiquidityIndex;\\n            uint256 lastSeniorUpdatedTimestamp = reserve\\n                .seniorLastUpdateTimestamp;\\n            reserve._updateSeniorLiquidityIndex(\\n                previousSeniorLiquidityIndex,\\n                uint40(lastSeniorUpdatedTimestamp)\\n            );\\n        }\\n    }\\n\\n    function _updateJuniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 juniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 juniorLiquidityRate = reserve._getLiquidityRate(Tranche.JUNIOR);\\n        uint256 newJuniorLiquidityIndex = juniorLiquidityIndex;\\n\\n        // only cumulating if there is any income being produced\\n        if (juniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(juniorLiquidityRate, timestamp);\\n            newJuniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                juniorLiquidityIndex\\n            );\\n            reserve.juniorLiquidityIndex = newJuniorLiquidityIndex;\\n        }\\n\\n        reserve.juniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newJuniorLiquidityIndex;\\n    }\\n\\n    function _updateSeniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 seniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 seniorLiquidityRate = reserve._getLiquidityRate(Tranche.SENIOR);\\n        uint256 newSeniorLiquidityIndex = seniorLiquidityIndex;\\n\\n        if (seniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(seniorLiquidityRate, timestamp);\\n            newSeniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                seniorLiquidityIndex\\n            );\\n            reserve.seniorLiquidityIndex = newSeniorLiquidityIndex;\\n        }\\n        reserve.seniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newSeniorLiquidityIndex;\\n    }\\n}\\n\",\"keccak256\":\"0x2e94c975bac3c65607885e200905918702f098f30a3c128e2a22d3af73d863ef\",\"license\":\"GPL-3.0\"},\"contracts/libraries/logic/ValidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../types/DataTypes.sol';\\nimport '../configuration/ReserveConfiguration.sol';\\nimport '../helpers/Errors.sol';\\n\\nlibrary ValidationLogic {\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    /**\\n     * @dev Validates a deposit token\\n     * @param reserve The reserve object on which the user is depositing\\n     * @param amount The amount to be deposited\\n     **/\\n    function validateDeposit(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amount\\n    ) external view {\\n        (bool isActive, bool isFrozen, ) = reserve.configuration.getFlags();\\n        require(amount != 0, Errors.VL_INVALID_AMOUNT);\\n        require(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n        require(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n    }\\n}\\n\",\"keccak256\":\"0xdd470946bea9515caf3bfdc20ae4e78f2138dc785ae3650a0ac8951dedf3581e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(\\n            uint256(lastUpdateTimestamp)\\n        );\\n\\n        return\\n            (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n     * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        if (exp == 0) {\\n            return WadRayMath.ray();\\n        }\\n\\n        uint256 expMinusOne = exp - 1;\\n\\n        uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n        uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n        uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n        uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n        uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n        uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(\\n            basePowerThree\\n        ) / 6;\\n\\n        return\\n            WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(\\n                thirdTerm\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xeb644d3d04ac6c043657b2b835fbf71d1f2795f1f713b900cc43582158f31eac\",\"license\":\"agpl-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87bc93b45f82b290b2b6a9f00ce09f8c5c2b758931a85b37fb5d117a79031d3f\"},\"contracts/libraries/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(owner, pendingOwner);\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x5dca7c2446290ea3519aa0f9295e1edfbff47a1474edbe126f08dca92843e2c8\"},\"contracts/libraries/state/State.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../ownership/Ownable.sol';\\n\\nabstract contract State is Ownable {\\n    mapping(address => bool) public associatedContracts;\\n\\n    constructor(address _associatedContract) {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner != address(0), 'Owner must be set');\\n\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n\\n    event AssociatedContractUpdated(address associatedContract);\\n\\n    modifier onlyAssociatedContract() {\\n        require(\\n            associatedContracts[msg.sender],\\n            'Only the associated contract can perform this action'\\n        );\\n        _;\\n    }\\n\\n    // Change the associated contract to a new address\\n    function setAssociatedContract(address _associatedContract)\\n        external\\n        onlyOwner\\n    {\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n}\\n\",\"keccak256\":\"0x835e4507f1c45e5cb1ac2ab722b38969af0c5e2bd4e4fb8fc34046d56d555b9f\",\"license\":\"GPL-3.0\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary DataTypes {\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        // for calculating overall interested accumulated\\n        // then split it into two indexs base on two allocations\\n        uint256 currentOverallLiquidityRate;\\n        // Expressed in ray\\n        uint256 currentSeniorIncomeAllocation;\\n        // Expressed in ray\\n        uint256 currentJuniorIncomeAllocation;\\n        uint256 juniorLiquidityIndex;\\n        uint256 seniorLiquidityIndex;\\n        uint256 totalBorrows;\\n        uint256 currentBorrowRate;\\n        // Expressed in ray\\n        uint256 securityRequirement;\\n        //the decimals of the reserve asset\\n        uint256 decimals;\\n        address interestRateStrategyAddress;\\n        address healthStrategyAddress;\\n        address juniorDepositTokenAddress;\\n        address seniorDepositTokenAddress;\\n        address stableDebtAddress;\\n        uint40 juniorLastUpdateTimestamp;\\n        uint40 seniorLastUpdateTimestamp;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: Liquidate bonus\\n        //bit 16-23: Decimals\\n        //bit 24: Reserve is active\\n        //bit 25: reserve is frozen\\n        //bit 26: borrowing is enabled\\n        //bit 27-30: reserved\\n        //bit 31-46: reserve factor\\n        //bit 47-62: lock up period in seconds\\n        uint256 data;\\n    }\\n\\n    struct FungibleTokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    struct BorrowData {\\n        uint256 drawDownNumber;\\n        uint256 totalDebt;\\n        mapping(uint256 => DrawDown) drawDowns;\\n        mapping(uint256 => Repayment) repayments;\\n    }\\n\\n    struct DrawDown {\\n        uint256 amount;\\n        uint256 tenure;\\n        uint40 timestamp;\\n        uint256 borrowRate;\\n        Repayment repayment;\\n    }\\n\\n    struct Repayment {\\n        uint256 totalPaid;\\n        // tenure => amount\\n        // todo wrapper this in the future\\n        mapping(uint256 => uint256) repayment;\\n    }\\n\\n    // tmp struct to avoid stack too long\\n\\n    struct DepositAndDebt {\\n        uint256 juniorDepositAmount;\\n        uint256 seniorDepositAmount;\\n        uint256 totalDebt;\\n    }\\n\\n    struct HealthRiskParameter {\\n        uint256 securityDeposit;\\n        uint256 currentBorrowRate;\\n        uint256 compoundedDebt;\\n        uint256 grossAssetValue;\\n        uint256 aggregateOptimalRepaymentRate;\\n        uint256 aggregateActualRepaymentRate;\\n    }\\n}\\n\",\"keccak256\":\"0x2475d0cacc4f46847d0f7c21081a6957410f0bfe47a4c4e919d97f4b8fd1cb73\",\"license\":\"GPL-3.0\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200324038038062003240833981810160405281019062000037919062000289565b80336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000186576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017d906200031c565b60405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e03816040516200020f91906200034f565b60405180910390a150506200036c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002518262000224565b9050919050565b620002638162000244565b81146200026f57600080fd5b50565b600081519050620002838162000258565b92915050565b600060208284031215620002a257620002a16200021f565b5b6000620002b28482850162000272565b91505092915050565b600082825260208201905092915050565b7f4f776e6572206d75737420626520736574000000000000000000000000000000600082015250565b600062000304601183620002bb565b91506200031182620002cc565b602082019050919050565b600060208201905081810360008301526200033781620002f5565b9050919050565b620003498162000244565b82525050565b60006020820190506200036660008301846200033e565b92915050565b612ec4806200037c6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806382caae151161010f578063c8caf680116100a2578063f7b188a511610071578063f7b188a51461056c578063f815aa1e14610576578063f820414914610592578063fc7b9c18146105ae576101e5565b8063c8caf680146104fa578063e30c397814610516578063eba079f014610534578063f2fde38b14610550576101e5565b80639bd78901116100de5780639bd78901146104605780639cc67a0f1461047c578063c44b11f7146104ac578063c872ac90146104dc576101e5565b806382caae15146103fe5780638456cb591461041a5780638da5cb5b146104245780638f32d59b14610442576101e5565b8063530062ee116101875780636de427df116101565780636de427df14610364578063776f689114610380578063817ad5d3146103b057806381f78151146103e2576101e5565b8063530062ee146102da5780635748ff18146102f85780635c975abb1461032857806366d4c41314610346576101e5565b8063284592b2116101c3578063284592b21461025457806335ea6a75146102845780634e71e0c8146102b457806352f445ca146102be576101e5565b806303d6fa95146101ea5780630d4583951461021a578063146fac4514610238575b600080fd5b61020460048036038101906101ff91906121dd565b6105cc565b6040516102119190612223565b60405180910390f35b610222610618565b60405161022f919061228f565b60405180910390f35b610252600480360381019061024d91906122d6565b610653565b005b61026e60048036038101906102699190612328565b6106fb565b60405161027b9190612223565b60405180910390f35b61029e600480360381019061029991906121dd565b6107ce565b6040516102ab9190612512565b60405180910390f35b6102bc610aa0565b005b6102d860048036038101906102d391906121dd565b610c3c565b005b6102e2610d15565b6040516102ef9190612223565b60405180910390f35b610312600480360381019061030d91906121dd565b610d1b565b60405161031f9190612549565b60405180910390f35b610330610d3b565b60405161033d9190612549565b60405180910390f35b61034e610d52565b60405161035b9190612613565b60405180910390f35b61037e60048036038101906103799190612635565b610e70565b005b61039a60048036038101906103959190612328565b611025565b6040516103a79190612223565b60405180910390f35b6103ca60048036038101906103c591906121dd565b611080565b6040516103d993929190612675565b60405180910390f35b6103fc60048036038101906103f791906121dd565b6110a8565b005b610418600480360381019061041391906122d6565b611167565b005b61042261120f565b005b61042c6112b8565b60405161043991906126bb565b60405180910390f35b61044a6112dc565b6040516104579190612549565b60405180910390f35b61047a600480360381019061047591906122d6565b611333565b005b610496600480360381019061049191906121dd565b6113db565b6040516104a39190612223565b60405180910390f35b6104c660048036038101906104c191906121dd565b611427565b6040516104d391906126f2565b60405180910390f35b6104e461148d565b6040516104f19190612223565b60405180910390f35b610514600480360381019061050f919061270d565b611493565b005b61051e611759565b60405161052b91906126bb565b60405180910390f35b61054e600480360381019061054991906122d6565b61177f565b005b61056a600480360381019061056591906121dd565b611827565b005b6105746118b2565b005b610590600480360381019061058b91906122d6565b61195b565b005b6105ac60048036038101906105a79190612760565b611a03565b005b6105b6611bef565b6040516105c39190612223565b60405180910390f35b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b610620612040565b610628612040565b6006548160000181815250506007548160200181815250506008548160400181815250508091505090565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d690612899565b60405180910390fd5b80600860008282546106f191906128e8565b9250508190555050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020733a4B95f219037858F9AeE3Be86E5007F30d0128b63bb43fb809091846040518363ffffffff1660e01b81526004016107769291906129bc565b60206040518083038186803b15801561078e57600080fd5b505af41580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c691906129fa565b905092915050565b6107d6612061565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610220016040529081600082016040518060200160405290816000820154815250508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600e820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600e820160149054906101000a900464ffffffffff1664ffffffffff1664ffffffffff168152602001600e820160199054906101000a900464ffffffffff1664ffffffffff1664ffffffffff16815250509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610afa57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610c446112dc565b610c83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7a90612a73565b60405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e0381604051610d0a91906126bb565b60405180910390a150565b60065481565b60026020528060005260406000206000915054906101000a900460ff1681565b6000600560029054906101000a900460ff16905090565b60606000600560009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610d8457610d83612a93565b5b604051908082528060200260200182016040528015610db25781602001602082028036833780820191505090505b50905060005b600560009054906101000a900461ffff1661ffff16811015610e68576004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110610e1b57610e1a612ac2565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610e6090612af1565b915050610db8565b508091505090565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef390612899565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080733a4B95f219037858F9AeE3Be86E5007F30d0128b63a4c88c07909160016040518363ffffffff1660e01b8152600401610f7b9291906129bc565b60006040518083038186803b158015610f9357600080fd5b505af4158015610fa7573d6000803e3d6000fd5b5050505080733a4B95f219037858F9AeE3Be86E5007F30d0128b636a2da27e9091856000806000886040518763ffffffff1660e01b8152600401610ff096959493929190612b9d565b60006040518083038186803b15801561100857600080fd5b505af415801561101c573d6000803e3d6000fd5b50505050505050565b600061107882600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611bf590919063ffffffff16565b905092915050565b60008060008061108f85611427565b905061109a81611cc9565b935093509350509193909250565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112b90612899565b60405180910390fd5b600061113f82611427565b9050611155600182611d5c90919063ffffffff16565b611163828260000151611da7565b5050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166111f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ea90612899565b60405180910390fd5b80600760008282546112059190612bfe565b9250508190555050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661129b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129290612899565b60405180910390fd5b6001600560026101000a81548160ff021916908315150217905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166113bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b690612899565b60405180910390fd5b80600660008282546113d191906128e8565b9250508190555050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501549050919050565b61142f612167565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016040518060200160405290816000820154815250509050919050565b60075481565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661151f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151690612899565b60405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050730fa9de6c78A063E21d828FBE1c9d6296F574994B630eca322b82846040518363ffffffff1660e01b815260040161159b929190612c32565b60006040518083038186803b1580156115b357600080fd5b505af41580156115c7573d6000803e3d6000fd5b5050505080733a4B95f219037858F9AeE3Be86E5007F30d0128b63a4c88c079091856040518363ffffffff1660e01b81526004016116069291906129bc565b60006040518083038186803b15801561161e57600080fd5b505af4158015611632573d6000803e3d6000fd5b5050505082600181111561164957611648612945565b5b6000600181111561165d5761165c612945565b5b14156116dd5780733a4B95f219037858F9AeE3Be86E5007F30d0128b636a2da27e9091868560008060006040518763ffffffff1660e01b81526004016116a896959493929190612c5b565b60006040518083038186803b1580156116c057600080fd5b505af41580156116d4573d6000803e3d6000fd5b50505050611753565b80733a4B95f219037858F9AeE3Be86E5007F30d0128b636a2da27e9091866000808760006040518763ffffffff1660e01b815260040161172296959493929190612cbc565b60006040518083038186803b15801561173a57600080fd5b505af415801561174e573d6000803e3d6000fd5b505050505b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661180b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180290612899565b60405180910390fd5b806007600082825461181d91906128e8565b9250508190555050565b61182f6112dc565b61186e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186590612a73565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661193e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193590612899565b60405180910390fd5b6000600560026101000a81548160ff021916908315150217905550565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166119e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119de90612899565b60405180910390fd5b80600660008282546119f99190612bfe565b9250508190555050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8690612899565b60405180910390fd5b600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020733a4B95f219037858F9AeE3Be86E5007F30d0128b630c6e37419091898989898989896040518963ffffffff1660e01b8152600401611b14989796959493929190612d1d565b60006040518083038186803b158015611b2c57600080fd5b505af4158015611b40573d6000803e3d6000fd5b505050508760046000600560009054906101000a900461ffff1661ffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005600081819054906101000a900461ffff1680929190611bca90612da9565b91906101000a81548161ffff021916908361ffff160217905550505050505050505050565b60085481565b6000806000806001811115611c0d57611c0c612945565b5b846001811115611c2057611c1f612945565b5b1415611c4a5784600e0160149054906101000a900464ffffffffff16915084600401549050611c6a565b84600e0160199054906101000a900464ffffffffff169150846005015490505b4264ffffffffff168264ffffffffff161415611c8a578092505050611cc3565b6000611cba82611cac611ca6888a611df590919063ffffffff16565b86611eae565b611f1190919063ffffffff16565b90508093505050505b92915050565b6000806000808460000151905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffff198216141560007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdffffff198316141560007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbffffff1984161415935093509350509193909250565b601881611d6a576000611d6d565b60015b60ff16901b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffff836000015116178260000181815250505050565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600001819055505050565b600080611e1384600201548560030154611f7690919063ffffffff16565b905060006001811115611e2957611e28612945565b5b836001811115611e3c57611e3b612945565b5b1415611e7757611e6f611e5c828660030154611f8c90919063ffffffff16565b8560010154611f1190919063ffffffff16565b915050611ea8565b611ea4611e91828660020154611f8c90919063ffffffff16565b8560010154611f1190919063ffffffff16565b9150505b92915050565b600080611ecb8364ffffffffff1642611fea90919063ffffffff16565b9050611f08611ed8612000565b6301e13380611ef0848861201490919063ffffffff16565b611efa9190612e03565b611f7690919063ffffffff16565b91505092915050565b6000611f6e6b033b2e3c9fd0803ce8000000611f60611f39858761201490919063ffffffff16565b60026b033b2e3c9fd0803ce8000000611f529190612e03565b611f7690919063ffffffff16565b61202a90919063ffffffff16565b905092915050565b60008183611f8491906128e8565b905092915050565b600080600283611f9c9190612e03565b9050611fe183611fd3611fc46b033b2e3c9fd0803ce80000008861201490919063ffffffff16565b84611f7690919063ffffffff16565b61202a90919063ffffffff16565b91505092915050565b60008183611ff89190612bfe565b905092915050565b60006b033b2e3c9fd0803ce8000000905090565b600081836120229190612e34565b905092915050565b600081836120389190612e03565b905092915050565b60405180606001604052806000815260200160008152602001600081525090565b604051806102200160405280612075612167565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600064ffffffffff1681525090565b6040518060200160405280600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121aa8261217f565b9050919050565b6121ba8161219f565b81146121c557600080fd5b50565b6000813590506121d7816121b1565b92915050565b6000602082840312156121f3576121f261217a565b5b6000612201848285016121c8565b91505092915050565b6000819050919050565b61221d8161220a565b82525050565b60006020820190506122386000830184612214565b92915050565b6122478161220a565b82525050565b606082016000820151612263600085018261223e565b506020820151612276602085018261223e565b506040820151612289604085018261223e565b50505050565b60006060820190506122a4600083018461224d565b92915050565b6122b38161220a565b81146122be57600080fd5b50565b6000813590506122d0816122aa565b92915050565b6000602082840312156122ec576122eb61217a565b5b60006122fa848285016122c1565b91505092915050565b6002811061231057600080fd5b50565b60008135905061232281612303565b92915050565b6000806040838503121561233f5761233e61217a565b5b600061234d858286016121c8565b925050602061235e85828601612313565b9150509250929050565b60208201600082015161237e600085018261223e565b50505050565b61238d8161219f565b82525050565b600064ffffffffff82169050919050565b6123ad81612393565b82525050565b610220820160008201516123ca6000850182612368565b5060208201516123dd602085018261223e565b5060408201516123f0604085018261223e565b506060820151612403606085018261223e565b506080820151612416608085018261223e565b5060a082015161242960a085018261223e565b5060c082015161243c60c085018261223e565b5060e082015161244f60e085018261223e565b5061010082015161246461010085018261223e565b5061012082015161247961012085018261223e565b5061014082015161248e610140850182612384565b506101608201516124a3610160850182612384565b506101808201516124b8610180850182612384565b506101a08201516124cd6101a0850182612384565b506101c08201516124e26101c0850182612384565b506101e08201516124f76101e08501826123a4565b5061020082015161250c6102008501826123a4565b50505050565b60006102208201905061252860008301846123b3565b92915050565b60008115159050919050565b6125438161252e565b82525050565b600060208201905061255e600083018461253a565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061259c8383612384565b60208301905092915050565b6000602082019050919050565b60006125c082612564565b6125ca818561256f565b93506125d583612580565b8060005b838110156126065781516125ed8882612590565b97506125f8836125a8565b9250506001810190506125d9565b5085935050505092915050565b6000602082019050818103600083015261262d81846125b5565b905092915050565b6000806040838503121561264c5761264b61217a565b5b600061265a858286016121c8565b925050602061266b858286016122c1565b9150509250929050565b600060608201905061268a600083018661253a565b612697602083018561253a565b6126a4604083018461253a565b949350505050565b6126b58161219f565b82525050565b60006020820190506126d060008301846126ac565b92915050565b6020820160008201516126ec600085018261223e565b50505050565b600060208201905061270760008301846126d6565b92915050565b6000806000606084860312156127265761272561217a565b5b6000612734868287016121c8565b935050602061274586828701612313565b9250506040612756868287016122c1565b9150509250925092565b600080600080600080600080610100898b0312156127815761278061217a565b5b600061278f8b828c016121c8565b98505060206127a08b828c016121c8565b97505060406127b18b828c016121c8565b96505060606127c28b828c016122c1565b95505060806127d38b828c016122c1565b94505060a06127e48b828c016121c8565b93505060c06127f58b828c016121c8565b92505060e06128068b828c016121c8565b9150509295985092959890939650565b600082825260208201905092915050565b7f4f6e6c7920746865206173736f63696174656420636f6e74726163742063616e60008201527f20706572666f726d207468697320616374696f6e000000000000000000000000602082015250565b6000612883603483612816565b915061288e82612827565b604082019050919050565b600060208201905081810360008301526128b281612876565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128f38261220a565b91506128fe8361220a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612933576129326128b9565b5b828201905092915050565b8082525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061298557612984612945565b5b50565b600081905061299682612974565b919050565b60006129a682612988565b9050919050565b6129b68161299b565b82525050565b60006040820190506129d1600083018561293e565b6129de60208301846129ad565b9392505050565b6000815190506129f4816122aa565b92915050565b600060208284031215612a1057612a0f61217a565b5b6000612a1e848285016129e5565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612a5d602083612816565b9150612a6882612a27565b602082019050919050565b60006020820190508181036000830152612a8c81612a50565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612afc8261220a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612b2f57612b2e6128b9565b5b600182019050919050565b612b438161219f565b82525050565b6000819050919050565b6000819050919050565b6000612b78612b73612b6e84612b49565b612b53565b61220a565b9050919050565b612b8881612b5d565b82525050565b612b978161220a565b82525050565b600060c082019050612bb2600083018961293e565b612bbf6020830188612b3a565b612bcc6040830187612b7f565b612bd96060830186612b7f565b612be66080830185612b7f565b612bf360a0830184612b8e565b979650505050505050565b6000612c098261220a565b9150612c148361220a565b925082821015612c2757612c266128b9565b5b828203905092915050565b6000604082019050612c47600083018561293e565b612c546020830184612b8e565b9392505050565b600060c082019050612c70600083018961293e565b612c7d6020830188612b3a565b612c8a6040830187612b8e565b612c976060830186612b7f565b612ca46080830185612b7f565b612cb160a0830184612b7f565b979650505050505050565b600060c082019050612cd1600083018961293e565b612cde6020830188612b3a565b612ceb6040830187612b7f565b612cf86060830186612b7f565b612d056080830185612b8e565b612d1260a0830184612b7f565b979650505050505050565b600061010082019050612d33600083018b61293e565b612d40602083018a612b3a565b612d4d6040830189612b3a565b612d5a6060830188612b8e565b612d676080830187612b8e565b612d7460a0830186612b3a565b612d8160c0830185612b3a565b612d8e60e0830184612b3a565b9998505050505050505050565b600061ffff82169050919050565b6000612db482612d9b565b915061ffff821415612dc957612dc86128b9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612e0e8261220a565b9150612e198361220a565b925082612e2957612e28612dd4565b5b828204905092915050565b6000612e3f8261220a565b9150612e4a8361220a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612e8357612e826128b9565b5b82820290509291505056fea26469706673582212200714eb2ecce404c12cec02d9bbf8f2eb94218a8046905cef826167d1cd3de1dd64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c806382caae151161010f578063c8caf680116100a2578063f7b188a511610071578063f7b188a51461056c578063f815aa1e14610576578063f820414914610592578063fc7b9c18146105ae576101e5565b8063c8caf680146104fa578063e30c397814610516578063eba079f014610534578063f2fde38b14610550576101e5565b80639bd78901116100de5780639bd78901146104605780639cc67a0f1461047c578063c44b11f7146104ac578063c872ac90146104dc576101e5565b806382caae15146103fe5780638456cb591461041a5780638da5cb5b146104245780638f32d59b14610442576101e5565b8063530062ee116101875780636de427df116101565780636de427df14610364578063776f689114610380578063817ad5d3146103b057806381f78151146103e2576101e5565b8063530062ee146102da5780635748ff18146102f85780635c975abb1461032857806366d4c41314610346576101e5565b8063284592b2116101c3578063284592b21461025457806335ea6a75146102845780634e71e0c8146102b457806352f445ca146102be576101e5565b806303d6fa95146101ea5780630d4583951461021a578063146fac4514610238575b600080fd5b61020460048036038101906101ff91906121dd565b6105cc565b6040516102119190612223565b60405180910390f35b610222610618565b60405161022f919061228f565b60405180910390f35b610252600480360381019061024d91906122d6565b610653565b005b61026e60048036038101906102699190612328565b6106fb565b60405161027b9190612223565b60405180910390f35b61029e600480360381019061029991906121dd565b6107ce565b6040516102ab9190612512565b60405180910390f35b6102bc610aa0565b005b6102d860048036038101906102d391906121dd565b610c3c565b005b6102e2610d15565b6040516102ef9190612223565b60405180910390f35b610312600480360381019061030d91906121dd565b610d1b565b60405161031f9190612549565b60405180910390f35b610330610d3b565b60405161033d9190612549565b60405180910390f35b61034e610d52565b60405161035b9190612613565b60405180910390f35b61037e60048036038101906103799190612635565b610e70565b005b61039a60048036038101906103959190612328565b611025565b6040516103a79190612223565b60405180910390f35b6103ca60048036038101906103c591906121dd565b611080565b6040516103d993929190612675565b60405180910390f35b6103fc60048036038101906103f791906121dd565b6110a8565b005b610418600480360381019061041391906122d6565b611167565b005b61042261120f565b005b61042c6112b8565b60405161043991906126bb565b60405180910390f35b61044a6112dc565b6040516104579190612549565b60405180910390f35b61047a600480360381019061047591906122d6565b611333565b005b610496600480360381019061049191906121dd565b6113db565b6040516104a39190612223565b60405180910390f35b6104c660048036038101906104c191906121dd565b611427565b6040516104d391906126f2565b60405180910390f35b6104e461148d565b6040516104f19190612223565b60405180910390f35b610514600480360381019061050f919061270d565b611493565b005b61051e611759565b60405161052b91906126bb565b60405180910390f35b61054e600480360381019061054991906122d6565b61177f565b005b61056a600480360381019061056591906121dd565b611827565b005b6105746118b2565b005b610590600480360381019061058b91906122d6565b61195b565b005b6105ac60048036038101906105a79190612760565b611a03565b005b6105b6611bef565b6040516105c39190612223565b60405180910390f35b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b610620612040565b610628612040565b6006548160000181815250506007548160200181815250506008548160400181815250508091505090565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d690612899565b60405180910390fd5b80600860008282546106f191906128e8565b9250508190555050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$d3b4366daeb9cadc7528af6145b50b2183$__63bb43fb809091846040518363ffffffff1660e01b81526004016107769291906129bc565b60206040518083038186803b15801561078e57600080fd5b505af41580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c691906129fa565b905092915050565b6107d6612061565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180610220016040529081600082016040518060200160405290816000820154815250508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600c820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600e820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600e820160149054906101000a900464ffffffffff1664ffffffffff1664ffffffffff168152602001600e820160199054906101000a900464ffffffffff1664ffffffffff1664ffffffffff16815250509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610afa57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610c446112dc565b610c83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7a90612a73565b60405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e0381604051610d0a91906126bb565b60405180910390a150565b60065481565b60026020528060005260406000206000915054906101000a900460ff1681565b6000600560029054906101000a900460ff16905090565b60606000600560009054906101000a900461ffff1661ffff1667ffffffffffffffff811115610d8457610d83612a93565b5b604051908082528060200260200182016040528015610db25781602001602082028036833780820191505090505b50905060005b600560009054906101000a900461ffff1661ffff16811015610e68576004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110610e1b57610e1a612ac2565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610e6090612af1565b915050610db8565b508091505090565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef390612899565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508073__$d3b4366daeb9cadc7528af6145b50b2183$__63a4c88c07909160016040518363ffffffff1660e01b8152600401610f7b9291906129bc565b60006040518083038186803b158015610f9357600080fd5b505af4158015610fa7573d6000803e3d6000fd5b505050508073__$d3b4366daeb9cadc7528af6145b50b2183$__636a2da27e9091856000806000886040518763ffffffff1660e01b8152600401610ff096959493929190612b9d565b60006040518083038186803b15801561100857600080fd5b505af415801561101c573d6000803e3d6000fd5b50505050505050565b600061107882600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611bf590919063ffffffff16565b905092915050565b60008060008061108f85611427565b905061109a81611cc9565b935093509350509193909250565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112b90612899565b60405180910390fd5b600061113f82611427565b9050611155600182611d5c90919063ffffffff16565b611163828260000151611da7565b5050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166111f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ea90612899565b60405180910390fd5b80600760008282546112059190612bfe565b9250508190555050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661129b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129290612899565b60405180910390fd5b6001600560026101000a81548160ff021916908315150217905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166113bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b690612899565b60405180910390fd5b80600660008282546113d191906128e8565b9250508190555050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501549050919050565b61142f612167565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016040518060200160405290816000820154815250509050919050565b60075481565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661151f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151690612899565b60405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905073__$5201a97c05ba6aa659e2f36a933dd51801$__630eca322b82846040518363ffffffff1660e01b815260040161159b929190612c32565b60006040518083038186803b1580156115b357600080fd5b505af41580156115c7573d6000803e3d6000fd5b505050508073__$d3b4366daeb9cadc7528af6145b50b2183$__63a4c88c079091856040518363ffffffff1660e01b81526004016116069291906129bc565b60006040518083038186803b15801561161e57600080fd5b505af4158015611632573d6000803e3d6000fd5b5050505082600181111561164957611648612945565b5b6000600181111561165d5761165c612945565b5b14156116dd578073__$d3b4366daeb9cadc7528af6145b50b2183$__636a2da27e9091868560008060006040518763ffffffff1660e01b81526004016116a896959493929190612c5b565b60006040518083038186803b1580156116c057600080fd5b505af41580156116d4573d6000803e3d6000fd5b50505050611753565b8073__$d3b4366daeb9cadc7528af6145b50b2183$__636a2da27e9091866000808760006040518763ffffffff1660e01b815260040161172296959493929190612cbc565b60006040518083038186803b15801561173a57600080fd5b505af415801561174e573d6000803e3d6000fd5b505050505b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661180b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180290612899565b60405180910390fd5b806007600082825461181d91906128e8565b9250508190555050565b61182f6112dc565b61186e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186590612a73565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661193e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193590612899565b60405180910390fd5b6000600560026101000a81548160ff021916908315150217905550565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166119e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119de90612899565b60405180910390fd5b80600660008282546119f99190612bfe565b9250508190555050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8690612899565b60405180910390fd5b600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002073__$d3b4366daeb9cadc7528af6145b50b2183$",
  "libraries": {
    "ReserveLogic": "0x3a4B95f219037858F9AeE3Be86E5007F30d0128b",
    "ValidationLogic": "0x0fa9de6c78A063E21d828FBE1c9d6296F574994B"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimOwnership()": {
        "details": "Allows the pendingOwner address to finalize the transfer."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to set the pendingOwner address.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7919,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7921,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8243,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "associatedContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2391,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "_reserves",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(ReserveData)8345_storage)"
      },
      {
        "astId": 2395,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "_reserveList",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2397,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "_reservesCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 2399,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "_paused",
        "offset": 2,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 2401,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "juniorDepositAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2403,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "seniorDepositAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2405,
        "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
        "label": "totalDebt",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ReserveData)8345_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.ReserveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveData)8345_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(ReserveConfigurationMap)8348_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveConfigurationMap",
        "members": [
          {
            "astId": 8347,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ReserveData)8345_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveData",
        "members": [
          {
            "astId": 8312,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "configuration",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ReserveConfigurationMap)8348_storage"
          },
          {
            "astId": 8314,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "currentOverallLiquidityRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8316,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "currentSeniorIncomeAllocation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8318,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "currentJuniorIncomeAllocation",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8320,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "juniorLiquidityIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8322,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "seniorLiquidityIndex",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8324,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "totalBorrows",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8326,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "currentBorrowRate",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8328,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "securityRequirement",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8330,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "decimals",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 8332,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "interestRateStrategyAddress",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 8334,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "healthStrategyAddress",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          },
          {
            "astId": 8336,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "juniorDepositTokenAddress",
            "offset": 0,
            "slot": "12",
            "type": "t_address"
          },
          {
            "astId": 8338,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "seniorDepositTokenAddress",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 8340,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "stableDebtAddress",
            "offset": 0,
            "slot": "14",
            "type": "t_address"
          },
          {
            "astId": 8342,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "juniorLastUpdateTimestamp",
            "offset": 20,
            "slot": "14",
            "type": "t_uint40"
          },
          {
            "astId": 8344,
            "contract": "contracts/component/shared/storage/LiquidityManagerStorage.sol:LiquidityManagerStorage",
            "label": "seniorLastUpdateTimestamp",
            "offset": 25,
            "slot": "14",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}