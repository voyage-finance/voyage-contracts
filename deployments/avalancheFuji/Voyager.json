{
  "address": "0xb52B14243881359190d9Dd7eb371608070699bd7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "CallResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "activeReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressResolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimExtCallACLProxyOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimLiquidityManagerProxyOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimVaultManagerProxyOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_onBehalfOf",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultUser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositSecurity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultUser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        }
      ],
      "name": "eligibleAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extCallACLProxyName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddressResolverAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ReserveConfigurationMap",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "getCreditLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExtCallACLProxyAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExtCallACLProxyName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityManagerEscrowContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityManagerProxyAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityManagerProxyName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityManagerStorageName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLoanManagerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "getMaxSecurityDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "data",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.ReserveConfigurationMap",
              "name": "configuration",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentOverallLiquidityRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentSeniorIncomeAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentJuniorIncomeAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "juniorLiquidityIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "seniorLiquidityIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "securityRequirement",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "juniorDepositTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seniorDepositTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableDebtAddress",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "juniorLastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "seniorLastUpdateTimestamp",
              "type": "uint40"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getReserveFlags",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        }
      ],
      "name": "getReserveNormalizedIncome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "getSecurityDepositRequirement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSecurityDepositTokenName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultManagerProxyAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultManagerProxyName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultStorageName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_juniorDepositTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seniorDepositTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_juniorIncomeAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_seniorIncomeAllocation",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stableDebtAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestRateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "initReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "initVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityManagerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityManagerProxyName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityManagerStorageName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        }
      ],
      "name": "liquidityRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanManagerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultUser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeemSecurity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "removeMaxSecurityDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "removeSecurityDepositRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "securityDepositTokenName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressResolver",
          "type": "address"
        }
      ],
      "name": "setAddressResolverAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loadManager",
          "type": "address"
        }
      ],
      "name": "setLoanManagerToEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMaxSecurityDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "setReserveInterestRateStrategyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultUser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "slash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultUser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        }
      ],
      "name": "underlyingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requirement",
          "type": "uint256"
        }
      ],
      "name": "updateSecurityDepositRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManagerProxyName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultStorageName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_address",
          "type": "address[]"
        }
      ],
      "name": "whitelistAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_function",
          "type": "bytes32[]"
        }
      ],
      "name": "whitelistFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9fc1739b2eaf055c3565db76b456a81c9c8842536bf0675137f0cbcd65ef0776",
  "receipt": {
    "to": null,
    "from": "0xc4940D382C8EAFD2526D1ad56B36CD9674285c43",
    "contractAddress": "0xb52B14243881359190d9Dd7eb371608070699bd7",
    "transactionIndex": 2,
    "gasUsed": "4086201",
    "logsBloom": "0x
    "blockHash": "0xad5af01b53e4e1bc9d13bfaef860e57cd8c7f6534751797ceb7311ff1aec94d1",
    "transactionHash": "0x9fc1739b2eaf055c3565db76b456a81c9c8842536bf0675137f0cbcd65ef0776",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 8265273,
        "transactionHash": "0x9fc1739b2eaf055c3565db76b456a81c9c8842536bf0675137f0cbcd65ef0776",
        "address": "0xb52B14243881359190d9Dd7eb371608070699bd7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c",
          "0x000000000000000000000000c4940d382c8eafd2526d1ad56b36cd9674285c43",
          "0x000000000000000000000000c4940d382c8eafd2526d1ad56b36cd9674285c43"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xad5af01b53e4e1bc9d13bfaef860e57cd8c7f6534751797ceb7311ff1aec94d1"
      }
    ],
    "blockNumber": 8265273,
    "cumulativeGasUsed": "4433523",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc4940D382C8EAFD2526D1ad56B36CD9674285c43"
  ],
  "numDeployments": 1,
  "solcInputHash": "eee69880cfa252642b6fd82566022b0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"CallResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"activeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimExtCallACLProxyOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLiquidityManagerProxyOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVaultManagerProxyOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_onBehalfOf\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositSecurity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"eligibleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extCallACLProxyName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressResolverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"getCreditLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtCallACLProxyAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtCallACLProxyName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityManagerEscrowContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityManagerProxyAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityManagerProxyName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityManagerStorageName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLoanManagerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"getMaxSecurityDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentOverallLiquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSeniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentJuniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorLiquidityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorLiquidityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"securityRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"juniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"juniorLastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"seniorLastUpdateTimestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getReserveFlags\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"getSecurityDepositRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecurityDepositTokenName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultManagerProxyAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultManagerProxyName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultStorageName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_juniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_juniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"initVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityManagerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityManagerProxyName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityManagerStorageName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"liquidityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanManagerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemSecurity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"removeMaxSecurityDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"removeSecurityDepositRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"securityDepositTokenName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressResolver\",\"type\":\"address\"}],\"name\":\"setAddressResolverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loadManager\",\"type\":\"address\"}],\"name\":\"setLoanManagerToEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSecurityDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"underlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"updateSecurityDepositRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerProxyName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultStorageName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_function\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activeReserve(address)\":{\"details\":\"Active a reserve for borrowing\",\"params\":{\"_asset\":\"The address of the reserve*\"}},\"createVault()\":{\"details\":\"Create an empty Vault for msg.sender, in addition to this, a vault also deploy a SecurityDepositEscrow contract which the fund will be held in\",\"returns\":{\"_0\":\"address of Vault*\"}},\"deposit(address,uint8,uint256,address)\":{\"details\":\"Deposits an `amount` of underlying asset into the reserve, receiving in return overlying tokens: Either Junior Deposit Token or Senior Deposit token\",\"params\":{\"_amount\":\"The amount to be deposited\",\"_asset\":\"The address of the underlying asset to deposit\",\"_onBehalfOf\":\"The address that will receive the deposit tokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of deposit token   is a different wallet*\",\"_tranche\":\"The tranche of the liquidity pool the user wants to deposit to\"}},\"depositSecurity(address,address,uint256)\":{\"details\":\"Deposit specific amount of security deposit to user owned Vault\",\"params\":{\"_amount\":\"deposit amount*\",\"_reserve\":\"address of reserve\",\"_vaultUser\":\"the user address that will be sponsored\"}},\"eligibleAmount(address,address,address)\":{\"details\":\"Eligible amount that can be withdraw, calculated by deposit records without considering slash\",\"params\":{\"_reserve\":\"reserve address\",\"_sponsor\":\"sponsor address*\",\"_vaultUser\":\"user address\"}},\"getAddressResolverAddress()\":{\"details\":\"Get addressResolver contract address\",\"returns\":{\"_0\":\"address of the resolver contract*\"}},\"getConfiguration(address)\":{\"details\":\"Returns the configuration of the reserve\",\"params\":{\"_asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The state of the reserve*\"}},\"getCreditLimit(address,address)\":{\"details\":\"Get maximum reserve amount the use can borrow\",\"params\":{\"_reserve\":\"reserve contract address*\",\"_user\":\"user address\"}},\"getExtCallACLProxyAddress()\":{\"details\":\"Get ExtCallACLProxy contract address*\"},\"getLiquidityManagerEscrowContractAddress()\":{\"details\":\"Get EscrowContract owned by LiquidityManager*\"},\"getLiquidityManagerProxyAddress()\":{\"details\":\"Get LiquidityManagerProxy contract address*\"},\"getMaxSecurityDeposit(address)\":{\"details\":\"Get max security deposit for _reserve\",\"params\":{\"_reserve\":\"reserve address\"},\"returns\":{\"_0\":\"max deposit amount\"}},\"getReserveData(address)\":{\"details\":\"Returns the state and configuration of the reserve\",\"params\":{\"_asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The state of the reserve*\"}},\"getReserveFlags(address)\":{\"details\":\"Returns the reserve flags\",\"params\":{\"_asset\":\"The address of asset\"},\"returns\":{\"_0\":\"The state flags representing active, frozen, borrowing enabled*\"}},\"getReserveNormalizedIncome(address,uint8)\":{\"details\":\"Returns the normalized income per unit of asset\",\"params\":{\"_asset\":\"The address of the underlying asset of the reserve\",\"_tranche\":\"The tranche of the reserve, either Junior or Senior\"},\"returns\":{\"_0\":\"The reserve's normalized income*\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSecurityDepositRequirement(address)\":{\"details\":\"Get current security deposit requirement\",\"params\":{\"_reserve\":\"reserve address\"},\"returns\":{\"_0\":\"requirement, expressed in Ray*\"}},\"getVaultManagerProxyAddress()\":{\"details\":\"Get VaultManagerProxy contract address\",\"returns\":{\"_0\":\"address of the VaultManager*\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initReserve(address,address,address,uint256,uint256,address,address)\":{\"details\":\"Initializes a reserve, activating it, assigning two deposit tokens and an interest rate strategy Only callable by protocol operator\",\"params\":{\"_asset\":\"The address of the underlying asset of the reserve\",\"_interestRateStrategyAddress\":\"The address of the interest rate strategy contract*\",\"_juniorDepositTokenAddress\":\"The address of the junior deposit token that will be assigned to the reserve\",\"_juniorIncomeAllocation\":\"Junior income allocation, express in RAY\",\"_seniorDepositTokenAddress\":\"The address of the senior deposit token that will be assigned to the reserve\",\"_seniorIncomeAllocation\":\"Senior income allocation, express in RAY\",\"_stableDebtAddress\":\"The address of the StableDebtToken that will be assigned to the reserve\"}},\"liquidityRate(address,uint8)\":{\"details\":\"Get current liquidity rate for a specific reserve for it junior tranche or senior tranche\",\"params\":{\"_asset\":\"The address of the underlying asset of the reserve\",\"_tranche\":\"Either junior tranche or senior tranche*\"}},\"redeemSecurity(address,address,uint256)\":{\"details\":\"Redeem specific amount of security deposit to user owned Vault\",\"params\":{\"_amount\":\"deposit amount*\",\"_reserve\":\"address of reserve\",\"_vaultUser\":\"the user address that has be sponsored\"}},\"removeMaxSecurityDeposit(address)\":{\"details\":\"Remove max security deposit for _reserve\",\"params\":{\"_reserve\":\"reserve address\"}},\"removeSecurityDepositRequirement(address)\":{\"details\":\"Remove security deposit\",\"params\":{\"_reserve\":\"reserve address\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setAddressResolverAddress(address)\":{\"details\":\"Update addressResolver contract address\",\"params\":{\"_addressResolver\":\"address of the resolver contract*\"}},\"setMaxSecurityDeposit(address,uint256)\":{\"details\":\"Set max security deposit for _reserve\",\"params\":{\"_amount\":\"max amount sponsor can deposit\",\"_reserve\":\"reserve address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"underlyingBalance(address,address,address)\":{\"details\":\"Get underlying balance of security deposit token\",\"params\":{\"_reserve\":\"address of reserve\",\"_sponsor\":\"sponsor address*\",\"_vaultUser\":\"_vaultUser the user address that has be sponsored\"}},\"updateSecurityDepositRequirement(address,uint256)\":{\"details\":\"Update the security deposit requirement\",\"params\":{\"_requirement\":\"expressed in Ray\",\"_reserve\":\"reserve address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initVault(address,address)\":{\"notice\":\"Init a deployed Vault, ensure it has overlying security deposit token and corresponding staking contract _vaultUser the user/owner of this vault _reserve the underlying asset address e.g. TUS*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/component/Voyager.sol\":\"Voyager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/component/Voyager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/ownership/Ownable.sol';\\nimport '../libraries/types/DataTypes.sol';\\nimport '../libraries/logic/ReserveLogic.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport '../component/vault/VaultManager.sol';\\nimport '../component/vault/VaultManagerProxy.sol';\\nimport 'openzeppelin-solidity/contracts/access/AccessControl.sol';\\nimport '../libraries/acl/ExtCallACL.sol';\\nimport '../libraries/acl/ExtCallACLProxy.sol';\\nimport '../component/liquiditymanager/LiquidityManager.sol';\\n\\ncontract Voyager is AccessControl {\\n    bytes32 public constant liquidityManagerProxyName = 'liquidityManagerProxy';\\n    bytes32 public constant liquidityManagerName = 'liquidityManager';\\n    bytes32 public constant liquidityManagerStorageName =\\n        'liquidityManagerStorage';\\n    bytes32 public constant loanManagerName = 'loanManager';\\n    bytes32 public constant vaultManagerProxyName = 'vaultManagerProxy';\\n    bytes32 public constant vaultStorageName = 'vaultStorage';\\n    bytes32 public constant securityDepositTokenName = 'securityDepositToken';\\n    bytes32 public constant extCallACLProxyName = 'extCallACLProxy';\\n    bytes32 public constant OPERATOR = keccak256('OPERATOR');\\n\\n    address public addressResolver;\\n\\n    modifier onlyWhitelisted(bytes32 func) {\\n        require(\\n            ExtCallACL(getExtCallACLProxyAddress()).isWhitelistedAddress(\\n                msg.sender\\n            ),\\n            'Voyager: not whitelisted address'\\n        );\\n        require(\\n            ExtCallACL(getExtCallACLProxyAddress()).isWhitelistedFunction(func),\\n            'Voyager: not whitelisted functions'\\n        );\\n        _;\\n    }\\n\\n    constructor(address _operator) public {\\n        _setupRole(OPERATOR, _operator);\\n    }\\n\\n    event CallResult(bool, bytes);\\n\\n    /************************************** Getter Functions **************************************/\\n\\n    function getVaultManagerProxyName() external view returns (bytes32) {\\n        return vaultManagerProxyName;\\n    }\\n\\n    function getVaultStorageName() external view returns (bytes32) {\\n        return vaultStorageName;\\n    }\\n\\n    function getLiquidityManagerProxyName() external view returns (bytes32) {\\n        return liquidityManagerProxyName;\\n    }\\n\\n    function getLiquidityManagerStorageName() external view returns (bytes32) {\\n        return liquidityManagerStorageName;\\n    }\\n\\n    function getLoanManagerName() external view returns (bytes32) {\\n        return loanManagerName;\\n    }\\n\\n    function getSecurityDepositTokenName() external view returns (bytes32) {\\n        return securityDepositTokenName;\\n    }\\n\\n    function getExtCallACLProxyName() external view returns (bytes32) {\\n        return extCallACLProxyName;\\n    }\\n\\n    /************************************** HouseKeeping Interfaces **************************************/\\n    /**\\n     * @dev Update addressResolver contract address\\n     * @param _addressResolver address of the resolver contract\\n     **/\\n    function setAddressResolverAddress(address _addressResolver)\\n        external\\n        onlyRole(OPERATOR)\\n    {\\n        addressResolver = _addressResolver;\\n    }\\n\\n    function claimVaultManagerProxyOwnership() external onlyRole(OPERATOR) {\\n        address payable vaultManagerProxyAddress = getVaultManagerProxyAddress();\\n        VaultManagerProxy(vaultManagerProxyAddress).claimOwnership();\\n    }\\n\\n    function claimExtCallACLProxyOwnership() external onlyRole(OPERATOR) {\\n        address payable extCallACLProxyAddress = getExtCallACLProxyAddress();\\n        ExtCallACLProxy(extCallACLProxyAddress).claimOwnership();\\n    }\\n\\n    function claimLiquidityManagerProxyOwnership() external onlyRole(OPERATOR) {\\n        address payable liquidityManagerProxyAddress = getLiquidityManagerProxyAddress();\\n        LiquidityManager(liquidityManagerProxyAddress).claimOwnership();\\n    }\\n\\n    //todo consider merge all this setting functions, define a data struct for it\\n\\n    /**\\n     * @dev Set max security deposit for _reserve\\n     * @param _reserve reserve address\\n     * @param _amount max amount sponsor can deposit\\n     */\\n    function setMaxSecurityDeposit(address _reserve, uint256 _amount)\\n        external\\n        onlyRole(OPERATOR)\\n    {\\n        return\\n            VaultManager(getVaultManagerProxyAddress()).setMaxSecurityDeposit(\\n                _reserve,\\n                _amount\\n            );\\n    }\\n\\n    /**\\n     * @dev Remove max security deposit for _reserve\\n     * @param _reserve reserve address\\n     */\\n    function removeMaxSecurityDeposit(address _reserve)\\n        external\\n        onlyRole(OPERATOR)\\n    {\\n        return\\n            VaultManager(getVaultManagerProxyAddress())\\n                .removeMaxSecurityDeposit(_reserve);\\n    }\\n\\n    /**\\n     * @dev Update the security deposit requirement\\n     * @param _reserve reserve address\\n     * @param _requirement expressed in Ray\\n     */\\n    function updateSecurityDepositRequirement(\\n        address _reserve,\\n        uint256 _requirement\\n    ) external onlyRole(OPERATOR) {\\n        return\\n            VaultManager(getVaultManagerProxyAddress())\\n                .updateSecurityDepositRequirement(_reserve, _requirement);\\n    }\\n\\n    /**\\n     * @dev Remove security deposit\\n     * @param _reserve reserve address\\n     */\\n    function removeSecurityDepositRequirement(address _reserve)\\n        external\\n        onlyRole(OPERATOR)\\n    {\\n        return\\n            VaultManager(getVaultManagerProxyAddress())\\n                .removeSecurityDepositRequirement(_reserve);\\n    }\\n\\n    /**\\n     * Init a deployed Vault, ensure it has overlying security deposit token and corresponding staking contract\\n     * _vaultUser the user/owner of this vault\\n     * _reserve the underlying asset address e.g. TUS\\n     **/\\n    function initVault(address _user, address _reserve)\\n        external\\n        onlyRole(OPERATOR)\\n    {\\n        VaultManager vaultManager = VaultManager(getVaultManagerProxyAddress());\\n        vaultManager.initSecurityDepositToken(_user, _reserve);\\n        vaultManager.initStakingContract(_user, _reserve);\\n    }\\n\\n    function whitelistAddress(address[] calldata _address)\\n        external\\n        onlyRole(OPERATOR)\\n    {\\n        ExtCallACL extCallACL = ExtCallACL(getExtCallACLProxyAddress());\\n        extCallACL.whitelistAddress(_address);\\n    }\\n\\n    function whitelistFunction(bytes32[] calldata _function)\\n        external\\n        onlyRole(OPERATOR)\\n    {\\n        ExtCallACL extCallACL = ExtCallACL(getExtCallACLProxyAddress());\\n        extCallACL.whitelistFunction(_function);\\n    }\\n\\n    /************************************** Liquidity Manager Interfaces **************************************/\\n\\n    /**\\n     * @dev Initializes a reserve, activating it, assigning two deposit tokens and an interest rate strategy\\n     * Only callable by protocol operator\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @param _juniorDepositTokenAddress The address of the junior deposit token that will be assigned to the reserve\\n     * @param _seniorDepositTokenAddress The address of the senior deposit token that will be assigned to the reserve\\n     * @param _juniorIncomeAllocation Junior income allocation, express in RAY\\n     * @param _seniorIncomeAllocation Senior income allocation, express in RAY\\n     * @param _stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param _interestRateStrategyAddress The address of the interest rate strategy contract\\n     **/\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress\\n    ) external onlyRole(OPERATOR) {\\n        LiquidityManager(getLiquidityManagerProxyAddress()).initReserve(\\n            _asset,\\n            _juniorDepositTokenAddress,\\n            _seniorDepositTokenAddress,\\n            _juniorIncomeAllocation,\\n            _seniorIncomeAllocation,\\n            _stableDebtAddress,\\n            _interestRateStrategyAddress\\n        );\\n    }\\n\\n    /**\\n     * @dev Active a reserve for borrowing\\n     * @param _asset The address of the reserve\\n     **/\\n    function activeReserve(address _asset) external onlyRole(OPERATOR) {\\n        LiquidityManager(getLiquidityManagerProxyAddress()).activeReserve(\\n            _asset\\n        );\\n    }\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying tokens: Either\\n     * Junior Deposit Token or Senior Deposit token\\n     * @param _asset The address of the underlying asset to deposit\\n     * @param _tranche The tranche of the liquidity pool the user wants to deposit to\\n     * @param _amount The amount to be deposited\\n     * @param _onBehalfOf The address that will receive the deposit tokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of deposit token\\n     *   is a different wallet\\n     **/\\n    function deposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address _onBehalfOf\\n    ) external {\\n        LiquidityManager(getLiquidityManagerProxyAddress()).deposit(\\n            _asset,\\n            _tranche,\\n            _amount,\\n            msg.sender,\\n            _onBehalfOf\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the normalized income per unit of asset\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @param _tranche The tranche of the reserve, either Junior or Senior\\n     * @return The reserve's normalized income\\n     **/\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress())\\n                .getReserveNormalizedIncome(_asset, _tranche);\\n    }\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress()).getReserveData(\\n                _asset\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the reserve flags\\n     * @param _asset The address of asset\\n     * @return The state flags representing active, frozen, borrowing enabled\\n     **/\\n    function getReserveFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress()).getFlags(\\n                _asset\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getConfiguration(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress())\\n                .getConfiguration(_asset);\\n    }\\n\\n    /**\\n     * @dev Get current liquidity rate for a specific reserve for it junior tranche or senior tranche\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @param _tranche Either junior tranche or senior tranche\\n     **/\\n    function liquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress())\\n                .getLiquidityRate(_asset, _tranche);\\n    }\\n\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external onlyRole(OPERATOR) {}\\n\\n    function setLoanManagerToEscrow(address _loadManager)\\n        external\\n        onlyRole(OPERATOR)\\n    {\\n        LiquidityManager(getLiquidityManagerProxyAddress())\\n            .setLoanManagerToEscrow(_loadManager);\\n    }\\n\\n    /**\\n     * @dev Get EscrowContract owned by LiquidityManager\\n     **/\\n    function getLiquidityManagerEscrowContractAddress()\\n        external\\n        view\\n        returns (address)\\n    {\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress())\\n                .getEscrowAddress();\\n    }\\n\\n    /************************************** Vault Manager Interfaces **************************************/\\n\\n    /**\\n     * @dev Create an empty Vault for msg.sender, in addition to this, a vault also deploy\\n     * a SecurityDepositEscrow contract which the fund will be held in\\n     \\u00d7 @return address of Vault\\n     **/\\n    function createVault()\\n        external\\n        onlyWhitelisted('createVault')\\n        returns (address)\\n    {\\n        address vaultManagerProxy = getVaultManagerProxyAddress();\\n        VaultManager vaultManager = VaultManager(vaultManagerProxy);\\n        return vaultManager.createVault(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Deposit specific amount of security deposit to user owned Vault\\n     * @param _vaultUser the user address that will be sponsored\\n     * @param _reserve address of reserve\\n     * @param _amount deposit amount\\n     **/\\n    function depositSecurity(\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyWhitelisted('depositSecurity') {\\n        VaultManager(getVaultManagerProxyAddress()).depositSecurity(\\n            msg.sender,\\n            _vaultUser,\\n            _reserve,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Get underlying balance of security deposit token\\n     * @param _vaultUser _vaultUser the user address that has be sponsored\\n     * @param _reserve address of reserve\\n     * @param _sponsor sponsor address\\n     **/\\n    function underlyingBalance(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256) {\\n        return\\n            VaultManager(getVaultManagerProxyAddress()).underlyingBalance(\\n                _vaultUser,\\n                _reserve,\\n                _sponsor\\n            );\\n    }\\n\\n    /**\\n     * @dev Redeem specific amount of security deposit to user owned Vault\\n     * @param _vaultUser the user address that has be sponsored\\n     * @param _reserve address of reserve\\n     * @param _amount deposit amount\\n     **/\\n    function redeemSecurity(\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyWhitelisted('redeemSecurity') {\\n        VaultManager(getVaultManagerProxyAddress()).redeemSecurity(\\n            payable(msg.sender),\\n            _vaultUser,\\n            _reserve,\\n            _amount\\n        );\\n    }\\n\\n    // todo placeholder functions, more detail should be impl in the future\\n    function slash(\\n        address _vaultUser,\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) external {\\n        VaultManager(getVaultManagerProxyAddress()).slash(\\n            _vaultUser,\\n            _reserve,\\n            _to,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Get maximum reserve amount the use can borrow\\n     * @param _user user address\\n     * @param _reserve reserve contract address\\n     **/\\n    function getCreditLimit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            VaultManager(getVaultManagerProxyAddress()).getCreditLimit(\\n                _user,\\n                _reserve\\n            );\\n    }\\n\\n    /**\\n     * @dev Eligible amount that can be withdraw, calculated by deposit records without considering slash\\n     * @param _vaultUser user address\\n     * @param _reserve reserve address\\n     * @param _sponsor sponsor address\\n     **/\\n    function eligibleAmount(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256) {\\n        return\\n            VaultManager(getVaultManagerProxyAddress()).eligibleAmount(\\n                _vaultUser,\\n                _reserve,\\n                _sponsor\\n            );\\n    }\\n\\n    /************************************** View Interfaces **************************************/\\n\\n    /**\\n     * @dev Get max security deposit for _reserve\\n     * @param _reserve reserve address\\n     * @return max deposit amount\\n     */\\n    function getMaxSecurityDeposit(address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            VaultManager(getVaultManagerProxyAddress()).getMaxSecurityDeposit(\\n                _reserve\\n            );\\n    }\\n\\n    /**\\n     * @dev Get current security deposit requirement\\n     * @param _reserve reserve address\\n     * @return requirement, expressed in Ray\\n     **/\\n    function getSecurityDepositRequirement(address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            VaultManager(getVaultManagerProxyAddress())\\n                .getSecurityDepositRequirement(_reserve);\\n    }\\n\\n    /**\\n     * @dev Get addressResolver contract address\\n     * @return address of the resolver contract\\n     **/\\n    function getAddressResolverAddress() external view returns (address) {\\n        return addressResolver;\\n    }\\n\\n    /**\\n     * @dev Get VaultManagerProxy contract address\\n     * @return address of the VaultManager\\n     **/\\n    function getVaultManagerProxyAddress()\\n        public\\n        view\\n        returns (address payable)\\n    {\\n        address vaultManagerProxyAddress = AddressResolver(addressResolver)\\n            .getAddress(vaultManagerProxyName);\\n        return payable(vaultManagerProxyAddress);\\n    }\\n\\n    /**\\n     * @dev Get ExtCallACLProxy contract address\\n     **/\\n    function getExtCallACLProxyAddress() public view returns (address payable) {\\n        address extCallACLProxyAddress = AddressResolver(addressResolver)\\n            .getAddress(extCallACLProxyName);\\n        return payable(extCallACLProxyAddress);\\n    }\\n\\n    /**\\n     * @dev Get LiquidityManagerProxy contract address\\n     **/\\n    function getLiquidityManagerProxyAddress()\\n        public\\n        view\\n        returns (address payable)\\n    {\\n        address liquidityManagerProxyAddress = AddressResolver(addressResolver)\\n            .getAddress(liquidityManagerProxyName);\\n        return payable(liquidityManagerProxyAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xbda3220bc573a8fa907370a0e4ad8e8af10bc152e19bc5ec3d5d52af2535c28e\",\"license\":\"GPL-3.0\"},\"contracts/component/infra/AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../interfaces/IAddressResolver.sol';\\nimport '../../libraries/ownership/Ownable.sol';\\n\\ncontract AddressResolver is IAddressResolver, Ownable {\\n    mapping(bytes32 => address) public repository;\\n\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function importAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external onlyOwner {\\n        require(\\n            names.length == destinations.length,\\n            'Input lengths must match'\\n        );\\n\\n        for (uint256 i = 0; i < names.length; i++) {\\n            bytes32 name = names[i];\\n            address destination = destinations[i];\\n            repository[name] = destination;\\n            emit AddressImported(name, destination);\\n        }\\n    }\\n\\n    function getAddress(bytes32 name) external view returns (address) {\\n        return repository[name];\\n    }\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address)\\n    {\\n        address _foundAddress = repository[name];\\n        require(_foundAddress != address(0), reason);\\n        return _foundAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xd006ad78680655b1bc94b65fe123e90b7ca8e684ed3b22d3ba3868ccf21b2817\",\"license\":\"GPL-3.0\"},\"contracts/component/liquiditymanager/DefaultReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IReserveInterestRateStrategy.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    /**\\n     * this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates\\n     * Expressed in RAY\\n     **/\\n    uint256 public immutable OPTIMAL_UTILIZATION_RATE;\\n\\n    // Base interest rate set by governance. Expressed in ray\\n    uint256 internal immutable baseBorrowRate;\\n\\n    // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope1;\\n\\n    // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope2;\\n\\n    constructor(\\n        uint256 _optimalUtilizationRate,\\n        uint256 _stableRateSlope1,\\n        uint256 _stableRateSlope2,\\n        uint256 _baseBorrowRate\\n    ) public {\\n        OPTIMAL_UTILIZATION_RATE = _optimalUtilizationRate;\\n        baseBorrowRate = _baseBorrowRate;\\n        stableRateSlope1 = _stableRateSlope1;\\n        stableRateSlope2 = _stableRateSlope2;\\n    }\\n\\n    struct CalcInterestRatesLocalVars {\\n        uint256 totalDebt;\\n        uint256 currentStableBorrowRate;\\n        uint256 currentLiquidityRate;\\n        uint256 utilizationRate;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configuration\\n     * @param reserve The address of the reserve\\n     * @param juniorDepositToken The address of junior deposit token\\n     * @param seniorDepositToken The address of senior deposit token\\n     * @param liquidityAdded The liquidity added during the operation\\n     * @param liquidityTaken The liquidity taken during the operation\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256) {\\n        uint256 availableJuniorLiquidity = IERC20(reserve).balanceOf(\\n            juniorDepositToken\\n        );\\n        uint256 availableSeniorLiquidity = IERC20(reserve).balanceOf(\\n            seniorDepositToken\\n        );\\n        uint256 availableLiquidity = availableJuniorLiquidity.add(\\n            availableSeniorLiquidity\\n        );\\n        availableLiquidity = availableLiquidity.add(liquidityAdded).sub(\\n            liquidityTaken\\n        );\\n        return\\n            calculateInterestRates(\\n                reserve,\\n                availableLiquidity,\\n                totalStableDebt,\\n                averageBorrowRate\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * @param reserve The address of the reserve\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @return The liquidity rate, the stable borrow rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) public view returns (uint256, uint256) {\\n        CalcInterestRatesLocalVars memory vars;\\n\\n        vars.totalDebt = totalStableDebt;\\n        vars.currentStableBorrowRate = baseBorrowRate;\\n        vars.currentLiquidityRate = 0;\\n\\n        vars.utilizationRate = vars.totalDebt == 0\\n            ? 0\\n            : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\\n\\n        if (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n            vars.currentStableBorrowRate = vars\\n                .currentStableBorrowRate\\n                .add(stableRateSlope1)\\n                .add(\\n                    stableRateSlope2\\n                        .rayMul(\\n                            vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE)\\n                        )\\n                        .rayDiv(WadRayMath.Ray().sub(OPTIMAL_UTILIZATION_RATE))\\n                );\\n        } else {\\n            vars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\\n                stableRateSlope1.rayMul(vars.utilizationRate).rayDiv(\\n                    OPTIMAL_UTILIZATION_RATE\\n                )\\n            );\\n        }\\n\\n        vars.currentLiquidityRate = averageBorrowRate.rayMul(\\n            vars.utilizationRate\\n        );\\n        return (vars.currentLiquidityRate, vars.currentStableBorrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0x501b0d30efd4654196b7940e1b24d0c44a4dcd82c32288da095e9c63625bd9c6\",\"license\":\"GPL-3.0\"},\"contracts/component/liquiditymanager/LiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './ReserveManager.sol';\\nimport '../../libraries/helpers/Errors.sol';\\nimport '../../libraries/logic/ReserveLogic.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../shared/escrow/LiquidityDepositEscrow.sol';\\nimport '../../interfaces/IReserveManager.sol';\\nimport '../../interfaces/ILiquidityManager.sol';\\nimport '../../tokenization/JuniorDepositToken.sol';\\nimport '../../tokenization/SeniorDepositToken.sol';\\n\\ncontract LiquidityManager is ReserveManager, ILiquidityManager {\\n    LiquidityDepositEscrow public liquidityDepositEscrow;\\n\\n    constructor(address payable _proxy, address _voyager)\\n        ReserveManager(_proxy, _voyager)\\n    {\\n        liquidityDepositEscrow = LiquidityDepositEscrow(deployEscrow());\\n    }\\n\\n    function deployEscrow() private returns (address) {\\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender));\\n        bytes memory bytecode = type(LiquidityDepositEscrow).creationCode;\\n        address deployedEscrow;\\n        assembly {\\n            deployedEscrow := create2(\\n                0,\\n                add(bytecode, 32),\\n                mload(bytecode),\\n                salt\\n            )\\n        }\\n        return deployedEscrow;\\n    }\\n\\n    function getEscrowAddress() external view returns (address) {\\n        return escrowAddress();\\n    }\\n\\n    function escrowAddress()\\n        internal\\n        view\\n        override(ReserveManager)\\n        returns (address)\\n    {\\n        return address(liquidityDepositEscrow);\\n    }\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getReserveNormalizedIncome(_asset, _tranche);\\n    }\\n\\n    function deposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address _user,\\n        address _onBehalfOf\\n    ) external onlyProxy {\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        DataTypes.ReserveData memory reserve = getReserveData(_asset);\\n\\n        lms.updateStateOnDeposit(_asset, _tranche, _amount);\\n        liquidityDepositEscrow.deposit(_asset, _user, _amount);\\n\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            JuniorDepositToken(reserve.juniorDepositTokenAddress).mint(\\n                _onBehalfOf,\\n                _amount,\\n                getJuniorLiquidityIndex(_asset)\\n            );\\n        } else {\\n            SeniorDepositToken(reserve.seniorDepositTokenAddress).mint(\\n                _onBehalfOf,\\n                _amount,\\n                getSeniorLiquidityIndex(_asset)\\n            );\\n        }\\n        emit Deposit(_asset, _tranche, _user, _onBehalfOf, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x56a3b371b99efc59bfce602d2038e2bec9915f29aaecedb5bf0d44a790dc87b5\",\"license\":\"GPL-3.0\"},\"contracts/component/liquiditymanager/LiquidityManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/proxy/Proxy.sol';\\nimport '../../interfaces/IReserveManager.sol';\\nimport '../../interfaces/ILiquidityManager.sol';\\nimport '../../libraries/logic/ReserveLogic.sol';\\n\\ncontract LiquidityManagerProxy is Proxy {\\n    function getLiquidityRate(address _reserve, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IReserveManager(address(target)).getLiquidityRate(\\n                _reserve,\\n                _tranche\\n            );\\n    }\\n\\n    function getReserveData(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        return IReserveManager(address(target)).getReserveData(_reserve);\\n    }\\n\\n    function getConfiguration(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        return IReserveManager(address(target)).getConfiguration(_reserve);\\n    }\\n\\n    function getFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return IReserveManager(address(target)).getFlags(_asset);\\n    }\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        return\\n            ILiquidityManager(address(target)).getReserveNormalizedIncome(\\n                _asset,\\n                _tranche\\n            );\\n    }\\n\\n    function getEscrowAddress() external view returns (address) {\\n        return ILiquidityManager(address(target)).getEscrowAddress();\\n    }\\n}\\n\",\"keccak256\":\"0x18899d28257c010c65b4bb70592765fcd9c1cee6f11309e9449800be9a5462f7\",\"license\":\"GPL-3.0\"},\"contracts/component/liquiditymanager/ReserveManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../Voyager.sol';\\nimport '../../libraries/helpers/Errors.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Address.sol';\\nimport '../shared/storage/LiquidityManagerStorage.sol';\\nimport '../infra/AddressResolver.sol';\\nimport '../../libraries/proxy/Proxyable.sol';\\nimport '../../interfaces/IDebtToken.sol';\\nimport '../../libraries/logic/ReserveLogic.sol';\\nimport '../../interfaces/IReserveManager.sol';\\nimport '../../interfaces/IVoyagerComponent.sol';\\nimport '../shared/escrow/LiquidityDepositEscrow.sol';\\n\\nabstract contract ReserveManager is\\n    Proxyable,\\n    IReserveManager,\\n    IVoyagerComponent\\n{\\n    constructor(address payable _proxy, address _voyager) Proxyable(_proxy) {\\n        voyager = Voyager(_voyager);\\n    }\\n\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress\\n    ) external onlyProxy {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).initReserve(\\n            _asset,\\n            _juniorDepositTokenAddress,\\n            _seniorDepositTokenAddress,\\n            _juniorIncomeAllocation,\\n            _seniorIncomeAllocation,\\n            _stableDebtAddress,\\n            _interestRateStrategyAddress\\n        );\\n    }\\n\\n    function activeReserve(address _asset) external onlyProxy {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).activeReserve(\\n                _asset\\n            );\\n    }\\n\\n    function setLoanManagerToEscrow(address _loadManager) external onlyProxy {\\n        LiquidityDepositEscrow(escrowAddress()).setLoadManager(_loadManager);\\n    }\\n\\n    function getReserveData(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getReserveData(_asset);\\n    }\\n\\n    function getConfiguration(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getConfiguration(_asset);\\n    }\\n\\n    function getFlags(address _asset)\\n        public\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress()).getFlags(\\n                _asset\\n            );\\n    }\\n\\n    function getLiquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getLiquidityRate(_asset, _tranche);\\n    }\\n\\n    function getJuniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getJuniorLiquidityIndex(_asset);\\n    }\\n\\n    function getSeniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getSeniorLiquidityIndex(_asset);\\n    }\\n\\n    function escrowAddress() internal view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x4af3ebbeac3e923320f7a94cc178c83ce1f80d2c71f67373928737f39710f871\",\"license\":\"GPL-3.0\"},\"contracts/component/shared/escrow/LiquidityDepositEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../../libraries/Escrow.sol';\\nimport 'openzeppelin-solidity/contracts/access/AccessControl.sol';\\n\\ncontract LiquidityDepositEscrow is Escrow, AccessControl {\\n    bytes32 public constant LoanManager = keccak256('LoanManager');\\n\\n    function deposit(\\n        address _reserve,\\n        address _user,\\n        uint256 _amount\\n    ) public payable nonReentrant onlyOwner {\\n        _deposit(_reserve, _user, _amount);\\n    }\\n\\n    function withdraw(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        _withdraw(_reserve, _user, _amount);\\n    }\\n\\n    function setLoadManager(address _loanManager) public onlyOwner {\\n        _setupRole(LoanManager, _loanManager);\\n    }\\n}\\n\",\"keccak256\":\"0x8266a05758ea71df172279af0704c5b98f03410a45fd19c58860798b2e317ba9\",\"license\":\"GPL-3.0\"},\"contracts/component/shared/storage/LiquidityManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../../libraries/state/State.sol';\\nimport '../../../libraries/types/DataTypes.sol';\\nimport '../../../libraries/logic/ReserveLogic.sol';\\nimport '../../../libraries/logic/ValidationLogic.sol';\\nimport '../../../libraries/configuration/ReserveConfiguration.sol';\\n\\ncontract LiquidityManagerStorage is State {\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    mapping(address => DataTypes.ReserveData) internal _reserves;\\n\\n    bool internal _paused;\\n\\n    constructor(address _liquidityManager) State(_liquidityManager) {}\\n\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress\\n    ) external onlyAssociatedContract {\\n        _reserves[_asset].init(\\n            _juniorDepositTokenAddress,\\n            _seniorDepositTokenAddress,\\n            _juniorIncomeAllocation,\\n            _seniorIncomeAllocation,\\n            _stableDebtAddress,\\n            _interestRateStrategyAddress\\n        );\\n    }\\n\\n    function updateStateOnDeposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount\\n    ) public onlyAssociatedContract {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        ValidationLogic.validateDeposit(reserve, _amount);\\n        reserve.updateState(_tranche);\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            reserve.updateInterestRates(_asset, _amount, 0, 0, 0);\\n        } else {\\n            reserve.updateInterestRates(_asset, 0, 0, _amount, 0);\\n        }\\n    }\\n\\n    function activeReserve(address _asset) public onlyAssociatedContract {\\n        DataTypes.ReserveConfigurationMap\\n            memory currentConfig = getConfiguration(_asset);\\n        currentConfig.setActive(true);\\n        setConfiguration(_asset, currentConfig.data);\\n    }\\n\\n    /*********************************************** View functions ***********************************************/\\n\\n    function getFlags(address _asset)\\n        public\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        DataTypes.ReserveConfigurationMap\\n            memory currentConfig = getConfiguration(_asset);\\n        return currentConfig.getFlags();\\n    }\\n\\n    function getReserveData(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        return _reserves[_asset];\\n    }\\n\\n    function getConfiguration(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        return _reserves[_asset].configuration;\\n    }\\n\\n    function setConfiguration(address _asset, uint256 configuration) internal {\\n        _reserves[_asset].configuration.data = configuration;\\n    }\\n\\n    function getLiquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].getLiquidityRate(_tranche);\\n    }\\n\\n    function getJuniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].juniorLiquidityIndex;\\n    }\\n\\n    function getSeniorLiquidityIndex(address _asset)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].seniorLiquidityIndex;\\n    }\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) public view returns (uint256) {\\n        return _reserves[_asset].getNormalizedIncome(_tranche);\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n}\\n\",\"keccak256\":\"0x79d92c4a5f5f36e4d03ee3d7766d2ee72779abb4d31e3bc2f68f6cba561b43aa\",\"license\":\"GPL-3.0\"},\"contracts/component/staking/RewardsDistributionRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/ownership/Ownable.sol';\\n\\nabstract contract RewardsDistributionRecipient is Ownable {\\n    address public rewardsDistribution;\\n\\n    function notifyRewardAmount(uint256 reward) external virtual;\\n\\n    modifier onlyRewardsDistribution() {\\n        require(\\n            msg.sender == rewardsDistribution,\\n            'Caller is not RewardsDistribution contract'\\n        );\\n        _;\\n    }\\n\\n    function setRewardsDistribution(address _rewardsDistribution)\\n        external\\n        onlyOwner\\n    {\\n        rewardsDistribution = _rewardsDistribution;\\n    }\\n}\\n\",\"keccak256\":\"0x0ada077c7d1b5ed5f6786d032e0a6ebeccae5460cd08dcadc06f62ec4db0bfda\",\"license\":\"GPL-3.0\"},\"contracts/component/staking/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../../libraries/helpers/Pausable.sol';\\nimport 'openzeppelin-solidity/contracts/security/ReentrancyGuard.sol';\\nimport './RewardsDistributionRecipient.sol';\\n\\ncontract StakingRewards is\\n    ReentrancyGuard,\\n    RewardsDistributionRecipient,\\n    Pausable\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public stakingToken;\\n    IERC20 public rewardsToken;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardsDuration = 7 days;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    constructor(address _stakingToken, address _rewardsToken) {\\n        stakingToken = IERC20(_stakingToken);\\n        rewardsToken = IERC20(_rewardsToken);\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function stake(uint256 amount)\\n        external\\n        nonReentrant\\n        notPaused\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, 'Cannot stake 0');\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, 'Cannot withdraw 0');\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            _balances[account]\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(rewardsDuration);\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlyRewardsDistribution\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardsToken.balanceOf(address(this));\\n        require(\\n            rewardRate <= balance.div(rewardsDuration),\\n            'Provided reward too high'\\n        );\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n        require(\\n            block.timestamp > periodFinish,\\n            'Previous rewards period must be complete before changing the duration for the new period'\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n}\\n\",\"keccak256\":\"0xe1f5684233b7b5d2fb7eae0bbf0da879236e494aa3b654d58a2634cf1b182a39\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/SecurityDepositEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/Escrow.sol';\\n\\ncontract SecurityDepositEscrow is Escrow {\\n    function getVersion() external view returns (string memory) {\\n        string memory version = 'SecurityDepositEscrow 0.0.1';\\n        return version;\\n    }\\n\\n    // placeholder function\\n    function slash(\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) public payable nonReentrant onlyOwner {\\n        transferToUser(_reserve, _to, _amount);\\n    }\\n\\n    function deposit(\\n        address _reserve,\\n        address _user,\\n        uint256 _amount\\n    ) public payable nonReentrant onlyOwner {\\n        _deposit(_reserve, _user, _amount);\\n    }\\n\\n    function withdraw(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        _withdraw(_reserve, _user, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x4a82df33501e0a7996cf763f4a70b266c3273f010d31b8fc7b6721aaa78a920b\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/access/AccessControl.sol';\\nimport 'openzeppelin-solidity/contracts/security/ReentrancyGuard.sol';\\nimport './SecurityDepositEscrow.sol';\\nimport '../infra/AddressResolver.sol';\\nimport '../Voyager.sol';\\nimport '../staking/StakingRewards.sol';\\nimport '../../tokenization/SecurityDepositToken.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\nimport './VaultManager.sol';\\n\\ncontract Vault is AccessControl, ReentrancyGuard {\\n    using WadRayMath for uint256;\\n    bytes32 public constant BORROWER = keccak256('BORROWER');\\n\\n    address public factory;\\n    address public voyager;\\n    address[] public players;\\n    SecurityDepositEscrow public securityDepositEscrow;\\n    SecurityDepositToken public securityDepositToken;\\n    StakingRewards public stakingContract;\\n\\n    uint256 public totalDebt;\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == factory, 'only factory error');\\n        _;\\n    }\\n\\n    constructor() public {\\n        factory = msg.sender;\\n        securityDepositEscrow = SecurityDepositEscrow(deployEscrow());\\n    }\\n\\n    function deployEscrow() private returns (address) {\\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender));\\n        bytes memory bytecode = type(SecurityDepositEscrow).creationCode;\\n        address deployedEscrow;\\n        assembly {\\n            deployedEscrow := create2(\\n                0,\\n                add(bytecode, 32),\\n                mload(bytecode),\\n                salt\\n            )\\n        }\\n        return deployedEscrow;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _voyager, address borrower) external {\\n        require(msg.sender == factory, 'Voyager Vault: FORBIDDEN'); // sufficient check\\n        voyager = _voyager;\\n        _setupRole(BORROWER, borrower);\\n    }\\n\\n    function getVaultManagerProxyAddress() private returns (address) {\\n        Voyager voyager = Voyager(voyager);\\n        address addressResolver = voyager.getAddressResolverAddress();\\n        return\\n            AddressResolver(addressResolver).getAddress(\\n                voyager.getVaultManagerProxyName()\\n            );\\n    }\\n\\n    function initSecurityDepositToken(address _reserve) external onlyFactory {\\n        require(\\n            address(securityDepositToken) == address(0),\\n            'Vault: security deposit token has been initialized'\\n        );\\n        ERC20 token = ERC20(_reserve);\\n        securityDepositToken = new SecurityDepositToken(\\n            _reserve,\\n            token.decimals(),\\n            token.name(),\\n            token.symbol()\\n        );\\n    }\\n\\n    function initStakingContract(address _reserve) external onlyFactory {\\n        require(\\n            address(stakingContract) == address(0),\\n            'Vault: staking contract has been initialized'\\n        );\\n        require(\\n            address(securityDepositToken) != address(0),\\n            'Vault: security deposit token has not been initialized'\\n        );\\n        stakingContract = new StakingRewards(\\n            address(securityDepositToken),\\n            _reserve\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer some deposit security\\n     * @param _sponsor user address who deposit to this escrow\\n     * @param _reserve reserve address\\n     * @param _amount deposit amount\\n     **/\\n    function depositSecurity(\\n        address _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable nonReentrant onlyFactory {\\n        // check max security deposit amount for this _reserve\\n        uint256 maxAllowedAmount = Voyager(voyager).getMaxSecurityDeposit(\\n            _reserve\\n        );\\n        uint256 depositedAmount = securityDepositEscrow.getDepositAmount(\\n            _reserve\\n        );\\n        require(\\n            depositedAmount + _amount < maxAllowedAmount,\\n            'Vault: deposit amount exceed'\\n        );\\n        securityDepositEscrow.deposit(_reserve, _sponsor, _amount);\\n        securityDepositToken.mintOnDeposit(_sponsor, _amount);\\n    }\\n\\n    /**\\n     * @dev get current security amount\\n     * @param _reserve underlying asset address\\n     **/\\n    function getCurrentSecurityDeposit(address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return securityDepositEscrow.getDepositAmount(_reserve);\\n    }\\n\\n    function getActualSecurityDeposit(address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return ERC20(_reserve).balanceOf(address(securityDepositEscrow));\\n    }\\n\\n    /**\\n     * @dev Get unused deposits\\n     * @param _sponsor sponsor address\\n     * @param _reserve reserve address\\n     **/\\n    function getUnusedDeposits(address _sponsor, address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 securityRequirement = VaultManager(factory)\\n            .getSecurityDepositRequirement(_reserve);\\n        return\\n            securityDepositToken.balanceOf(_sponsor) -\\n            totalDebt.wadToRay().rayMul(securityRequirement);\\n    }\\n\\n    /**\\n     * @dev Redeem underlying reserve\\n     * @param _sponsor sponsor address\\n     * @param _reserve reserve address\\n     * @param _amount redeem amount\\n     **/\\n    function redeemSecurity(\\n        address payable _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable nonReentrant onlyFactory {\\n        require(\\n            _amount <= getUnusedDeposits(_sponsor, _reserve),\\n            'Vault: cannot redeem more than unused deposits'\\n        );\\n        securityDepositEscrow.withdraw(\\n            _reserve,\\n            _sponsor,\\n            underlyingBalance(_sponsor, _reserve)\\n        );\\n        securityDepositToken.burnOnRedeem(_sponsor, _amount);\\n    }\\n\\n    function underlyingBalance(address _sponsor, address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 amountToRedeemInRay = securityDepositToken\\n            .balanceOf(_sponsor)\\n            .wadToRay()\\n            .rayDiv(securityDepositToken.totalSupply().wadToRay())\\n            .rayMul(getActualSecurityDeposit(_reserve).wadToRay());\\n        return amountToRedeemInRay.rayToWad();\\n    }\\n\\n    function eligibleAmount(address _reserve, address _sponsor)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return securityDepositEscrow.eligibleAmount(_reserve, _sponsor);\\n    }\\n\\n    // placeholder function\\n    function slash(\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) public nonReentrant onlyFactory {\\n        securityDepositEscrow.slash(_reserve, _to, _amount);\\n    }\\n\\n    function getSecurityDepositTokenAddress() external view returns (address) {\\n        return address(securityDepositToken);\\n    }\\n\\n    function getStakingContractAddress() external view returns (address) {\\n        return address(stakingContract);\\n    }\\n\\n    /**\\n     * @dev Get SecurityDepositEscrow contract address\\n     * @return address\\n     **/\\n    function getSecurityDepositEscrowAddress() external view returns (address) {\\n        return address(securityDepositEscrow);\\n    }\\n\\n    function getVersion() external view returns (string memory) {\\n        string memory version = 'Vault 0.0.1';\\n        return version;\\n    }\\n}\\n\",\"keccak256\":\"0xdaca1c42b53341cb76533a066b2d2b476dbd73d31fc9b5667c459d64c66f993d\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './Vault.sol';\\nimport '../../interfaces/IVaultManager.sol';\\nimport '../Voyager.sol';\\nimport '../infra/AddressResolver.sol';\\nimport './VaultStorage.sol';\\nimport 'openzeppelin-solidity/contracts/access/AccessControl.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\\nimport 'openzeppelin-solidity/contracts/security/ReentrancyGuard.sol';\\nimport '../../libraries/proxy/Proxyable.sol';\\nimport '../../tokenization/SecurityDepositToken.sol';\\nimport '../../mock/Tus.sol';\\nimport '../../libraries/math/WadRayMath.sol';\\n\\ncontract VaultManager is AccessControl, ReentrancyGuard, Proxyable {\\n    using SafeERC20 for ERC20;\\n    using WadRayMath for uint256;\\n\\n    bytes32 public constant VOYAGER = keccak256('VOYAGER');\\n    address public voyager;\\n    mapping(address => uint256) public maxSecurityDeposit;\\n    // reserve address => requirement expressed in ray\\n    mapping(address => uint256) public securityDepositRequirement;\\n\\n    event VaultCreated(address indexed user, address vault, uint256 len);\\n\\n    event SecurityDeposited(\\n        address indexed sponsor,\\n        address user,\\n        address reserve,\\n        uint256 amount\\n    );\\n\\n    event SecurityRedeemed(\\n        address indexed sponsor,\\n        address user,\\n        address reserve,\\n        uint256 amount\\n    );\\n\\n    event SecurityDepositRequirementSet(\\n        address indexed reserve,\\n        uint256 requirement\\n    );\\n\\n    constructor(address payable _proxy, address _voyager)\\n        public\\n        Proxyable(_proxy)\\n    {\\n        voyager = _voyager;\\n    }\\n\\n    function getVaultStorageAddress() private view returns (address) {\\n        Voyager v = Voyager(voyager);\\n        address resolver = v.getAddressResolverAddress();\\n        return AddressResolver(resolver).getAddress(v.getVaultStorageName());\\n    }\\n\\n    function getSecurityDepositTokenAddress(address vault)\\n        private\\n        view\\n        returns (address)\\n    {\\n        return Vault(vault).getSecurityDepositTokenAddress();\\n    }\\n\\n    /**\\n     * @dev Get existing Vault contract address for user\\n     * @param _user the address of the player\\n     * @return Vault address\\n     **/\\n    function getVault(address _user) public view returns (address) {\\n        return VaultStorage(getVaultStorageAddress()).getVaultAddress(_user);\\n    }\\n\\n    /**\\n     * @dev Get credit limit for a specific reserve\\n     * @param _user user address\\n     * @return _reserve reserve address\\n     **/\\n    function getCreditLimit(address _user, address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        address vaultAddress = getVault(_user);\\n        uint256 currentSecurityDeposit = Vault(vaultAddress)\\n            .getCurrentSecurityDeposit(_reserve);\\n        uint256 securityDepositRequirement = securityDepositRequirement[\\n            _reserve\\n        ];\\n        require(\\n            securityDepositRequirement != 0,\\n            'security deposit requirement cannot be 0'\\n        );\\n        uint256 creditLimitInRay = currentSecurityDeposit.wadToRay().rayDiv(\\n            securityDepositRequirement\\n        );\\n        return creditLimitInRay.rayToWad();\\n    }\\n\\n    /**\\n     * @dev Create a Vault for user\\n     * @param _user the address of the player\\n     **/\\n    function createVault(address _user)\\n        external\\n        onlyProxy\\n        returns (address vault)\\n    {\\n        bytes memory bytecode = type(Vault).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(_user));\\n        assembly {\\n            vault := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        Vault(vault).initialize(voyager, _user);\\n        uint256 len = VaultStorage(getVaultStorageAddress()).pushNewVault(\\n            _user,\\n            vault\\n        );\\n        emit VaultCreated(_user, vault, len);\\n    }\\n\\n    /**\\n     * @dev Delegate call to Vault's depositSecurity\\n     * @param _sponsor who actual deposits the reserve into the amount\\n     * @param _vaultUser user address\\n     * @param _reserve reserve address\\n     * @param _amount amount user is willing to deposit\\n     */\\n    function depositSecurity(\\n        address _sponsor,\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyProxy {\\n        address vaultAddress = getVault(_vaultUser);\\n        Vault(vaultAddress).depositSecurity(_sponsor, _reserve, _amount);\\n        emit SecurityDeposited(_sponsor, _vaultUser, _reserve, _amount);\\n    }\\n\\n    /**\\n     * @dev  Delegate call to Vault's redeemSecurity\\n     * @param _sponsor sponsor address\\n     * @param _vaultUser user address\\n     * @param _reserve reserve address\\n     * @param _amount redeem amount\\n     **/\\n    function redeemSecurity(\\n        address payable _sponsor,\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyProxy {\\n        address vaultAddress = getVault(_vaultUser);\\n        Vault(vaultAddress).redeemSecurity(_sponsor, _reserve, _amount);\\n        emit SecurityRedeemed(_sponsor, _vaultUser, _reserve, _amount);\\n    }\\n\\n    function eligibleAmount(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) public view returns (uint256) {\\n        address vaultAddress = getVault(_vaultUser);\\n        return Vault(vaultAddress).eligibleAmount(_reserve, _sponsor);\\n    }\\n\\n    // placeholder function\\n    function slash(\\n        address _vaultUser,\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) public nonReentrant onlyProxy {\\n        address vaultAddress = getVault(_vaultUser);\\n        return Vault(vaultAddress).slash(_reserve, _to, _amount);\\n    }\\n\\n    function underlyingBalance(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) public view returns (uint256) {\\n        address vaultAddress = getVault(_vaultUser);\\n        return Vault(vaultAddress).underlyingBalance(_sponsor, _reserve);\\n    }\\n\\n    function initSecurityDepositToken(address _vaultUser, address _reserve)\\n        external\\n        onlyProxy\\n    {\\n        address vaultAddress = getVault(_vaultUser);\\n        Vault(vaultAddress).initSecurityDepositToken(_reserve);\\n    }\\n\\n    /**\\n     * Init a deployed Vault, ensure it has overlying security deposit token and corresponding staking contract\\n     * _vaultUser the user/owner of this vault\\n     * _reserve the underlying asset address e.g. TUS\\n     **/\\n    function initStakingContract(address _vaultUser, address _reserve)\\n        external\\n        onlyProxy\\n    {\\n        address vaultAddress = getVault(_vaultUser);\\n        Vault(vaultAddress).initStakingContract(_reserve);\\n    }\\n\\n    /************************ HouseKeeping Function ******************************/\\n\\n    function setMaxSecurityDeposit(address _reserve, uint256 _amount)\\n        external\\n        onlyProxy\\n    {\\n        maxSecurityDeposit[_reserve] = _amount;\\n    }\\n\\n    function removeMaxSecurityDeposit(address _reserve) external onlyProxy {\\n        delete maxSecurityDeposit[_reserve];\\n    }\\n\\n    function getMaxSecurityDeposit(address _reserve)\\n        external\\n        view\\n        onlyProxy\\n        returns (uint256)\\n    {\\n        return maxSecurityDeposit[_reserve];\\n    }\\n\\n    function updateSecurityDepositRequirement(\\n        address _reserve,\\n        uint256 _requirement\\n    ) external onlyProxy {\\n        securityDepositRequirement[_reserve] = _requirement;\\n        emit SecurityDepositRequirementSet(_reserve, _requirement);\\n    }\\n\\n    function removeSecurityDepositRequirement(address _reserve)\\n        external\\n        onlyProxy\\n    {\\n        delete securityDepositRequirement[_reserve];\\n    }\\n\\n    function getSecurityDepositRequirement(address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return securityDepositRequirement[_reserve];\\n    }\\n}\\n\",\"keccak256\":\"0xba12d3026a691e11b03b34775718d826e647c0453c3eefc7ecf2fdeda836b26c\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/proxy/Proxy.sol';\\nimport '../../interfaces/IVaultManager.sol';\\n\\ncontract VaultManagerProxy is Proxy {\\n    /************************** Immutable static call for target contract **************************/\\n\\n    function getMaxSecurityDeposit(address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return IVaultManager(address(target)).getMaxSecurityDeposit(_reserve);\\n    }\\n\\n    function getSecurityDepositRequirement(address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultManager(address(target)).getSecurityDepositRequirement(\\n                _reserve\\n            );\\n    }\\n\\n    function getCreditLimit(address _user, address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return IVaultManager(address(target)).getCreditLimit(_user, _reserve);\\n    }\\n\\n    function eligibleAmount(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256) {\\n        return\\n            IVaultManager(address(target)).eligibleAmount(\\n                _vaultUser,\\n                _reserve,\\n                _sponsor\\n            );\\n    }\\n\\n    function underlyingBalance(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256) {\\n        return\\n            IVaultManager(address(target)).underlyingBalance(\\n                _vaultUser,\\n                _reserve,\\n                _sponsor\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xb4fcb149bb0e199de21adeff30e7f10b380579c39e92e0c8e94f7890423553a7\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/state/State.sol';\\n\\n// central storage for all vaults\\ncontract VaultStorage is State {\\n    address[] public allVaults;\\n    // player address => vault address\\n    mapping(address => address) public getVault;\\n\\n    constructor(address _vaultManager) State(_vaultManager) {}\\n\\n    function pushNewVault(address _player, address vault)\\n        external\\n        onlyAssociatedContract\\n        returns (uint256)\\n    {\\n        allVaults.push(vault);\\n        getVault[_player] = vault;\\n        return allVaults.length;\\n    }\\n\\n    /**\\n     * @dev Get Vault address for a specific user\\n     * @param _user the address of the player\\n     **/\\n    function getVaultAddress(address _user) external view returns (address) {\\n        return getVault[_user];\\n    }\\n\\n    /**\\n     * @dev Get all credit account addresses\\n     **/\\n    function getAllVaults() external view returns (address[] memory) {\\n        return allVaults;\\n    }\\n}\\n\",\"keccak256\":\"0xc7f63581686821c4f0e5e86d57c47ede928ce3c519d226483d8f092ff2eaa570\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    //function getSynth(byte32 key) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x74dd91308fdcb0c7c8231569d453ff5446740bfc6b1916971ad4b361e5fcd628\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IStableDebtToken {\\n    function getAverageStableRate() external view returns (uint256);\\n\\n    function getTotalSupplyAndAvgRate()\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x535bfa631faf7d4836901d80eef474cc530eccdb3afcd488b3e506ea78cced85\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/logic/ReserveLogic.sol';\\n\\ninterface ILiquidityManager {\\n    event Deposit(\\n        address indexed reserve,\\n        ReserveLogic.Tranche tranche,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount\\n    );\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256);\\n\\n    function getEscrowAddress() external view returns (address);\\n\\n    function deposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address _user,\\n        address _onBehalfOf\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbe6a26b1178af707b96c154d573652d0e6f22e71a6b0f1f8ef6c81275a0c3f5e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquidityManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/logic/ReserveLogic.sol';\\n\\ninterface ILiquidityManagerProxy {\\n    function getLiquidityRate(address _reserve, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getReserveData(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function getFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        );\\n\\n    function getConfiguration(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x39a3366fb40652d00f102f17bdb3eee45f174cbbf2e512b8c0a0f65792b65df2\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/**\\n@title IReserveInterestRateStrategyInterface interface\\n@notice Interface for the calculation of the interest rates.\\n*/\\n\\ninterface IReserveInterestRateStrategy {\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xa80f4dca04db5b06c6ca898242c96f9d72816cf05e921ed4ba4081b90480c70e\"},\"contracts/interfaces/IReserveManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/logic/ReserveLogic.sol';\\n\\ninterface IReserveManager {\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress\\n    ) external;\\n\\n    function activeReserve(address _asset) external;\\n\\n    function setLoanManagerToEscrow(address _loadManager) external;\\n\\n    function getReserveData(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function getConfiguration(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    function getFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        );\\n\\n    function getLiquidityRate(address _reserve, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x51c2ff73993dbf5dee5f5646dfeddb1c0d85ce5f2fc3165a6cf235b8bb52f28b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IVaultManager {\\n    function initialize(address) external;\\n\\n    function getMaxSecurityDeposit(address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSecurityDepositRequirement(address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCreditLimit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function eligibleAmount(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256);\\n\\n    function underlyingBalance(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x44f2be3ebd7c97a9fd0ce3f5aba674b8b2bcfa17876e83476becf5007c449b8e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVoyagerComponent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../component/Voyager.sol';\\nimport '../component/infra/AddressResolver.sol';\\n\\nabstract contract IVoyagerComponent {\\n    Voyager public voyager;\\n\\n    function liquidityManagerStorageAddress() internal view returns (address) {\\n        return\\n            AddressResolver(voyager.getAddressResolverAddress()).getAddress(\\n                voyager.getLiquidityManagerStorageName()\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x214961dd5b8e76291f1b0dc7d01cab4c4d2233bbaf047e4b174d5edb287ab494\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './ownership/Ownable.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Address.sol';\\nimport 'openzeppelin-solidity/contracts/security/ReentrancyGuard.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\\nimport './EthAddressLib.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\ncontract Escrow is Ownable, ReentrancyGuard {\\n    using Address for address payable;\\n    using SafeERC20 for ERC20;\\n\\n    struct Deposit {\\n        uint256 amount;\\n        uint40 depositTime;\\n    }\\n\\n    event Deposited(address indexed payee, address token, uint256 amount);\\n    event Withdrawn(address indexed payee, address token, uint256 amount);\\n\\n    // reserve address => amount\\n    mapping(address => uint256) private _deposits;\\n    // reserve address => deposit record\\n    mapping(address => Deposit[]) private _depositRecords;\\n\\n    uint40 private _lockupTimeInSeconds = 7 days;\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param _reserve the asset address\\n     * @param _user user address who deposit to this escrow\\n     * @param _amount token amount\\n     */\\n    function _deposit(\\n        address _reserve,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        if (_reserve != EthAddressLib.ethAddress()) {\\n            require(\\n                msg.value == 0,\\n                'User is sending ETH along with the ERC20 transfer.'\\n            );\\n            ERC20(_reserve).safeTransferFrom(_user, address(this), _amount);\\n        } else {\\n            require(\\n                msg.value == _amount,\\n                'The amount and the value sent to deposit do not match'\\n            );\\n        }\\n        _deposits[_reserve] += _amount;\\n        Deposit memory deposit = Deposit(_amount, uint40(block.timestamp));\\n        _depositRecords[_reserve].push(deposit);\\n        emit Deposited(_user, _reserve, _amount);\\n    }\\n\\n    function eligibleAmount(address _reserve, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Deposit[] storage deposits = _depositRecords[_reserve];\\n        uint256 eligibleAmount = 0;\\n        for (uint256 i = 0; i < deposits.length; i++) {\\n            if (\\n                uint40(block.timestamp) - deposits[i].depositTime >\\n                _lockupTimeInSeconds\\n            ) {\\n                eligibleAmount += deposits[i].amount;\\n            }\\n        }\\n        return eligibleAmount;\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, only beyond _lockupTimeInSeconds\\n     * @param _reserve the asset address\\n     * @param _user user address who deposit to this escrow\\n     */\\n    function _withdraw(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) internal onlyOwner {\\n        Deposit[] storage deposits = _depositRecords[_reserve];\\n        uint256 eligibleAmount = 0;\\n        uint40 lastUpdateTime;\\n        for (uint256 i = 0; i < deposits.length; i++) {\\n            if (\\n                uint40(block.timestamp) - deposits[i].depositTime >\\n                _lockupTimeInSeconds\\n            ) {\\n                eligibleAmount += deposits[i].amount;\\n                lastUpdateTime = deposits[i].depositTime;\\n                delete deposits[i];\\n            }\\n        }\\n\\n        require(\\n            eligibleAmount >= _amount,\\n            'Do not have enough amount to withdraw'\\n        );\\n\\n        // if there is any amount left from eligible amount, push it back\\n        if (eligibleAmount > _amount) {\\n            uint256 leftAmount = eligibleAmount - _amount;\\n            Deposit memory leftDeposit = Deposit(leftAmount, lastUpdateTime);\\n            _depositRecords[_reserve].push(leftDeposit);\\n        }\\n\\n        _deposits[_reserve] -= _amount;\\n        transferToUser(_reserve, _user, _amount);\\n        emit Withdrawn(_user, _reserve, _amount);\\n    }\\n\\n    /**\\n     * @dev get accumulated amount of deposit.\\n     * @param _reserve the address of the reserve where the transfer is happening\\n     * @return accumulated deposit amount\\n     **/\\n    function getDepositAmount(address _reserve) public view returns (uint256) {\\n        return _deposits[_reserve];\\n    }\\n\\n    /**\\n     * @dev get all records of deposit.\\n     * @param _reserve the address of the reserve where the transfer is happening\\n     * @param _user the address of the user receiving the transfer\\n     * @return deposit records\\n     **/\\n    function getDepositRecords(address _reserve, address _user)\\n        public\\n        view\\n        returns (Deposit[] memory)\\n    {\\n        Deposit[] storage deposits = _depositRecords[_reserve];\\n        return deposits;\\n    }\\n\\n    /**\\n     * @dev transfers to the user a specific amount from the reserve.\\n     * @param _reserve the address of the reserve where the transfer is happening\\n     * @param _user the address of the user receiving the transfer\\n     * @param _amount the amount being transferred\\n     **/\\n    function transferToUser(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) internal {\\n        if (_reserve != EthAddressLib.ethAddress()) {\\n            ERC20(_reserve).safeTransfer(_user, _amount);\\n        } else {\\n            //solium-disable-next-line\\n            (bool result, ) = _user.call{value: _amount}('');\\n            require(result, 'Transfer of ETH failed');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79ed4db55de1b62dbbeab13fb76da8df64b9270ce550752dbd0fd7ed0d0585f3\",\"license\":\"GPL-3.0\"},\"contracts/libraries/EthAddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary EthAddressLib {\\n    /**\\n     * @dev returns the address used within the protocol to identify ETH\\n     * @return the address assigned to ETH\\n     */\\n    function ethAddress() internal pure returns (address) {\\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    }\\n}\\n\",\"keccak256\":\"0xd804184a4493b89dbe84b06927f119535944d46889c5ffcd5d8ca6f4172a541f\",\"license\":\"GPL-3.0\"},\"contracts/libraries/acl/ExtCallACL.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../proxy/Proxyable.sol';\\nimport './IExtCallACL.sol';\\n\\ncontract ExtCallACL is Proxyable, IExtCallACL {\\n    mapping(address => bool) public whitelistedAddress;\\n    mapping(bytes32 => bool) public whitelistedFunctions;\\n\\n    constructor(address payable _proxy) public Proxyable(_proxy) {}\\n\\n    function whitelistAddress(address[] calldata _address) external onlyProxy {\\n        uint256 arrayLength = _address.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            whitelistedAddress[_address[i]] = true;\\n        }\\n    }\\n\\n    function blockAddress(address[] calldata _address) external onlyProxy {\\n        uint256 arrayLength = _address.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            delete whitelistedAddress[_address[i]];\\n        }\\n    }\\n\\n    function isWhitelistedAddress(address _address)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return whitelistedAddress[_address];\\n    }\\n\\n    function whitelistFunction(bytes32[] calldata _func) external onlyProxy {\\n        uint256 arrayLength = _func.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            whitelistedFunctions[_func[i]] = true;\\n        }\\n    }\\n\\n    function blockFunction(bytes32[] calldata _func) external onlyProxy {\\n        uint256 arrayLength = _func.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            delete whitelistedFunctions[_func[i]];\\n        }\\n    }\\n\\n    function isWhitelistedFunction(bytes32 _func) external view returns (bool) {\\n        return whitelistedFunctions[_func];\\n    }\\n}\\n\",\"keccak256\":\"0x8c57abec824593830eea470bdcf85bec411e797e8e979b6b7075e8d09db12057\",\"license\":\"GPL-3.0\"},\"contracts/libraries/acl/ExtCallACLProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../proxy/Proxy.sol';\\nimport './IExtCallACL.sol';\\n\\ncontract ExtCallACLProxy is Proxy {\\n    function isWhitelistedAddress(address _address) public view returns (bool) {\\n        return IExtCallACL(address(target)).isWhitelistedAddress(_address);\\n    }\\n\\n    function isWhitelistedFunction(bytes32 _func) public view returns (bool) {\\n        return IExtCallACL(address(target)).isWhitelistedFunction(_func);\\n    }\\n}\\n\",\"keccak256\":\"0x3ec9525d0851c9ac3b990c8d2a0fb8c8a4de54d653acdee841a916145fa12dea\",\"license\":\"GPL-3.0\"},\"contracts/libraries/acl/IExtCallACL.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IExtCallACL {\\n    function whitelistAddress(address[] calldata _address) external;\\n\\n    function blockAddress(address[] calldata _address) external;\\n\\n    function isWhitelistedAddress(address _address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function whitelistFunction(bytes32[] calldata _func) external;\\n\\n    function blockFunction(bytes32[] calldata _func) external;\\n\\n    function isWhitelistedFunction(bytes32 _func) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8243da9760ba180c6c523f75b57ae2a819667a8aeed8bdd4068a36c585413e81\",\"license\":\"GPL-3.0\"},\"contracts/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Voyage\\n * @notice Implements the bitmap logic to handle the reserve configuration, inspired by Aave\\n **/\\nlibrary ReserveConfiguration {\\n    uint256 constant LIQUIDATE_BONUS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 constant DECIMAL_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80FFFF; // prettier-ignore\\n    uint256 constant ACTIVE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFF; // prettier-ignore\\n    uint256 constant FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFF; // prettier-ignore\\n    uint256 constant BORROWING_ENABLE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFF; // prettier-ignore\\n    uint256 constant RESERVED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF87FFFFFF; // prettier-ignore\\n    uint256 constant RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0007FFFFFFF; // prettier-ignore\\n    uint256 constant LOCKUP_PERIOD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80007FFFFFFFFFFF; // prettier-ignore\\n\\n    uint256 constant DECIMAL_MASK_BIT_POSITION = 16;\\n    uint256 constant ACTIVE_MASK_BIT_POSITION = 24;\\n    uint256 constant FROZEN_MASK_BIT_POSITION = 25;\\n    uint256 constant BORROWING_ENABLE_MASK_POSITION = 26;\\n    uint256 constant RESERVED_MASK_BIT_POSITION = 27;\\n    uint256 constant RESERVE_FACTOR_MASK_BIT_POSITION = 31;\\n    uint256 constant LOCKUP_PERIOD_MASK_BIT_POSITION = 47;\\n\\n    /**\\n     * Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flags representing active, frozen, borrowing enabled\\n     **/\\n    function getFlags(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_ENABLE_MASK) != 0\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     **/\\n    function setActive(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool active\\n    ) internal pure {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << ACTIVE_MASK_BIT_POSITION);\\n    }\\n\\n    function getActive(DataTypes.ReserveConfigurationMap storage self)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x23a62f92e3d54e0ea396ca9f3bdce06e7c38ef191b2c27ff582140207e5a28c2\",\"license\":\"GPL-3.0\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors library\\n * @author Voyager\\n * @notice Defines the error messages emitted by the different contracts of the Voyager protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - LM = LiquidityManager\\n *  - CT = Common errors between tokens\\n *  - RL = ReserveLogic\\n */\\nlibrary Errors {\\n    string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n    string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n    string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL = '20';\\n    string public constant CT_INVALID_MINT_AMOUNT = '21';\\n    string public constant CT_INVALID_BURN_AMOUNT = '22';\\n    string public constant LM_NOT_CONTRACT = '60';\\n    string public constant RL_LIQUIDITY_RATE_OVERFLOW = '80'; //  Liquidity rate overflows uint128\\n    string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '81'; //  Stable borrow rate overflows uint128\\n}\\n\",\"keccak256\":\"0x7fd680f0b6d926ef626121d92f4102e8c87a74d21e6041ec377601da444fc56a\",\"license\":\"agpl-3.0\"},\"contracts/libraries/helpers/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../ownership/Ownable.sol';\\n\\nabstract contract Pausable is Ownable {\\n    uint256 public lastPauseTime;\\n    bool public paused;\\n\\n    constructor() {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner != address(0), 'Owner must be set');\\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\\n    }\\n\\n    /**\\n     * @notice Change the paused state of the contract\\n     * @dev Only the contract owner may call this.\\n     */\\n    function setPaused(bool _paused) external onlyOwner {\\n        // Ensure we're actually changing the state before we do anything\\n        if (_paused == paused) {\\n            return;\\n        }\\n\\n        // Set our paused state.\\n        paused = _paused;\\n\\n        // If applicable, set the last pause time.\\n        if (paused) {\\n            lastPauseTime = block.timestamp;\\n        }\\n\\n        // Let everyone know that our pause state has changed.\\n        emit PauseChanged(paused);\\n    }\\n\\n    event PauseChanged(bool isPaused);\\n\\n    modifier notPaused() {\\n        require(\\n            !paused,\\n            'This action cannot be performed while the contract is paused'\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xeb00aba958ad4f51f456bca0b5feba360518817b6f62b894fa16a923f425454a\",\"license\":\"agpl-3.0\"},\"contracts/libraries/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport '../math/WadRayMath.sol';\\nimport '../math/MathUtils.sol';\\nimport '../types/DataTypes.sol';\\nimport '../helpers/Errors.sol';\\nimport '../../interfaces/IDebtToken.sol';\\nimport '../../component/liquiditymanager/DefaultReserveInterestRateStrategy.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author Voyager\\n * @notice Implements the logic to update the reserves state\\n **/\\nlibrary ReserveLogic {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    using ReserveLogic for DataTypes.ReserveData;\\n\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed asset,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 liquidityIndex\\n    );\\n\\n    function init(\\n        DataTypes.ReserveData storage reserve,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress\\n    ) external {\\n        reserve.juniorLiquidityIndex = WadRayMath.ray();\\n        reserve.seniorLiquidityIndex = WadRayMath.ray();\\n        reserve.juniorDepositTokenAddress = _juniorDepositTokenAddress;\\n        reserve.seniorDepositTokenAddress = _seniorDepositTokenAddress;\\n        //reserve.currentOverallLiquidityRate = WadRayMath.ray();\\n        reserve.currentJuniorIncomeAllocation = _juniorIncomeAllocation;\\n        reserve.currentSeniorIncomeAllocation = _seniorIncomeAllocation;\\n        reserve.stableDebtAddress = _stableDebtAddress;\\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\\n    }\\n\\n    function updateState(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public {\\n        _updateIndexes(reserve, _tranche);\\n    }\\n\\n    function getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public view returns (uint256) {\\n        return reserve._getLiquidityRate(_tranche);\\n    }\\n\\n    struct UpdateInterestRatesLocalVars {\\n        address stableDebtTokenAddress;\\n        uint256 availableLiquidity;\\n        uint256 totalStableDebt;\\n        uint256 newLiquidityRate;\\n        uint256 newStableRate;\\n        uint256 avgStableRate;\\n    }\\n\\n    function updateInterestRates(\\n        DataTypes.ReserveData storage _reserve,\\n        address _reserveAddress,\\n        uint256 _juniorLiquidityAdded,\\n        uint256 _juniorLiquidityTaken,\\n        uint256 _seniorLiquidityAdded,\\n        uint256 _seniorLiquidityTaken\\n    ) public {\\n        UpdateInterestRatesLocalVars memory vars;\\n\\n        vars.stableDebtTokenAddress = _reserve.stableDebtAddress;\\n        uint256 liquidityAdded = _juniorLiquidityAdded.add(\\n            _seniorLiquidityAdded\\n        );\\n        uint256 liquidityTaken = _juniorLiquidityTaken.add(\\n            _seniorLiquidityTaken\\n        );\\n\\n        (vars.totalStableDebt, vars.avgStableRate) = IStableDebtToken(\\n            _reserve.stableDebtAddress\\n        ).getTotalSupplyAndAvgRate();\\n\\n        (\\n            vars.newLiquidityRate,\\n            vars.newStableRate\\n        ) = IReserveInterestRateStrategy(_reserve.interestRateStrategyAddress)\\n            .calculateInterestRates(\\n                _reserveAddress,\\n                _reserve.juniorDepositTokenAddress,\\n                _reserve.seniorDepositTokenAddress,\\n                liquidityAdded,\\n                liquidityTaken,\\n                _reserve.totalBorrows,\\n                vars.avgStableRate\\n            );\\n        require(\\n            vars.newLiquidityRate <= type(uint128).max,\\n            Errors.RL_LIQUIDITY_RATE_OVERFLOW\\n        );\\n        require(\\n            vars.newStableRate <= type(uint128).max,\\n            Errors.RL_STABLE_BORROW_RATE_OVERFLOW\\n        );\\n        _reserve.currentOverallLiquidityRate = vars.newLiquidityRate;\\n        _reserve.currentBorrowRate = vars.newStableRate;\\n\\n        emit ReserveDataUpdated(\\n            _reserveAddress,\\n            vars.newLiquidityRate,\\n            vars.newStableRate,\\n            vars.newLiquidityRate\\n        );\\n    }\\n\\n    function getNormalizedIncome(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        uint40 timestamp;\\n        uint256 liquidityIndex;\\n        if (_tranche == Tranche.JUNIOR) {\\n            timestamp = reserve.juniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.juniorLiquidityIndex;\\n        } else {\\n            timestamp = reserve.seniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.seniorLiquidityIndex;\\n        }\\n\\n        //solium-disable-next-line\\n        if (timestamp == uint40(block.timestamp)) {\\n            return liquidityIndex;\\n        }\\n\\n        uint256 cumulated = MathUtils\\n            .calculateLinearInterest(\\n                reserve._getLiquidityRate(_tranche),\\n                timestamp\\n            )\\n            .rayMul(liquidityIndex);\\n        return cumulated;\\n    }\\n\\n    function _getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        uint256 totalAllocationInRay = reserve\\n            .currentJuniorIncomeAllocation\\n            .add(reserve.currentSeniorIncomeAllocation);\\n        if (_tranche == Tranche.JUNIOR) {\\n            return\\n                reserve.currentOverallLiquidityRate.rayMul(\\n                    reserve.currentJuniorIncomeAllocation.rayDiv(\\n                        totalAllocationInRay\\n                    )\\n                );\\n        } else {\\n            return\\n                reserve.currentOverallLiquidityRate.rayMul(\\n                    reserve.currentSeniorIncomeAllocation.rayDiv(\\n                        totalAllocationInRay\\n                    )\\n                );\\n        }\\n    }\\n\\n    function _updateIndexes(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal {\\n        if (_tranche == Tranche.JUNIOR) {\\n            uint256 previousJuniorLiquidityIndex = reserve.juniorLiquidityIndex;\\n            uint256 lastJuniorUpdatedTimestamp = reserve\\n                .juniorLastUpdateTimestamp;\\n            reserve._updateJuniorLiquidityIndex(\\n                previousJuniorLiquidityIndex,\\n                uint40(lastJuniorUpdatedTimestamp)\\n            );\\n        } else {\\n            uint256 previousSeniorLiquidityIndex = reserve.seniorLiquidityIndex;\\n            uint256 lastSeniorUpdatedTimestamp = reserve\\n                .seniorLastUpdateTimestamp;\\n            reserve._updateSeniorLiquidityIndex(\\n                previousSeniorLiquidityIndex,\\n                uint40(lastSeniorUpdatedTimestamp)\\n            );\\n        }\\n    }\\n\\n    function _updateJuniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 juniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 juniorLiquidityRate = reserve._getLiquidityRate(Tranche.JUNIOR);\\n        uint256 newJuniorLiquidityIndex = juniorLiquidityIndex;\\n\\n        // only cumulating if there is any income being produced\\n        if (juniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(juniorLiquidityRate, timestamp);\\n            newJuniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                juniorLiquidityIndex\\n            );\\n            reserve.juniorLiquidityIndex = newJuniorLiquidityIndex;\\n        }\\n\\n        reserve.juniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newJuniorLiquidityIndex;\\n    }\\n\\n    function _updateSeniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 seniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 seniorLiquidityRate = reserve._getLiquidityRate(Tranche.SENIOR);\\n        uint256 newSeniorLiquidityIndex = seniorLiquidityIndex;\\n\\n        if (seniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(seniorLiquidityRate, timestamp);\\n            newSeniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                seniorLiquidityIndex\\n            );\\n            reserve.seniorLiquidityIndex = newSeniorLiquidityIndex;\\n        }\\n        reserve.seniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newSeniorLiquidityIndex;\\n    }\\n}\\n\",\"keccak256\":\"0xbbdd75288e734f54c4fe1cb804e510419626ccc7dfcdb1e15790a417022d134e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/logic/ValidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../types/DataTypes.sol';\\nimport '../configuration/ReserveConfiguration.sol';\\nimport '../helpers/Errors.sol';\\n\\nlibrary ValidationLogic {\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    /**\\n     * @dev Validates a deposit token\\n     * @param reserve The reserve object on which the user is depositing\\n     * @param amount The amount to be deposited\\n     **/\\n    function validateDeposit(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amount\\n    ) external view {\\n        (bool isActive, bool isFrozen, ) = reserve.configuration.getFlags();\\n        require(amount != 0, Errors.VL_INVALID_AMOUNT);\\n        require(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n        require(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n    }\\n}\\n\",\"keccak256\":\"0xdd470946bea9515caf3bfdc20ae4e78f2138dc785ae3650a0ac8951dedf3581e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(\\n            uint256(lastUpdateTimestamp)\\n        );\\n\\n        return\\n            (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n     * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        if (exp == 0) {\\n            return WadRayMath.ray();\\n        }\\n\\n        uint256 expMinusOne = exp - 1;\\n\\n        uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n        uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n        uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n        uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n        uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n        uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(\\n            basePowerThree\\n        ) / 6;\\n\\n        return\\n            WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(\\n                thirdTerm\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xeb644d3d04ac6c043657b2b835fbf71d1f2795f1f713b900cc43582158f31eac\",\"license\":\"agpl-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87bc93b45f82b290b2b6a9f00ce09f8c5c2b758931a85b37fb5d117a79031d3f\"},\"contracts/libraries/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(owner, pendingOwner);\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x5dca7c2446290ea3519aa0f9295e1edfbff47a1474edbe126f08dca92843e2c8\"},\"contracts/libraries/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../ownership/Ownable.sol';\\nimport './Proxyable.sol';\\n\\ncontract Proxy is Ownable {\\n    Proxyable public target;\\n\\n    event TargetUpdated(Proxyable newTarget);\\n\\n    modifier onlyTarget() {\\n        require(Proxyable(msg.sender) == target, 'Must be proxy target');\\n        _;\\n    }\\n\\n    function setTarget(Proxyable _target) external onlyOwner {\\n        target = _target;\\n        emit TargetUpdated(_target);\\n    }\\n\\n    function _emit(\\n        bytes calldata callData,\\n        uint256 numTopics,\\n        bytes32 topic1,\\n        bytes32 topic2,\\n        bytes32 topic3,\\n        bytes32 topic4\\n    ) external onlyTarget {\\n        uint256 size = callData.length;\\n        bytes memory _callData = callData;\\n\\n        assembly {\\n            /* The first 32 bytes of callData contain its length (as specified by the abi).\\n             * Length is assumed to be a uint256 and therefore maximum of 32 bytes\\n             * in length. It is also leftpadded to be a multiple of 32 bytes.\\n             * This means moving call_data across 32 bytes guarantees we correctly access\\n             * the data itself. */\\n            switch numTopics\\n            case 0 {\\n                log0(add(_callData, 32), size)\\n            }\\n            case 1 {\\n                log1(add(_callData, 32), size, topic1)\\n            }\\n            case 2 {\\n                log2(add(_callData, 32), size, topic1, topic2)\\n            }\\n            case 3 {\\n                log3(add(_callData, 32), size, topic1, topic2, topic3)\\n            }\\n            case 4 {\\n                log4(add(_callData, 32), size, topic1, topic2, topic3, topic4)\\n            }\\n        }\\n    }\\n\\n    // solhint-disable no-complex-fallback\\n    fallback() external payable onlyOwner {\\n        // Mutable call setting Proxyable.messageSender as this is using call not delegatecall\\n        target.setMessageSender(msg.sender);\\n\\n        assembly {\\n            let free_ptr := mload(0x40)\\n            calldatacopy(free_ptr, 0, calldatasize())\\n\\n            /* We must explicitly forward ether to the underlying contract as well. */\\n            let result := call(\\n                gas(),\\n                sload(target.slot),\\n                callvalue(),\\n                free_ptr,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(free_ptr, 0, returndatasize())\\n\\n            if iszero(result) {\\n                revert(free_ptr, returndatasize())\\n            }\\n            return(free_ptr, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x49854e3f5496018aea83a0d6d4f58478b99d8bfd5a03293148f9303dc29c22c1\",\"license\":\"GPL-3.0\"},\"contracts/libraries/proxy/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './Proxy.sol';\\nimport '../ownership/Ownable.sol';\\n\\nabstract contract Proxyable is Ownable {\\n    /* The proxy this contract exists behind. */\\n    Proxy public proxy;\\n\\n    /* The caller of the proxy, passed through to this contract.\\n     * Note that every function using this member must apply the onlyProxy or\\n     * optionalProxy modifiers, otherwise their invocations can use stale values. */\\n    address public messageSender;\\n\\n    modifier onlyProxy() {\\n        _onlyProxy();\\n        _;\\n    }\\n\\n    modifier optionalProxy_onlyOwner() {\\n        _optionalProxy_onlyOwner();\\n        _;\\n    }\\n\\n    event ProxyUpdated(address proxyAddress);\\n\\n    constructor(address payable _proxy) internal {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner != address(0), 'Owner must be set');\\n\\n        proxy = Proxy(_proxy);\\n        emit ProxyUpdated(_proxy);\\n    }\\n\\n    function _onlyProxy() private view {\\n        require(msg.sender == address(proxy), 'Only the proxy can call');\\n    }\\n\\n    function setProxy(address payable _proxy) external onlyOwner {\\n        proxy = Proxy(_proxy);\\n        emit ProxyUpdated(_proxy);\\n    }\\n\\n    function setMessageSender(address sender) external onlyProxy {\\n        messageSender = sender;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _optionalProxy_onlyOwner() private {\\n        if (msg.sender != address(proxy) && messageSender != msg.sender) {\\n            messageSender = msg.sender;\\n        }\\n        require(messageSender == owner, 'Owner only function');\\n    }\\n}\\n\",\"keccak256\":\"0x8107e4e558c8336f3d96f8ebdb63bc67c18b983b5149f0e38a037e35a7e53bb8\",\"license\":\"GPL-3.0\"},\"contracts/libraries/state/State.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../ownership/Ownable.sol';\\n\\nabstract contract State is Ownable {\\n    mapping(address => bool) public associatedContracts;\\n\\n    constructor(address _associatedContract) {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner != address(0), 'Owner must be set');\\n\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n\\n    event AssociatedContractUpdated(address associatedContract);\\n\\n    modifier onlyAssociatedContract() {\\n        require(\\n            associatedContracts[msg.sender],\\n            'Only the associated contract can perform this action'\\n        );\\n        _;\\n    }\\n\\n    // Change the associated contract to a new address\\n    function setAssociatedContract(address _associatedContract)\\n        external\\n        onlyOwner\\n    {\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n}\\n\",\"keccak256\":\"0x835e4507f1c45e5cb1ac2ab722b38969af0c5e2bd4e4fb8fc34046d56d555b9f\",\"license\":\"GPL-3.0\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary DataTypes {\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        // for calculating overall interested accumulated\\n        // then split it into two indexs base on two allocations\\n        uint256 currentOverallLiquidityRate;\\n        // Expressed in ray\\n        uint256 currentSeniorIncomeAllocation;\\n        // Expressed in ray\\n        uint256 currentJuniorIncomeAllocation;\\n        uint256 juniorLiquidityIndex;\\n        uint256 seniorLiquidityIndex;\\n        uint256 totalBorrows;\\n        uint256 currentBorrowRate;\\n        // Expressed in ray\\n        uint256 securityRequirement;\\n        //the decimals of the reserve asset\\n        uint256 decimals;\\n        address interestRateStrategyAddress;\\n        address juniorDepositTokenAddress;\\n        address seniorDepositTokenAddress;\\n        address stableDebtAddress;\\n        uint40 juniorLastUpdateTimestamp;\\n        uint40 seniorLastUpdateTimestamp;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: Liquidate bonus\\n        //bit 16-23: Decimals\\n        //bit 24: Reserve is active\\n        //bit 25: reserve is frozen\\n        //bit 26: borrowing is enabled\\n        //bit 27-30: reserved\\n        //bit 31-46: reserve factor\\n        //bit 47-62: lock up period in seconds\\n        uint256 data;\\n    }\\n}\\n\",\"keccak256\":\"0x9bfbc7b717a74aaed343b3add5af6eec7c69dbefb556c4481cbbf96d10ef866b\",\"license\":\"GPL-3.0\"},\"contracts/mock/Tus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\\n\\ncontract Tus is ERC20 {\\n    constructor(uint256 initialSupply) ERC20('Treasure Under Sea', 'TUS') {\\n        _mint(msg.sender, initialSupply);\\n    }\\n}\\n\",\"keccak256\":\"0xf7feeef40f2043950c6c47b1ae66050770132148eb6c9bd7cff72f48b98f7b00\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/BaseERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Context.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract BaseERC20 is Context, IERC20, IERC20Metadata {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint256 internal _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 _decimals\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return The balance of the token\\n     **/\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            'ERC20: transfer amount exceeds allowance'\\n        );\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            'ERC20: decreased allowance below zero'\\n        );\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), 'ERC20: transfer from the zero address');\\n        require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            'ERC20: transfer amount exceeds balance'\\n        );\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: mint to the zero address');\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply.add(amount);\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        _balances[account] = oldAccountBalance.add(amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: burn from the zero address');\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply.sub(amount);\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        _balances[account] = oldAccountBalance.sub(\\n            amount,\\n            'ERC20: burn amount exceeds balance'\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), 'ERC20: approve from the zero address');\\n        require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _setName(string memory newName) internal {\\n        _name = newName;\\n    }\\n\\n    function _setSymbol(string memory newSymbol) internal {\\n        _symbol = newSymbol;\\n    }\\n\\n    function _setDecimals(uint8 newDecimals) internal {\\n        _decimals = newDecimals;\\n    }\\n}\\n\",\"keccak256\":\"0x2e6345cb5f601dcd27e5792f9363032f8b789f372edfa3caa4a4fdd83916f960\",\"license\":\"MIT\"},\"contracts/tokenization/IInitializableDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title IDepositToken\\n * @notice Interface for the initialize function on JuniorDepositToken and SeniorDepositToken\\n **/\\nabstract contract IInitializableDepositToken {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    uint256 private lastInitializedRevision = 0;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        uint256 revision = getRevision();\\n        require(\\n            initializing ||\\n                isConstructor() ||\\n                revision > lastInitializedRevision,\\n            'Contract instance has already been initialized'\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            lastInitializedRevision = revision;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the revision number of the contract\\n     * Needs to be defined in the inherited class as a constant.\\n     **/\\n    function getRevision() internal pure virtual returns (uint256);\\n\\n    /**\\n     * @dev Emitted when an depositToken is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param liquidityManagerProxy The address of the associated liquidity manager proxy\\n     * @param tokenDecimals the decimals of the underlying\\n     * @param tokenName the name of the depositToken\\n     * @param tokenSymbol the symbol of the depositToken\\n     * @param params A set of encoded parameters for additional initialization\\n     **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed liquidityManagerProxy,\\n        uint8 tokenDecimals,\\n        string tokenName,\\n        string tokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Mint(address indexed from, uint256 value, uint256 index);\\n\\n    /**\\n     * @dev Emitted after aTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param target The address that will receive the underlying\\n     * @param value The amount being burned\\n     * @param index The new liquidity index of the reserve\\n     **/\\n    event Burn(\\n        address indexed from,\\n        address indexed target,\\n        uint256 value,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Returns true if the contract has been initialized\\n     **/\\n    function isInitialized() public view returns (bool) {\\n        return !initializing && getRevision() <= lastInitializedRevision;\\n    }\\n\\n    /**\\n     * @dev Returns true if and only if the function is running in the constructor\\n     **/\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x37cb1771c13a7a961443eb9d3ef2444b356e13b3d1c27f14d19bbe82e412dc46\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/JuniorDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../contracts/component/liquiditymanager/LiquidityManagerProxy.sol';\\nimport '../libraries/helpers/Errors.sol';\\nimport './IInitializableDepositToken.sol';\\nimport '../interfaces/ILiquidityManagerProxy.sol';\\nimport './BaseERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Context.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../libraries/logic/ReserveLogic.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\ncontract JuniorDepositToken is\\n    Context,\\n    IInitializableDepositToken,\\n    BaseERC20('JuniorDepositToken_IMPL', 'JuniorDepositToken_IMPL', 0)\\n{\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    AddressResolver internal addressResolver;\\n    address internal underlyingAsset;\\n\\n    uint256 public constant JUNIOR_DEPOSIT_TOKEN_REVISION = 0x1;\\n\\n    modifier onlyLiquidityManagerProxy() {\\n        require(\\n            _msgSender() == addressResolver.getAddress('liquidityManager'),\\n            Errors.CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the JuniorDepositToken\\n     * @param _addressResolver The address of the AddressResolver\\n     * @param _underlyingAsset The address of the underlying asset of this JuniorDepositToken\\n     * @param _juniorDepositTokenDecimals The decimals of the JuniorDepositToken, same as the underlying asset's\\n     * @param _juniorDepositTokenName The name of the JuniorDepositToken\\n     * @param _juniorDepositTokenSymbol The symbol of the JuniorDepositToken\\n     **/\\n    function initialize(\\n        AddressResolver _addressResolver,\\n        address _underlyingAsset,\\n        uint8 _juniorDepositTokenDecimals,\\n        string calldata _juniorDepositTokenName,\\n        string calldata _juniorDepositTokenSymbol,\\n        bytes calldata _params\\n    ) external initializer {\\n        _setName(_juniorDepositTokenName);\\n        _setSymbol(_juniorDepositTokenSymbol);\\n        _setDecimals(_juniorDepositTokenDecimals);\\n\\n        addressResolver = _addressResolver;\\n        underlyingAsset = _underlyingAsset;\\n\\n        emit Initialized(\\n            _underlyingAsset,\\n            addressResolver.getAddress('liquidityManager'),\\n            _juniorDepositTokenDecimals,\\n            _juniorDepositTokenName,\\n            _juniorDepositTokenSymbol,\\n            _params\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `_amount` junior deposit token to `_user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The new liquidity index of the reserve\\n     * @return `true` if the previous balance of the user was 0\\n     **/\\n    function mint(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external onlyLiquidityManagerProxy returns (bool) {\\n        uint256 previousBalance = super.balanceOf(_user);\\n        uint256 amountScaled = _amount.rayDiv(_index);\\n        require(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\\n        _mint(_user, amountScaled);\\n        emit Transfer(address(0), _user, _amount);\\n        emit Mint(_user, _amount, _index);\\n\\n        return previousBalance == 0;\\n    }\\n\\n    /**\\n     * @dev Burns JuniorDepositToken from `_user` and sends the equivalent amount of underlying to `_receiverOfUnderlying`\\n     * - Only callable by the LiquidityManagerProxy, as extra state updates there need to the managed\\n     * @param _user The owner of the JuniorDepositToken, getting them burned\\n     * @param _receiverOfUnderlying The address that will receive the underlying\\n     * @param _amount The amount being burned\\n     * @param _index The new liquidity index of the reserve\\n     **/\\n    function burn(\\n        address _user,\\n        address _receiverOfUnderlying,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external onlyLiquidityManagerProxy {\\n        uint256 amountScaled = _amount.rayDiv(_index);\\n        require(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\\n        _burn(_user, amountScaled);\\n        IERC20(underlyingAsset).safeTransfer(_receiverOfUnderlying, _amount);\\n        emit Transfer(_user, address(0), _amount);\\n        emit Burn(_user, _receiverOfUnderlying, _amount, _index);\\n    }\\n\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the updated\\n     * stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param _user The user whose balance is calculated\\n     * @return THe scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address _user) external view returns (uint256) {\\n        return super.balanceOf(_user);\\n    }\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param _user The user whose balance is calculated\\n     * @return The balance of the user\\n     **/\\n    function balanceOf(address _user)\\n        public\\n        view\\n        override(BaseERC20)\\n        returns (uint256)\\n    {\\n        ILiquidityManagerProxy liquidityManagerProxy = getLiquidityManagerProxy();\\n        return\\n            super.balanceOf(_user).rayMul(\\n                liquidityManagerProxy.getReserveNormalizedIncome(\\n                    underlyingAsset,\\n                    ReserveLogic.Tranche.JUNIOR\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev calculates the total supply of the specific junior deposit token\\n     * since the balance of every single user increases over time, the totally supply does that too.\\n     * @return the current total supply\\n     **/\\n    function totalSupply() public view override(BaseERC20) returns (uint256) {\\n        uint256 currentSupplyScaled = super.totalSupply();\\n        if (currentSupplyScaled == 0) {\\n            return 0;\\n        }\\n        ILiquidityManagerProxy liquidityManagerProxy = getLiquidityManagerProxy();\\n\\n        return\\n            currentSupplyScaled.rayMul(\\n                liquidityManagerProxy.getLiquidityRate(\\n                    underlyingAsset,\\n                    ReserveLogic.Tranche.JUNIOR\\n                )\\n            );\\n    }\\n\\n    function scaledTotalSupply() public view returns (uint256) {\\n        return super.totalSupply();\\n    }\\n\\n    /**\\n     * @dev Return instance of ILiquidityManagerProxy\\n     **/\\n    function getLiquidityManagerProxy()\\n        internal\\n        view\\n        returns (ILiquidityManagerProxy)\\n    {\\n        address liquidityManagerProxyAddress = addressResolver.getAddress(\\n            'liquidityManagerProxy'\\n        );\\n        return ILiquidityManagerProxy(liquidityManagerProxyAddress);\\n    }\\n\\n    function getRevision() internal pure virtual override returns (uint256) {\\n        return JUNIOR_DEPOSIT_TOKEN_REVISION;\\n    }\\n}\\n\",\"keccak256\":\"0x5d5bb64bebcfc2855ed41decdeb24ed04c82c850fbc39ba1d8aad6e4d0c28824\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/SecurityDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/token/ERC20/ERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/access/AccessControl.sol';\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../component/vault/Vault.sol';\\n\\ncontract SecurityDepositToken is ERC20, AccessControl {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant VAULT = keccak256('VAULT');\\n\\n    address public underlyingAsset;\\n    uint8 public underlyingAssetDecimals;\\n    Vault public vault;\\n\\n    event MintOnDeposit(address indexed account, uint256 amount);\\n\\n    event BurnOnRedeem(address indexed account, uint256 amount);\\n\\n    constructor(\\n        address _underlyingAsset,\\n        uint8 _underlyingAssetDecimals,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        _setupRole(VAULT, msg.sender);\\n        vault = Vault(msg.sender);\\n        underlyingAsset = _underlyingAsset;\\n        underlyingAssetDecimals = _underlyingAssetDecimals;\\n    }\\n\\n    function mintOnDeposit(address account, uint256 amount)\\n        external\\n        onlyRole(VAULT)\\n    {\\n        _mint(account, amount);\\n        emit MintOnDeposit(account, amount);\\n    }\\n\\n    function burnOnRedeem(address account, uint256 amount)\\n        external\\n        onlyRole(VAULT)\\n    {\\n        _burn(account, amount);\\n        emit BurnOnRedeem(account, amount);\\n    }\\n\\n    function underlyingBalanceOf(address _sponsor)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return vault.underlyingBalance(_sponsor, underlyingAsset);\\n    }\\n}\\n\",\"keccak256\":\"0x6498a01f94d3f02edb15a6184ac2433afa04d2f4d06ac3cdc9e1120102af3451\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/SeniorDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../contracts/component/liquiditymanager/LiquidityManagerProxy.sol';\\nimport '../libraries/helpers/Errors.sol';\\nimport './IInitializableDepositToken.sol';\\nimport '../interfaces/ILiquidityManagerProxy.sol';\\nimport './BaseERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Context.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../libraries/logic/ReserveLogic.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\ncontract SeniorDepositToken is\\n    Context,\\n    IInitializableDepositToken,\\n    BaseERC20('SeniorDepositToken_IMPL', 'SeniorDepositToken_IMPL', 0)\\n{\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    AddressResolver internal addressResolver;\\n    address internal underlyingAsset;\\n\\n    uint256 public constant SENIOR_DEPOSIT_TOKEN_REVISION = 0x1;\\n\\n    modifier onlyLiquidityManagerProxy() {\\n        require(\\n            _msgSender() == addressResolver.getAddress('liquidityManager'),\\n            Errors.CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the JuniorDepositToken\\n     * @param _addressResolver The address of the AddressResolver\\n     * @param _underlyingAsset The address of the underlying asset of this SeniorDepositToken\\n     * @param _seniorDepositTokenDecimals The decimals of the SeniorDepositToken, same as the underlying asset's\\n     * @param _seniorDepositTokenName The name of the SeniorDepositToken\\n     * @param _seniorDepositTokenSymbol The symbol of the SeniorDepositToken\\n     **/\\n    function initialize(\\n        AddressResolver _addressResolver,\\n        address _underlyingAsset,\\n        uint8 _seniorDepositTokenDecimals,\\n        string calldata _seniorDepositTokenName,\\n        string calldata _seniorDepositTokenSymbol,\\n        bytes calldata _params\\n    ) external initializer {\\n        _setName(_seniorDepositTokenName);\\n        _setSymbol(_seniorDepositTokenSymbol);\\n        _setDecimals(_seniorDepositTokenDecimals);\\n\\n        addressResolver = _addressResolver;\\n        underlyingAsset = _underlyingAsset;\\n\\n        emit Initialized(\\n            _underlyingAsset,\\n            addressResolver.getAddress('liquidityManager'),\\n            _seniorDepositTokenDecimals,\\n            _seniorDepositTokenName,\\n            _seniorDepositTokenSymbol,\\n            _params\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `_amount` junior deposit token to `_user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The new liquidity index of the reserve\\n     * @return `true` if the previous balance of the user was 0\\n     **/\\n    function mint(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external onlyLiquidityManagerProxy returns (bool) {\\n        uint256 previousBalance = super.balanceOf(_user);\\n        uint256 amountScaled = _amount.rayDiv(_index);\\n        require(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\\n        _mint(_user, amountScaled);\\n        emit Transfer(address(0), _user, _amount);\\n        emit Mint(_user, _amount, _index);\\n\\n        return previousBalance == 0;\\n    }\\n\\n    /**\\n     * @dev Burns JuniorDepositToken from `_user` and sends the equivalent amount of underlying to `_receiverOfUnderlying`\\n     * - Only callable by the LiquidityManagerProxy, as extra state updates there need to the managed\\n     * @param _user The owner of the JuniorDepositToken, getting them burned\\n     * @param _receiverOfUnderlying The address that will receive the underlying\\n     * @param _amount The amount being burned\\n     * @param _index The new liquidity index of the reserve\\n     **/\\n    function burn(\\n        address _user,\\n        address _receiverOfUnderlying,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external onlyLiquidityManagerProxy {\\n        uint256 amountScaled = _amount.rayDiv(_index);\\n        require(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\\n        _burn(_user, amountScaled);\\n        IERC20(underlyingAsset).safeTransfer(_receiverOfUnderlying, _amount);\\n        emit Transfer(_user, address(0), _amount);\\n        emit Burn(_user, _receiverOfUnderlying, _amount, _index);\\n    }\\n\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the updated\\n     * stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param _user The user whose balance is calculated\\n     * @return THe scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address _user) external view returns (uint256) {\\n        return super.balanceOf(_user);\\n    }\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param _user The user whose balance is calculated\\n     * @return The balance of the user\\n     **/\\n    function balanceOf(address _user)\\n        public\\n        view\\n        override(BaseERC20)\\n        returns (uint256)\\n    {\\n        ILiquidityManagerProxy liquidityManagerProxy = getLiquidityManagerProxy();\\n        return\\n            super.balanceOf(_user).rayMul(\\n                liquidityManagerProxy.getReserveNormalizedIncome(\\n                    underlyingAsset,\\n                    ReserveLogic.Tranche.SENIOR\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev calculates the total supply of the specific junior deposit token\\n     * since the balance of every single user increases over time, the totally supply does that too.\\n     * @return the current total supply\\n     **/\\n    function totalSupply() public view override(BaseERC20) returns (uint256) {\\n        uint256 currentSupplyScaled = super.totalSupply();\\n        if (currentSupplyScaled == 0) {\\n            return 0;\\n        }\\n        ILiquidityManagerProxy liquidityManagerProxy = getLiquidityManagerProxy();\\n\\n        return\\n            currentSupplyScaled.rayMul(\\n                liquidityManagerProxy.getLiquidityRate(\\n                    underlyingAsset,\\n                    ReserveLogic.Tranche.SENIOR\\n                )\\n            );\\n    }\\n\\n    function scaledTotalSupply() public view returns (uint256) {\\n        return super.totalSupply();\\n    }\\n\\n    /**\\n     * @dev Return instance of ILiquidityManagerProxy\\n     **/\\n    function getLiquidityManagerProxy()\\n        internal\\n        view\\n        returns (ILiquidityManagerProxy)\\n    {\\n        address liquidityManagerProxyAddress = addressResolver.getAddress(\\n            'liquidityManagerProxy'\\n        );\\n        return ILiquidityManagerProxy(liquidityManagerProxyAddress);\\n    }\\n\\n    function getRevision() internal pure virtual override returns (uint256) {\\n        return SENIOR_DEPOSIT_TOKEN_REVISION;\\n    }\\n}\\n\",\"keccak256\":\"0xb954e46eadf1174c6a5c3d6b29dee11416d3227f5bb3cc73deafd46471d149c4\",\"license\":\"GPL-3.0\"},\"openzeppelin-solidity/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004b2338038062004b23833981810160405281019062000037919062000253565b620000697f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c826200007060201b60201c565b5062000285565b6200008282826200008660201b60201c565b5050565b6200009882826200017760201b60201c565b6200017357600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000118620001e160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021b82620001ee565b9050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b6000602082840312156200026c576200026b620001e9565b5b60006200027c848285016200023c565b91505092915050565b61488e80620002956000396000f3fe608060405234801561001057600080fd5b50600436106103985760003560e01c8063776f6891116101e9578063b75fc04a1161010f578063cf80d212116100ad578063e014ddd11161007c578063e014ddd114610a89578063e7bf1ece14610aa7578063ebe37d7914610ac5578063fe5cd40e14610af557610398565b8063cf80d21214610a03578063cff08f9914610a21578063d547741f14610a51578063d8dc4ee114610a6d57610398565b8063c38354ef116100e9578063c38354ef1461097d578063c44b11f714610999578063c827dc83146109c9578063c8345cbe146109e557610398565b8063b75fc04a1461094d578063c041d78714610969578063c134e58e1461097357610398565b806391d1485411610187578063ad64caed11610156578063ad64caed146108c3578063b31d61b0146108e1578063b36484d8146108fd578063b550906f1461092f57610398565b806391d148541461083957806394f6744314610869578063983d273714610887578063a217fddf146108a557610398565b8063869c5657116101c3578063869c56571461079d5780638b51bb8f146107bb5780638c942ffd146107eb5780638e47b49b1461080957610398565b8063776f6891146107335780637f007dd21461076357806381f781511461078157610398565b806335ea6a75116102ce57806355a83dcb1161026c5780635fc2f9431161023b5780635fc2f943146106d15780636023f816146106ef57806366f230261461070d578063724d47891461072957610398565b806355a83dcb14610647578063587982f7146106655780635d12928b146106835780635db22de6146106a157610398565b80633e4d6681116102a85780633e4d6681146105d557806345e14879146105f35780634e151f251461060f57806353b83e921461062b57610398565b806335ea6a751461056d57806336568abe1461059d5780633aa63c61146105b957610398565b80631d2118f91161033b57806327d7b6241161031557806327d7b624146104f9578063283761a4146105175780632f2ff15d1461053557806331c0ec9b1461055157610398565b80631d2118f9146104915780631f1fc35f146104ad578063248a9ca3146104c957610398565b806308c765021161037757806308c765021461040957806310f6c8b51461042757806319c1e7fc146104575780631af31a121461047357610398565b806273902c1461039d57806301ffc9a7146103bb57806305a2ee2a146103eb575b600080fd5b6103a5610b11565b6040516103b291906131e1565b60405180910390f35b6103d560048036038101906103d09190613268565b610b9d565b6040516103e291906132b0565b60405180910390f35b6103f3610c17565b60405161040091906131e1565b60405180910390f35b610411610c3d565b60405161041e91906132ec565b60405180910390f35b610441600480360381019061043c9190613333565b610d14565b60405161044e9190613379565b60405180910390f35b610471600480360381019061046c9190613333565b610dad565b005b61047b610e55565b60405161048891906132ec565b60405180910390f35b6104ab60048036038101906104a69190613394565b610f2c565b005b6104c760048036038101906104c29190613400565b610f63565b005b6104e360048036038101906104de91906134d8565b61101d565b6040516104f09190613514565b60405180910390f35b61050161103c565b60405161050e91906132ec565b60405180910390f35b61051f611113565b60405161052c9190613514565b60405180910390f35b61054f600480360381019061054a919061352f565b61113b565b005b61056b6004803603810190610566919061356f565b611164565b005b61058760048036038101906105829190613333565b61120f565b6040516105949190613753565b60405180910390f35b6105b760048036038101906105b2919061352f565b611330565b005b6105d360048036038101906105ce919061379b565b6113b3565b005b6105dd611431565b6040516105ea9190613514565b60405180910390f35b61060d60048036038101906106089190613867565b611459565b005b610629600480360381019061062491906138b4565b61150a565b005b6106456004803603810190610640919061356f565b611747565b005b61064f6117f2565b60405161065c9190613514565b60405180910390f35b61066d61181a565b60405161067a9190613514565b60405180910390f35b61068b611842565b60405161069891906131e1565b60405180910390f35b6106bb60048036038101906106b69190613394565b611aa7565b6040516106c89190613379565b60405180910390f35b6106d9611b43565b6040516106e69190613514565b60405180910390f35b6106f7611b67565b6040516107049190613514565b60405180910390f35b610727600480360381019061072291906138b4565b611b8b565b005b610731611dc8565b005b61074d6004803603810190610748919061392c565b611e6a565b60405161075a9190613379565b60405180910390f35b61076b611f06565b6040516107789190613514565b60405180910390f35b61079b60048036038101906107969190613333565b611f2a565b005b6107a5611fd2565b6040516107b29190613514565b60405180910390f35b6107d560048036038101906107d0919061396c565b611ff6565b6040516107e29190613379565b60405180910390f35b6107f3612095565b6040516108009190613514565b60405180910390f35b610823600480360381019061081e9190613333565b6120b9565b6040516108309190613379565b60405180910390f35b610853600480360381019061084e919061352f565b612152565b60405161086091906132b0565b60405180910390f35b6108716121bc565b60405161087e91906131e1565b60405180910390f35b61088f6121e6565b60405161089c9190613514565b60405180910390f35b6108ad61220a565b6040516108ba9190613514565b60405180910390f35b6108cb612211565b6040516108d89190613514565b60405180910390f35b6108fb60048036038101906108f69190613a15565b612235565b005b61091760048036038101906109129190613333565b6122e6565b60405161092693929190613a62565b60405180910390f35b610937612388565b6040516109449190613514565b60405180910390f35b61096760048036038101906109629190613333565b6123b0565b005b610971612427565b005b61097b6124c9565b005b61099760048036038101906109929190613a99565b61256b565b005b6109b360048036038101906109ae9190613333565b6125eb565b6040516109c09190613b1c565b60405180910390f35b6109e360048036038101906109de9190613333565b61270b565b005b6109ed6127b3565b6040516109fa9190613514565b60405180910390f35b610a0b6127db565b604051610a189190613514565b60405180910390f35b610a3b6004803603810190610a36919061392c565b6127ff565b604051610a489190613379565b60405180910390f35b610a6b6004803603810190610a66919061352f565b61289b565b005b610a876004803603810190610a829190613333565b6128c4565b005b610a9161296c565b604051610a9e9190613514565b60405180910390f35b610aaf612990565b604051610abc9190613514565b60405180910390f35b610adf6004803603810190610ada919061396c565b6129b8565b604051610aec9190613379565b60405180910390f35b610b0f6004803603810190610b0a9190613394565b612a57565b005b6000610b1b61103c565b73ffffffffffffffffffffffffffffffffffffffff1663122fd48a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b6057600080fd5b505afa158015610b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b989190613b4c565b905090565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610c105750610c0f82612b75565b5b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a7217f65787443616c6c41434c50726f787900000000000000000000000000000000006040518263ffffffff1660e01b8152600401610cbb9190613514565b60206040518083038186803b158015610cd357600080fd5b505afa158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b9190613b4c565b90508091505090565b6000610d1e610e55565b73ffffffffffffffffffffffffffffffffffffffff166310f6c8b5836040518263ffffffff1660e01b8152600401610d5691906131e1565b60206040518083038186803b158015610d6e57600080fd5b505afa158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da69190613b8e565b9050919050565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c610ddf81610dda612bdf565b612be7565b610de7610e55565b73ffffffffffffffffffffffffffffffffffffffff166319c1e7fc836040518263ffffffff1660e01b8152600401610e1f91906131e1565b600060405180830381600087803b158015610e3957600080fd5b505af1158015610e4d573d6000803e3d6000fd5b505050505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a7217f7661756c744d616e6167657250726f78790000000000000000000000000000006040518263ffffffff1660e01b8152600401610ed39190613514565b60206040518083038186803b158015610eeb57600080fd5b505afa158015610eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f239190613b4c565b90508091505090565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c610f5e81610f59612bdf565b612be7565b505050565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c610f9581610f90612bdf565b612be7565b610f9d61103c565b73ffffffffffffffffffffffffffffffffffffffff16631f1fc35f898989898989896040518863ffffffff1660e01b8152600401610fe19796959493929190613bbb565b600060405180830381600087803b158015610ffb57600080fd5b505af115801561100f573d6000803e3d6000fd5b505050505050505050505050565b6000806000838152602001908152602001600020600101549050919050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a7217f6c69717569646974794d616e6167657250726f787900000000000000000000006040518263ffffffff1660e01b81526004016110ba9190613514565b60206040518083038186803b1580156110d257600080fd5b505afa1580156110e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110a9190613b4c565b90508091505090565b60007f7661756c7453746f726167650000000000000000000000000000000000000000905090565b6111448261101d565b61115581611150612bdf565b612be7565b61115f8383612c84565b505050565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c61119681611191612bdf565b612be7565b61119e610e55565b73ffffffffffffffffffffffffffffffffffffffff166331c0ec9b84846040518363ffffffff1660e01b81526004016111d8929190613c2a565b600060405180830381600087803b1580156111f257600080fd5b505af1158015611206573d6000803e3d6000fd5b50505050505050565b6112176130a4565b61122082612d64565b6040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525090611297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128e9190613cec565b60405180910390fd5b506112a061103c565b73ffffffffffffffffffffffffffffffffffffffff166335ea6a75836040518263ffffffff1660e01b81526004016112d891906131e1565b6102006040518083038186803b1580156112f157600080fd5b505afa158015611305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113299190613f70565b9050919050565b611338612bdf565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146113a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139c90614010565b60405180910390fd5b6113af8282612d87565b5050565b6113bb610e55565b73ffffffffffffffffffffffffffffffffffffffff16633aa63c61858585856040518563ffffffff1660e01b81526004016113f99493929190614030565b600060405180830381600087803b15801561141357600080fd5b505af1158015611427573d6000803e3d6000fd5b5050505050505050565b60007f6c69717569646974794d616e6167657250726f78790000000000000000000000905090565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c61148b81611486612bdf565b612be7565b6000611495610c3d565b90508073ffffffffffffffffffffffffffffffffffffffff166345e1487985856040518363ffffffff1660e01b81526004016114d29291906140f6565b600060405180830381600087803b1580156114ec57600080fd5b505af1158015611500573d6000803e3d6000fd5b5050505050505050565b7f72656465656d5365637572697479000000000000000000000000000000000000611533610c3d565b73ffffffffffffffffffffffffffffffffffffffff16635fae0576336040518263ffffffff1660e01b815260040161156b91906131e1565b60206040518083038186803b15801561158357600080fd5b505afa158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb9190614146565b6115fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f1906141bf565b60405180910390fd5b611602610c3d565b73ffffffffffffffffffffffffffffffffffffffff1663128358c5826040518263ffffffff1660e01b815260040161163a9190613514565b60206040518083038186803b15801561165257600080fd5b505afa158015611666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168a9190614146565b6116c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c090614251565b60405180910390fd5b6116d1610e55565b73ffffffffffffffffffffffffffffffffffffffff1663365a0717338686866040518563ffffffff1660e01b815260040161170f9493929190614271565b600060405180830381600087803b15801561172957600080fd5b505af115801561173d573d6000803e3d6000fd5b5050505050505050565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c61177981611774612bdf565b612be7565b611781610e55565b73ffffffffffffffffffffffffffffffffffffffff166353b83e9284846040518363ffffffff1660e01b81526004016117bb929190613c2a565b600060405180830381600087803b1580156117d557600080fd5b505af11580156117e9573d6000803e3d6000fd5b50505050505050565b60007f7661756c744d616e6167657250726f7879000000000000000000000000000000905090565b60007f65787443616c6c41434c50726f78790000000000000000000000000000000000905090565b60007f6372656174655661756c7400000000000000000000000000000000000000000061186d610c3d565b73ffffffffffffffffffffffffffffffffffffffff16635fae0576336040518263ffffffff1660e01b81526004016118a591906131e1565b60206040518083038186803b1580156118bd57600080fd5b505afa1580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f59190614146565b611934576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192b906141bf565b60405180910390fd5b61193c610c3d565b73ffffffffffffffffffffffffffffffffffffffff1663128358c5826040518263ffffffff1660e01b81526004016119749190613514565b60206040518083038186803b15801561198c57600080fd5b505afa1580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c49190614146565b611a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fa90614251565b60405180910390fd5b6000611a0d610e55565b905060008190508073ffffffffffffffffffffffffffffffffffffffff1663b4bd6f46336040518263ffffffff1660e01b8152600401611a4d91906131e1565b602060405180830381600087803b158015611a6757600080fd5b505af1158015611a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9f9190613b4c565b935050505090565b6000611ab1610e55565b73ffffffffffffffffffffffffffffffffffffffff16635db22de684846040518363ffffffff1660e01b8152600401611aeb9291906142b6565b60206040518083038186803b158015611b0357600080fd5b505afa158015611b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3b9190613b8e565b905092915050565b7f65787443616c6c41434c50726f7879000000000000000000000000000000000081565b7f6c69717569646974794d616e616765720000000000000000000000000000000081565b7f6465706f73697453656375726974790000000000000000000000000000000000611bb4610c3d565b73ffffffffffffffffffffffffffffffffffffffff16635fae0576336040518263ffffffff1660e01b8152600401611bec91906131e1565b60206040518083038186803b158015611c0457600080fd5b505afa158015611c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3c9190614146565b611c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c72906141bf565b60405180910390fd5b611c83610c3d565b73ffffffffffffffffffffffffffffffffffffffff1663128358c5826040518263ffffffff1660e01b8152600401611cbb9190613514565b60206040518083038186803b158015611cd357600080fd5b505afa158015611ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0b9190614146565b611d4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4190614251565b60405180910390fd5b611d52610e55565b73ffffffffffffffffffffffffffffffffffffffff1663f7e140ce338686866040518563ffffffff1660e01b8152600401611d9094939291906142df565b600060405180830381600087803b158015611daa57600080fd5b505af1158015611dbe573d6000803e3d6000fd5b5050505050505050565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c611dfa81611df5612bdf565b612be7565b6000611e04610c3d565b90508073ffffffffffffffffffffffffffffffffffffffff16634e71e0c86040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611e4e57600080fd5b505af1158015611e62573d6000803e3d6000fd5b505050505050565b6000611e7461103c565b73ffffffffffffffffffffffffffffffffffffffff1663776f689184846040518363ffffffff1660e01b8152600401611eae92919061439b565b60206040518083038186803b158015611ec657600080fd5b505afa158015611eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efe9190613b8e565b905092915050565b7f6c69717569646974794d616e6167657250726f7879000000000000000000000081565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c611f5c81611f57612bdf565b612be7565b611f6461103c565b73ffffffffffffffffffffffffffffffffffffffff166381f78151836040518263ffffffff1660e01b8152600401611f9c91906131e1565b600060405180830381600087803b158015611fb657600080fd5b505af1158015611fca573d6000803e3d6000fd5b505050505050565b7f7661756c744d616e6167657250726f787900000000000000000000000000000081565b6000612000610e55565b73ffffffffffffffffffffffffffffffffffffffff16638b51bb8f8585856040518463ffffffff1660e01b815260040161203c939291906143c4565b60206040518083038186803b15801561205457600080fd5b505afa158015612068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208c9190613b8e565b90509392505050565b7f7661756c7453746f72616765000000000000000000000000000000000000000081565b60006120c3610e55565b73ffffffffffffffffffffffffffffffffffffffff16638e47b49b836040518263ffffffff1660e01b81526004016120fb91906131e1565b60206040518083038186803b15801561211357600080fd5b505afa158015612127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214b9190613b8e565b9050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c81565b6000801b81565b7f6c6f616e4d616e6167657200000000000000000000000000000000000000000081565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c61226781612262612bdf565b612be7565b6000612271610c3d565b90508073ffffffffffffffffffffffffffffffffffffffff1663b31d61b085856040518363ffffffff1660e01b81526004016122ae9291906144af565b600060405180830381600087803b1580156122c857600080fd5b505af11580156122dc573d6000803e3d6000fd5b5050505050505050565b60008060006122f361103c565b73ffffffffffffffffffffffffffffffffffffffff1663817ad5d3856040518263ffffffff1660e01b815260040161232b91906131e1565b60606040518083038186803b15801561234357600080fd5b505afa158015612357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237b91906144d3565b9250925092509193909250565b60007f6c6f616e4d616e61676572000000000000000000000000000000000000000000905090565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c6123e2816123dd612bdf565b612be7565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c61245981612454612bdf565b612be7565b6000612463610e55565b90508073ffffffffffffffffffffffffffffffffffffffff16634e71e0c86040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156124ad57600080fd5b505af11580156124c1573d6000803e3d6000fd5b505050505050565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c6124fb816124f6612bdf565b612be7565b600061250561103c565b90508073ffffffffffffffffffffffffffffffffffffffff16634e71e0c86040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561254f57600080fd5b505af1158015612563573d6000803e3d6000fd5b505050505050565b61257361103c565b73ffffffffffffffffffffffffffffffffffffffff1663c907e29a85858533866040518663ffffffff1660e01b81526004016125b3959493929190614526565b600060405180830381600087803b1580156125cd57600080fd5b505af11580156125e1573d6000803e3d6000fd5b5050505050505050565b6125f361318d565b6125fc82612d64565b6040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525090612673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266a9190613cec565b60405180910390fd5b5061267c61103c565b73ffffffffffffffffffffffffffffffffffffffff1663c44b11f7836040518263ffffffff1660e01b81526004016126b491906131e1565b60206040518083038186803b1580156126cc57600080fd5b505afa1580156126e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127049190614579565b9050919050565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c61273d81612738612bdf565b612be7565b61274561103c565b73ffffffffffffffffffffffffffffffffffffffff1663c827dc83836040518263ffffffff1660e01b815260040161277d91906131e1565b600060405180830381600087803b15801561279757600080fd5b505af11580156127ab573d6000803e3d6000fd5b505050505050565b60007f73656375726974794465706f736974546f6b656e000000000000000000000000905090565b7f73656375726974794465706f736974546f6b656e00000000000000000000000081565b600061280961103c565b73ffffffffffffffffffffffffffffffffffffffff1663284592b284846040518363ffffffff1660e01b815260040161284392919061439b565b60206040518083038186803b15801561285b57600080fd5b505afa15801561286f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128939190613b8e565b905092915050565b6128a48261101d565b6128b5816128b0612bdf565b612be7565b6128bf8383612d87565b505050565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c6128f6816128f1612bdf565b612be7565b6128fe610e55565b73ffffffffffffffffffffffffffffffffffffffff1663d8dc4ee1836040518263ffffffff1660e01b815260040161293691906131e1565b600060405180830381600087803b15801561295057600080fd5b505af1158015612964573d6000803e3d6000fd5b505050505050565b7f6c69717569646974794d616e6167657253746f7261676500000000000000000081565b60007f6c69717569646974794d616e6167657253746f72616765000000000000000000905090565b60006129c2610e55565b73ffffffffffffffffffffffffffffffffffffffff1663ebe37d798585856040518463ffffffff1660e01b81526004016129fe939291906143c4565b60206040518083038186803b158015612a1657600080fd5b505afa158015612a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4e9190613b8e565b90509392505050565b7f523a704056dcd17bcf83bed8b68c59416dac1119be77755efe3bde0a64e46e0c612a8981612a84612bdf565b612be7565b6000612a93610e55565b90508073ffffffffffffffffffffffffffffffffffffffff1663f3e8789b85856040518363ffffffff1660e01b8152600401612ad09291906142b6565b600060405180830381600087803b158015612aea57600080fd5b505af1158015612afe573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166361a875af85856040518363ffffffff1660e01b8152600401612b3d9291906142b6565b600060405180830381600087803b158015612b5757600080fd5b505af1158015612b6b573d6000803e3d6000fd5b5050505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b612bf18282612152565b612c8057612c168173ffffffffffffffffffffffffffffffffffffffff166014612e68565b612c248360001c6020612e68565b604051602001612c3592919061467a565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c779190613cec565b60405180910390fd5b5050565b612c8e8282612152565b612d6057600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d05612bdf565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b612d918282612152565b15612e6457600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612e09612bdf565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b606060006002836002612e7b91906146e3565b612e85919061473d565b67ffffffffffffffff811115612e9e57612e9d613d13565b5b6040519080825280601f01601f191660200182016040528015612ed05781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612f0857612f07614793565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612f6c57612f6b614793565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612fac91906146e3565b612fb6919061473d565b90505b6001811115613056577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612ff857612ff7614793565b5b1a60f81b82828151811061300f5761300e614793565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061304f906147c2565b9050612fb9565b506000841461309a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161309190614838565b60405180910390fd5b8091505092915050565b6040518061020001604052806130b861318d565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600064ffffffffff1681525090565b6040518060200160405280600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131cb826131a0565b9050919050565b6131db816131c0565b82525050565b60006020820190506131f660008301846131d2565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61324581613210565b811461325057600080fd5b50565b6000813590506132628161323c565b92915050565b60006020828403121561327e5761327d613206565b5b600061328c84828501613253565b91505092915050565b60008115159050919050565b6132aa81613295565b82525050565b60006020820190506132c560008301846132a1565b92915050565b60006132d6826131a0565b9050919050565b6132e6816132cb565b82525050565b600060208201905061330160008301846132dd565b92915050565b613310816131c0565b811461331b57600080fd5b50565b60008135905061332d81613307565b92915050565b60006020828403121561334957613348613206565b5b60006133578482850161331e565b91505092915050565b6000819050919050565b61337381613360565b82525050565b600060208201905061338e600083018461336a565b92915050565b600080604083850312156133ab576133aa613206565b5b60006133b98582860161331e565b92505060206133ca8582860161331e565b9150509250929050565b6133dd81613360565b81146133e857600080fd5b50565b6000813590506133fa816133d4565b92915050565b600080600080600080600060e0888a03121561341f5761341e613206565b5b600061342d8a828b0161331e565b975050602061343e8a828b0161331e565b965050604061344f8a828b0161331e565b95505060606134608a828b016133eb565b94505060806134718a828b016133eb565b93505060a06134828a828b0161331e565b92505060c06134938a828b0161331e565b91505092959891949750929550565b6000819050919050565b6134b5816134a2565b81146134c057600080fd5b50565b6000813590506134d2816134ac565b92915050565b6000602082840312156134ee576134ed613206565b5b60006134fc848285016134c3565b91505092915050565b61350e816134a2565b82525050565b60006020820190506135296000830184613505565b92915050565b6000806040838503121561354657613545613206565b5b6000613554858286016134c3565b92505060206135658582860161331e565b9150509250929050565b6000806040838503121561358657613585613206565b5b60006135948582860161331e565b92505060206135a5858286016133eb565b9150509250929050565b6135b881613360565b82525050565b6020820160008201516135d460008501826135af565b50505050565b6135e3816131c0565b82525050565b600064ffffffffff82169050919050565b613603816135e9565b82525050565b6102008201600082015161362060008501826135be565b50602082015161363360208501826135af565b50604082015161364660408501826135af565b50606082015161365960608501826135af565b50608082015161366c60808501826135af565b5060a082015161367f60a08501826135af565b5060c082015161369260c08501826135af565b5060e08201516136a560e08501826135af565b506101008201516136ba6101008501826135af565b506101208201516136cf6101208501826135af565b506101408201516136e46101408501826135da565b506101608201516136f96101608501826135da565b5061018082015161370e6101808501826135da565b506101a08201516137236101a08501826135da565b506101c08201516137386101c08501826135fa565b506101e082015161374d6101e08501826135fa565b50505050565b6000610200820190506137696000830184613609565b92915050565b613778816132cb565b811461378357600080fd5b50565b6000813590506137958161376f565b92915050565b600080600080608085870312156137b5576137b4613206565b5b60006137c38782880161331e565b94505060206137d48782880161331e565b93505060406137e587828801613786565b92505060606137f6878288016133eb565b91505092959194509250565b600080fd5b600080fd5b600080fd5b60008083601f84011261382757613826613802565b5b8235905067ffffffffffffffff81111561384457613843613807565b5b6020830191508360208202830111156138605761385f61380c565b5b9250929050565b6000806020838503121561387e5761387d613206565b5b600083013567ffffffffffffffff81111561389c5761389b61320b565b5b6138a885828601613811565b92509250509250929050565b6000806000606084860312156138cd576138cc613206565b5b60006138db8682870161331e565b93505060206138ec8682870161331e565b92505060406138fd868287016133eb565b9150509250925092565b6002811061391457600080fd5b50565b60008135905061392681613907565b92915050565b6000806040838503121561394357613942613206565b5b60006139518582860161331e565b925050602061396285828601613917565b9150509250929050565b60008060006060848603121561398557613984613206565b5b60006139938682870161331e565b93505060206139a48682870161331e565b92505060406139b58682870161331e565b9150509250925092565b60008083601f8401126139d5576139d4613802565b5b8235905067ffffffffffffffff8111156139f2576139f1613807565b5b602083019150836020820283011115613a0e57613a0d61380c565b5b9250929050565b60008060208385031215613a2c57613a2b613206565b5b600083013567ffffffffffffffff811115613a4a57613a4961320b565b5b613a56858286016139bf565b92509250509250929050565b6000606082019050613a7760008301866132a1565b613a8460208301856132a1565b613a9160408301846132a1565b949350505050565b60008060008060808587031215613ab357613ab2613206565b5b6000613ac18782880161331e565b9450506020613ad287828801613917565b9350506040613ae3878288016133eb565b9250506060613af48782880161331e565b91505092959194509250565b602082016000820151613b1660008501826135af565b50505050565b6000602082019050613b316000830184613b00565b92915050565b600081519050613b4681613307565b92915050565b600060208284031215613b6257613b61613206565b5b6000613b7084828501613b37565b91505092915050565b600081519050613b88816133d4565b92915050565b600060208284031215613ba457613ba3613206565b5b6000613bb284828501613b79565b91505092915050565b600060e082019050613bd0600083018a6131d2565b613bdd60208301896131d2565b613bea60408301886131d2565b613bf7606083018761336a565b613c04608083018661336a565b613c1160a08301856131d2565b613c1e60c08301846131d2565b98975050505050505050565b6000604082019050613c3f60008301856131d2565b613c4c602083018461336a565b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613c8d578082015181840152602081019050613c72565b83811115613c9c576000848401525b50505050565b6000601f19601f8301169050919050565b6000613cbe82613c53565b613cc88185613c5e565b9350613cd8818560208601613c6f565b613ce181613ca2565b840191505092915050565b60006020820190508181036000830152613d068184613cb3565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613d4b82613ca2565b810181811067ffffffffffffffff82111715613d6a57613d69613d13565b5b80604052505050565b6000613d7d6131fc565b9050613d898282613d42565b919050565b600060208284031215613da457613da3613d0e565b5b613dae6020613d73565b90506000613dbe84828501613b79565b60008301525092915050565b613dd3816135e9565b8114613dde57600080fd5b50565b600081519050613df081613dca565b92915050565b60006102008284031215613e0d57613e0c613d0e565b5b613e18610200613d73565b90506000613e2884828501613d8e565b6000830152506020613e3c84828501613b79565b6020830152506040613e5084828501613b79565b6040830152506060613e6484828501613b79565b6060830152506080613e7884828501613b79565b60808301525060a0613e8c84828501613b79565b60a08301525060c0613ea084828501613b79565b60c08301525060e0613eb484828501613b79565b60e083015250610100613ec984828501613b79565b61010083015250610120613edf84828501613b79565b61012083015250610140613ef584828501613b37565b61014083015250610160613f0b84828501613b37565b61016083015250610180613f2184828501613b37565b610180830152506101a0613f3784828501613b37565b6101a0830152506101c0613f4d84828501613de1565b6101c0830152506101e0613f6384828501613de1565b6101e08301525092915050565b60006102008284031215613f8757613f86613206565b5b6000613f9584828501613df6565b91505092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000613ffa602f83613c5e565b915061400582613f9e565b604082019050919050565b6000602082019050818103600083015261402981613fed565b9050919050565b600060808201905061404560008301876131d2565b61405260208301866131d2565b61405f60408301856132dd565b61406c606083018461336a565b95945050505050565b600082825260208201905092915050565b600080fd5b82818337600083830152505050565b60006140a68385614075565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156140d9576140d8614086565b5b6020830292506140ea83858461408b565b82840190509392505050565b6000602082019050818103600083015261411181848661409a565b90509392505050565b61412381613295565b811461412e57600080fd5b50565b6000815190506141408161411a565b92915050565b60006020828403121561415c5761415b613206565b5b600061416a84828501614131565b91505092915050565b7f566f79616765723a206e6f742077686974656c69737465642061646472657373600082015250565b60006141a9602083613c5e565b91506141b482614173565b602082019050919050565b600060208201905081810360008301526141d88161419c565b9050919050565b7f566f79616765723a206e6f742077686974656c69737465642066756e6374696f60008201527f6e73000000000000000000000000000000000000000000000000000000000000602082015250565b600061423b602283613c5e565b9150614246826141df565b604082019050919050565b6000602082019050818103600083015261426a8161422e565b9050919050565b600060808201905061428660008301876132dd565b61429360208301866131d2565b6142a060408301856131d2565b6142ad606083018461336a565b95945050505050565b60006040820190506142cb60008301856131d2565b6142d860208301846131d2565b9392505050565b60006080820190506142f460008301876131d2565b61430160208301866131d2565b61430e60408301856131d2565b61431b606083018461336a565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061436457614363614324565b5b50565b600081905061437582614353565b919050565b600061438582614367565b9050919050565b6143958161437a565b82525050565b60006040820190506143b060008301856131d2565b6143bd602083018461438c565b9392505050565b60006060820190506143d960008301866131d2565b6143e660208301856131d2565b6143f360408301846131d2565b949350505050565b600082825260208201905092915050565b6000819050919050565b600061442283836135da565b60208301905092915050565b600061443d602084018461331e565b905092915050565b6000602082019050919050565b600061445e83856143fb565b93506144698261440c565b8060005b858110156144a25761447f828461442e565b6144898882614416565b975061449483614445565b92505060018101905061446d565b5085925050509392505050565b600060208201905081810360008301526144ca818486614452565b90509392505050565b6000806000606084860312156144ec576144eb613206565b5b60006144fa86828701614131565b935050602061450b86828701614131565b925050604061451c86828701614131565b9150509250925092565b600060a08201905061453b60008301886131d2565b614548602083018761438c565b614555604083018661336a565b61456260608301856131d2565b61456f60808301846131d2565b9695505050505050565b60006020828403121561458f5761458e613206565b5b600061459d84828501613d8e565b91505092915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006145e76017836145a6565b91506145f2826145b1565b601782019050919050565b600061460882613c53565b61461281856145a6565b9350614622818560208601613c6f565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006146646011836145a6565b915061466f8261462e565b601182019050919050565b6000614685826145da565b915061469182856145fd565b915061469c82614657565b91506146a882846145fd565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006146ee82613360565b91506146f983613360565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614732576147316146b4565b5b828202905092915050565b600061474882613360565b915061475383613360565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614788576147876146b4565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006147cd82613360565b915060008214156147e1576147e06146b4565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000614822602083613c5e565b915061482d826147ec565b602082019050919050565b6000602082019050818103600083015261485181614815565b905091905056fea2646970667358221220fab8944da903cddc1207552c1af430f13cdf66157bc6df2b5aba8b1043eae26c64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activeReserve(address)": {
        "details": "Active a reserve for borrowing",
        "params": {
          "_asset": "The address of the reserve*"
        }
      },
      "createVault()": {
        "details": "Create an empty Vault for msg.sender, in addition to this, a vault also deploy a SecurityDepositEscrow contract which the fund will be held in",
        "returns": {
          "_0": "address of Vault*"
        }
      },
      "deposit(address,uint8,uint256,address)": {
        "details": "Deposits an `amount` of underlying asset into the reserve, receiving in return overlying tokens: Either Junior Deposit Token or Senior Deposit token",
        "params": {
          "_amount": "The amount to be deposited",
          "_asset": "The address of the underlying asset to deposit",
          "_onBehalfOf": "The address that will receive the deposit tokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of deposit token   is a different wallet*",
          "_tranche": "The tranche of the liquidity pool the user wants to deposit to"
        }
      },
      "depositSecurity(address,address,uint256)": {
        "details": "Deposit specific amount of security deposit to user owned Vault",
        "params": {
          "_amount": "deposit amount*",
          "_reserve": "address of reserve",
          "_vaultUser": "the user address that will be sponsored"
        }
      },
      "eligibleAmount(address,address,address)": {
        "details": "Eligible amount that can be withdraw, calculated by deposit records without considering slash",
        "params": {
          "_reserve": "reserve address",
          "_sponsor": "sponsor address*",
          "_vaultUser": "user address"
        }
      },
      "getAddressResolverAddress()": {
        "details": "Get addressResolver contract address",
        "returns": {
          "_0": "address of the resolver contract*"
        }
      },
      "getConfiguration(address)": {
        "details": "Returns the configuration of the reserve",
        "params": {
          "_asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The state of the reserve*"
        }
      },
      "getCreditLimit(address,address)": {
        "details": "Get maximum reserve amount the use can borrow",
        "params": {
          "_reserve": "reserve contract address*",
          "_user": "user address"
        }
      },
      "getExtCallACLProxyAddress()": {
        "details": "Get ExtCallACLProxy contract address*"
      },
      "getLiquidityManagerEscrowContractAddress()": {
        "details": "Get EscrowContract owned by LiquidityManager*"
      },
      "getLiquidityManagerProxyAddress()": {
        "details": "Get LiquidityManagerProxy contract address*"
      },
      "getMaxSecurityDeposit(address)": {
        "details": "Get max security deposit for _reserve",
        "params": {
          "_reserve": "reserve address"
        },
        "returns": {
          "_0": "max deposit amount"
        }
      },
      "getReserveData(address)": {
        "details": "Returns the state and configuration of the reserve",
        "params": {
          "_asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The state of the reserve*"
        }
      },
      "getReserveFlags(address)": {
        "details": "Returns the reserve flags",
        "params": {
          "_asset": "The address of asset"
        },
        "returns": {
          "_0": "The state flags representing active, frozen, borrowing enabled*"
        }
      },
      "getReserveNormalizedIncome(address,uint8)": {
        "details": "Returns the normalized income per unit of asset",
        "params": {
          "_asset": "The address of the underlying asset of the reserve",
          "_tranche": "The tranche of the reserve, either Junior or Senior"
        },
        "returns": {
          "_0": "The reserve's normalized income*"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSecurityDepositRequirement(address)": {
        "details": "Get current security deposit requirement",
        "params": {
          "_reserve": "reserve address"
        },
        "returns": {
          "_0": "requirement, expressed in Ray*"
        }
      },
      "getVaultManagerProxyAddress()": {
        "details": "Get VaultManagerProxy contract address",
        "returns": {
          "_0": "address of the VaultManager*"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initReserve(address,address,address,uint256,uint256,address,address)": {
        "details": "Initializes a reserve, activating it, assigning two deposit tokens and an interest rate strategy Only callable by protocol operator",
        "params": {
          "_asset": "The address of the underlying asset of the reserve",
          "_interestRateStrategyAddress": "The address of the interest rate strategy contract*",
          "_juniorDepositTokenAddress": "The address of the junior deposit token that will be assigned to the reserve",
          "_juniorIncomeAllocation": "Junior income allocation, express in RAY",
          "_seniorDepositTokenAddress": "The address of the senior deposit token that will be assigned to the reserve",
          "_seniorIncomeAllocation": "Senior income allocation, express in RAY",
          "_stableDebtAddress": "The address of the StableDebtToken that will be assigned to the reserve"
        }
      },
      "liquidityRate(address,uint8)": {
        "details": "Get current liquidity rate for a specific reserve for it junior tranche or senior tranche",
        "params": {
          "_asset": "The address of the underlying asset of the reserve",
          "_tranche": "Either junior tranche or senior tranche*"
        }
      },
      "redeemSecurity(address,address,uint256)": {
        "details": "Redeem specific amount of security deposit to user owned Vault",
        "params": {
          "_amount": "deposit amount*",
          "_reserve": "address of reserve",
          "_vaultUser": "the user address that has be sponsored"
        }
      },
      "removeMaxSecurityDeposit(address)": {
        "details": "Remove max security deposit for _reserve",
        "params": {
          "_reserve": "reserve address"
        }
      },
      "removeSecurityDepositRequirement(address)": {
        "details": "Remove security deposit",
        "params": {
          "_reserve": "reserve address"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setAddressResolverAddress(address)": {
        "details": "Update addressResolver contract address",
        "params": {
          "_addressResolver": "address of the resolver contract*"
        }
      },
      "setMaxSecurityDeposit(address,uint256)": {
        "details": "Set max security deposit for _reserve",
        "params": {
          "_amount": "max amount sponsor can deposit",
          "_reserve": "reserve address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "underlyingBalance(address,address,address)": {
        "details": "Get underlying balance of security deposit token",
        "params": {
          "_reserve": "address of reserve",
          "_sponsor": "sponsor address*",
          "_vaultUser": "_vaultUser the user address that has be sponsored"
        }
      },
      "updateSecurityDepositRequirement(address,uint256)": {
        "details": "Update the security deposit requirement",
        "params": {
          "_requirement": "expressed in Ray",
          "_reserve": "reserve address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initVault(address,address)": {
        "notice": "Init a deployed Vault, ensure it has overlying security deposit token and corresponding staking contract _vaultUser the user/owner of this vault _reserve the underlying asset address e.g. TUS*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8482,
        "contract": "contracts/component/Voyager.sol:Voyager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)8477_storage)"
      },
      {
        "astId": 44,
        "contract": "contracts/component/Voyager.sol:Voyager",
        "label": "addressResolver",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)8477_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)8477_storage"
      },
      "t_struct(RoleData)8477_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 8474,
            "contract": "contracts/component/Voyager.sol:Voyager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 8476,
            "contract": "contracts/component/Voyager.sol:Voyager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}