{
  "address": "0x293540a1A293B3adcb2EEA7d8249cF392475e665",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct Diamond.DiamondArgs",
          "name": "_args",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "CallResult",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "addressResolver",
      "outputs": [
        {
          "internalType": "contract AddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_grossAssetValue",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "createVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultUser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultUser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        }
      ],
      "name": "eligibleAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddressResolverAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "getAvailableCredit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ReserveConfigurationMap",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "getCreditLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExtCallACLProxyAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityManagerProxyAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "data",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.ReserveConfigurationMap",
              "name": "configuration",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentOverallLiquidityRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentJuniorLiquidityRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentSeniorLiquidityRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "securityRequirement",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "healthStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "loanStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "juniorDepositTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seniorDepositTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "juniorLastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "seniorLastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint256",
              "name": "optimalTrancheRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentIncomeRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "optimalIncomeRatio",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getReserveFlags",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "getSecurityDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "getVaultConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minSecurityDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSecurityDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "securityDepositRequirement",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.VaultConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultManagerProxyAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "initVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        }
      ],
      "name": "liquidityRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultUser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeemMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_drawDownIdx",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressResolver",
          "type": "address"
        }
      ],
      "name": "setAddressResolverAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultUser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "slash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_address",
          "type": "address[]"
        }
      ],
      "name": "whitelistAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_function",
          "type": "bytes32[]"
        }
      ],
      "name": "whitelistFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facetAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "facetAddresses_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "facetFunctionSelectors_",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "facets_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf8f8999cf058d539ad6d22f37e2d7179f963517c393b08a33794a4c876a535d",
  "receipt": {
    "to": null,
    "from": "0x4C616d9377Fa8d928385F0b11Ab16D4bf0f2d544",
    "contractAddress": "0x293540a1A293B3adcb2EEA7d8249cF392475e665",
    "transactionIndex": 0,
    "gasUsed": "3918854",
    "logsBloom": "0x
    "blockHash": "0x1626537b4ac4456cce09f3fecda5abc88c7d3e0c45546db17ed3482d9657c181",
    "transactionHash": "0xbf8f8999cf058d539ad6d22f37e2d7179f963517c393b08a33794a4c876a535d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10670116,
        "transactionHash": "0xbf8f8999cf058d539ad6d22f37e2d7179f963517c393b08a33794a4c876a535d",
        "address": "0x293540a1A293B3adcb2EEA7d8249cF392475e665",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000543b568e9819294107c6fb35814ec5f17aeeaa600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000011f931c1c000000000000000000000000000000000000000000000000000000000000000000000000000000001a8181366765c960a9b1cfcc0849e64f2cb860140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000028da5cb5b00000000000000000000000000000000000000000000000000000000f2fde38b00000000000000000000000000000000000000000000000000000000000000000000000000000000981917e3de1e52fcd352dde8feb203ee38a6e75d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000005cdffacc60000000000000000000000000000000000000000000000000000000052ef6b2c00000000000000000000000000000000000000000000000000000000adfca15e000000000000000000000000000000000000000000000000000000007a0ed6270000000000000000000000000000000000000000000000000000000001ffc9a7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x1626537b4ac4456cce09f3fecda5abc88c7d3e0c45546db17ed3482d9657c181"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10670116,
        "transactionHash": "0xbf8f8999cf058d539ad6d22f37e2d7179f963517c393b08a33794a4c876a535d",
        "address": "0x293540a1A293B3adcb2EEA7d8249cF392475e665",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004c616d9377fa8d928385f0b11ab16d4bf0f2d544"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x1626537b4ac4456cce09f3fecda5abc88c7d3e0c45546db17ed3482d9657c181"
      }
    ],
    "blockNumber": 10670116,
    "cumulativeGasUsed": "3918854",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      {
        "facetAddress": "0x543b568E9819294107c6fB35814Ec5f17AeEaa60",
        "functionSelectors": [
          "0x1f931c1c"
        ],
        "action": 0
      },
      {
        "facetAddress": "0x1a8181366765c960a9b1cfCC0849E64f2Cb86014",
        "functionSelectors": [
          "0x8da5cb5b",
          "0xf2fde38b"
        ],
        "action": 0
      },
      {
        "facetAddress": "0x981917e3De1E52FCd352DDe8Feb203ee38a6E75D",
        "functionSelectors": [
          "0xcdffacc6",
          "0x52ef6b2c",
          "0xadfca15e",
          "0x7a0ed627",
          "0x01ffc9a7"
        ],
        "action": 0
      }
    ],
    {
      "owner": "0x4C616d9377Fa8d928385F0b11Ab16D4bf0f2d544"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "12f50c75a18b6f714019b390413b1deb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct Diamond.DiamondArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"CallResult\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"addressResolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_grossAssetValue\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"eligibleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressResolverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"getAvailableCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"getCreditLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtCallACLProxyAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityManagerProxyAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentOverallLiquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentJuniorLiquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSeniorLiquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"securityRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"healthStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"juniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"juniorLastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"seniorLastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"optimalTrancheRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentIncomeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optimalIncomeRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getReserveFlags\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"getSecurityDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"getVaultConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minSecurityDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSecurityDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"securityDepositRequirement\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.VaultConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultManagerProxyAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"initVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"liquidityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_drawDownIdx\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressResolver\",\"type\":\"address\"}],\"name\":\"setAddressResolverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultUser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_function\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createVault(address,address,bytes32)\":{\"details\":\"Create an empty Vault for msg.sender, in addition to this, a vault also deploy a SecurityDepositEscrow contract which the fund will be held in\",\"returns\":{\"_0\":\"address of Vault*\"}},\"deposit(address,uint8,uint256)\":{\"details\":\"Deposits an `amount` of underlying asset into the reserve, receiving in return overlying tokens: Either Junior Deposit Token or Senior Deposit token\",\"params\":{\"_amount\":\"The amount to be deposited*\",\"_asset\":\"The address of the underlying asset to deposit\",\"_tranche\":\"The tranche of the liquidity pool the user wants to deposit to\"}},\"depositMargin(address,address,uint256)\":{\"details\":\"Deposit specific amount of security deposit to user owned Vault\",\"params\":{\"_amount\":\"deposit amount*\",\"_reserve\":\"address of reserve\",\"_vaultUser\":\"the user address that will be sponsored\"}},\"getAddressResolverAddress()\":{\"details\":\"Get addressResolver contract address\",\"returns\":{\"_0\":\"address of the resolver contract*\"}},\"getAvailableCredit(address,address)\":{\"details\":\"Get available credit\",\"params\":{\"_reserve\":\"address of reserve*\",\"_user\":\"user address\"}},\"getConfiguration(address)\":{\"details\":\"Returns the configuration of the reserve\",\"params\":{\"_asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The state of the reserve*\"}},\"getCreditLimit(address,address)\":{\"details\":\"Get maximum reserve amount the use can borrow\",\"params\":{\"_reserve\":\"reserve contract address*\",\"_user\":\"user address\"}},\"getExtCallACLProxyAddress()\":{\"details\":\"Get ExtCallACLProxy contract address*\"},\"getLiquidityManagerProxyAddress()\":{\"details\":\"Get LiquidityManagerProxy contract address*\"},\"getReserveData(address)\":{\"details\":\"Returns the state and configuration of the reserve\",\"params\":{\"_asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The state of the reserve*\"}},\"getReserveFlags(address)\":{\"details\":\"Returns the reserve flags\",\"params\":{\"_asset\":\"The address of asset\"},\"returns\":{\"_0\":\"The state flags representing active, frozen, borrowing enabled*\"}},\"getVault(address)\":{\"details\":\"Get vault address\",\"params\":{\"_user\":\"The owner of the vault*\"}},\"getVaultManagerProxyAddress()\":{\"details\":\"Get VaultManagerProxy contract address\",\"returns\":{\"_0\":\"address of the VaultManager*\"}},\"liquidityRate(address,uint8)\":{\"details\":\"Get current liquidity rate for a specific reserve for it junior tranche or senior tranche\",\"params\":{\"_asset\":\"The address of the underlying asset of the reserve\",\"_tranche\":\"Either junior tranche or senior tranche*\"}},\"redeemMargin(address,address,uint256)\":{\"details\":\"Redeem specific amount of security deposit to user owned Vault\",\"params\":{\"_amount\":\"deposit amount*\",\"_reserve\":\"address of reserve\",\"_vaultUser\":\"the user address that has be sponsored\"}},\"setAddressResolverAddress(address)\":{\"details\":\"Update addressResolver contract address\",\"params\":{\"_addressResolver\":\"address of the resolver contract*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/component/Voyager.sol\":\"Voyager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0xebe3f8a59f0f1c96344a05edb984ef666ee4207e993cca99af3808f1de8771b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/mixins/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\",\"keccak256\":\"0x91f5761576f1ff3ede392ea1205bb88d6eed520fdafdabb97da5c3518f8ad5c0\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ab2a92fbac88a704270b039691afb363c5a1ef1170fb0c955043e4da84b987\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa28a1515702793c6b56b97272f75e05890fd82aa2e7ec47b41d4d56a81023f69\",\"license\":\"AGPL-3.0-only\"},\"contracts/component/Voyager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ExtCallACL} from \\\"../libraries/acl/ExtCallACL.sol\\\";\\nimport {ExtCallACLProxy} from \\\"../libraries/acl/ExtCallACLProxy.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {ReserveLogic} from \\\"../libraries/logic/ReserveLogic.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {AddressResolver} from \\\"../component/infra/AddressResolver.sol\\\";\\nimport {VaultManager} from \\\"../component/vault/VaultManager.sol\\\";\\nimport {VaultManagerProxy} from \\\"../component/vault/VaultManagerProxy.sol\\\";\\nimport {LiquidityManager} from \\\"../component/liquidity/LiquidityManager.sol\\\";\\nimport {LoanManager} from \\\"../component/loan/LoanManager.sol\\\";\\nimport {IACLManager} from \\\"../interfaces/IACLManager.sol\\\";\\nimport {MessageBus} from \\\"./infra/MessageBus.sol\\\";\\n\\nimport {Diamond, IDiamondCut, LibDiamond} from \\\"../diamond/Diamond.sol\\\";\\n\\ncontract Voyager is Diamond, MessageBus {\\n    modifier onlyWhitelisted(bytes32 func) {\\n        require(\\n            ExtCallACL(getExtCallACLProxyAddress()).isWhitelistedAddress(\\n                msg.sender\\n            ),\\n            \\\"Voyager: not whitelisted address\\\"\\n        );\\n        require(\\n            ExtCallACL(getExtCallACLProxyAddress()).isWhitelistedFunction(func),\\n            \\\"Voyager: not whitelisted functions\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyProtocolManager() {\\n        _requireCallerAdmin();\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == LibDiamond.contractOwner());\\n        _;\\n    }\\n\\n    event CallResult(bool, bytes);\\n\\n    constructor(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        DiamondArgs memory _args\\n    ) Diamond(_diamondCut, _args) {}\\n\\n    /************************************** HouseKeeping Interfaces **************************************/\\n    /**\\n     * @dev Update addressResolver contract address\\n     * @param _addressResolver address of the resolver contract\\n     **/\\n    function setAddressResolverAddress(address _addressResolver)\\n        external\\n        onlyOwner\\n    {\\n        addressResolver = AddressResolver(_addressResolver);\\n    }\\n\\n    function whitelistAddress(address[] calldata _address)\\n        external\\n        onlyProtocolManager\\n    {\\n        ExtCallACL extCallACL = ExtCallACL(getExtCallACLProxyAddress());\\n        extCallACL.whitelistAddress(_address);\\n    }\\n\\n    function whitelistFunction(bytes32[] calldata _function)\\n        external\\n        onlyProtocolManager\\n    {\\n        ExtCallACL extCallACL = ExtCallACL(getExtCallACLProxyAddress());\\n        extCallACL.whitelistFunction(_function);\\n    }\\n\\n    /************************************** Liquidity Manager Interfaces **************************************/\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying tokens: Either\\n     * Junior Deposit Token or Senior Deposit token\\n     * @param _asset The address of the underlying asset to deposit\\n     * @param _tranche The tranche of the liquidity pool the user wants to deposit to\\n     * @param _amount The amount to be deposited\\n     **/\\n    function deposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount\\n    ) external {\\n        LiquidityManager(getLiquidityManagerProxyAddress()).deposit(\\n            _asset,\\n            _tranche,\\n            _amount,\\n            msg.sender\\n        );\\n    }\\n\\n    function withdraw(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount\\n    ) external {\\n        LiquidityManager(getLiquidityManagerProxyAddress()).withdraw(\\n            _asset,\\n            _tranche,\\n            _amount,\\n            payable(msg.sender)\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the reserve flags\\n     * @param _asset The address of asset\\n     * @return The state flags representing active, frozen, borrowing enabled\\n     **/\\n    function getReserveFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress()).getFlags(\\n                _asset\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getConfiguration(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress())\\n                .getConfiguration(_asset);\\n    }\\n\\n    /**\\n     * @dev Get current liquidity rate for a specific reserve for it junior tranche or senior tranche\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @param _tranche Either junior tranche or senior tranche\\n     **/\\n    function liquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress())\\n                .getLiquidityRate(_asset, _tranche);\\n    }\\n\\n    /************************************** Loan Manager Interfaces **************************************/\\n\\n    // todo remove _grossAssetValue\\n    function borrow(\\n        address _asset,\\n        uint256 _amount,\\n        address payable _vault,\\n        uint256 _grossAssetValue\\n    ) external onlyWhitelisted(\\\"borrow\\\") {\\n        LoanManager(addressResolver.getLoanManagerProxy()).borrow(\\n            msg.sender,\\n            _asset,\\n            _amount,\\n            _vault,\\n            _grossAssetValue\\n        );\\n    }\\n\\n    function repay(\\n        address _asset,\\n        uint256 _drawDownIdx,\\n        address payable _vault\\n    ) external {\\n        LoanManager(addressResolver.getLoanManagerProxy()).repay(\\n            msg.sender,\\n            _asset,\\n            _drawDownIdx,\\n            _vault\\n        );\\n    }\\n\\n    /************************************** Vault Manager Interfaces **************************************/\\n\\n    /**\\n     * @dev Create an empty Vault for msg.sender, in addition to this, a vault also deploy\\n     * a SecurityDepositEscrow contract which the fund will be held in\\n     \\u00d7 @return address of Vault\\n     **/\\n    function createVault(\\n        address _to,\\n        address _reserve,\\n        bytes32 _salt\\n    ) external onlyWhitelisted(\\\"createVault\\\") returns (address) {\\n        address vaultManagerProxy = getVaultManagerProxyAddress();\\n        VaultManager vaultManager = VaultManager(vaultManagerProxy);\\n        return vaultManager.createVault(_to, _reserve, _salt);\\n    }\\n\\n    function initVault(address _vault, address _reserve) external {\\n        address vaultManagerProxy = getVaultManagerProxyAddress();\\n        VaultManager vaultManager = VaultManager(vaultManagerProxy);\\n        vaultManager.initVault(_vault, _reserve);\\n    }\\n\\n    /**\\n     * @dev Deposit specific amount of security deposit to user owned Vault\\n     * @param _vaultUser the user address that will be sponsored\\n     * @param _reserve address of reserve\\n     * @param _amount deposit amount\\n     **/\\n    function depositMargin(\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyWhitelisted(\\\"depositMargin\\\") {\\n        VaultManager(getVaultManagerProxyAddress()).depositMargin(\\n            msg.sender,\\n            _vaultUser,\\n            _reserve,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Redeem specific amount of security deposit to user owned Vault\\n     * @param _vaultUser the user address that has be sponsored\\n     * @param _reserve address of reserve\\n     * @param _amount deposit amount\\n     **/\\n    function redeemMargin(\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyWhitelisted(\\\"redeemMargin\\\") {\\n        VaultManager(getVaultManagerProxyAddress()).redeemMargin(\\n            payable(msg.sender),\\n            _vaultUser,\\n            _reserve,\\n            _amount\\n        );\\n    }\\n\\n    // todo placeholder functions, more detail should be impl in the future\\n    function slash(\\n        address _vaultUser,\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) external {\\n        VaultManager(getVaultManagerProxyAddress()).slash(\\n            _vaultUser,\\n            _reserve,\\n            _to,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Get maximum reserve amount the use can borrow\\n     * @param _user user address\\n     * @param _reserve reserve contract address\\n     **/\\n    function getCreditLimit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            VaultManagerProxy(getVaultManagerProxyAddress()).getCreditLimit(\\n                _user,\\n                _reserve\\n            );\\n    }\\n\\n    /**\\n     * @dev Get available credit\\n     * @param _user user address\\n     * @param _reserve address of reserve\\n     **/\\n    function getAvailableCredit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            VaultManagerProxy(getVaultManagerProxyAddress()).getAvailableCredit(\\n                _user,\\n                _reserve\\n            );\\n    }\\n\\n    // deprecated\\n    function eligibleAmount(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256) {\\n        return\\n            VaultManager(getVaultManagerProxyAddress()).getWithdrawableDeposit(\\n                _vaultUser,\\n                _reserve,\\n                _sponsor\\n            );\\n    }\\n\\n    /************************************** View Interfaces **************************************/\\n\\n    /**\\n     * @dev Get ExtCallACLProxy contract address\\n     **/\\n    function getExtCallACLProxyAddress() public view returns (address payable) {\\n        address extCallACLProxyAddress = AddressResolver(addressResolver)\\n            .getExtCallProxy();\\n        return payable(extCallACLProxyAddress);\\n    }\\n\\n    /************************************** Internal Interfaces **************************************/\\n\\n    function _requireCallerAdmin() internal view {\\n        IACLManager aclManager = IACLManager(addressResolver.getAclManager());\\n        require(aclManager.isProtocolManager(tx.origin), \\\"Not vault admin\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x43d652d9159dc586ba81520f9e531af03a696e8fefdcde811179396e0e8b0834\",\"license\":\"GPL-3.0\"},\"contracts/component/infra/AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../../interfaces/IAddressResolver.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AddressResolver is IAddressResolver, Ownable {\\n    bytes32 public constant voyageName = \\\"voyager\\\";\\n    bytes32 public constant aclManagerName = \\\"aclManager\\\";\\n    bytes32 public constant liquidityManagerProxyName = \\\"liquidityManagerProxy\\\";\\n    bytes32 public constant liquidityManagerName = \\\"liquidityManager\\\";\\n    bytes32 public constant liquidityManagerStorageName =\\n        \\\"liquidityManagerStorage\\\";\\n    bytes32 public constant liquidityDepositEscrowName =\\n        \\\"liquidityDepositEscrow\\\";\\n    bytes32 public constant loanManagerProxyName = \\\"loanManagerProxy\\\";\\n    bytes32 public constant loanManagerName = \\\"loanManager\\\";\\n    bytes32 public constant vaultManagerProxyName = \\\"vaultManagerProxy\\\";\\n    bytes32 public constant vaultManagerName = \\\"vaultManager\\\";\\n    bytes32 public constant vaultStorageName = \\\"vaultStorage\\\";\\n    bytes32 public constant juniorDepositTokenName = \\\"juniorDepositToken\\\";\\n    bytes32 public constant seniorDepositTokenName = \\\"seniorDepositToken\\\";\\n    bytes32 public constant securityDepositTokenName = \\\"securityDepositToken\\\";\\n    bytes32 public constant extCallACLProxyName = \\\"extCallACLProxy\\\";\\n    bytes32 public constant priceOracleName = \\\"priceOracle\\\";\\n\\n    mapping(bytes32 => address) public repository;\\n\\n    function importAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external onlyOwner {\\n        require(\\n            names.length == destinations.length,\\n            \\\"Input lengths must match\\\"\\n        );\\n\\n        for (uint256 i = 0; i < names.length; i++) {\\n            bytes32 name = names[i];\\n            address destination = destinations[i];\\n            repository[name] = destination;\\n            emit AddressImported(name, destination);\\n        }\\n    }\\n\\n    function getVoyage() external view returns (address) {\\n        return repository[voyageName];\\n    }\\n\\n    function getLiquidityManagerProxy() external view returns (address) {\\n        return repository[liquidityManagerProxyName];\\n    }\\n\\n    function getLiquidityManagerStorage() external view returns (address) {\\n        return repository[liquidityManagerStorageName];\\n    }\\n\\n    function getLoanManagerProxy() external view returns (address) {\\n        return repository[loanManagerProxyName];\\n    }\\n\\n    function getLoanManager() external view returns (address) {\\n        return repository[loanManagerName];\\n    }\\n\\n    function getVaultManagerProxy() external view returns (address) {\\n        return repository[vaultManagerProxyName];\\n    }\\n\\n    function getVaultManager() external view returns (address) {\\n        return repository[vaultManagerName];\\n    }\\n\\n    function getVaultStorage() external view returns (address) {\\n        return repository[vaultStorageName];\\n    }\\n\\n    function getJuniorDepositToken() external view returns (address) {\\n        return repository[juniorDepositTokenName];\\n    }\\n\\n    function getSeniorDepositToken() external view returns (address) {\\n        return repository[seniorDepositTokenName];\\n    }\\n\\n    function getExtCallProxy() external view returns (address) {\\n        return repository[extCallACLProxyName];\\n    }\\n\\n    function getAclManager() external view returns (address) {\\n        return repository[aclManagerName];\\n    }\\n\\n    function getPriceOracle() external view returns (address) {\\n        return repository[priceOracleName];\\n    }\\n\\n    function getAddress(bytes32 name) external view returns (address) {\\n        return repository[name];\\n    }\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address)\\n    {\\n        address _foundAddress = repository[name];\\n        require(_foundAddress != address(0), reason);\\n        return _foundAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x13cd3ca7121dc7d9a8169a56c4ca3572fee97a9ec8b6145d17d702656818dd66\",\"license\":\"GPL-3.0\"},\"contracts/component/infra/MessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {AddressResolver} from \\\"./AddressResolver.sol\\\";\\nimport {IMessageBus} from \\\"../../interfaces/IMessageBus.sol\\\";\\nimport {IVaultManager} from \\\"../../interfaces/IVaultManager.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {DataTypes} from \\\"../../libraries/types/DataTypes.sol\\\";\\nimport {Errors} from \\\"../../libraries/helpers/Errors.sol\\\";\\nimport {LiquidityManager} from \\\"../liquidity/LiquidityManager.sol\\\";\\nimport {VaultManager} from \\\"../vault/VaultManager.sol\\\";\\nimport {VaultManagerProxy} from \\\"../vault/VaultManagerProxy.sol\\\";\\n\\n/**\\n * todo it might be a bad name here, it actually performs as the centralise place\\n * for querying each other among the internal components\\n **/\\ncontract MessageBus is IMessageBus {\\n    AddressResolver public addressResolver;\\n\\n    /**\\n     * @dev Get addressResolver contract address\\n     * @return address of the resolver contract\\n     **/\\n    function getAddressResolverAddress() external view returns (address) {\\n        return address(addressResolver);\\n    }\\n\\n    /************************************** LiquidityManager Functions **************************************/\\n\\n    /**\\n     * @dev Get LiquidityManagerProxy contract address\\n     **/\\n    function getLiquidityManagerProxyAddress()\\n        public\\n        view\\n        returns (address payable)\\n    {\\n        address liquidityManagerProxyAddress = addressResolver\\n            .getLiquidityManagerProxy();\\n        return payable(liquidityManagerProxyAddress);\\n    }\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManager(getLiquidityManagerProxyAddress()).getReserveData(\\n                _asset\\n            );\\n    }\\n\\n    /************************************** Vault Functions **************************************/\\n\\n    function getVaultConfig(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.VaultConfig memory)\\n    {\\n        require(Address.isContract(_reserve), Errors.LM_NOT_CONTRACT);\\n        return\\n            VaultManagerProxy(getVaultManagerProxyAddress()).getVaultConfig(\\n                _reserve\\n            );\\n    }\\n\\n    /**\\n     * @dev Get vault address\\n     * @param _user The owner of the vault\\n     **/\\n    function getVault(address _user) external view returns (address) {\\n        return VaultManagerProxy(getVaultManagerProxyAddress()).getVault(_user);\\n    }\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 amt = VaultManagerProxy(getVaultManagerProxyAddress())\\n            .getSecurityDeposit(_user, _reserve);\\n        return amt;\\n    }\\n\\n    /**\\n     * @dev Get VaultManagerProxy contract address\\n     * @return address of the VaultManager\\n     **/\\n    function getVaultManagerProxyAddress()\\n        public\\n        view\\n        returns (address payable)\\n    {\\n        address vaultManagerProxyAddress = addressResolver\\n            .getVaultManagerProxy();\\n        return payable(vaultManagerProxyAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x398e7c9d25714fda5503e5157d46ca05f75f69c2713321805e21f9fbbb20097f\",\"license\":\"GPL-3.0\"},\"contracts/component/liquidity/DefaultReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IVToken} from \\\"../../interfaces/IVToken.sol\\\";\\nimport {WadRayMath} from \\\"../../libraries/math/WadRayMath.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../../interfaces/IReserveInterestRateStrategy.sol\\\";\\n\\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    /**\\n     * this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates\\n     * Expressed in RAY\\n     **/\\n    uint256 public immutable OPTIMAL_UTILIZATION_RATE;\\n\\n    // Base interest rate set by governance. Expressed in ray\\n    uint256 internal immutable baseBorrowRate;\\n\\n    // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope1;\\n\\n    // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope2;\\n\\n    constructor(\\n        uint256 _optimalUtilizationRate,\\n        uint256 _stableRateSlope1,\\n        uint256 _stableRateSlope2,\\n        uint256 _baseBorrowRate\\n    ) public {\\n        OPTIMAL_UTILIZATION_RATE = _optimalUtilizationRate;\\n        baseBorrowRate = _baseBorrowRate;\\n        stableRateSlope1 = _stableRateSlope1;\\n        stableRateSlope2 = _stableRateSlope2;\\n    }\\n\\n    struct CalcInterestRatesLocalVars {\\n        uint256 totalDebt;\\n        uint256 currentStableBorrowRate;\\n        uint256 currentLiquidityRate;\\n        uint256 utilizationRate;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configuration\\n     * @param reserve The address of the reserve\\n     * @param seniorDepositTokenAddress The address of senior deposit token\\n     * @param liquidityAdded The liquidity added during the operation\\n     * @param liquidityTaken The liquidity taken during the operation\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        address seniorDepositTokenAddress,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256) {\\n        uint256 totalPendingWithdrawal = IVToken(seniorDepositTokenAddress)\\n            .totalUnbonding();\\n\\n        uint256 availableLiquidity = IERC20(reserve).balanceOf(\\n            seniorDepositTokenAddress\\n        ) - totalPendingWithdrawal;\\n\\n        availableLiquidity = availableLiquidity.add(liquidityAdded).sub(\\n            liquidityTaken\\n        );\\n        return\\n            calculateInterestRates(\\n                reserve,\\n                availableLiquidity,\\n                totalStableDebt,\\n                averageBorrowRate\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * @param reserve The address of the reserve\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @param averageBorrowRate The current average borrow rate\\n     * @return The liquidity rate, the stable borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) public view returns (uint256, uint256) {\\n        CalcInterestRatesLocalVars memory vars;\\n\\n        vars.totalDebt = totalStableDebt;\\n        vars.currentStableBorrowRate = baseBorrowRate;\\n        vars.currentLiquidityRate = 0;\\n\\n        vars.utilizationRate = vars.totalDebt == 0\\n            ? 0\\n            : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\\n\\n        if (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n            vars.currentStableBorrowRate = vars\\n                .currentStableBorrowRate\\n                .add(stableRateSlope1)\\n                .add(\\n                    stableRateSlope2\\n                        .rayMul(\\n                            vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE)\\n                        )\\n                        .rayDiv(WadRayMath.Ray().sub(OPTIMAL_UTILIZATION_RATE))\\n                );\\n        } else {\\n            vars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\\n                stableRateSlope1.rayMul(vars.utilizationRate).rayDiv(\\n                    OPTIMAL_UTILIZATION_RATE\\n                )\\n            );\\n        }\\n\\n        vars.currentLiquidityRate = averageBorrowRate.rayMul(\\n            vars.utilizationRate\\n        );\\n        return (vars.currentLiquidityRate, vars.currentStableBorrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0x33b749fc8a926cd7c59f7bdda72d0cb085eeb0cffe4406b2efe45179697dbde4\",\"license\":\"GPL-3.0\"},\"contracts/component/liquidity/LiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ReserveManager.sol\\\";\\nimport {Errors} from \\\"../../libraries/helpers/Errors.sol\\\";\\nimport {ReserveLogic} from \\\"../../libraries/logic/ReserveLogic.sol\\\";\\nimport {WadRayMath} from \\\"../../libraries/math/WadRayMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IReserveManager} from \\\"../../interfaces/IReserveManager.sol\\\";\\nimport {ILiquidityManager} from \\\"../../interfaces/ILiquidityManager.sol\\\";\\nimport {IVToken} from \\\"../../interfaces/IVToken.sol\\\";\\nimport {JuniorDepositToken} from \\\"../../tokenization/JuniorDepositToken.sol\\\";\\nimport {SeniorDepositToken} from \\\"../../tokenization/SeniorDepositToken.sol\\\";\\nimport {PeripheryPayments} from \\\"../../libraries/utils/PeripheryPayments.sol\\\";\\n\\ncontract LiquidityManager is\\n    PeripheryPayments,\\n    ReserveManager,\\n    ILiquidityManager\\n{\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address payable _proxy, address payable _voyager)\\n        ReserveManager(_proxy, _voyager)\\n    {}\\n\\n    /************************************** User Functions **************************************/\\n\\n    function deposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address _user\\n    ) external onlyProxy {\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        DataTypes.ReserveData memory reserve = getReserveData(_asset);\\n        DataTypes.BorrowStat memory borrowStat = lms.getBorrowStat(_asset);\\n        uint256 totalDebt = borrowStat.totalDebt.add(borrowStat.totalInterest);\\n        uint256 avgBorrowRate = borrowStat.avgBorrowRate;\\n\\n        lms.updateStateOnDeposit(\\n            _asset,\\n            _tranche,\\n            _amount,\\n            totalDebt,\\n            avgBorrowRate\\n        );\\n\\n        IVToken vToken = _tranche == ReserveLogic.Tranche.JUNIOR\\n            ? IVToken(reserve.juniorDepositTokenAddress)\\n            : IVToken(reserve.seniorDepositTokenAddress);\\n        // transfer the underlying tokens to liquidity manager, then do deposit.\\n        pullToken(vToken.asset(), _amount, _user, address(this));\\n        vToken.deposit(_amount, _user);\\n        emitDeposit(_asset, _user, _tranche, _amount);\\n    }\\n\\n    function withdraw(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address payable _user\\n    ) external onlyProxy {\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        DataTypes.ReserveData memory reserve = getReserveData(_asset);\\n        IVToken vToken = ReserveLogic.Tranche.JUNIOR == _tranche\\n            ? IVToken(reserve.juniorDepositTokenAddress)\\n            : IVToken(reserve.seniorDepositTokenAddress);\\n        uint256 userBalance = vToken.maxWithdraw(_user);\\n        uint256 amountToWithdraw = _amount;\\n        if (_amount == type(uint256).max) {\\n            amountToWithdraw = userBalance;\\n        }\\n        DataTypes.BorrowStat memory borrowStat = lms.getBorrowStat(_asset);\\n        uint256 totalDebt = borrowStat.totalDebt.add(borrowStat.totalInterest);\\n        uint256 avgBorrowRate = borrowStat.avgBorrowRate;\\n        IVToken(vToken).withdraw(_amount, _user, _user);\\n        lms.updateStateOnWithdraw(\\n            _asset,\\n            _tranche,\\n            amountToWithdraw,\\n            totalDebt,\\n            avgBorrowRate\\n        );\\n\\n        emitWithdraw(_asset, _user, _tranche, _amount);\\n    }\\n\\n    /************************************** View Functions **************************************/\\n\\n    function unbonding(\\n        address _reserve,\\n        address _user,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        DataTypes.ReserveData memory reserve = getReserveData(_reserve);\\n        address vToken;\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            vToken = reserve.juniorDepositTokenAddress;\\n        } else {\\n            vToken = reserve.seniorDepositTokenAddress;\\n        }\\n        (, uint256[] memory amounts) = IVToken(vToken).unbonding(_user);\\n        uint256 unbondingBalance = 0;\\n        for (uint8 i = 0; i < amounts.length; i++) {\\n            unbondingBalance += amounts[i];\\n        }\\n        return unbondingBalance;\\n    }\\n\\n    function balance(\\n        address _reserve,\\n        address _user,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        DataTypes.ReserveData memory reserve = getReserveData(_reserve);\\n        address vToken;\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            vToken = reserve.juniorDepositTokenAddress;\\n        } else {\\n            vToken = reserve.seniorDepositTokenAddress;\\n        }\\n        return IVToken(vToken).maxWithdraw(_user);\\n    }\\n\\n    function utilizationRate(address _reserve) external view returns (uint256) {\\n        DataTypes.ReserveData memory reserve = getReserveData(_reserve);\\n\\n        uint256 totalPrincipal;\\n        uint256 totalInterest;\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        (totalPrincipal, totalInterest) = lms.getTotalDebt(_reserve);\\n        uint256 totalDebt = totalPrincipal.add(totalInterest);\\n\\n        uint256 totalPendingWithdrawal = IVToken(\\n            reserve.seniorDepositTokenAddress\\n        ).totalUnbonding();\\n\\n        uint256 availableLiquidity = IERC20(_reserve).balanceOf(\\n            reserve.seniorDepositTokenAddress\\n        ) - totalPendingWithdrawal;\\n\\n        uint256 utilizationRate = totalDebt == 0\\n            ? 0\\n            : totalDebt.rayDiv(availableLiquidity.add(totalDebt));\\n\\n        return utilizationRate;\\n    }\\n\\n    /******************************************** Events *******************************************/\\n\\n    function trancheToBytes32(ReserveLogic.Tranche tranche)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return ReserveLogic.trancheToBytes32(tranche);\\n    }\\n\\n    event Deposit(\\n        address indexed asset,\\n        address indexed user,\\n        uint8 indexed tranche,\\n        uint256 amount\\n    );\\n\\n    bytes32 internal constant DEPOSIT_SIG =\\n        keccak256(\\\"Deposit(address,address,uint8,uint256)\\\");\\n\\n    bytes32 internal constant WITHDRAW_SIG =\\n        keccak256(\\\"Withdraw(address,address,uint8,uint256)\\\");\\n\\n    function emitDeposit(\\n        address asset,\\n        address user,\\n        ReserveLogic.Tranche tranche,\\n        uint256 amount\\n    ) internal {\\n        proxy._emit(\\n            abi.encode(amount),\\n            4,\\n            DEPOSIT_SIG,\\n            addressToBytes32(asset),\\n            addressToBytes32(user),\\n            trancheToBytes32(tranche)\\n        );\\n    }\\n\\n    function emitWithdraw(\\n        address asset,\\n        address user,\\n        ReserveLogic.Tranche tranche,\\n        uint256 amount\\n    ) internal {\\n        proxy._emit(\\n            abi.encode(amount),\\n            4,\\n            WITHDRAW_SIG,\\n            addressToBytes32(asset),\\n            addressToBytes32(user),\\n            trancheToBytes32(tranche)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xff9314fb94ea387551215c09839608ea4359b053cf8b8578e2ae1a7192a127c4\",\"license\":\"GPL-3.0\"},\"contracts/component/liquidity/ReserveManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Voyager} from \\\"../Voyager.sol\\\";\\nimport {Errors} from \\\"../../libraries/helpers/Errors.sol\\\";\\nimport {LiquidityManagerStorage} from \\\"../shared/storage/LiquidityManagerStorage.sol\\\";\\nimport {AddressResolver} from \\\"../infra/AddressResolver.sol\\\";\\nimport {Proxyable} from \\\"../../libraries/proxy/Proxyable.sol\\\";\\nimport {ReserveLogic} from \\\"../../libraries/logic/ReserveLogic.sol\\\";\\nimport {DataTypes} from \\\"../../libraries/types/DataTypes.sol\\\";\\nimport {IReserveManager} from \\\"../../interfaces/IReserveManager.sol\\\";\\nimport {IVoyagerComponent} from \\\"../../interfaces/IVoyagerComponent.sol\\\";\\nimport {IACLManager} from \\\"../../interfaces/IACLManager.sol\\\";\\n\\nabstract contract ReserveManager is Proxyable, IReserveManager {\\n    constructor(address payable _proxy, address payable _voyager)\\n        Proxyable(_proxy)\\n    {\\n        voyager = Voyager(_voyager);\\n    }\\n\\n    modifier onlyAdmin() {\\n        _requireCallerAdmin();\\n        _;\\n    }\\n\\n    /************************************** HouseKeeping Functions **************************************/\\n\\n    /**\\n     * @dev Pause the protocol\\n     **/\\n    function pause() external onlyProxy onlyAdmin {\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).pause();\\n    }\\n\\n    /**\\n     * @dev UnPause the protocol\\n     **/\\n    function unPause() external onlyProxy onlyAdmin {\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).unPause();\\n    }\\n\\n    /**\\n     * @dev Initializes a reserve, activating it, assigning two deposit tokens and an interest rate strategy\\n     * Only callable by protocol operator\\n     * @param _asset The address of the underlying asset of the reserve\\n     * @param _juniorDepositTokenAddress The address of the junior deposit token that will be assigned to the reserve\\n     * @param _seniorDepositTokenAddress The address of the senior deposit token that will be assigned to the reserve\\n     * @param _interestRateStrategyAddress The address of the interest rate strategy contract\\n     * @param _optimalIncomeRatio The ratio of income ratio\\n     **/\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress,\\n        address _loanStrategyAddress,\\n        uint256 _optimalIncomeRatio\\n    ) external onlyProxy onlyAdmin {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).initReserve(\\n            _asset,\\n            _juniorDepositTokenAddress,\\n            _seniorDepositTokenAddress,\\n            _interestRateStrategyAddress,\\n            _healthStrategyAddress,\\n            _loanStrategyAddress,\\n            _optimalIncomeRatio\\n        );\\n        emitReserveInitialized(\\n            _asset,\\n            _juniorDepositTokenAddress,\\n            _seniorDepositTokenAddress,\\n            _interestRateStrategyAddress,\\n            _healthStrategyAddress,\\n            _optimalIncomeRatio\\n        );\\n    }\\n\\n    /**\\n     * @dev Active a reserve for borrowing\\n     * @param _asset The address of the reserve\\n     **/\\n    function activeReserve(address _asset) external onlyProxy onlyAdmin {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        LiquidityManagerStorage(liquidityManagerStorageAddress()).activeReserve(\\n                _asset\\n            );\\n        emitReserveActivated(_asset);\\n    }\\n\\n    /************************************** View Functions **************************************/\\n\\n    function getReserveData(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getReserveData(_asset);\\n    }\\n\\n    function getReserveList() external view returns (address[] memory) {\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getReserveList();\\n    }\\n\\n    function getConfiguration(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getConfiguration(_asset);\\n    }\\n\\n    function getFlags(address _asset)\\n        public\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress()).getFlags(\\n                _asset\\n            );\\n    }\\n\\n    function getLiquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(Address.isContract(_asset), Errors.LM_NOT_CONTRACT);\\n        return\\n            LiquidityManagerStorage(liquidityManagerStorageAddress())\\n                .getLiquidityRate(_asset, _tranche);\\n    }\\n\\n    function _requireCallerAdmin() internal {\\n        Voyager v = Voyager(voyager);\\n        AddressResolver addressResolver = v.addressResolver();\\n        address aclAddress = addressResolver.getAclManager();\\n        IACLManager aclManager = IACLManager(aclAddress);\\n        require(\\n            aclManager.isLiquidityManager(messageSender),\\n            \\\"Not vault admin\\\"\\n        );\\n    }\\n\\n    /******************************************** Events *******************************************/\\n\\n    function addressToBytes32(address input) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(input)));\\n    }\\n\\n    event ReserveInitialized(\\n        address indexed _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress,\\n        uint256 _optimalIncomeRatio\\n    );\\n    bytes32 internal constant RESERVE_INITIALIZED_SIG =\\n        keccak256(\\n            \\\"ReserveInitialized(address,address,address,address,address,uint256)\\\"\\n        );\\n\\n    function emitReserveInitialized(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress,\\n        uint256 _optimalIncomeRatio\\n    ) internal {\\n        proxy._emit(\\n            abi.encode(\\n                _juniorDepositTokenAddress,\\n                _seniorDepositTokenAddress,\\n                _interestRateStrategyAddress,\\n                _healthStrategyAddress,\\n                _optimalIncomeRatio\\n            ),\\n            2,\\n            RESERVE_INITIALIZED_SIG,\\n            addressToBytes32(_asset),\\n            0,\\n            0\\n        );\\n    }\\n\\n    event ReserveActivated(address indexed _asset);\\n    bytes32 internal constant RESERVE_ACTIVATED_SIG =\\n        keccak256(\\\"ReserveActivated(address)\\\");\\n\\n    function emitReserveActivated(address _asset) internal {\\n        bytes memory data;\\n        proxy._emit(\\n            data,\\n            2,\\n            RESERVE_ACTIVATED_SIG,\\n            addressToBytes32(_asset),\\n            0,\\n            0\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x6172bdffffbbba982ecb659eb138f9c11acfb892f29a704856859adba0de9f45\",\"license\":\"GPL-3.0\"},\"contracts/component/loan/LoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {LiquidityManagerStorage} from \\\"../../component/shared/storage/LiquidityManagerStorage.sol\\\";\\nimport {Proxyable} from \\\"../../libraries/proxy/Proxyable.sol\\\";\\nimport {Errors} from \\\"../../libraries/helpers/Errors.sol\\\";\\nimport {WadRayMath} from \\\"../../libraries/math/WadRayMath.sol\\\";\\nimport {DataTypes} from \\\"../../libraries/types/DataTypes.sol\\\";\\nimport {IVoyagerComponent} from \\\"../../interfaces/IVoyagerComponent.sol\\\";\\nimport {IMessageBus} from \\\"../../interfaces/IMessageBus.sol\\\";\\nimport {IHealthStrategy} from \\\"../../interfaces/IHealthStrategy.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {ILoanStrategy} from \\\"../../interfaces/ILoanStrategy.sol\\\";\\nimport {IVault} from \\\"../../interfaces/IVault.sol\\\";\\nimport {IVToken} from \\\"../../interfaces/IVToken.sol\\\";\\nimport {ILoanManager} from \\\"../../interfaces/ILoanManager.sol\\\";\\nimport {Voyager} from \\\"../Voyager.sol\\\";\\n\\ncontract LoanManager is Proxyable, ILoanManager {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address payable _proxy, address payable _voyager)\\n        Proxyable(_proxy)\\n    {\\n        voyager = Voyager(_voyager);\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        uint256 amount;\\n        uint256 term;\\n        uint256 epoch;\\n        uint256 liquidityRate;\\n        uint256 borrowRate;\\n    }\\n\\n    function borrow(\\n        address _user,\\n        address _asset,\\n        uint256 _amount,\\n        address payable _vault,\\n        uint256 _grossAssetValue\\n    ) external requireNotPaused onlyProxy {\\n        ExecuteBorrowParams memory executeBorrowParams;\\n        // todo use min security deposit\\n        require(_amount >= 1e19, Errors.LOM_INVALID_AMOUNT);\\n\\n        // 0. check if the user owns the vault\\n        require(voyager.getVault(_user) == _vault, Errors.LOM_NOT_VAULT_OWNER);\\n\\n        // 1. check if pool liquidity is sufficient\\n        DataTypes.ReserveData memory reserveData = voyager.getReserveData(\\n            _asset\\n        );\\n\\n        uint256 availableSeniorLiquidity = IERC20(_asset).balanceOf(\\n            reserveData.seniorDepositTokenAddress\\n        );\\n        require(\\n            availableSeniorLiquidity >= _amount,\\n            Errors.LOM_RESERVE_NOT_SUFFICIENT\\n        );\\n\\n        // 2. check HF\\n        //        IHealthStrategy healthStrategy = IHealthStrategy(\\n        //            reserveData.healthStrategyAddress\\n        //        );\\n\\n        // 3. check credit limit\\n        uint256 availableCreditLimit = voyager.getAvailableCredit(\\n            _user,\\n            _asset\\n        );\\n\\n        require(\\n            availableCreditLimit >= _amount,\\n            Errors.LOM_CREDIT_NOT_SUFFICIENT\\n        );\\n\\n        // 4. update debt logic\\n        executeBorrowParams.term = ILoanStrategy(\\n            reserveData.loanStrategyAddress\\n        ).getTerm();\\n        executeBorrowParams.epoch = ILoanStrategy(\\n            reserveData.loanStrategyAddress\\n        ).getEpoch();\\n\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n\\n        // 5. update liquidity index and interest rate\\n        DataTypes.BorrowStat memory borrowStat = lms.getBorrowStat(_asset);\\n        (\\n            executeBorrowParams.liquidityRate,\\n            executeBorrowParams.borrowRate\\n        ) = IReserveInterestRateStrategy(\\n            reserveData.interestRateStrategyAddress\\n        ).calculateInterestRates(\\n                _asset,\\n                reserveData.seniorDepositTokenAddress,\\n                0,\\n                _amount,\\n                borrowStat.totalDebt,\\n                borrowStat.avgBorrowRate\\n            );\\n        lms.updateStateOnBorrow(\\n            _asset,\\n            _amount,\\n            borrowStat.totalDebt.add(borrowStat.totalInterest),\\n            executeBorrowParams.borrowRate\\n        );\\n\\n        lms.insertDebt(\\n            _asset,\\n            _vault,\\n            _amount,\\n            executeBorrowParams.term,\\n            executeBorrowParams.epoch,\\n            executeBorrowParams.borrowRate\\n        );\\n\\n        IVToken(reserveData.seniorDepositTokenAddress).transferUnderlyingTo(\\n            _vault,\\n            _amount\\n        );\\n    }\\n\\n    function repay(\\n        address _user,\\n        address _asset,\\n        uint256 _drawDown,\\n        address payable _vault\\n    ) external requireNotPaused onlyProxy {\\n        // 0. check if the user owns the vault\\n        require(voyager.getVault(_user) == _vault, Errors.LOM_NOT_VAULT_OWNER);\\n\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n\\n        // 1. check draw down to get principal and interest\\n        uint256 principal;\\n        uint256 interest;\\n        (principal, interest) = lms.getPMT(_asset, _vault, _drawDown);\\n        require(principal.add(interest) != 0, Errors.LOM_INVALID_DEBT);\\n\\n        // 2. update liquidity index and interest rate\\n        DataTypes.BorrowStat memory borrowStat = lms.getBorrowStat(_asset);\\n        uint256 totalDebt = borrowStat.totalDebt.add(borrowStat.totalInterest);\\n        uint256 avgBorrowRate = borrowStat.avgBorrowRate;\\n        lms.updateStateOnRepayment(\\n            _asset,\\n            principal.add(interest),\\n            totalDebt,\\n            avgBorrowRate\\n        );\\n\\n        // 3. update repay data\\n        lms.repay(_asset, _vault, _drawDown, principal, interest);\\n\\n        // 4. transfer underlying asset\\n        DataTypes.ReserveData memory reserveData = voyager.getReserveData(\\n            _asset\\n        );\\n\\n        IERC20(_asset).safeTransferFrom(\\n            _user,\\n            reserveData.seniorDepositTokenAddress,\\n            principal.add(interest)\\n        );\\n    }\\n\\n    function getVaultDebt(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        return lms.getVaultDebt(_reserve, _vault);\\n    }\\n\\n    function getDrawDownList(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        return lms.getDrawDownList(_reserve, _vault);\\n    }\\n\\n    function getDrawDownDetail(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDownId\\n    ) external view returns (DataTypes.DebtDetail memory) {\\n        LiquidityManagerStorage lms = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        );\\n        return lms.getDrawDownDetail(_reserve, _vault, _drawDownId);\\n    }\\n\\n    /// @notice Returns the total outstanding principal debt for a particular underlying asset pool\\n    /// @param underlyingAsset the address of the underlying reserve asset\\n    /// @return The total outstanding principal owed to depositors.\\n    function principalBalance(address underlyingAsset)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        DataTypes.BorrowStat memory borrowState = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        ).getBorrowStat(underlyingAsset);\\n        return borrowState.totalDebt;\\n    }\\n\\n    /// @notice Returns the total outstanding interest debt for a particular underlying asset pool\\n    /// @param underlyingAsset the address of the underlying reserve asset\\n    /// @return The total outstanding interest owed to depositors.\\n    function interestBalance(address underlyingAsset)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        DataTypes.BorrowStat memory borrowState = LiquidityManagerStorage(\\n            liquidityManagerStorageAddress()\\n        ).getBorrowStat(underlyingAsset);\\n        return borrowState.totalInterest;\\n    }\\n}\\n\",\"keccak256\":\"0xc8e0077099221a1a9b60bf97911872a8fc6a8d09515ac555b0601b4649d27fbe\",\"license\":\"GPL-3.0\"},\"contracts/component/loan/LoanManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DataTypes} from \\\"../../libraries/types/DataTypes.sol\\\";\\nimport {Proxy} from \\\"../../libraries/proxy/Proxy.sol\\\";\\nimport {LoanManager} from \\\"./LoanManager.sol\\\";\\nimport {ILoanManager} from \\\"../../interfaces/ILoanManager.sol\\\";\\nimport {ILoanManagerProxy} from \\\"../../interfaces/ILoanManagerProxy.sol\\\";\\n\\ncontract LoanManagerProxy is ILoanManagerProxy, Proxy {\\n    function getVaultDebt(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return LoanManager(address(target)).getVaultDebt(_reserve, _vault);\\n    }\\n\\n    function getDrawDownList(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return LoanManager(address(target)).getDrawDownList(_reserve, _vault);\\n    }\\n\\n    function getDrawDownDetail(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDownId\\n    ) external view returns (DataTypes.DebtDetail memory) {\\n        return\\n            LoanManager(address(target)).getDrawDownDetail(\\n                _reserve,\\n                _vault,\\n                _drawDownId\\n            );\\n    }\\n\\n    function principalBalance(address _asset) external view returns (uint256) {\\n        return LoanManager(address(target)).principalBalance(_asset);\\n    }\\n}\\n\",\"keccak256\":\"0x5bde66a80efc05f7049fe8b8eba0b50b2ac8443044cb943c2c885f4295a976bd\",\"license\":\"GPL-3.0\"},\"contracts/component/shared/storage/LiquidityManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Errors} from \\\"../../../libraries/helpers/Errors.sol\\\";\\nimport {State} from \\\"../../../libraries/state/State.sol\\\";\\nimport {DataTypes} from \\\"../../../libraries/types/DataTypes.sol\\\";\\nimport {ReserveLogic} from \\\"../../../libraries/logic/ReserveLogic.sol\\\";\\nimport {DebtLogic} from \\\"../../../libraries/logic/DebtLogic.sol\\\";\\nimport {ValidationLogic} from \\\"../../../libraries/logic/ValidationLogic.sol\\\";\\nimport {ReserveConfiguration} from \\\"../../../libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {WadRayMath} from \\\"../../../libraries/math/WadRayMath.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract LiquidityManagerStorage is State {\\n    using ReserveLogic for DataTypes.ReserveData;\\n    using DebtLogic for DataTypes.BorrowData;\\n    using DebtLogic for DataTypes.BorrowStat;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    mapping(address => DataTypes.ReserveData) internal _reserves;\\n\\n    // asset => vault address => borrow data\\n    mapping(address => mapping(address => DataTypes.BorrowData))\\n        internal _borrowData;\\n\\n    mapping(address => DataTypes.BorrowStat) internal _borrowStat;\\n\\n    // List of reserves as a map (reserveId => reserve)\\n    mapping(uint256 => address) internal _reserveList;\\n\\n    // Maximum number of active reserves there have been in the protocol. It is the upper bound of the reserves list\\n    uint16 internal _reservesCount;\\n\\n    bool internal _paused;\\n\\n    constructor(address _liquidityManager) State(_liquidityManager) {}\\n\\n    function insertDebt(\\n        address _reserve,\\n        address _vault,\\n        uint256 _principal,\\n        uint256 _term,\\n        uint256 _epoch,\\n        uint256 _apr\\n    ) external onlyAssociatedContract {\\n        _borrowData[_reserve][_vault].insertDrawDown(\\n            _borrowStat[_reserve],\\n            _principal,\\n            _term,\\n            _epoch,\\n            _apr\\n        );\\n    }\\n\\n    function repay(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDownNumber,\\n        uint256 _principal,\\n        uint256 _interest\\n    ) external onlyAssociatedContract {\\n        _borrowData[_reserve][_vault].repay(\\n            _borrowStat[_reserve],\\n            _drawDownNumber,\\n            _principal,\\n            _interest\\n        );\\n    }\\n\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress,\\n        address _loanStrategyAddress,\\n        uint256 _optimalIncomeRatio\\n    ) external onlyAssociatedContract {\\n        _reserves[_asset].init(\\n            _juniorDepositTokenAddress,\\n            _seniorDepositTokenAddress,\\n            _interestRateStrategyAddress,\\n            _healthStrategyAddress,\\n            _loanStrategyAddress,\\n            _optimalIncomeRatio\\n        );\\n\\n        _reserveList[_reservesCount] = _asset;\\n        _reservesCount++;\\n    }\\n\\n    function updateStateOnDeposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        uint256 _totalDebt,\\n        uint256 _avgBorrowRate\\n    ) public onlyAssociatedContract {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        ValidationLogic.validateDeposit(reserve, _amount);\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            reserve.updateInterestRates(\\n                _asset,\\n                reserve.juniorDepositTokenAddress,\\n                reserve.seniorDepositTokenAddress,\\n                _amount,\\n                0,\\n                0,\\n                0,\\n                _totalDebt,\\n                _avgBorrowRate\\n            );\\n        } else {\\n            reserve.updateInterestRates(\\n                _asset,\\n                reserve.juniorDepositTokenAddress,\\n                reserve.seniorDepositTokenAddress,\\n                0,\\n                0,\\n                _amount,\\n                0,\\n                _totalDebt,\\n                _avgBorrowRate\\n            );\\n        }\\n    }\\n\\n    function updateStateOnWithdraw(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        uint256 _totalDebt,\\n        uint256 _avgBorrowRate\\n    ) public onlyAssociatedContract {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        if (ReserveLogic.Tranche.JUNIOR == _tranche) {\\n            reserve.updateInterestRates(\\n                _asset,\\n                reserve.juniorDepositTokenAddress,\\n                reserve.seniorDepositTokenAddress,\\n                0,\\n                _amount,\\n                0,\\n                0,\\n                _totalDebt,\\n                _avgBorrowRate\\n            );\\n        } else {\\n            reserve.updateInterestRates(\\n                _asset,\\n                reserve.juniorDepositTokenAddress,\\n                reserve.seniorDepositTokenAddress,\\n                0,\\n                0,\\n                0,\\n                0,\\n                _totalDebt,\\n                _avgBorrowRate\\n            );\\n        }\\n    }\\n\\n    function updateStateOnBorrow(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _totalDebt,\\n        uint256 _avgBorrowRate\\n    ) public onlyAssociatedContract {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        reserve.updateInterestRates(\\n            _asset,\\n            reserve.juniorDepositTokenAddress,\\n            reserve.seniorDepositTokenAddress,\\n            0,\\n            0,\\n            0,\\n            _amount,\\n            _totalDebt,\\n            _avgBorrowRate\\n        );\\n    }\\n\\n    function updateStateOnRepayment(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _totalDebt,\\n        uint256 _avgBorrowRate\\n    ) public onlyAssociatedContract {\\n        DataTypes.ReserveData storage reserve = _reserves[_asset];\\n        reserve.updateInterestRates(\\n            _asset,\\n            reserve.juniorDepositTokenAddress,\\n            reserve.seniorDepositTokenAddress,\\n            0,\\n            0,\\n            _amount,\\n            0,\\n            _totalDebt,\\n            _avgBorrowRate\\n        );\\n    }\\n\\n    function activeReserve(address _asset) public onlyAssociatedContract {\\n        DataTypes.ReserveConfigurationMap\\n            memory currentConfig = getConfiguration(_asset);\\n        currentConfig.setActive(true);\\n        setConfiguration(_asset, currentConfig.data);\\n    }\\n\\n    function pause() public onlyAssociatedContract {\\n        _paused = true;\\n    }\\n\\n    function unPause() public onlyAssociatedContract {\\n        _paused = false;\\n    }\\n\\n    /*********************************************** View functions ***********************************************/\\n\\n    function getFlags(address _asset)\\n        public\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        DataTypes.ReserveConfigurationMap\\n            memory currentConfig = getConfiguration(_asset);\\n        return currentConfig.getFlags();\\n    }\\n\\n    function getReserveData(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        return _reserves[_asset];\\n    }\\n\\n    function getReserveList() public view returns (address[] memory) {\\n        address[] memory reserveList = new address[](_reservesCount);\\n        for (uint256 i = 0; i < _reservesCount; i++) {\\n            reserveList[i] = _reserveList[i];\\n        }\\n        return reserveList;\\n    }\\n\\n    function getConfiguration(address _asset)\\n        public\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        return _reserves[_asset].configuration;\\n    }\\n\\n    function setConfiguration(address _asset, uint256 configuration) internal {\\n        _reserves[_asset].configuration.data = configuration;\\n    }\\n\\n    function getLiquidityRate(address _asset, ReserveLogic.Tranche _tranche)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _reserves[_asset].getLiquidityRate(_tranche);\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    function getDepositAndDebt(address _reserve)\\n        public\\n        view\\n        returns (DataTypes.DepositAndDebt memory)\\n    {\\n        DataTypes.ReserveData storage reserve = _reserves[_reserve];\\n        DataTypes.BorrowStat storage borrowStat = _borrowStat[_reserve];\\n        DataTypes.DepositAndDebt memory res;\\n        res.juniorDepositAmount = IERC20(reserve.juniorDepositTokenAddress)\\n            .totalSupply();\\n        res.seniorDepositAmount = IERC20(reserve.seniorDepositTokenAddress)\\n            .totalSupply();\\n        (res.totalDebt, res.totalInterest, res.avgBorrowRate) = (\\n            borrowStat.totalDebt,\\n            borrowStat.totalInterest,\\n            borrowStat.avgBorrowRate\\n        );\\n        return res;\\n    }\\n\\n    function getPMT(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDown\\n    ) public view returns (uint256, uint256) {\\n        DataTypes.DrawDown storage dd = _borrowData[_reserve][_vault].drawDowns[\\n            _drawDown\\n        ];\\n        return (dd.pmt.principal, dd.pmt.interest);\\n    }\\n\\n    function getVaultDebt(address _reserve, address _vault)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        DataTypes.BorrowData storage borrowData = _borrowData[_reserve][_vault];\\n        return (borrowData.totalPrincipal, borrowData.totalInterest);\\n    }\\n\\n    function getTotalDebt(address _reserve)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        DataTypes.BorrowStat storage borrowStat = _borrowStat[_reserve];\\n        return (borrowStat.totalDebt, borrowStat.totalInterest);\\n    }\\n\\n    function getBorrowStat(address _reserve)\\n        public\\n        view\\n        returns (DataTypes.BorrowStat memory)\\n    {\\n        return _borrowStat[_reserve];\\n    }\\n\\n    function getDrawDownList(address _reserve, address _vault)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        DataTypes.BorrowData storage borrowData = _borrowData[_reserve][_vault];\\n        return (borrowData.paidDrawDownNumber, borrowData.nextDrawDownNumber);\\n    }\\n\\n    function getDrawDownDetail(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDownId\\n    ) public view returns (DataTypes.DebtDetail memory) {\\n        DataTypes.BorrowData storage borrowData = _borrowData[_reserve][_vault];\\n        return borrowData.getDrawDownDetail(_drawDownId);\\n    }\\n}\\n\",\"keccak256\":\"0x419965de55db0db4357e6491d2d5cd7e3d97998664110c665f2eade210704d75\",\"license\":\"GPL-3.0\"},\"contracts/component/staking/RewardsDistributionRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract RewardsDistributionRecipient is Ownable {\\n    address public rewardsDistribution;\\n\\n    function notifyRewardAmount(uint256 reward) external virtual;\\n\\n    modifier onlyRewardsDistribution() {\\n        require(\\n            msg.sender == rewardsDistribution,\\n            \\\"Caller is not RewardsDistribution contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function setRewardsDistribution(address _rewardsDistribution)\\n        external\\n        onlyOwner\\n    {\\n        rewardsDistribution = _rewardsDistribution;\\n    }\\n}\\n\",\"keccak256\":\"0xdd92fd7b3552fa2b72811d08f2656fd7712eef79b4374ce6ff88c0ae4d5a2c3e\",\"license\":\"GPL-3.0\"},\"contracts/component/staking/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {RewardsDistributionRecipient} from \\\"./RewardsDistributionRecipient.sol\\\";\\n\\ncontract StakingRewards is\\n    ReentrancyGuard,\\n    RewardsDistributionRecipient,\\n    Pausable\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public stakingToken;\\n    IERC20 public rewardsToken;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardsDuration = 7 days;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    constructor(address _stakingToken, address _rewardsToken) {\\n        stakingToken = IERC20(_stakingToken);\\n        rewardsToken = IERC20(_rewardsToken);\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function stake(uint256 amount)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            _balances[account]\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(rewardsDuration);\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlyRewardsDistribution\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardsToken.balanceOf(address(this));\\n        require(\\n            rewardRate <= balance.div(rewardsDuration),\\n            \\\"Provided reward too high\\\"\\n        );\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n        require(\\n            block.timestamp > periodFinish,\\n            \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n}\\n\",\"keccak256\":\"0x51678a6fc0dae499e3804ba2893025bcbb5126eae91479da824cd4944570787c\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/BaseSecurityEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {EthAddressLib} from \\\"../../libraries/EthAddressLib.sol\\\";\\n\\ncontract BaseSecurityEscrow is ReentrancyGuard {\\n    using Address for address payable;\\n    using SafeERC20 for ERC20;\\n\\n    struct Deposit {\\n        uint256 amount;\\n        uint40 depositTime;\\n    }\\n\\n    event Deposited(address indexed payee, address token, uint256 amount);\\n    event Withdrawn(address indexed payee, address token, uint256 amount);\\n\\n    // reserve address => amount\\n    mapping(address => uint256) private _deposits;\\n    // reserve address => user address => deposit record\\n    mapping(address => mapping(address => Deposit[])) private _depositRecords;\\n\\n    uint40 private _lockupTimeInSeconds = 7 days;\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param _reserve the asset address\\n     * @param _user user address who deposit to this escrow\\n     * @param _amount token amount need to transfer\\n     */\\n    function _deposit(\\n        address _reserve,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        if (_reserve != EthAddressLib.ethAddress()) {\\n            require(\\n                msg.value == 0,\\n                \\\"User is sending ETH along with the ERC20 transfer.\\\"\\n            );\\n            ERC20(_reserve).safeTransferFrom(_user, address(this), _amount);\\n        } else {\\n            require(\\n                msg.value == _amount,\\n                \\\"The amount and the value sent to deposit do not match\\\"\\n            );\\n        }\\n        _deposits[_reserve] += _amount;\\n        Deposit memory deposit = Deposit(_amount, uint40(block.timestamp));\\n        _depositRecords[_reserve][_user].push(deposit);\\n        emit Deposited(_user, _reserve, _amount);\\n    }\\n\\n    function eligibleAmount(address _reserve, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Deposit[] storage deposits = _depositRecords[_reserve][_user];\\n        uint256 eligibleAmount = 0;\\n        for (uint256 i = 0; i < deposits.length; i++) {\\n            if (\\n                uint40(block.timestamp) - deposits[i].depositTime >\\n                _lockupTimeInSeconds\\n            ) {\\n                eligibleAmount += deposits[i].amount;\\n            }\\n        }\\n        return eligibleAmount;\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, only beyond _lockupTimeInSeconds\\n     * @param _reserve the asset address\\n     * @param _user user address who deposit to this escrow\\n     */\\n    function _withdraw(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) internal {\\n        Deposit[] storage deposits = _depositRecords[_reserve][_user];\\n        uint256 eligibleAmount = 0;\\n        uint40 lastUpdateTime;\\n        for (uint256 i = 0; i < deposits.length; i++) {\\n            if (\\n                uint40(block.timestamp) - deposits[i].depositTime >\\n                _lockupTimeInSeconds\\n            ) {\\n                eligibleAmount += deposits[i].amount;\\n                lastUpdateTime = deposits[i].depositTime;\\n                delete deposits[i];\\n            }\\n        }\\n\\n        require(\\n            eligibleAmount >= _amount,\\n            \\\"Do not have enough amount to withdraw\\\"\\n        );\\n        // todo check borrow amount\\n        // if there is any amount left from eligible amount, push it back\\n        if (eligibleAmount > _amount) {\\n            uint256 leftAmount = eligibleAmount - _amount;\\n            Deposit memory leftDeposit = Deposit(leftAmount, lastUpdateTime);\\n            _depositRecords[_reserve][_user].push(leftDeposit);\\n        }\\n\\n        _deposits[_reserve] -= _amount;\\n        transferToUser(_reserve, _user, _amount);\\n        emit Withdrawn(_user, _reserve, _amount);\\n    }\\n\\n    /**\\n     * @dev get accumulated amount of deposit.\\n     * @param _reserve the address of the reserve where the transfer is happening\\n     * @return accumulated deposit amount\\n     **/\\n    function getDepositAmount(address _reserve) public view returns (uint256) {\\n        return _deposits[_reserve];\\n    }\\n\\n    /**\\n     * @dev get all records of deposit.\\n     * @param _reserve the address of the reserve where the transfer is happening\\n     * @param _user the address of the user receiving the transfer\\n     * @return deposit records\\n     **/\\n    function getDepositRecords(address _reserve, address _user)\\n        public\\n        view\\n        returns (Deposit[] memory)\\n    {\\n        Deposit[] storage deposits = _depositRecords[_reserve][_user];\\n        return deposits;\\n    }\\n\\n    /**\\n     * @dev transfers to the user a specific amount from the reserve.\\n     * @param _reserve the address of the reserve where the transfer is happening\\n     * @param _user the address of the user receiving the transfer\\n     * @param _amount the amount being transferred\\n     **/\\n    function transferToUser(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) internal {\\n        if (_reserve != EthAddressLib.ethAddress()) {\\n            ERC20(_reserve).safeTransfer(_user, _amount);\\n        } else {\\n            //solium-disable-next-line\\n            (bool result, ) = _user.call{value: _amount}(\\\"\\\");\\n            require(result, \\\"Transfer of ETH failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe5f1ee9a80430b147157ffe48a254ba9cd9cba0ce2d4faa1fe3de5a11e3c87cb\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/SecurityDepositEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {BaseSecurityEscrow} from \\\"./BaseSecurityEscrow.sol\\\";\\n\\ncontract SecurityDepositEscrow is BaseSecurityEscrow {\\n    address public vault;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == vault, \\\"Not vault\\\");\\n        _;\\n    }\\n\\n    constructor(address _vault) {\\n        vault = _vault;\\n    }\\n\\n    function getVersion() external view returns (string memory) {\\n        string memory version = \\\"SecurityDepositEscrow 0.0.1\\\";\\n        return version;\\n    }\\n\\n    // placeholder function\\n    function slash(\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) public payable nonReentrant onlyOwner {\\n        transferToUser(_reserve, _to, _amount);\\n    }\\n\\n    function deposit(\\n        address _reserve,\\n        address _user,\\n        uint256 _amount\\n    ) public payable nonReentrant onlyOwner {\\n        _deposit(_reserve, _user, _amount);\\n    }\\n\\n    function withdraw(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        _withdraw(_reserve, _user, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xed52ed5bd055a615d488f66f4437ddd2be66854edbe334912fc29cfb8f678ddf\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {SecurityDepositEscrow} from \\\"./SecurityDepositEscrow.sol\\\";\\nimport {AddressResolver} from \\\"../infra/AddressResolver.sol\\\";\\nimport {Voyager} from \\\"../Voyager.sol\\\";\\nimport {VaultManager} from \\\"./VaultManager.sol\\\";\\nimport {StakingRewards} from \\\"../staking/StakingRewards.sol\\\";\\nimport {LoanManagerProxy} from \\\"../loan/LoanManagerProxy.sol\\\";\\nimport {SecurityDepositToken} from \\\"../../tokenization/SecurityDepositToken.sol\\\";\\nimport {WadRayMath} from \\\"../../libraries/math/WadRayMath.sol\\\";\\nimport {IACLManager} from \\\"../../interfaces/IACLManager.sol\\\";\\nimport {IVault} from \\\"../../interfaces/IVault.sol\\\";\\nimport {ILoanManager} from \\\"../../interfaces/ILoanManager.sol\\\";\\nimport {IVaultManagerProxy} from \\\"../../interfaces/IVaultManagerProxy.sol\\\";\\nimport {DataTypes} from \\\"../../libraries/types/DataTypes.sol\\\";\\n\\ncontract Vault is ReentrancyGuard, IVault {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    bytes32 public constant BORROWER = keccak256(\\\"BORROWER\\\");\\n\\n    address payable public voyager;\\n    address[] public players;\\n    bool public initialized;\\n    SecurityDepositEscrow public securityDepositEscrow;\\n    SecurityDepositToken public securityDepositToken;\\n    StakingRewards public stakingContract;\\n\\n    //    uint256 public totalDebt;\\n    // todo oracle\\n    uint256 public gav;\\n\\n    modifier onlyLoanManager() {\\n        _requireCallerLoanManager();\\n        _;\\n    }\\n\\n    modifier onlyVaultManager() {\\n        _requireVaultManager();\\n        _;\\n    }\\n\\n    modifier onlyVaultManagerContract() {\\n        _requireCallerLoanManagerContract();\\n        _;\\n    }\\n\\n    function initialize(\\n        address _voyager,\\n        SecurityDepositEscrow _securityDepositEscrow\\n    ) external {\\n        if (!initialized) {\\n            voyager = payable(_voyager);\\n            securityDepositEscrow = _securityDepositEscrow;\\n            initialized = true;\\n        }\\n    }\\n\\n    function initSecurityDepositToken(address _reserve)\\n        external\\n        onlyVaultManager\\n    {\\n        require(\\n            address(securityDepositToken) == address(0),\\n            \\\"Vault: security deposit token has been initialized\\\"\\n        );\\n        ERC20 token = ERC20(_reserve);\\n        securityDepositToken = new SecurityDepositToken(\\n            _reserve,\\n            token.decimals(),\\n            token.name(),\\n            token.symbol()\\n        );\\n    }\\n\\n    function initStakingContract(address _reserve) external onlyVaultManager {\\n        require(\\n            address(stakingContract) == address(0),\\n            \\\"Vault: staking contract has been initialized\\\"\\n        );\\n        require(\\n            address(securityDepositToken) != address(0),\\n            \\\"Vault: security deposit token has not been initialized\\\"\\n        );\\n        stakingContract = new StakingRewards(\\n            address(securityDepositToken),\\n            _reserve\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer some deposit security\\n     * @param _sponsor user address who deposit to this escrow\\n     * @param _reserve reserve address\\n     * @param _amount deposit amount\\n     **/\\n    function depositMargin(\\n        address _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable nonReentrant onlyVaultManager {\\n        address vmp = Voyager(voyager).addressResolver().getVaultManagerProxy();\\n        IVaultManagerProxy vaultManagerProxy = IVaultManagerProxy(vmp);\\n        DataTypes.VaultConfig memory vaultConfig = vaultManagerProxy\\n            .getVaultConfig(_reserve);\\n\\n        // check max security deposit amount for this _reserve\\n        uint256 maxAllowedAmount = vaultConfig.maxSecurityDeposit;\\n        uint256 depositedAmount = securityDepositEscrow.getDepositAmount(\\n            _reserve\\n        );\\n        require(\\n            depositedAmount + _amount < maxAllowedAmount,\\n            \\\"Vault: deposit amount exceed\\\"\\n        );\\n\\n        // check min security deposit amount for this _reserve\\n        uint256 minAllowedAmount = vaultConfig.minSecurityDeposit;\\n        require(minAllowedAmount <= _amount, \\\"Vault: deposit too small\\\");\\n\\n        securityDepositEscrow.deposit(_reserve, _sponsor, _amount);\\n        securityDepositToken.mintOnDeposit(_sponsor, _amount);\\n    }\\n\\n    /**\\n     * @dev Redeem underlying reserve\\n     * @param _sponsor sponsor address\\n     * @param _reserve reserve address\\n     * @param _amount redeem amount\\n     **/\\n    function redeemMargin(\\n        address payable _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable nonReentrant onlyVaultManager {\\n        require(\\n            _amount <= _getWithdrawableDeposit(_sponsor, _reserve),\\n            \\\"Vault: cannot redeem more than withdrawable deposit amount\\\"\\n        );\\n        securityDepositEscrow.withdraw(\\n            _reserve,\\n            _sponsor,\\n            _underlyingBalance(_sponsor, _reserve)\\n        );\\n        securityDepositToken.burnOnRedeem(_sponsor, _amount);\\n    }\\n\\n    // placeholder function\\n    function slash(\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) external nonReentrant onlyVaultManager {\\n        securityDepositEscrow.slash(_reserve, _to, _amount);\\n    }\\n\\n    /************************************** View Functions **************************************/\\n\\n    /**\\n     * @dev get current security amount\\n     * @param _reserve underlying asset address\\n     **/\\n    function getCurrentSecurityDeposit(address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return securityDepositEscrow.getDepositAmount(_reserve);\\n    }\\n\\n    function getActualSecurityDeposit(address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return ERC20(_reserve).balanceOf(address(securityDepositEscrow));\\n    }\\n\\n    function getGav() external view returns (uint256) {\\n        return gav;\\n    }\\n\\n    function getWithdrawableDeposit(address _sponsor, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getWithdrawableDeposit(_sponsor, _reserve);\\n    }\\n\\n    function underlyingBalance(address _sponsor, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _underlyingBalance(_sponsor, _reserve);\\n    }\\n\\n    function getSecurityDepositTokenAddress() external view returns (address) {\\n        return address(securityDepositToken);\\n    }\\n\\n    function getStakingContractAddress() external view returns (address) {\\n        return address(stakingContract);\\n    }\\n\\n    /**\\n     * @dev Get SecurityDepositEscrow contract address\\n     * @return address\\n     **/\\n    function getMarginDepositEscrowAddress() external view returns (address) {\\n        return address(securityDepositEscrow);\\n    }\\n\\n    function getVersion() external view returns (string memory) {\\n        string memory version = \\\"Vault 0.0.1\\\";\\n        return version;\\n    }\\n\\n    /************************************** Internal Functions **************************************/\\n\\n    function _requireCallerLoanManager() internal {\\n        Voyager v = Voyager(voyager);\\n        IACLManager aclManager = IACLManager(\\n            v.addressResolver().getAclManager()\\n        );\\n        require(\\n            aclManager.isLoanManager(msg.sender),\\n            \\\"Not loan manager contract\\\"\\n        );\\n    }\\n\\n    function _requireCallerLoanManagerContract() internal {\\n        Voyager v = Voyager(voyager);\\n        IACLManager aclManager = IACLManager(\\n            v.addressResolver().getAclManager()\\n        );\\n        require(\\n            aclManager.isLoanManagerContract(msg.sender),\\n            \\\"Not loan manager\\\"\\n        );\\n    }\\n\\n    function _requireVaultManager() internal {\\n        Voyager v = Voyager(voyager);\\n        IACLManager aclManager = IACLManager(\\n            v.addressResolver().getAclManager()\\n        );\\n        require(\\n            aclManager.isVaultManagerContract(msg.sender),\\n            \\\"Not vault manager contract\\\"\\n        );\\n    }\\n\\n    function _getVaultManagerAddress() internal view returns (address) {\\n        Voyager v = Voyager(voyager);\\n        return v.addressResolver().getVaultManager();\\n    }\\n\\n    function _underlyingBalance(address _sponsor, address _reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 amountToRedeemInRay = securityDepositToken\\n            .balanceOf(_sponsor)\\n            .wadToRay()\\n            .rayDiv(securityDepositToken.totalSupply().wadToRay())\\n            .rayMul(getActualSecurityDeposit(_reserve).wadToRay());\\n        return amountToRedeemInRay.rayToWad();\\n    }\\n\\n    function getVaultManagerProxyAddress() private view returns (address) {\\n        Voyager voyager = Voyager(voyager);\\n        address addressResolver = voyager.getAddressResolverAddress();\\n        return AddressResolver(addressResolver).getVaultManagerProxy();\\n    }\\n\\n    function getLoanManagerProxyAddress() private view returns (address) {\\n        Voyager voyager = Voyager(voyager);\\n        address addressResolver = voyager.getAddressResolverAddress();\\n        return AddressResolver(addressResolver).getLoanManagerProxy();\\n    }\\n\\n    function _getUnusedDeposits(address _sponsor, address _reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        address vmp = Voyager(voyager).addressResolver().getVaultManagerProxy();\\n        IVaultManagerProxy vaultManagerProxy = IVaultManagerProxy(vmp);\\n        DataTypes.VaultConfig memory vaultConfig = vaultManagerProxy\\n            .getVaultConfig(_reserve);\\n\\n        uint256 securityRequirement = vaultConfig.securityDepositRequirement;\\n        uint256 principal;\\n        uint256 interest;\\n        (principal, interest) = ILoanManager(getLoanManagerProxyAddress())\\n            .getVaultDebt(_reserve, address(this));\\n\\n        uint256 totalDebt = principal.add(interest);\\n        return\\n            securityDepositToken.balanceOf(_sponsor) -\\n            totalDebt.wadToRay().rayMul(securityRequirement).rayToWad();\\n    }\\n\\n    function _eligibleAmount(address _reserve, address _sponsor)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return securityDepositEscrow.eligibleAmount(_reserve, _sponsor);\\n    }\\n\\n    function _getWithdrawableDeposit(address _sponsor, address _reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 withdrawableAmount = _getUnusedDeposits(_sponsor, _reserve);\\n        uint256 eligibleAmount = _eligibleAmount(_reserve, _sponsor);\\n        if (eligibleAmount < withdrawableAmount) {\\n            withdrawableAmount = eligibleAmount;\\n        }\\n        return withdrawableAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x4240237ac8561124f13c65a02a637bb74db5a15780f50861feefc29b30e8c8cd\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {IVaultFactory} from \\\"../../interfaces/IVaultFactory.sol\\\";\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\ncontract VaultFactory is IVaultFactory {\\n    function createVault(bytes32 salt) external returns (address) {\\n        return Create2.deploy(0, salt, type(Vault).creationCode);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2cbd62fce4718914528fb58c0d052c01357dc99a1d332b39ce7201d92d4c59\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {SecurityDepositEscrow} from \\\"../../component/vault/SecurityDepositEscrow.sol\\\";\\nimport {Proxyable} from \\\"../../libraries/proxy/Proxyable.sol\\\";\\nimport {WadRayMath} from \\\"../../libraries/math/WadRayMath.sol\\\";\\nimport {DataTypes} from \\\"../../libraries/types/DataTypes.sol\\\";\\nimport {IVaultManager} from \\\"../../interfaces/IVaultManager.sol\\\";\\nimport {IAddressResolver} from \\\"../../interfaces/IAddressResolver.sol\\\";\\nimport {ILoanManager} from \\\"../../interfaces/ILoanManager.sol\\\";\\nimport {IVaultFactory} from \\\"../../interfaces/IVaultFactory.sol\\\";\\nimport {IVault} from \\\"../../interfaces/IVault.sol\\\";\\nimport {IACLManager} from \\\"../../interfaces/IACLManager.sol\\\";\\nimport {Voyager} from \\\"../../component/Voyager.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {VaultStorage} from \\\"./VaultStorage.sol\\\";\\nimport {VaultFactory} from \\\"./VaultFactory.sol\\\";\\n\\ncontract VaultManager is ReentrancyGuard, Proxyable, IVaultManager {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n\\n    IAddressResolver public addressResolver;\\n    address public vaultFactory;\\n\\n    constructor(\\n        address payable _proxy,\\n        address _addressResolver,\\n        address payable _voyager,\\n        address _vaultFactory\\n    ) public Proxyable(_proxy) {\\n        addressResolver = IAddressResolver(_addressResolver);\\n        vaultFactory = _vaultFactory;\\n        voyager = Voyager(_voyager);\\n    }\\n\\n    modifier onlyAdmin() {\\n        _requireCallerAdmin();\\n        _;\\n    }\\n\\n    /************************************** User Functions **************************************/\\n\\n    /**\\n     * @dev Create a Vault for user\\n     * @param _user the address of the player\\n     **/\\n    function createVault(\\n        address _user,\\n        address _reserve,\\n        bytes32 _salt\\n    ) external onlyProxy returns (address) {\\n        address vault = VaultFactory(vaultFactory).createVault(_salt);\\n        require(vault != address(0), \\\"deploy vault failed\\\");\\n        uint256 len = VaultStorage(getVaultStorageAddress()).pushNewVault(\\n            _user,\\n            vault\\n        );\\n        proxy._emit(\\n            abi.encode(vault, len),\\n            2,\\n            keccak256(\\\"VaultCreated(address, address, uint256)\\\"),\\n            bytes32(abi.encodePacked(_user)),\\n            0,\\n            0\\n        );\\n        return vault;\\n    }\\n\\n    function initVault(address _vault, address _reserve) external onlyProxy {\\n        SecurityDepositEscrow securityDepositEscrow = new SecurityDepositEscrow(\\n            _vault\\n        );\\n        IVault(_vault).initialize(\\n            addressResolver.getVoyage(),\\n            securityDepositEscrow\\n        );\\n        IVault(_vault).initSecurityDepositToken(_reserve);\\n    }\\n\\n    /**\\n     * @dev Delegate call to Vault's depositMargin\\n     * @param _sponsor who actual deposits the reserve into the amount\\n     * @param _vaultUser user address\\n     * @param _reserve reserve address\\n     * @param _amount amount user is willing to deposit\\n     */\\n    function depositMargin(\\n        address _sponsor,\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyProxy {\\n        address vaultAddress = _getVault(_vaultUser);\\n        IVault(vaultAddress).depositMargin(_sponsor, _reserve, _amount);\\n        _emit(\\n            _sponsor,\\n            _vaultUser,\\n            _reserve,\\n            _amount,\\n            keccak256(\\\"SecurityDeposited(address, address, address, uint256)\\\")\\n        );\\n    }\\n\\n    /**\\n     * @dev  Delegate call to Vault's redeemMargin\\n     * @param _sponsor sponsor address\\n     * @param _vaultUser user address\\n     * @param _reserve reserve address\\n     * @param _amount redeem amount\\n     **/\\n    function redeemMargin(\\n        address payable _sponsor,\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount\\n    ) external onlyProxy {\\n        address vaultAddress = _getVault(_vaultUser);\\n        Vault(vaultAddress).redeemMargin(_sponsor, _reserve, _amount);\\n        proxy._emit(\\n            abi.encode(_vaultUser, _reserve, _amount),\\n            2,\\n            keccak256(\\\"SecurityRedeemed(address, address, address, uint256)\\\"),\\n            bytes32(abi.encodePacked(_sponsor)),\\n            0,\\n            0\\n        );\\n    }\\n\\n    // placeholder function\\n    function slash(\\n        address _vaultUser,\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) public nonReentrant onlyProxy {\\n        address vaultAddress = _getVault(_vaultUser);\\n        return Vault(vaultAddress).slash(_reserve, _to, _amount);\\n    }\\n\\n    /************************ HouseKeeping Function ******************************/\\n\\n    /**\\n     * @dev Set max security deposit for _reserve\\n     * @param _reserve reserve address\\n     * @param _amount max amount sponsor can deposit\\n     */\\n    function setMarginSecurityDeposit(address _reserve, uint256 _amount)\\n        external\\n        onlyProxy\\n        onlyAdmin\\n    {\\n        VaultStorage(getVaultStorageAddress()).setMarginSecurityDeposit(\\n            _reserve,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Set min security deposit for _reserve\\n     * @param _reserve reserve address\\n     * @param _amount min amount sponsor can deposit\\n     */\\n    function setMinSecurityDeposit(address _reserve, uint256 _amount)\\n        external\\n        onlyProxy\\n        onlyAdmin\\n    {\\n        VaultStorage(getVaultStorageAddress()).setMinSecurityDeposit(\\n            _reserve,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Update the security deposit requirement\\n     * @param _reserve reserve address\\n     * @param _requirement expressed in Ray\\n     */\\n    function setSecurityDepositRequirement(\\n        address _reserve,\\n        uint256 _requirement\\n    ) external onlyProxy onlyAdmin {\\n        VaultStorage(getVaultStorageAddress()).setSecurityDepositRequirement(\\n            _reserve,\\n            _requirement\\n        );\\n    }\\n\\n    /************************************** View Functions **************************************/\\n\\n    function getVaultConfig(address _reserve)\\n        external\\n        view\\n        onlyProxy\\n        returns (DataTypes.VaultConfig memory)\\n    {\\n        return VaultStorage(getVaultStorageAddress()).getVaultConfig(_reserve);\\n    }\\n\\n    /**\\n     * @dev Get available credit\\n     * @param _user user address\\n     * @param _reserve reserve address\\n     **/\\n    function getAvailableCredit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 creditLimit = getCreditLimit(_user, _reserve);\\n        uint256 principal;\\n        uint256 interest;\\n        address vault = _getVault(_user);\\n        ILoanManager(addressResolver.getLoanManagerProxy()).getVaultDebt(\\n            _reserve,\\n            vault\\n        );\\n        uint256 accumulatedDebt = principal.add(interest);\\n        if (creditLimit < accumulatedDebt) {\\n            return 0;\\n        }\\n        return creditLimit - accumulatedDebt;\\n    }\\n\\n    /**\\n     * @dev Get credit limit for a specific reserve\\n     * @param _user user address\\n     * @return _reserve reserve address\\n     **/\\n    function getCreditLimit(address _user, address _reserve)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 currentSecurityDeposit = _getSecurityDeposit(_user, _reserve);\\n        DataTypes.VaultConfig memory vc = VaultStorage(getVaultStorageAddress())\\n            .getVaultConfig(_reserve);\\n        uint256 securityDepositRequirement = vc.securityDepositRequirement;\\n        require(\\n            securityDepositRequirement != 0,\\n            \\\"security deposit requirement cannot be 0\\\"\\n        );\\n        uint256 creditLimitInRay = currentSecurityDeposit.wadToRay().rayDiv(\\n            securityDepositRequirement\\n        );\\n        return creditLimitInRay.rayToWad();\\n    }\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getSecurityDeposit(_user, _reserve);\\n    }\\n\\n    function getVaultStorageAddress() private view returns (address) {\\n        return addressResolver.getVaultStorage();\\n    }\\n\\n    function getSecurityDepositTokenAddress(address vault)\\n        private\\n        view\\n        returns (address)\\n    {\\n        return IVault(vault).getSecurityDepositTokenAddress();\\n    }\\n\\n    /**\\n     * @dev Get existing Vault contract address for user\\n     * @param _user the address of the player\\n     * @return Vault address\\n     **/\\n    function getVault(address _user) external view returns (address) {\\n        return _getVault(_user);\\n    }\\n\\n    function getAllVaults() external view returns (address[] memory) {\\n        return VaultStorage(getVaultStorageAddress()).getAllVaults();\\n    }\\n\\n    function getWithdrawableDeposit(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) public view returns (uint256) {\\n        address vaultAddress = _getVault(_vaultUser);\\n        return IVault(vaultAddress).getWithdrawableDeposit(_sponsor, _reserve);\\n    }\\n\\n    function getGav(address _user) external view returns (uint256) {\\n        return IVault(_getVault(_user)).getGav();\\n    }\\n\\n    /************************************** Private Functions **************************************/\\n\\n    function _getSecurityDeposit(address _user, address _reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        address vaultAddress = _getVault(_user);\\n        uint256 currentSecurityDeposit = IVault(vaultAddress)\\n            .getCurrentSecurityDeposit(_reserve);\\n        return currentSecurityDeposit;\\n    }\\n\\n    function _getVault(address _user) internal view returns (address) {\\n        return VaultStorage(getVaultStorageAddress()).getVaultAddress(_user);\\n    }\\n\\n    function _requireCallerAdmin() internal {\\n        IACLManager aclManager = IACLManager(\\n            addressResolver.getAddress(\\\"aclManager\\\")\\n        );\\n        require(aclManager.isVaultManager(messageSender), \\\"Not vault admin\\\");\\n    }\\n\\n    function _emit(\\n        address _sponsor,\\n        address _vaultUser,\\n        address _reserve,\\n        uint256 _amount,\\n        bytes32 _topic\\n    ) internal {\\n        proxy._emit(\\n            abi.encode(_vaultUser, _reserve, _amount),\\n            2,\\n            _topic,\\n            bytes32(abi.encodePacked(_sponsor)),\\n            0,\\n            0\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9fa4b9ca95078bee0bf8ca3c4f689e12278f4a210b5d59659309a2d868d01de5\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../libraries/proxy/Proxy.sol\\\";\\nimport \\\"../../interfaces/IVaultManager.sol\\\";\\nimport \\\"../../interfaces/IVaultManagerProxy.sol\\\";\\n\\ncontract VaultManagerProxy is Proxy, IVaultManagerProxy {\\n    /************************** Immutable static call for target contract **************************/\\n\\n    function getVaultConfig(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.VaultConfig memory)\\n    {\\n        return IVaultManager(address(target)).getVaultConfig(_reserve);\\n    }\\n\\n    function getCreditLimit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return IVaultManager(address(target)).getCreditLimit(_user, _reserve);\\n    }\\n\\n    function getAvailableCredit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultManager(address(target)).getAvailableCredit(_user, _reserve);\\n    }\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IVaultManager(address(target)).getSecurityDeposit(_user, _reserve);\\n    }\\n\\n    function getWithdrawableDeposit(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256) {\\n        return\\n            IVaultManager(address(target)).getWithdrawableDeposit(\\n                _vaultUser,\\n                _reserve,\\n                _sponsor\\n            );\\n    }\\n\\n    function getVault(address _user) external view returns (address) {\\n        return IVaultManager(address(target)).getVault(_user);\\n    }\\n\\n    function getAllVaults() external view returns (address[] memory) {\\n        return IVaultManager(address(target)).getAllVaults();\\n    }\\n\\n    function getGav(address _user) external view returns (uint256) {\\n        return IVaultManager(address(target)).getGav(_user);\\n    }\\n}\\n\",\"keccak256\":\"0x8456292ee3fd0d3981c2a5066f7ca59c5bbe7e1d8bdc3570104ec451708325a0\",\"license\":\"GPL-3.0\"},\"contracts/component/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../libraries/state/State.sol\\\";\\nimport \\\"../../libraries/types/DataTypes.sol\\\";\\nimport \\\"../../libraries/math/WadRayMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// central storage for all vaults\\ncontract VaultStorage is State {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n\\n    address[] public allVaults;\\n    // player address => vault address\\n    mapping(address => address) public getVault;\\n\\n    mapping(address => DataTypes.VaultConfig) public vaultConfig;\\n\\n    constructor(address _vaultManager) State(_vaultManager) {}\\n\\n    function pushNewVault(address _player, address vault)\\n        external\\n        onlyAssociatedContract\\n        returns (uint256)\\n    {\\n        allVaults.push(vault);\\n        require(getVault[_player] == address(0), \\\"vault exists\\\");\\n        getVault[_player] = vault;\\n        return allVaults.length;\\n    }\\n\\n    function setMarginSecurityDeposit(address _reserve, uint256 _amount)\\n        external\\n        onlyAssociatedContract\\n    {\\n        vaultConfig[_reserve].maxSecurityDeposit = _amount;\\n    }\\n\\n    function setMinSecurityDeposit(address _reserve, uint256 _amount)\\n        external\\n        onlyAssociatedContract\\n    {\\n        vaultConfig[_reserve].minSecurityDeposit = _amount;\\n    }\\n\\n    function setSecurityDepositRequirement(\\n        address _reserve,\\n        uint256 _requirement\\n    ) external onlyAssociatedContract {\\n        vaultConfig[_reserve].securityDepositRequirement = _requirement;\\n    }\\n\\n    /**\\n     * @dev Get Vault address for a specific user\\n     * @param _user the address of the player\\n     **/\\n    function getVaultAddress(address _user) external view returns (address) {\\n        return getVault[_user];\\n    }\\n\\n    /**\\n     * @dev Get all credit account addresses\\n     **/\\n    function getAllVaults() external view returns (address[] memory) {\\n        return allVaults;\\n    }\\n\\n    function getVaultConfig(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.VaultConfig memory)\\n    {\\n        return vaultConfig[_reserve];\\n    }\\n}\\n\",\"keccak256\":\"0x95605ad4d11bdba5b67080af1df017a4490b10c128c1dc18999ce41a41f32b55\",\"license\":\"GPL-3.0\"},\"contracts/diamond/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n* \\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport \\\"./libraries/LibDiamond.sol\\\";\\nimport \\\"./interfaces/IDiamondLoupe.sol\\\";\\nimport \\\"./interfaces/IDiamondCut.sol\\\";\\nimport \\\"./interfaces/IERC173.sol\\\";\\nimport \\\"./interfaces/IERC165.sol\\\";\\n\\ncontract Diamond {\\n    // more arguments are added to this struct\\n    // this avoids stack too deep errors\\n    struct DiamondArgs {\\n        address owner;\\n    }\\n\\n    constructor(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        DiamondArgs memory _args\\n    ) payable {\\n        LibDiamond.diamondCut(_diamondCut, address(0), new bytes(0));\\n        LibDiamond.setContractOwner(_args.owner);\\n\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n\\n        // adding ERC165 data\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamond.DiamondStorage storage ds;\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x67344fc90cd74e682fffd3097a7bef9b44325a25cc0745822849da29f58a9c99\",\"license\":\"MIT\"},\"contracts/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x70cec56344b453ec59bcecd3541f711b4f439b5b7e35cc10306b2e82eaa399da\",\"license\":\"MIT\"},\"contracts/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x5b20558ac0a152f84527227fa50db6f113dd2241992cb8aa9b1a7dbd193c277f\",\"license\":\"MIT\"},\"contracts/diamond/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79ecd45ef37ffd464dd3a612cd046e1b3ec6aed5efd767141c651e539bdee988\",\"license\":\"MIT\"},\"contracts/diamond/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x6fae3084e63b6d8cca55d964865dc45e0c2abf2d0eb8fcd9a3fe7428441bf06a\",\"license\":\"MIT\"},\"contracts/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // uint16 selectorCount = uint16(diamondStorage().selectors.length);\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(oldFacetAddress, selector);\\n            // add function\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function removeFunction(address _facetAddress, bytes4 _selector) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            ds\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x613232240105119a200f17ccbfbcc97d3662abe739d6ce276a688c0d5bcc38ec\",\"license\":\"MIT\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IACLManager {\\n    function grantLiquidityManager(address _admin) external;\\n\\n    function isLiquidityManager(address _admin) external view returns (bool);\\n\\n    function grantVaultManager(address _admin) external;\\n\\n    function isVaultManager(address _admin) external view returns (bool);\\n\\n    function grantPoolManager(address _admin) external;\\n\\n    function grantLoanManager(address _admin) external;\\n\\n    function isLoanManager(address _admin) external view returns (bool);\\n\\n    function isProtocolManager(address _admin) external view returns (bool);\\n\\n    function grantLiquidityManagerContract(address _admin) external;\\n\\n    function isLiquidityManagerContract(address _admin)\\n        external\\n        view\\n        returns (bool);\\n\\n    function grantLoanManagerContract(address _admin) external;\\n\\n    function isLoanManagerContract(address _admin) external view returns (bool);\\n\\n    function grantVaultManagerContract(address _admin) external;\\n\\n    function isVaultManagerContract(address _admin)\\n        external\\n        view\\n        returns (bool);\\n\\n    function grantVaultConfigurator(address _amin) external;\\n\\n    function isVaultConfigurator(address _admin) external view returns (bool);\\n\\n    function grantVoyagerContract(address _admin) external;\\n\\n    function isVoyagerContract(address _admin) external view returns (bool);\\n\\n    function grantOracleManager(address _admin) external;\\n\\n    function isOracleManager(address _admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x090955749b2269dd012fe139c3b5fb738c40ef4faeef29fea91eb66314c62bd8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function importAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external;\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address);\\n\\n    function getVoyage() external view returns (address);\\n\\n    function getLiquidityManagerProxy() external view returns (address);\\n\\n    function getLiquidityManagerStorage() external view returns (address);\\n\\n    function getLoanManagerProxy() external view returns (address);\\n\\n    function getLoanManager() external view returns (address);\\n\\n    function getVaultManagerProxy() external view returns (address);\\n\\n    function getVaultManager() external view returns (address);\\n\\n    function getExtCallProxy() external view returns (address);\\n\\n    function getAclManager() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function getVaultStorage() external view returns (address);\\n\\n    function getJuniorDepositToken() external view returns (address);\\n\\n    function getSeniorDepositToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xabaf3bd5e82031922cd12308d27fc166f39294fe8e6f7d99310482b72d238a14\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IHealthStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\ninterface IHealthStrategy {\\n    function getPremiumFactor() external view returns (uint256);\\n\\n    function getLoanTenure() external view returns (uint256);\\n\\n    function getWeightedLTV() external view returns (uint256);\\n\\n    function getWeightedRepaymentRatio() external view returns (uint256);\\n\\n    function calculateHealthRisk(DataTypes.HealthRiskParameter memory)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x08764d25190a766bd723bc4127e455b3345f442e858ee60e305996079e3f7b88\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {ReserveLogic} from \\\"../libraries/logic/ReserveLogic.sol\\\";\\n\\ninterface ILiquidityManager {\\n    function deposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function withdraw(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address payable _user\\n    ) external;\\n\\n    function unbonding(\\n        address _reserve,\\n        address _user,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256);\\n\\n    function balance(\\n        address _reserve,\\n        address _user,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256);\\n\\n    function utilizationRate(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaeb9f299645eb1d85e33b9e78ba103bcb16d723ac17b8a872f86baface4e1e4b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\ninterface ILoanManager {\\n    function getVaultDebt(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getDrawDownList(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getDrawDownDetail(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDownId\\n    ) external view returns (DataTypes.DebtDetail memory);\\n\\n    function principalBalance(address underlying)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function interestBalance(address underlying)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x004cf4079128e2d353f5f7aeabc06dc9e1094eb62f3f70b8c1f7cc80a224ec2d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILoanManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\ninterface ILoanManagerProxy {\\n    function getVaultDebt(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getDrawDownList(address _reserve, address _vault)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getDrawDownDetail(\\n        address _reserve,\\n        address _vault,\\n        uint256 _drawDownId\\n    ) external view returns (DataTypes.DebtDetail memory);\\n}\\n\",\"keccak256\":\"0x53ab30fa391df2c5df60d0d205d53524e9c0846fa824f9a93d4d22b7f5f3e7eb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILoanStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface ILoanStrategy {\\n    function getTerm() external view returns (uint256);\\n\\n    function getEpoch() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd01cc4078b1c729f2d09edcb3b408c43acda8c9fff75fef32b969f7fefb21ffe\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\ninterface IMessageBus {\\n    function getAddressResolverAddress() external view returns (address);\\n\\n    function getVault(address _user) external view returns (address);\\n\\n    function getReserveData(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x3bfd9159d4f10e5e1a16bc92a5b960fabca741b6278cd56911f00933d6926eec\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n@title IReserveInterestRateStrategyInterface interface\\n@notice Interface for the calculation of the interest rates.\\n*/\\n\\ninterface IReserveInterestRateStrategy {\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address liquidityEscrow,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xdef4da289a16168b03272c81a29078c7dc7b5df89b415d927471575277b1781b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserveManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {ReserveLogic} from \\\"../libraries/logic/ReserveLogic.sol\\\";\\n\\ninterface IReserveManager {\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress,\\n        address _loanStrategyAddress,\\n        uint256 _optimalIncomeRatio\\n    ) external;\\n\\n    function activeReserve(address _asset) external;\\n\\n    function getReserveData(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function getReserveList() external view returns (address[] memory);\\n\\n    function getConfiguration(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    function getFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        );\\n\\n    function getLiquidityRate(address _reserve, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x94611e1bd7a5fd3621b7c0fcab7482cdd28d7f577802d5f91342b42b68bd79be\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {ERC20, ERC4626} from \\\"@rari-capital/solmate/src/mixins/ERC4626.sol\\\";\\n\\nabstract contract IVToken is ERC4626 {\\n    constructor(\\n        ERC20 _underlyingAsset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC4626(_underlyingAsset, _name, _symbol) {}\\n\\n    function transferUnderlyingTo(address _target, uint256 _amount)\\n        external\\n        virtual;\\n\\n    function claim(uint256 _withdrawlIdx) external virtual;\\n\\n    function unbonding(address _user)\\n        external\\n        view\\n        virtual\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function totalUnbonding() external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x39571f0b4846d70c2865fddd07d8b93d2ab04a0cc50a00f58dc801a0149e99fb\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {SecurityDepositEscrow} from \\\"../component/vault/SecurityDepositEscrow.sol\\\";\\n\\ninterface IVault {\\n    function initialize(\\n        address _voyager,\\n        SecurityDepositEscrow _securityDepositEscrow\\n    ) external;\\n\\n    function depositMargin(\\n        address _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function redeemMargin(\\n        address payable _sponsor,\\n        address _reserve,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function slash(\\n        address _reserve,\\n        address payable _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function initStakingContract(address _reserve) external;\\n\\n    function getSecurityDepositTokenAddress() external view returns (address);\\n\\n    function initSecurityDepositToken(address _reserve) external;\\n\\n    function underlyingBalance(address _sponsor, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getGav() external view returns (uint256);\\n\\n    function getCurrentSecurityDeposit(address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableDeposit(address _sponsor, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xecfdb821a2a306217709f04dd6c98aaed469ddfd25111c9152ed20c519f70444\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IVaultFactory {\\n    function createVault(bytes32 _salt) external returns (address);\\n}\\n\",\"keccak256\":\"0xcb900bf7e72d660f7aa1f1300fdd2dd0836a01566cd2b5ac887350b09418bc87\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\ninterface IVaultManager {\\n    function getVaultConfig(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.VaultConfig memory);\\n\\n    function getCreditLimit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableDeposit(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256);\\n\\n    function createVault(\\n        address _user,\\n        address _reserve,\\n        bytes32 _vault\\n    ) external returns (address);\\n\\n    function initVault(address _vault, address _reserve) external;\\n\\n    function getVault(address _user) external view returns (address);\\n\\n    function getAllVaults() external view returns (address[] memory);\\n\\n    function getGav(address _user) external view returns (uint256);\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAvailableCredit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setSecurityDepositRequirement(\\n        address _reserve,\\n        uint256 _requirement\\n    ) external;\\n\\n    function setMarginSecurityDeposit(address _reserve, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x4835dc132b5d9f47b5862ac2da30704f3f5b54f463682d15388b84de2e9e51a1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\ninterface IVaultManagerProxy {\\n    function getVaultConfig(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.VaultConfig memory);\\n\\n    function getCreditLimit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAvailableCredit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSecurityDeposit(address _user, address _reserve)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getWithdrawableDeposit(\\n        address _vaultUser,\\n        address _reserve,\\n        address _sponsor\\n    ) external view returns (uint256);\\n\\n    function getVault(address _user) external view returns (address);\\n\\n    function getAllVaults() external view returns (address[] memory);\\n\\n    function getGav(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd6cc39191e78669fc820fc8b626723076c8b1bcfe95e220f4c67def9c652da12\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVoyagerComponent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Voyager} from \\\"../component/Voyager.sol\\\";\\nimport {AddressResolver} from \\\"../component/infra/AddressResolver.sol\\\";\\nimport {LiquidityManagerStorage} from \\\"../component/shared/storage/LiquidityManagerStorage.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\n\\nabstract contract IVoyagerComponent {\\n    Voyager public voyager;\\n\\n    modifier requireNotPaused() {\\n        _whenNotPaused();\\n        _;\\n    }\\n\\n    function liquidityManagerStorageAddress() internal view returns (address) {\\n        return\\n            AddressResolver(voyager.getAddressResolverAddress())\\n                .getLiquidityManagerStorage();\\n    }\\n\\n    function _whenNotPaused() internal view {\\n        require(!paused(), Errors.LP_IS_PAUSED);\\n    }\\n\\n    function paused() internal view returns (bool) {\\n        address storageAddress = liquidityManagerStorageAddress();\\n        return LiquidityManagerStorage(storageAddress).paused();\\n    }\\n\\n    function getDepositAndDebt(address _reserve)\\n        public\\n        view\\n        returns (DataTypes.DepositAndDebt memory)\\n    {\\n        address storageAddress = liquidityManagerStorageAddress();\\n        return\\n            LiquidityManagerStorage(storageAddress).getDepositAndDebt(_reserve);\\n    }\\n}\\n\",\"keccak256\":\"0x35e03007b83459b956d59874bab321414bd1149927a34b51cf3aba7e76ea2bc8\",\"license\":\"GPL-3.0\"},\"contracts/libraries/EthAddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary EthAddressLib {\\n    /**\\n     * @dev returns the address used within the protocol to identify ETH\\n     * @return the address assigned to ETH\\n     */\\n    function ethAddress() internal pure returns (address) {\\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    }\\n}\\n\",\"keccak256\":\"0xd804184a4493b89dbe84b06927f119535944d46889c5ffcd5d8ca6f4172a541f\",\"license\":\"GPL-3.0\"},\"contracts/libraries/acl/ExtCallACL.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Proxyable} from \\\"../proxy/Proxyable.sol\\\";\\nimport {IExtCallACL} from \\\"./IExtCallACL.sol\\\";\\nimport {Voyager} from \\\"../../component/Voyager.sol\\\";\\n\\ncontract ExtCallACL is Proxyable, IExtCallACL {\\n    mapping(address => bool) public whitelistedAddress;\\n    mapping(bytes32 => bool) public whitelistedFunctions;\\n\\n    constructor(address payable _proxy, address payable _voyage)\\n        public\\n        Proxyable(_proxy)\\n    {\\n        voyager = Voyager(_voyage);\\n    }\\n\\n    function whitelistAddress(address[] calldata _address) external onlyProxy {\\n        uint256 arrayLength = _address.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            whitelistedAddress[_address[i]] = true;\\n        }\\n    }\\n\\n    function blockAddress(address[] calldata _address) external onlyProxy {\\n        uint256 arrayLength = _address.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            delete whitelistedAddress[_address[i]];\\n        }\\n    }\\n\\n    function isWhitelistedAddress(address _address)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return whitelistedAddress[_address];\\n    }\\n\\n    function whitelistFunction(bytes32[] calldata _func) external onlyProxy {\\n        uint256 arrayLength = _func.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            whitelistedFunctions[_func[i]] = true;\\n        }\\n    }\\n\\n    function blockFunction(bytes32[] calldata _func) external onlyProxy {\\n        uint256 arrayLength = _func.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            delete whitelistedFunctions[_func[i]];\\n        }\\n    }\\n\\n    function isWhitelistedFunction(bytes32 _func) external view returns (bool) {\\n        return whitelistedFunctions[_func];\\n    }\\n}\\n\",\"keccak256\":\"0x3822109fc880a221cd5bbec80400b7e44c989ff144d20ae7bc18bbe7c31da1e9\",\"license\":\"GPL-3.0\"},\"contracts/libraries/acl/ExtCallACLProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Proxy} from \\\"../proxy/Proxy.sol\\\";\\nimport {IExtCallACL} from \\\"./IExtCallACL.sol\\\";\\n\\ncontract ExtCallACLProxy is Proxy {\\n    function isWhitelistedAddress(address _address) public view returns (bool) {\\n        return IExtCallACL(address(target)).isWhitelistedAddress(_address);\\n    }\\n\\n    function isWhitelistedFunction(bytes32 _func) public view returns (bool) {\\n        return IExtCallACL(address(target)).isWhitelistedFunction(_func);\\n    }\\n}\\n\",\"keccak256\":\"0xdb9eba7603619d36fc37b472b118e48721f1de395e2d422195cf19c371f2cffb\",\"license\":\"GPL-3.0\"},\"contracts/libraries/acl/IExtCallACL.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IExtCallACL {\\n    function whitelistAddress(address[] calldata _address) external;\\n\\n    function blockAddress(address[] calldata _address) external;\\n\\n    function isWhitelistedAddress(address _address)\\n        external\\n        view\\n        returns (bool);\\n\\n    function whitelistFunction(bytes32[] calldata _func) external;\\n\\n    function blockFunction(bytes32[] calldata _func) external;\\n\\n    function isWhitelistedFunction(bytes32 _func) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8243da9760ba180c6c523f75b57ae2a819667a8aeed8bdd4068a36c585413e81\",\"license\":\"GPL-3.0\"},\"contracts/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Voyage\\n * @notice Implements the bitmap logic to handle the reserve configuration, inspired by Aave\\n **/\\nlibrary ReserveConfiguration {\\n    uint256 constant LIQUIDATE_BONUS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 constant DECIMAL_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80FFFF; // prettier-ignore\\n    uint256 constant ACTIVE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFF; // prettier-ignore\\n    uint256 constant FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFF; // prettier-ignore\\n    uint256 constant BORROWING_ENABLE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFF; // prettier-ignore\\n    uint256 constant RESERVED_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF87FFFFFF; // prettier-ignore\\n    uint256 constant RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0007FFFFFFF; // prettier-ignore\\n    uint256 constant LOCKUP_PERIOD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80007FFFFFFFFFFF; // prettier-ignore\\n\\n    uint256 constant DECIMAL_MASK_BIT_POSITION = 16;\\n    uint256 constant ACTIVE_MASK_BIT_POSITION = 24;\\n    uint256 constant FROZEN_MASK_BIT_POSITION = 25;\\n    uint256 constant BORROWING_ENABLE_MASK_POSITION = 26;\\n    uint256 constant RESERVED_MASK_BIT_POSITION = 27;\\n    uint256 constant RESERVE_FACTOR_MASK_BIT_POSITION = 31;\\n    uint256 constant LOCKUP_PERIOD_MASK_BIT_POSITION = 47;\\n\\n    /**\\n     * Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flags representing active, frozen, borrowing enabled\\n     **/\\n    function getFlags(DataTypes.ReserveConfigurationMap memory self)\\n        internal\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_ENABLE_MASK) != 0\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     **/\\n    function setActive(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool active\\n    ) internal pure {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << ACTIVE_MASK_BIT_POSITION);\\n    }\\n\\n    function getActive(DataTypes.ReserveConfigurationMap storage self)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8337cbf6c391bcb09d8250efe888e41662f7fdaf695e2d896bde8f05c80d4e63\",\"license\":\"GPL-3.0\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors library\\n * @author Voyager\\n * @notice Defines the error messages emitted by the different contracts of the Voyager protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - LM = LiquidityManager\\n *  - LOM = LoanManager\\n *  - CT = Common errors between tokens\\n *  - RL = ReserveLogic\\n */\\nlibrary Errors {\\n    string public constant VL_INVALID_AMOUNT = \\\"1\\\"; // 'Amount must be greater than 0'\\n    string public constant VL_NO_ACTIVE_RESERVE = \\\"2\\\"; // 'Action requires an active reserve'\\n    string public constant VL_RESERVE_FROZEN = \\\"3\\\"; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL = \\\"20\\\";\\n    string public constant CT_CALLER_MUST_BE_LOAN_MANAGER = \\\"21\\\";\\n    string public constant CT_INVALID_MINT_AMOUNT = \\\"21\\\";\\n    string public constant CT_INVALID_BURN_AMOUNT = \\\"22\\\";\\n    string public constant LM_NOT_CONTRACT = \\\"60\\\";\\n    string public constant LP_IS_PAUSED = \\\"61\\\"; // 'Pool is paused'\\n    string public constant LOM_RESERVE_NOT_SUFFICIENT = \\\"70\\\";\\n    string public constant LOM_CREDIT_NOT_SUFFICIENT = \\\"71\\\";\\n    string public constant LOM_HEALTH_RISK_BELOW_ONE = \\\"72\\\";\\n    string public constant LOM_NOT_VAULT_OWNER = \\\"73\\\";\\n    string public constant LOM_INVALID_AMOUNT = \\\"74\\\";\\n    string public constant LOM_INVALID_DEBT = \\\"75\\\";\\n    string public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"80\\\"; //  Liquidity rate overflows uint128\\n    string public constant RL_STABLE_BORROW_RATE_OVERFLOW = \\\"81\\\"; //  Stable borrow rate overflows uint128\\n}\\n\",\"keccak256\":\"0x778a9bd2c14c910ee645a18d5d767ffb1ec73804ee9171a9426244437b4c7861\",\"license\":\"agpl-3.0\"},\"contracts/libraries/logic/DebtLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {MathUtils} from \\\"../math/MathUtils.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DefaultReserveInterestRateStrategy} from \\\"../../component/liquidity/DefaultReserveInterestRateStrategy.sol\\\";\\n\\n/**\\n * @title DebtLogic library\\n * @author Voyage\\n * @notice Implements the logic to update the debt state\\n **/\\nlibrary DebtLogic {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant SECOND_PER_MONTH = 30 days;\\n\\n    using DebtLogic for DataTypes.BorrowData;\\n    using DebtLogic for DataTypes.BorrowStat;\\n\\n    function insertDrawDown(\\n        DataTypes.BorrowData storage debtData,\\n        DataTypes.BorrowStat storage borrowStat,\\n        uint256 principal,\\n        uint256 term,\\n        uint256 epoch,\\n        uint256 apr\\n    ) public {\\n        uint256 currentDrawDownNumber = debtData.nextDrawDownNumber;\\n        DataTypes.DrawDown storage dd = debtData.drawDowns[\\n            currentDrawDownNumber\\n        ];\\n        dd.principal = principal;\\n        dd.term = term;\\n        dd.epoch = epoch;\\n        dd.apr = apr;\\n        dd.nper = term.div(epoch);\\n        dd.borrowAt = block.timestamp;\\n\\n        uint256 principalRay = principal.wadToRay();\\n        uint256 interestRay = principalRay.rayMul(apr);\\n\\n        DataTypes.PMT memory pmt;\\n        pmt.principal = principal.div(dd.nper);\\n        pmt.interest = interestRay.rayToWad().div(dd.nper);\\n        pmt.pmt = pmt.principal.add(pmt.interest);\\n        dd.pmt = pmt;\\n\\n        dd.nextPaymentDue = dd.borrowAt.add(\\n            dd.nper.sub(dd.paidTimes).mul(dd.epoch.mul(SECOND_PER_MONTH))\\n        );\\n        debtData.nextDrawDownNumber++;\\n        debtData.mapSize++;\\n        debtData.totalPrincipal = debtData.totalPrincipal.add(principal);\\n        debtData.totalInterest = debtData.totalInterest.add(\\n            interestRay.rayToWad()\\n        );\\n        borrowStat.increase(principalRay, interestRay, apr);\\n    }\\n\\n    function getDrawDownPeriod(DataTypes.BorrowData storage debtData)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (debtData.paidDrawDownNumber, debtData.nextDrawDownNumber);\\n    }\\n\\n    function getDrawDownDetail(\\n        DataTypes.BorrowData storage debtData,\\n        uint256 _drawDownId\\n    ) public view returns (DataTypes.DebtDetail memory) {\\n        DataTypes.DrawDown storage dd = debtData.drawDowns[_drawDownId];\\n        DataTypes.DebtDetail memory debtDetail;\\n        debtDetail.principal = dd.principal;\\n        debtDetail.term = dd.term;\\n        debtDetail.epoch = dd.epoch;\\n        debtDetail.nper = dd.nper;\\n        debtDetail.pmt = dd.pmt;\\n        debtDetail.apr = dd.apr;\\n        debtDetail.borrowAt = dd.borrowAt;\\n        debtDetail.nextPaymentDue = dd.nextPaymentDue;\\n        debtDetail.totalInterestPaid = dd.totalInterestPaid;\\n        debtDetail.totalPrincipalPaid = dd.totalPrincipalPaid;\\n        debtDetail.paidTimes = dd.paidTimes;\\n        return debtDetail;\\n    }\\n\\n    function repay(\\n        DataTypes.BorrowData storage debtData,\\n        DataTypes.BorrowStat storage borrowStat,\\n        uint256 drawDownNumber,\\n        uint256 principal,\\n        uint256 interest\\n    ) public {\\n        DataTypes.DrawDown storage dd = debtData.drawDowns[drawDownNumber];\\n        dd.paidTimes += 1;\\n        if (dd.paidTimes == dd.nper) {\\n            delete debtData.drawDowns[drawDownNumber];\\n        } else {\\n            dd.totalPrincipalPaid = dd.totalPrincipalPaid.add(principal);\\n            dd.totalInterestPaid = dd.totalInterestPaid.add(interest);\\n            DataTypes.RepaymentData memory repayment;\\n            repayment.interest = interest;\\n            repayment.principal = principal;\\n            repayment.total = principal.add(interest);\\n            repayment.paidAt = uint40(block.timestamp);\\n            dd.repayments.push(repayment);\\n            dd.nextPaymentDue = dd.borrowAt.add(\\n                dd.nper.sub(dd.paidTimes).mul(dd.epoch.mul(SECOND_PER_MONTH))\\n            );\\n        }\\n\\n        debtData.totalPrincipal.sub(principal);\\n        debtData.totalInterest.sub(interest);\\n        uint256 interestRay = interest.wadToRay();\\n        borrowStat.decrease(principal.wadToRay(), interestRay, dd.apr);\\n    }\\n\\n    function increase(\\n        DataTypes.BorrowStat storage borrowStat,\\n        uint256 principalPay,\\n        uint256 interestRay,\\n        uint256 rate\\n    ) internal {\\n        uint256 totalDebtRay = borrowStat.totalDebt.wadToRay();\\n        borrowStat.avgBorrowRate = totalDebtRay\\n            .rayMul(borrowStat.avgBorrowRate)\\n            .add(principalPay.rayMul(rate))\\n            .rayDiv(totalDebtRay.add(principalPay));\\n        borrowStat.totalDebt = borrowStat.totalDebt.add(\\n            principalPay.rayToWad()\\n        );\\n        borrowStat.totalInterest = borrowStat.totalInterest.add(\\n            interestRay.rayToWad()\\n        );\\n    }\\n\\n    function decrease(\\n        DataTypes.BorrowStat storage borrowStat,\\n        uint256 principalPay,\\n        uint256 interestRay,\\n        uint256 rate\\n    ) internal {\\n        uint256 totalDebtRay = borrowStat.totalDebt.wadToRay();\\n        borrowStat.avgBorrowRate = totalDebtRay\\n            .rayMul(borrowStat.avgBorrowRate)\\n            .sub(principalPay.rayMul(rate))\\n            .rayDiv(totalDebtRay.sub(principalPay));\\n        borrowStat.totalDebt = borrowStat.totalDebt.sub(\\n            principalPay.rayToWad()\\n        );\\n        borrowStat.totalInterest = borrowStat.totalInterest.sub(\\n            interestRay.rayToWad()\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb12459fed3d076ec756038fc084567d794137193d13491b0c7c3330ea5d360f3\",\"license\":\"GPL-3.0\"},\"contracts/libraries/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {DefaultReserveInterestRateStrategy} from \\\"../../component/liquidity/DefaultReserveInterestRateStrategy.sol\\\";\\n\\n/**\\n * @title ReserveLogic library\\n * @author Voyage\\n * @notice Implements the logic to update the reserves state\\n **/\\nlibrary ReserveLogic {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    uint256 internal constant RAY = 1e27;\\n\\n    using ReserveLogic for DataTypes.ReserveData;\\n\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed asset,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate\\n    );\\n\\n    function init(\\n        DataTypes.ReserveData storage reserve,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        address _interestRateStrategyAddress,\\n        address _healthStrategyAddress,\\n        address _loanStrategyAddress,\\n        uint256 _optimalIncomeRatio\\n    ) external {\\n        reserve.juniorDepositTokenAddress = _juniorDepositTokenAddress;\\n        reserve.seniorDepositTokenAddress = _seniorDepositTokenAddress;\\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\\n        reserve.healthStrategyAddress = _healthStrategyAddress;\\n        reserve.optimalIncomeRatio = _optimalIncomeRatio;\\n        reserve.loanStrategyAddress = _loanStrategyAddress;\\n    }\\n\\n    function getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public view returns (uint256) {\\n        return reserve._getLiquidityRate(_tranche);\\n    }\\n\\n    struct UpdateInterestRatesLocalVars {\\n        uint256 availableLiquidity;\\n        uint256 juniorLiquidity;\\n        uint256 seniorLiquidity;\\n        uint256 liquidityRatio;\\n        uint256 totalDebt;\\n        // total liquidity rate\\n        uint256 newLiquidityRate;\\n        uint256 effectiveJuniorLiquidityRate;\\n        uint256 effectSeniorLiquidityRate;\\n        uint256 newBorrowRate;\\n        uint256 avgBorrowRate;\\n    }\\n\\n    // for the purposes of updating interest rates, we only care about senior tranche liquidity.\\n    function updateInterestRates(\\n        DataTypes.ReserveData storage _reserve,\\n        address _reserveAddress,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorLiquidityAdded,\\n        uint256 _juniorLiquidityTaken,\\n        uint256 _seniorLiquidityAdded,\\n        uint256 _seniorLiquidityTaken,\\n        uint256 _totalDebt,\\n        uint256 _avgBorrowRate\\n    ) public {\\n        UpdateInterestRatesLocalVars memory vars;\\n\\n        (vars.totalDebt, vars.avgBorrowRate) = (_totalDebt, _avgBorrowRate);\\n\\n        (\\n            vars.newLiquidityRate,\\n            vars.newBorrowRate\\n        ) = IReserveInterestRateStrategy(_reserve.interestRateStrategyAddress)\\n            .calculateInterestRates(\\n                _reserveAddress,\\n                _seniorDepositTokenAddress,\\n                _seniorLiquidityAdded,\\n                _seniorLiquidityTaken,\\n                vars.totalDebt,\\n                vars.avgBorrowRate\\n            );\\n        require(\\n            vars.newLiquidityRate <= type(uint128).max,\\n            Errors.RL_LIQUIDITY_RATE_OVERFLOW\\n        );\\n\\n        vars.seniorLiquidity = IERC20(_seniorDepositTokenAddress).totalSupply();\\n        vars.juniorLiquidity =\\n            IERC20(_juniorDepositTokenAddress).totalSupply() +\\n            _juniorLiquidityAdded -\\n            _juniorLiquidityTaken;\\n\\n        if (vars.juniorLiquidity == 0) {\\n            vars.effectiveJuniorLiquidityRate = 0;\\n            vars.effectSeniorLiquidityRate = vars.newLiquidityRate;\\n        } else {\\n            vars.liquidityRatio = vars.seniorLiquidity.rayDiv(\\n                vars.juniorLiquidity\\n            );\\n\\n            vars.effectiveJuniorLiquidityRate = vars\\n                .newLiquidityRate\\n                .rayMul(RAY - _reserve.optimalIncomeRatio)\\n                .rayMul(vars.liquidityRatio);\\n\\n            vars.effectSeniorLiquidityRate = vars.newLiquidityRate.rayMul(\\n                _reserve.optimalIncomeRatio\\n            );\\n        }\\n\\n        _reserve.currentOverallLiquidityRate = vars.newLiquidityRate;\\n        _reserve.currentJuniorLiquidityRate = vars.effectiveJuniorLiquidityRate;\\n        _reserve.currentSeniorLiquidityRate = vars.effectSeniorLiquidityRate;\\n\\n        emit ReserveDataUpdated(\\n            _reserveAddress,\\n            vars.newLiquidityRate,\\n            vars.newBorrowRate\\n        );\\n    }\\n\\n    function _getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        if (_tranche == Tranche.JUNIOR) {\\n            return reserve.currentJuniorLiquidityRate;\\n        } else {\\n            return reserve.currentSeniorLiquidityRate;\\n        }\\n    }\\n\\n    function trancheToBytes32(Tranche tranche) public view returns (bytes32) {\\n        return bytes32(uint256(tranche));\\n    }\\n}\\n\",\"keccak256\":\"0x905ac7c970b69c0abf2c71bf1e259d46106603b9acc4d800eae663ee314f0487\",\"license\":\"GPL-3.0\"},\"contracts/libraries/logic/ValidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\nlibrary ValidationLogic {\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    /**\\n     * @dev Validates a deposit token\\n     * @param reserve The reserve object on which the user is depositing\\n     * @param amount The amount to be deposited\\n     **/\\n    function validateDeposit(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 amount\\n    ) external view {\\n        (bool isActive, bool isFrozen, ) = reserve.configuration.getFlags();\\n        require(amount != 0, Errors.VL_INVALID_AMOUNT);\\n        require(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n        require(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n    }\\n}\\n\",\"keccak256\":\"0x225a2fe0690540ac22a1f27a74bcff19c4899647362d6ea31a3af5ca4aa164db\",\"license\":\"GPL-3.0\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {WadRayMath} from \\\"./WadRayMath.sol\\\";\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(\\n            uint256(lastUpdateTimestamp)\\n        );\\n\\n        return\\n            (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n     * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        if (exp == 0) {\\n            return WadRayMath.ray();\\n        }\\n\\n        uint256 expMinusOne = exp - 1;\\n\\n        uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n        uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n        uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n        uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n        uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n        uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(\\n            basePowerThree\\n        ) / 6;\\n\\n        return\\n            WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(\\n                thirdTerm\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x38d24ff39abdc1d0a96f93bba5b016a961f366dea95a9e8f763282565512ba0a\",\"license\":\"agpl-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7cd9f5c44c880296f68a612b02370ca94fea3aba2eb2678636345c10edd21e42\"},\"contracts/libraries/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Proxyable} from \\\"./Proxyable.sol\\\";\\nimport {IACLManager} from \\\"../../interfaces/IACLManager.sol\\\";\\n\\ncontract Proxy is Ownable {\\n    Proxyable public target;\\n\\n    event TargetUpdated(Proxyable newTarget);\\n\\n    modifier onlyTarget() {\\n        require(Proxyable(msg.sender) == target, \\\"Must be proxy target\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        _onlyAuthorized();\\n        _;\\n    }\\n\\n    function setTarget(Proxyable _target) external onlyOwner {\\n        target = _target;\\n        emit TargetUpdated(_target);\\n    }\\n\\n    function _emit(\\n        bytes calldata callData,\\n        uint256 numTopics,\\n        bytes32 topic1,\\n        bytes32 topic2,\\n        bytes32 topic3,\\n        bytes32 topic4\\n    ) external onlyTarget {\\n        uint256 size = callData.length;\\n        bytes memory _callData = callData;\\n\\n        assembly {\\n            /* The first 32 bytes of callData contain its length (as specified by the abi).\\n             * Length is assumed to be a uint256 and therefore maximum of 32 bytes\\n             * in length. It is also leftpadded to be a multiple of 32 bytes.\\n             * This means moving call_data across 32 bytes guarantees we correctly access\\n             * the data itself. */\\n            switch numTopics\\n            case 0 {\\n                log0(add(_callData, 32), size)\\n            }\\n            case 1 {\\n                log1(add(_callData, 32), size, topic1)\\n            }\\n            case 2 {\\n                log2(add(_callData, 32), size, topic1, topic2)\\n            }\\n            case 3 {\\n                log3(add(_callData, 32), size, topic1, topic2, topic3)\\n            }\\n            case 4 {\\n                log4(add(_callData, 32), size, topic1, topic2, topic3, topic4)\\n            }\\n        }\\n    }\\n\\n    // solhint-disable no-complex-fallback\\n    fallback() external payable onlyAuthorized {\\n        // Mutable call setting Proxyable.messageSender as this is using call not delegatecall\\n        target.setMessageSender(msg.sender);\\n\\n        assembly {\\n            let free_ptr := mload(0x40)\\n            calldatacopy(free_ptr, 0, calldatasize())\\n\\n            /* We must explicitly forward ether to the underlying contract as well. */\\n            let result := call(\\n                gas(),\\n                sload(target.slot),\\n                callvalue(),\\n                free_ptr,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(free_ptr, 0, returndatasize())\\n\\n            if iszero(result) {\\n                revert(free_ptr, returndatasize())\\n            }\\n            return(free_ptr, returndatasize())\\n        }\\n    }\\n\\n    function _onlyAuthorized() public {\\n        address voyage = address(target.voyager());\\n        IACLManager aclManager = IACLManager(\\n            target.voyager().addressResolver().getAclManager()\\n        );\\n        require(\\n            msg.sender == target.voyager().addressResolver().getVoyage() ||\\n                aclManager.isLiquidityManager(msg.sender) ||\\n                aclManager.isLoanManager(msg.sender),\\n            \\\"Voyager or admin only function\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x53f55aed31f24cdfac5e3d07862a0fdaa259935f94fa09cc7cfd6f7f2b184020\",\"license\":\"GPL-3.0\"},\"contracts/libraries/proxy/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Proxy} from \\\"./Proxy.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IVoyagerComponent} from \\\"../../interfaces/IVoyagerComponent.sol\\\";\\n\\nabstract contract Proxyable is Ownable, IVoyagerComponent {\\n    /* The proxy this contract exists behind. */\\n    Proxy public proxy;\\n\\n    /* The caller of the proxy, passed through to this contract.\\n     * Note that every function using this member must apply the onlyProxy or\\n     * optionalProxy modifiers, otherwise their invocations can use stale values. */\\n    address public messageSender;\\n\\n    modifier onlyProxy() {\\n        _onlyProxy();\\n        _;\\n    }\\n\\n    modifier optionalProxy_onlyOwner() {\\n        _optionalProxy_onlyOwner();\\n        _;\\n    }\\n\\n    event ProxyUpdated(address proxyAddress);\\n\\n    constructor(address payable _proxy) internal {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner() != address(0), \\\"Owner must be set\\\");\\n\\n        proxy = Proxy(_proxy);\\n        emit ProxyUpdated(_proxy);\\n    }\\n\\n    function _onlyProxy() private view {\\n        require(msg.sender == address(proxy), \\\"Only the proxy can call\\\");\\n    }\\n\\n    function setProxy(address payable _proxy) external onlyOwner {\\n        proxy = Proxy(_proxy);\\n        emit ProxyUpdated(_proxy);\\n    }\\n\\n    function setMessageSender(address sender) external onlyProxy {\\n        messageSender = sender;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _optionalProxy_onlyOwner() private {\\n        if (msg.sender != address(proxy) && messageSender != msg.sender) {\\n            messageSender = msg.sender;\\n        }\\n        require(messageSender == owner(), \\\"Owner only function\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x8eed5ea25a884d7bf11a9bd087ea72834943d45f8bb8ab672de446ec854de70b\",\"license\":\"GPL-3.0\"},\"contracts/libraries/state/State.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract State is Ownable {\\n    mapping(address => bool) public associatedContracts;\\n\\n    constructor(address _associatedContract) {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner() != address(0), \\\"Owner must be set\\\");\\n\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n\\n    event AssociatedContractUpdated(address associatedContract);\\n\\n    modifier onlyAssociatedContract() {\\n        require(\\n            associatedContracts[msg.sender],\\n            \\\"Only the associated contract can perform this action\\\"\\n        );\\n        _;\\n    }\\n\\n    // Change the associated contract to a new address\\n    function setAssociatedContract(address _associatedContract)\\n        external\\n        onlyOwner\\n    {\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n}\\n\",\"keccak256\":\"0x9c66fe38762227064a6a3be2d1182746b90e6ed3e7d2901b9a2275a899352891\",\"license\":\"GPL-3.0\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary DataTypes {\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        // for calculating overall interested accumulated\\n        // then split it into two indexs base on two allocations\\n        uint256 currentOverallLiquidityRate;\\n        uint256 currentJuniorLiquidityRate;\\n        uint256 currentSeniorLiquidityRate;\\n        uint256 currentBorrowRate;\\n        // Expressed in ray\\n        uint256 securityRequirement;\\n        //the decimals of the reserve asset\\n        uint256 decimals;\\n        address interestRateStrategyAddress;\\n        address healthStrategyAddress;\\n        address loanStrategyAddress;\\n        address juniorDepositTokenAddress;\\n        address seniorDepositTokenAddress;\\n        uint40 juniorLastUpdateTimestamp;\\n        uint40 seniorLastUpdateTimestamp;\\n        uint256 optimalTrancheRatio;\\n        uint256 currentIncomeRatio;\\n        uint256 optimalIncomeRatio;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: Liquidate bonus\\n        //bit 16-23: Decimals\\n        //bit 24: Reserve is active\\n        //bit 25: reserve is frozen\\n        //bit 26: borrowing is enabled\\n        //bit 27-30: reserved\\n        //bit 31-46: reserve factor\\n        //bit 47-62: lock up period in seconds\\n        uint256 data;\\n    }\\n\\n    struct VaultConfig {\\n        uint256 minSecurityDeposit;\\n        uint256 maxSecurityDeposit;\\n        uint256 securityDepositRequirement;\\n    }\\n\\n    struct FungibleTokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    struct BorrowData {\\n        uint256 paidDrawDownNumber;\\n        // next draw down number\\n        uint256 nextDrawDownNumber;\\n        uint256 totalPrincipal;\\n        uint256 totalInterest;\\n        uint256 mapSize;\\n        mapping(uint256 => DrawDown) drawDowns;\\n    }\\n\\n    struct BorrowStat {\\n        uint256 totalDebt;\\n        uint256 totalInterest;\\n        uint256 avgBorrowRate;\\n    }\\n\\n    struct PMT {\\n        uint256 principal;\\n        uint256 interest;\\n        uint256 pmt;\\n    }\\n\\n    struct DrawDown {\\n        uint256 principal;\\n        // the total intended length of the loan in seconds - e.g., 90 days\\n        uint256 term;\\n        // the repayment interval - e.g., 30 days\\n        uint256 epoch;\\n        // number of instalments, term / epoch\\n        uint256 nper;\\n        // the amount to be repaid per instalment (principal + interest)\\n        PMT pmt;\\n        // the borrow rate of this loan\\n        uint256 apr;\\n        uint256 borrowAt;\\n        // next due data\\n        uint256 nextPaymentDue;\\n        // principal paid\\n        uint256 totalPrincipalPaid;\\n        // interest paid\\n        uint256 totalInterestPaid;\\n        RepaymentData[] repayments;\\n        // size pf repayments\\n        uint256 paidTimes;\\n    }\\n\\n    struct DebtDetail {\\n        uint256 principal;\\n        uint256 term;\\n        uint256 epoch;\\n        uint256 nper;\\n        PMT pmt;\\n        uint256 apr;\\n        uint256 borrowAt;\\n        uint256 nextPaymentDue;\\n        uint256 totalPrincipalPaid;\\n        uint256 totalInterestPaid;\\n        uint256 paidTimes;\\n    }\\n\\n    struct RepaymentData {\\n        uint256 principal;\\n        uint256 interest;\\n        // principal + interest\\n        uint256 total;\\n        uint40 paidAt;\\n    }\\n\\n    struct Repayment {\\n        uint256 principal;\\n        uint256 interest;\\n        // principal + interest\\n        uint256 total;\\n        uint40 paidAt;\\n        // about to drop\\n        uint256 totalPaid;\\n        uint256 principalPaid;\\n        uint256 interestPaid;\\n        uint256 numPayments;\\n    }\\n\\n    struct RepaymentDetail {\\n        uint256 totalPaid;\\n        uint256 numPayments;\\n    }\\n\\n    // tmp struct to avoid stack too long\\n\\n    struct DepositAndDebt {\\n        uint256 juniorDepositAmount;\\n        uint256 seniorDepositAmount;\\n        uint256 totalDebt;\\n        uint256 totalInterest;\\n        uint256 avgBorrowRate;\\n    }\\n\\n    struct HealthRiskParameter {\\n        uint256 securityDeposit;\\n        uint256 currentBorrowRate;\\n        uint256 compoundedDebt;\\n        uint256 grossAssetValue;\\n    }\\n\\n    struct PoolConfiguration {\\n        uint256 securityRequirement;\\n        uint256 minSecurity;\\n        uint256 maxSecurity;\\n        uint256 loanTenure;\\n        uint256 optimalTrancheRatio;\\n        uint256 optimalIncomeRatio;\\n        bool isActive;\\n    }\\n\\n    struct PoolData {\\n        uint256 totalLiquidity;\\n        uint256 juniorLiquidity;\\n        uint256 seniorLiquidity;\\n        uint256 juniorLiquidityRate;\\n        uint256 seniorLiquidityRate;\\n        uint256 totalDebt;\\n        uint256 utilizationRate;\\n        uint256 trancheRatio;\\n        uint256 decimals;\\n        string symbol;\\n        bool isActive;\\n    }\\n\\n    struct DrawDownList {\\n        uint256 head;\\n        uint256 tail;\\n    }\\n\\n    struct VaultData {\\n        uint256 borrowRate;\\n        uint256 totalDebt;\\n        DrawDownList drawDownList;\\n        uint256 totalSecurityDeposit;\\n        uint256 withdrawableSecurityDeposit;\\n        uint256 creditLimit;\\n        uint256 spendableBalance;\\n        uint256 gav;\\n        uint256 ltv;\\n        uint256 healthFactor;\\n    }\\n\\n    struct UserPoolData {\\n        uint256 juniorTrancheBalance;\\n        uint256 withdrawableJuniorTrancheBalance;\\n        uint256 seniorTrancheBalance;\\n        uint256 withdrawableSeniorTrancheBalance;\\n        uint256 decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xf5f962b351e7af689a7efb3106b99aa54c6073ad99c7b146f211d346f767cb15\",\"license\":\"GPL-3.0\"},\"contracts/libraries/utils/PeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.9;\\nimport {ERC20, SafeTransferLib} from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\n\\n/// @title Depositor\\n/// @author Voyage Finance\\n/// @notice Forwards calls to ERC-4626 compliant Vaults, but with the actual depositor appended to the encoded call data.\\n/// @dev This does not work if the receiving contract does not implement ERC-4626!\\nabstract contract PeripheryPayments {\\n    using SafeTransferLib for *;\\n\\n    function pullToken(\\n        ERC20 token,\\n        uint256 amount,\\n        address from,\\n        address recipient\\n    ) public payable {\\n        token.safeTransferFrom(from, recipient, amount);\\n    }\\n\\n    function approve(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) public payable {\\n        token.safeApprove(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd94c412b55674d49df934c567581975e8ccc6e7d32462ae94aaf2e6f1dd6e3c3\",\"license\":\"AGPL-3.0-only\"},\"contracts/tokenization/JuniorDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport {AddressResolver} from \\\"../component/infra/AddressResolver.sol\\\";\\nimport {ILoanManager} from \\\"../interfaces/ILoanManager.sol\\\";\\nimport {BaseDepositToken} from \\\"./base/BaseDepositToken.sol\\\";\\n\\ncontract JuniorDepositToken is BaseDepositToken {\\n    using SafeMath for uint256;\\n\\n    constructor(\\n        AddressResolver _addressResolver,\\n        ERC20 _underlyingAsset,\\n        string memory _name,\\n        string memory _symbol\\n    ) BaseDepositToken(_addressResolver, _underlyingAsset, _name, _symbol) {}\\n\\n    function totalAssets() public view override returns (uint256) {\\n        return asset.balanceOf(address(this)) - totalUnbonding;\\n    }\\n}\\n\",\"keccak256\":\"0xe524ba9f2f921c5150e96b3f7c5a0a9f4a677940f61e2b54db8e55885c858993\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/SecurityDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../libraries/math/WadRayMath.sol\\\";\\nimport \\\"../component/vault/Vault.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract SecurityDepositToken is ERC20, AccessControl {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant VAULT = keccak256(\\\"VAULT\\\");\\n\\n    address public underlyingAsset;\\n    uint8 public underlyingAssetDecimals;\\n    Vault public vault;\\n\\n    event MintOnDeposit(address indexed account, uint256 amount);\\n\\n    event BurnOnRedeem(address indexed account, uint256 amount);\\n\\n    constructor(\\n        address _underlyingAsset,\\n        uint8 _underlyingAssetDecimals,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        _setupRole(VAULT, msg.sender);\\n        vault = Vault(msg.sender);\\n        underlyingAsset = _underlyingAsset;\\n        underlyingAssetDecimals = _underlyingAssetDecimals;\\n    }\\n\\n    function mintOnDeposit(address account, uint256 amount)\\n        external\\n        onlyRole(VAULT)\\n    {\\n        _mint(account, amount);\\n        emit MintOnDeposit(account, amount);\\n    }\\n\\n    function burnOnRedeem(address account, uint256 amount)\\n        external\\n        onlyRole(VAULT)\\n    {\\n        _burn(account, amount);\\n        emit BurnOnRedeem(account, amount);\\n    }\\n\\n    function underlyingBalanceOf(address _sponsor)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return vault.underlyingBalance(_sponsor, underlyingAsset);\\n    }\\n}\\n\",\"keccak256\":\"0xd1723b84427f36fe14e2a0a514867f13732d04795d9a0bbe488d67a6f152e157\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/SeniorDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport {AddressResolver} from \\\"../component/infra/AddressResolver.sol\\\";\\nimport {ILoanManager} from \\\"../interfaces/ILoanManager.sol\\\";\\nimport {BaseDepositToken} from \\\"./base/BaseDepositToken.sol\\\";\\n\\ncontract SeniorDepositToken is BaseDepositToken {\\n    using SafeMath for uint256;\\n\\n    constructor(\\n        AddressResolver _addressResolver,\\n        ERC20 _underlyingAsset,\\n        string memory _name,\\n        string memory _symbol\\n    ) BaseDepositToken(_addressResolver, _underlyingAsset, _name, _symbol) {}\\n\\n    function totalAssets() public view override returns (uint256) {\\n        uint256 underlyingBalance = asset.balanceOf(address(this));\\n        ILoanManager lm = ILoanManager(addressResolver.getLoanManagerProxy());\\n        uint256 outstandingPrincipal = lm.principalBalance(address(asset));\\n        return underlyingBalance + outstandingPrincipal - totalUnbonding;\\n    }\\n}\\n\",\"keccak256\":\"0xb105ee5fba64e2ff775533bad64c6ce642ff040358f846fbde55130f8c3aee0a\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/base/BaseDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {Errors} from \\\"../../libraries/helpers/Errors.sol\\\";\\nimport {IVToken} from \\\"../../interfaces/IVToken.sol\\\";\\nimport {AddressResolver} from \\\"../../component/infra/AddressResolver.sol\\\";\\n\\nabstract contract BaseDepositToken is Context, IVToken {\\n    using SafeMath for uint256;\\n    using SafeTransferLib for ERC20;\\n\\n    AddressResolver internal immutable addressResolver;\\n    // user address => timestamp => amount\\n    mapping(address => mapping(uint256 => uint256)) private withdrawals;\\n\\n    // user address => timestamp array\\n    mapping(address => uint256[]) private pendingTimestamp;\\n\\n    uint256 public override totalUnbonding;\\n\\n    uint256 public cooldown = 7 days;\\n\\n    event Claim(address receiver, uint256 amount);\\n\\n    modifier onlyAdmin() {\\n        require(\\n            _msgSender() == addressResolver.getAddress(\\\"liquidityManager\\\") ||\\n                _msgSender() == addressResolver.getAddress(\\\"loanManager\\\"),\\n            Errors.CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        AddressResolver _addressResolver,\\n        ERC20 _underlyingAsset,\\n        string memory _name,\\n        string memory _symbol\\n    ) IVToken(_underlyingAsset, _name, _symbol) {\\n        addressResolver = _addressResolver;\\n    }\\n\\n    function withdraw(\\n        uint256 _amount,\\n        address _receiver,\\n        address _owner\\n    ) public override returns (uint256 shares) {\\n        shares = previewWithdraw(_amount); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != _owner) {\\n            uint256 allowed = allowance[_owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max)\\n                allowance[_owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(_amount, shares);\\n\\n        _burn(_owner, shares);\\n        pushWithdraw(_owner, _amount);\\n\\n        emit Withdraw(msg.sender, _receiver, _owner, _amount, shares);\\n    }\\n\\n    function claim(uint256 _index) public override {\\n        uint256 amount = popWithdraw(msg.sender, _index);\\n        require(\\n            asset.balanceOf(address(this)) >= amount,\\n            \\\"Insufficient liquidity available\\\"\\n        );\\n        asset.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function transferUnderlyingTo(address _target, uint256 _amount)\\n        public\\n        override\\n        onlyAdmin\\n    {\\n        asset.safeTransfer(_target, _amount);\\n    }\\n\\n    function pushWithdraw(address _user, uint256 _amount) internal {\\n        require(withdrawals[_user][block.timestamp] == 0, \\\"invalid withdraw\\\");\\n        withdrawals[_user][block.timestamp] = _amount;\\n        pendingTimestamp[_user].push(block.timestamp);\\n        totalUnbonding += _amount;\\n    }\\n\\n    function popWithdraw(address _user, uint256 _index)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256[] storage times = pendingTimestamp[_user];\\n        require(_index < times.length, \\\"invalid index\\\");\\n        uint256 ts = times[_index];\\n        require(block.timestamp - ts > cooldown, \\\"cool down error\\\");\\n\\n        uint256 last = times[times.length - 1];\\n        times[_index] = last;\\n        times.pop();\\n\\n        uint256 withdrawable = withdrawals[_user][ts];\\n        delete withdrawals[_user][ts];\\n        totalUnbonding -= withdrawable;\\n        return withdrawable;\\n    }\\n\\n    function unbonding(address _user)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        uint256[] memory times = pendingTimestamp[_user];\\n        uint256[] memory amounts = new uint256[](times.length);\\n\\n        for (uint256 i = 0; i < times.length; i++) {\\n            amounts[i] = withdrawals[_user][times[i]];\\n        }\\n\\n        return (times, amounts);\\n    }\\n}\\n\",\"keccak256\":\"0x890a5101f9d93b8224d3f68fdc373a5ca38b48e1bff63deaa5548b3a61962ba7\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005106380380620051068339810160408190526200003491620012a3565b6040805160008082526020820190925283918391620000609184916200010960201b62001bda1760201c565b6200007a81600001516200036760201b62001e041760201c565b600062000091620003eb60201b62001ea61760201c565b6301ffc9a760e01b600090815260039091016020526040808220805460ff1990811660019081179092556307e4c70760e21b845282842080548216831790556348e2b09360e01b845282842080548216831790556307f5828d60e41b8452919092208054909116909117905550620016a09350505050565b60005b8351811015620003185760008482815181106200012d576200012d6200144d565b60200260200101516020015190506000600281111562000151576200015162001463565b81600281111562000166576200016662001463565b1415620001c557620001bf8583815181106200018657620001866200144d565b602002602001015160000151868481518110620001a757620001a76200144d565b602002602001015160400151620003fe60201b60201c565b62000302565b6001816002811115620001dc57620001dc62001463565b14156200023557620001bf858381518110620001fc57620001fc6200144d565b6020026020010151600001518684815181106200021d576200021d6200144d565b602002602001015160400151620006e660201b60201c565b60028160028111156200024c576200024c62001463565b1415620002a557620001bf8583815181106200026c576200026c6200144d565b6020026020010151600001518684815181106200028d576200028d6200144d565b602002602001015160400151620009eb60201b60201c565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b60648201526084015b60405180910390fd5b50806200030f816200148f565b9150506200010c565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738383836040516200034e939291906200150a565b60405180910390a162000362828262000b50565b505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132080546001600160a01b031981166001600160a01b038481169182179093556040516000805160206200505a833981519152939092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6000805160206200505a83398151915290565b6000815111620004545760405162461bcd60e51b815260206004820152602b6024820152600080516020620050e683398151915260448201526a1858d95d081d1bc818dd5d60aa1b6064820152608401620002f9565b6000805160206200505a8339815191526001600160a01b038316620004c05760405162461bcd60e51b815260206004820152602c6024820152600080516020620050a283398151915260448201526b65206164647265737328302960a01b6064820152608401620002f9565b6001600160a01b038316600090815260018201602052604090205461ffff811662000566576200050a84604051806060016040528060248152602001620050c26024913962000d6f565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff90961695909517909455845490810185559381529190912090910180546001600160a01b03191690911790555b60005b8351811015620006df5760008482815181106200058a576200058a6200144d565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b03168015620006325760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c72656164792065786973747300000000000000000000006064820152608401620002f9565b6001600160a01b03871660008181526001878101602090815260408084208054938401815584528184206008840401805463ffffffff60079095166004026101000a948502191660e089901c94909402939093179092556001600160e01b031986168352889052902080546001600160b01b031916909117600160a01b61ffff87160217905583620006c48162001611565b94505050508080620006d6906200148f565b91505062000569565b5050505050565b60008151116200073c5760405162461bcd60e51b815260206004820152602b6024820152600080516020620050e683398151915260448201526a1858d95d081d1bc818dd5d60aa1b6064820152608401620002f9565b6000805160206200505a8339815191526001600160a01b038316620007a85760405162461bcd60e51b815260206004820152602c6024820152600080516020620050a283398151915260448201526b65206164647265737328302960a01b6064820152608401620002f9565b6001600160a01b038316600090815260018201602052604090205461ffff81166200084e57620007f284604051806060016040528060248152602001620050c26024913962000d6f565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff90961695909517909455845490810185559381529190912090910180546001600160a01b03191690911790555b60005b8351811015620006df5760008482815181106200087257620008726200144d565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b03908116908716811415620009205760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e00000000000000006064820152608401620002f9565b6200092c818362000d93565b6001600160e01b03198216600081815260208781526040808320805461ffff60a01b1916600160a01b61ffff8b16021781556001600160a01b038c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b03191617905583620009d08162001611565b94505050508080620009e2906200148f565b91505062000851565b600081511162000a415760405162461bcd60e51b815260206004820152602b6024820152600080516020620050e683398151915260448201526a1858d95d081d1bc818dd5d60aa1b6064820152608401620002f9565b6000805160206200505a8339815191526001600160a01b0383161562000ad05760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d7573742062652061646472657373283029000000000000000000006064820152608401620002f9565b60005b825181101562000b4a57600083828151811062000af45762000af46200144d565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b031662000b32818362000d93565b5050808062000b41906200148f565b91505062000ad3565b50505050565b6001600160a01b03821662000bda5780511562000bd65760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527f3029206275745f63616c6c64617461206973206e6f7420656d707479000000006064820152608401620002f9565b5050565b600081511162000c535760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f7420616464726573732830290000006064820152608401620002f9565b6001600160a01b038216301462000c895762000c89826040518060600160405280602881526020016200507a6028913962000d6f565b600080836001600160a01b03168360405162000ca6919062001636565b600060405180830381855af49150503d806000811462000ce3576040519150601f19603f3d011682016040523d82523d6000602084013e62000ce8565b606091505b50915091508162000b4a5780511562000d17578060405162461bcd60e51b8152600401620002f9919062001654565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e2072656044820152651d995c9d195960d21b6064820152608401620002f9565b813b818162000b4a5760405162461bcd60e51b8152600401620002f9919062001654565b6000805160206200505a8339815191526001600160a01b03831662000e215760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e27742065786973740000000000000000006064820152608401620002f9565b6001600160a01b03831630141562000e935760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b6064820152608401620002f9565b6001600160e01b03198216600090815260208281526040808320546001600160a01b0387168452600180860190935290832054600160a01b90910461ffff16929162000edf9162001670565b905080821462000fd2576001600160a01b0385166000908152600184016020526040812080548390811062000f185762000f186200144d565b600091825260208083206008830401546001600160a01b038a168452600188019091526040909220805460079092166004026101000a90920460e01b92508291908590811062000f6c5762000f6c6200144d565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b031992909216825284905260409020805461ffff60a01b1916600160a01b61ffff8516021790555b6001600160a01b0385166000908152600184016020526040902080548062000ffe5762000ffe6200168a565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319861682528490526040902080546001600160b01b031916905580620006df5760028301546000906200106d9060019062001670565b6001600160a01b038716600090815260018087016020526040909120015490915061ffff1680821462001133576000856002018381548110620010b457620010b46200144d565b6000918252602090912001546002870180546001600160a01b039092169250829184908110620010e857620010e86200144d565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815260018781019092526040902001805461ffff191661ffff83161790555b846002018054806200114957620011496200168a565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03891682526001878101909152604090912001805461ffff1916905550505050505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715620011d657620011d66200119b565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200120757620012076200119b565b604052919050565b60006001600160401b038211156200122b576200122b6200119b565b5060051b60200190565b80516001600160a01b03811681146200124d57600080fd5b919050565b6000602082840312156200126557600080fd5b604051602081016001600160401b03811182821017156200128a576200128a6200119b565b6040529050806200129b8362001235565b905292915050565b60008060408385031215620012b757600080fd5b82516001600160401b0380821115620012cf57600080fd5b818501915085601f830112620012e457600080fd5b81516020620012fd620012f7836200120f565b620011dc565b82815260059290921b840181019181810190898411156200131d57600080fd5b8286015b848110156200142d578051868111156200133a57600080fd5b87016060818d03601f190112156200135157600080fd5b6200135b620011b1565b6200136886830162001235565b81526040820151600381106200137d57600080fd5b818701526060820151888111156200139457600080fd5b8083019250508c603f830112620013aa57600080fd5b85820151620013bd620012f7826200120f565b81815260059190911b830160400190878101908f831115620013de57600080fd5b6040850194505b82851015620014175784516001600160e01b0319811681146200140757600080fd5b82529388019390880190620013e5565b6040840152505084525091830191830162001321565b5096506200144090508888830162001252565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620014a657620014a662001479565b5060010190565b60005b83811015620014ca578181015183820152602001620014b0565b8381111562000b4a5750506000910152565b60008151808452620014f6816020860160208601620014ad565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b84811015620015df57898403607f19018652815180516001600160a01b031685528381015189860190600381106200157b57634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015620015c95783516001600160e01b03191682529286019260019290920191908601906200159d565b5097850197955050509082019060010162001533565b50506001600160a01b038a16908801528681036040880152620016038189620014dc565b9a9950505050505050505050565b600061ffff808316818114156200162c576200162c62001479565b6001019392505050565b600082516200164a818460208701620014ad565b9190910192915050565b602081526000620016696020830184620014dc565b9392505050565b60008282101562001685576200168562001479565b500390565b634e487b7160e01b600052603160045260246000fd5b6139aa80620016b06000396000f3fe6080604052600436106101b05760003560e01c80635db22de6116100ec578063cff08f991161008a578063e8484a0f11610064578063e8484a0f146105bb578063eafe74b5146105db578063ebe37d79146105fb578063fe5cd40e1461061b576101b7565b8063cff08f9914610539578063d028053914610559578063de1eb9a314610579576101b7565b8063b31d61b0116100c6578063b31d61b01461048b578063b36484d8146104ab578063b75fc04a146104ea578063c44b11f71461050a576101b7565b80635db22de61461042d57806366f230261461044d57806394f674431461046d576101b7565b80631af31a12116101595780633aa63c61116101335780633aa63c61146103ad57806345e14879146103cd5780634e151f25146103ed5780635ceae9c41461040d576101b7565b80631af31a121461035657806327d7b6241461036b57806335ea6a7514610380576101b7565b80630eb9af381161018a5780630eb9af38146102e85780631008df28146103085780631a075aae14610328576101b7565b8063044641eb1461027457806305a2ee2a1461029657806308c76502146102d3576101b7565b366101b757005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602081905260409091205481906001600160a01b0316806102505760405162461bcd60e51b815260206004820181905260248201527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f7420657869737460448201526064015b60405180910390fd5b3660008037600080366000845af43d6000803e80801561026f573d6000f35b3d6000fd5b34801561028057600080fd5b5061029461028f366004612f4e565b61063b565b005b3480156102a257600080fd5b506000546102b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102df57600080fd5b506102b66106ab565b3480156102f457600080fd5b506102b6610303366004612f8c565b610747565b34801561031457600080fd5b506102b6610323366004612fa9565b6107ad565b34801561033457600080fd5b50610348610343366004612fea565b610a36565b6040519081526020016102ca565b34801561036257600080fd5b506102b6610ae5565b34801561037757600080fd5b506102b6610b43565b34801561038c57600080fd5b506103a061039b366004612f8c565b610ba1565b6040516102ca9190613023565b3480156103b957600080fd5b506102946103c8366004613112565b610d10565b3480156103d957600080fd5b506102946103e83660046131af565b610dac565b3480156103f957600080fd5b50610294610408366004612fa9565b610e08565b34801561041957600080fd5b506102946104283660046131f1565b611038565b34801561043957600080fd5b50610348610448366004612fea565b61111a565b34801561045957600080fd5b50610294610468366004612fa9565b6111c8565b34801561047957600080fd5b506000546001600160a01b03166102b6565b34801561049757600080fd5b506102946104a63660046131af565b6113f8565b3480156104b757600080fd5b506104cb6104c6366004612f8c565b611454565b60408051931515845291151560208401521515908201526060016102ca565b3480156104f657600080fd5b50610294610505366004612f8c565b611502565b34801561051657600080fd5b5061052a610525366004612f8c565b611567565b604051905181526020016102ca565b34801561054557600080fd5b50610348610554366004613233565b611652565b34801561056557600080fd5b50610294610574366004613268565b611689565b34801561058557600080fd5b50610599610594366004612f8c565b611970565b60408051825181526020808401519082015291810151908201526060016102ca565b3480156105c757600080fd5b506102946105d6366004612f4e565b611a72565b3480156105e757600080fd5b506103486105f6366004612fea565b611aab565b34801561060757600080fd5b506103486106163660046132a0565b611b06565b34801561062757600080fd5b50610294610636366004612fea565b611b7c565b610643610b43565b6001600160a01b031663452572f3848484336040518563ffffffff1660e01b8152600401610674949392919061330a565b600060405180830381600087803b15801561068e57600080fd5b505af11580156106a2573d6000803e3d6000fd5b50505050505050565b60008054604080517f767ed933000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163767ed933916004808301926020929190829003018186803b15801561070957600080fd5b505afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610741919061334c565b92915050565b6000610751610ae5565b6040517f0eb9af380000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529190911690630eb9af389060240160206040518083038186803b15801561070957600080fd5b60007f6372656174655661756c740000000000000000000000000000000000000000006107d86106ab565b604051632fd702bb60e11b81523360048201526001600160a01b039190911690635fae05769060240160206040518083038186803b15801561081957600080fd5b505afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190613379565b61089d5760405162461bcd60e51b815260206004820181905260248201527f566f79616765723a206e6f742077686974656c697374656420616464726573736044820152606401610247565b6108a56106ab565b6001600160a01b031663128358c5826040518263ffffffff1660e01b81526004016108d291815260200190565b60206040518083038186803b1580156108ea57600080fd5b505afa1580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109229190613379565b6109795760405162461bcd60e51b815260206004820152602260248201527f566f79616765723a206e6f742077686974656c69737465642066756e6374696f6044820152616e7360f01b6064820152608401610247565b6000610983610ae5565b6040517f1008df280000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301528781166024830152604482018790529192508291821690631008df2890606401602060405180830381600087803b1580156109f357600080fd5b505af1158015610a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2b919061334c565b979650505050505050565b600080610a41610ae5565b6040517f1a075aae0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301529190911690631a075aae9060440160206040518083038186803b158015610aa557600080fd5b505afa158015610ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610add9190613394565b949350505050565b60008054604080517f40ccb0ae000000000000000000000000000000000000000000000000000000008152905183926001600160a01b0316916340ccb0ae916004808301926020929190829003018186803b15801561070957600080fd5b60008054604080517f6dd4bbf8000000000000000000000000000000000000000000000000000000008152905183926001600160a01b031691636dd4bbf8916004808301926020929190829003018186803b15801561070957600080fd5b604080516102408101825260006102208201818152825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e08101829052610200810191909152604080518082019091526002815261036360f41b60208201526001600160a01b0383163b610c725760405162461bcd60e51b81526004016102479190613423565b50610c7b610b43565b6040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906335ea6a75906024016102206040518083038186803b158015610cd857600080fd5b505afa158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074191906134d3565b610d18610ae5565b6040517f3aa63c610000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301528481166044830152606482018490529190911690633aa63c61906084015b600060405180830381600087803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b5050505050505050565b610db4611eca565b6000610dbe6106ab565b6040517f45e148790000000000000000000000000000000000000000000000000000000081529091506001600160a01b038216906345e148799061067490869086906004016135dd565b7f72656465656d5365637572697479000000000000000000000000000000000000610e316106ab565b604051632fd702bb60e11b81523360048201526001600160a01b039190911690635fae05769060240160206040518083038186803b158015610e7257600080fd5b505afa158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa9190613379565b610ef65760405162461bcd60e51b815260206004820181905260248201527f566f79616765723a206e6f742077686974656c697374656420616464726573736044820152606401610247565b610efe6106ab565b6001600160a01b031663128358c5826040518263ffffffff1660e01b8152600401610f2b91815260200190565b60206040518083038186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7b9190613379565b610fd25760405162461bcd60e51b815260206004820152602260248201527f566f79616765723a206e6f742077686974656c69737465642066756e6374696f6044820152616e7360f01b6064820152608401610247565b610fda610ae5565b6040517f365a07170000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038681166024830152858116604483015260648201859052919091169063365a071790608401610d74565b60008054906101000a90046001600160a01b03166001600160a01b031663a5c84e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561108457600080fd5b505afa158015611098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bc919061334c565b6040517f52da17a40000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03858116602483015260448201859052838116606483015291909116906352da17a490608401610674565b6000611124610ae5565b6040517f5db22de60000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015284811660248301529190911690635db22de6906044015b60206040518083038186803b15801561118957600080fd5b505afa15801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c19190613394565b9392505050565b7f6465706f736974536563757269747900000000000000000000000000000000006111f16106ab565b604051632fd702bb60e11b81523360048201526001600160a01b039190911690635fae05769060240160206040518083038186803b15801561123257600080fd5b505afa158015611246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126a9190613379565b6112b65760405162461bcd60e51b815260206004820181905260248201527f566f79616765723a206e6f742077686974656c697374656420616464726573736044820152606401610247565b6112be6106ab565b6001600160a01b031663128358c5826040518263ffffffff1660e01b81526004016112eb91815260200190565b60206040518083038186803b15801561130357600080fd5b505afa158015611317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133b9190613379565b6113925760405162461bcd60e51b815260206004820152602260248201527f566f79616765723a206e6f742077686974656c69737465642066756e6374696f6044820152616e7360f01b6064820152608401610247565b61139a610ae5565b6040517ff7e140ce0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038681166024830152858116604483015260648201859052919091169063f7e140ce90608401610d74565b611400611eca565b600061140a6106ab565b6040517fb31d61b00000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063b31d61b0906106749086908690600401613632565b6000806000611461610b43565b6040517f817ad5d30000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152919091169063817ad5d39060240160606040518083038186803b1580156114bd57600080fd5b505afa1580156114d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f59190613680565b9250925092509193909250565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b0316331461153857600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051602080820183526000825282518084019093526002835261036360f41b90830152906001600160a01b0383163b6115b55760405162461bcd60e51b81526004016102479190613423565b506115be610b43565b6040517fc44b11f70000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063c44b11f79060240160206040518083038186803b15801561161a57600080fd5b505afa15801561162e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074191906136c3565b600061165c610b43565b6001600160a01b031663284592b284846040518363ffffffff1660e01b81526004016111719291906136df565b7f626f72726f7700000000000000000000000000000000000000000000000000006116b26106ab565b604051632fd702bb60e11b81523360048201526001600160a01b039190911690635fae05769060240160206040518083038186803b1580156116f357600080fd5b505afa158015611707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172b9190613379565b6117775760405162461bcd60e51b815260206004820181905260248201527f566f79616765723a206e6f742077686974656c697374656420616464726573736044820152606401610247565b61177f6106ab565b6001600160a01b031663128358c5826040518263ffffffff1660e01b81526004016117ac91815260200190565b60206040518083038186803b1580156117c457600080fd5b505afa1580156117d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fc9190613379565b6118535760405162461bcd60e51b815260206004820152602260248201527f566f79616765723a206e6f742077686974656c69737465642066756e6374696f6044820152616e7360f01b6064820152608401610247565b60008054906101000a90046001600160a01b03166001600160a01b031663a5c84e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561189f57600080fd5b505afa1580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d7919061334c565b6040517fca89346a0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03878116602483015260448201879052858116606483015260848201859052919091169063ca89346a9060a401600060405180830381600087803b15801561195157600080fd5b505af1158015611965573d6000803e3d6000fd5b505050505050505050565b61199460405180606001604052806000815260200160008152602001600081525090565b604080518082019091526002815261036360f41b60208201526001600160a01b0383163b6119d55760405162461bcd60e51b81526004016102479190613423565b506119de610ae5565b6040517fde1eb9a30000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063de1eb9a39060240160606040518083038186803b158015611a3a57600080fd5b505afa158015611a4e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074191906136fc565b611a7a610b43565b6001600160a01b031663c38354ef848484336040518563ffffffff1660e01b8152600401610674949392919061330a565b6000611ab5610ae5565b6040517feafe74b50000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528481166024830152919091169063eafe74b590604401611171565b6000611b10610ae5565b6040517f6e19433a0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015284811660448301529190911690636e19433a9060640160206040518083038186803b158015610aa557600080fd5b6000611b86610ae5565b6040517ffe5cd40e0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528481166024830152919250829182169063fe5cd40e90604401610d74565b60005b8351811015611db9576000848281518110611bfa57611bfa613766565b602002602001015160200151905060006002811115611c1b57611c1b6132e0565b816002811115611c2d57611c2d6132e0565b1415611c7c57611c77858381518110611c4857611c48613766565b602002602001015160000151868481518110611c6657611c66613766565b602002602001015160400151612033565b611da6565b6001816002811115611c9057611c906132e0565b1415611cda57611c77858381518110611cab57611cab613766565b602002602001015160000151868481518110611cc957611cc9613766565b602002602001015160400151612383565b6002816002811115611cee57611cee6132e0565b1415611d3857611c77858381518110611d0957611d09613766565b602002602001015160000151868481518110611d2757611d27613766565b6020026020010151604001516126fd565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560448201527f74416374696f6e000000000000000000000000000000000000000000000000006064820152608401610247565b5080611db181613792565b915050611bdd565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673838383604051611ded939291906137ad565b60405180910390a1611dff8282612889565b505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b038481169182179093556040517fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c939092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60008060009054906101000a90046001600160a01b03166001600160a01b031663c2c855c26040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1957600080fd5b505afa158015611f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f51919061334c565b6040517f1f77f8c60000000000000000000000000000000000000000000000000000000081523260048201529091506001600160a01b03821690631f77f8c69060240160206040518083038186803b158015611fac57600080fd5b505afa158015611fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe49190613379565b6120305760405162461bcd60e51b815260206004820152600f60248201527f4e6f74207661756c742061646d696e00000000000000000000000000000000006044820152606401610247565b50565b60008151116120aa5760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f206375740000000000000000000000000000000000000000006064820152608401610247565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b0383166121475760405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201527f65206164647265737328302900000000000000000000000000000000000000006064820152608401610247565b6001600160a01b038316600090815260018201602052604090205461ffff81166121f65761218d8460405180606001604052806024815260200161395160249139612aad565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff909616959095179094558454908101855593815291909120909101805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60005b835181101561237c57600084828151811061221657612216613766565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b031680156122bc5760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c72656164792065786973747300000000000000000000006064820152608401610247565b6001600160a01b03871660008181526001878101602090815260408084208054938401815584528184206008840401805463ffffffff60079095166004026101000a948502191660e089901c94909402939093179092556001600160e01b031986168352889052902080547fffffffffffffffffffff0000000000000000000000000000000000000000000016909117600160a01b61ffff87160217905583612364816138bd565b9450505050808061237490613792565b9150506121f9565b5050505050565b60008151116123fa5760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f206375740000000000000000000000000000000000000000006064820152608401610247565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b0383166124975760405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201527f65206164647265737328302900000000000000000000000000000000000000006064820152608401610247565b6001600160a01b038316600090815260018201602052604090205461ffff8116612546576124dd8460405180606001604052806024815260200161395160249139612aad565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff909616959095179094558454908101855593815291909120909101805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60005b835181101561237c57600084828151811061256657612566613766565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b039081169087168114156126125760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e00000000000000006064820152608401610247565b61261c8183612ace565b6001600160e01b0319821660008181526020878152604080832080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8b16021781556001600160a01b038c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c949094029390931790925593909252879052815473ffffffffffffffffffffffffffffffffffffffff1916179055836126e5816138bd565b945050505080806126f590613792565b915050612549565b60008151116127745760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f206375740000000000000000000000000000000000000000006064820152608401610247565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b038316156128125760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d7573742062652061646472657373283029000000000000000000006064820152608401610247565b60005b825181101561288357600083828151811061283257612832613766565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b031661286e8183612ace565b5050808061287b90613792565b915050612815565b50505050565b6001600160a01b0382166129105780511561290c5760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527f3029206275745f63616c6c64617461206973206e6f7420656d707479000000006064820152608401610247565b5050565b60008151116129875760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f7420616464726573732830290000006064820152608401610247565b6001600160a01b03821630146129b9576129b98260405180606001604052806028815260200161392960289139612aad565b600080836001600160a01b0316836040516129d491906138df565b600060405180830381855af49150503d8060008114612a0f576040519150601f19603f3d011682016040523d82523d6000602084013e612a14565b606091505b50915091508161288357805115612a3f578060405162461bcd60e51b81526004016102479190613423565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e20726560448201527f76657274656400000000000000000000000000000000000000000000000000006064820152608401610247565b813b81816128835760405162461bcd60e51b81526004016102479190613423565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b038316612b6b5760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e27742065786973740000000000000000006064820152608401610247565b6001600160a01b038316301415612bea5760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201527f7461626c652066756e6374696f6e0000000000000000000000000000000000006064820152608401610247565b6001600160e01b03198216600090815260208281526040808320546001600160a01b0387168452600180860190935290832054600160a01b90910461ffff169291612c34916138fb565b9050808214612d3a576001600160a01b03851660009081526001840160205260408120805483908110612c6957612c69613766565b600091825260208083206008830401546001600160a01b038a168452600188019091526040909220805460079092166004026101000a90920460e01b925082919085908110612cba57612cba613766565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528490526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8516021790555b6001600160a01b03851660009081526001840160205260409020805480612d6357612d63613912565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319861682528490526040902080547fffffffffffffffffffff000000000000000000000000000000000000000000001690558061237c576002830154600090612de7906001906138fb565b6001600160a01b038716600090815260018087016020526040909120015490915061ffff16808214612eb3576000856002018381548110612e2a57612e2a613766565b6000918252602090912001546002870180546001600160a01b039092169250829184908110612e5b57612e5b613766565b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0394851617905592909116815260018781019092526040902001805461ffff191661ffff83161790555b84600201805480612ec657612ec6613912565b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b03891682526001878101909152604090912001805461ffff1916905550505050505050565b6001600160a01b038116811461203057600080fd5b803560028110612f4957600080fd5b919050565b600080600060608486031215612f6357600080fd5b8335612f6e81612f25565b9250612f7c60208501612f3a565b9150604084013590509250925092565b600060208284031215612f9e57600080fd5b81356111c181612f25565b600080600060608486031215612fbe57600080fd5b8335612fc981612f25565b92506020840135612fd981612f25565b929592945050506040919091013590565b60008060408385031215612ffd57600080fd5b823561300881612f25565b9150602083013561301881612f25565b809150509250929050565b815151815261022081016020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015161308360e08401826001600160a01b03169052565b50610100838101516001600160a01b0390811691840191909152610120808501518216908401526101408085015182169084015261016080850151909116908301526101808084015164ffffffffff908116918401919091526101a080850151909116908301526101c080840151908301526101e0808401519083015261020092830151929091019190915290565b6000806000806080858703121561312857600080fd5b843561313381612f25565b9350602085013561314381612f25565b9250604085013561315381612f25565b9396929550929360600135925050565b60008083601f84011261317557600080fd5b50813567ffffffffffffffff81111561318d57600080fd5b6020830191508360208260051b85010111156131a857600080fd5b9250929050565b600080602083850312156131c257600080fd5b823567ffffffffffffffff8111156131d957600080fd5b6131e585828601613163565b90969095509350505050565b60008060006060848603121561320657600080fd5b833561321181612f25565b925060208401359150604084013561322881612f25565b809150509250925092565b6000806040838503121561324657600080fd5b823561325181612f25565b915061325f60208401612f3a565b90509250929050565b6000806000806080858703121561327e57600080fd5b843561328981612f25565b935060208501359250604085013561315381612f25565b6000806000606084860312156132b557600080fd5b83356132c081612f25565b925060208401356132d081612f25565b9150604084013561322881612f25565b634e487b7160e01b600052602160045260246000fd5b60028110613306576133066132e0565b9052565b6001600160a01b038581168252608082019061332960208401876132f6565b84604084015280841660608401525095945050505050565b8051612f4981612f25565b60006020828403121561335e57600080fd5b81516111c181612f25565b80518015158114612f4957600080fd5b60006020828403121561338b57600080fd5b6111c182613369565b6000602082840312156133a657600080fd5b5051919050565b60005b838110156133c85781810151838201526020016133b0565b838111156128835750506000910152565b600081518084526133f18160208601602086016133ad565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006111c160208301846133d9565b604051610220810167ffffffffffffffff8111828210171561346857634e487b7160e01b600052604160045260246000fd5b60405290565b60006020828403121561348057600080fd5b6040516020810181811067ffffffffffffffff821117156134b157634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b805164ffffffffff81168114612f4957600080fd5b600061022082840312156134e657600080fd5b6134ee613436565b6134f8848461346e565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261354260e08401613341565b60e0820152610100613555818501613341565b90820152610120613567848201613341565b90820152610140613579848201613341565b9082015261016061358b848201613341565b9082015261018061359d8482016134be565b908201526101a06135af8482016134be565b908201526101c083810151908201526101e08084015190820152610200928301519281019290925250919050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561361657600080fd5b8260051b80856040850137600092016040019182525092915050565b60208082528181018390526000908460408401835b8681101561367557823561365a81612f25565b6001600160a01b031682529183019190830190600101613647565b509695505050505050565b60008060006060848603121561369557600080fd5b61369e84613369565b92506136ac60208501613369565b91506136ba60408501613369565b90509250925092565b6000602082840312156136d557600080fd5b6111c1838361346e565b6001600160a01b0383168152604081016111c160208301846132f6565b60006060828403121561370e57600080fd5b6040516060810181811067ffffffffffffffff8211171561373f57634e487b7160e01b600052604160045260246000fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156137a6576137a661377c565b5060010190565b60006060808301818452808751808352608092508286019150828160051b8701016020808b016000805b8581101561388c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808b860301875282518986016001600160a01b038251168752858201516003811061382c5761382c6132e0565b878701526040918201519187018b90528151908190529085019083908a8801905b808310156138775783516001600160e01b031916825292870192600192909201919087019061384d565b509886019896505050918301916001016137d7565b5050506001600160a01b038a169088015286810360408801526138af81896133d9565b9a9950505050505050505050565b600061ffff808316818114156138d5576138d561377c565b6001019392505050565b600082516138f18184602087016133ad565b9190910192915050565b60008282101561390d5761390d61377c565b500390565b634e487b7160e01b600052603160045260246000fdfe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a2646970667358221220ddeec2141436e70f80037cda8c6ee0afb2add645607c018f5fd41024807b592464736f6c63430008090033c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204164642066616365742063616e277420624c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f64654c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e2066",
  "deployedBytecode": "0x6080604052600436106101b05760003560e01c80635db22de6116100ec578063cff08f991161008a578063e8484a0f11610064578063e8484a0f146105bb578063eafe74b5146105db578063ebe37d79146105fb578063fe5cd40e1461061b576101b7565b8063cff08f9914610539578063d028053914610559578063de1eb9a314610579576101b7565b8063b31d61b0116100c6578063b31d61b01461048b578063b36484d8146104ab578063b75fc04a146104ea578063c44b11f71461050a576101b7565b80635db22de61461042d57806366f230261461044d57806394f674431461046d576101b7565b80631af31a12116101595780633aa63c61116101335780633aa63c61146103ad57806345e14879146103cd5780634e151f25146103ed5780635ceae9c41461040d576101b7565b80631af31a121461035657806327d7b6241461036b57806335ea6a7514610380576101b7565b80630eb9af381161018a5780630eb9af38146102e85780631008df28146103085780631a075aae14610328576101b7565b8063044641eb1461027457806305a2ee2a1461029657806308c76502146102d3576101b7565b366101b757005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602081905260409091205481906001600160a01b0316806102505760405162461bcd60e51b815260206004820181905260248201527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f7420657869737460448201526064015b60405180910390fd5b3660008037600080366000845af43d6000803e80801561026f573d6000f35b3d6000fd5b34801561028057600080fd5b5061029461028f366004612f4e565b61063b565b005b3480156102a257600080fd5b506000546102b6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102df57600080fd5b506102b66106ab565b3480156102f457600080fd5b506102b6610303366004612f8c565b610747565b34801561031457600080fd5b506102b6610323366004612fa9565b6107ad565b34801561033457600080fd5b50610348610343366004612fea565b610a36565b6040519081526020016102ca565b34801561036257600080fd5b506102b6610ae5565b34801561037757600080fd5b506102b6610b43565b34801561038c57600080fd5b506103a061039b366004612f8c565b610ba1565b6040516102ca9190613023565b3480156103b957600080fd5b506102946103c8366004613112565b610d10565b3480156103d957600080fd5b506102946103e83660046131af565b610dac565b3480156103f957600080fd5b50610294610408366004612fa9565b610e08565b34801561041957600080fd5b506102946104283660046131f1565b611038565b34801561043957600080fd5b50610348610448366004612fea565b61111a565b34801561045957600080fd5b50610294610468366004612fa9565b6111c8565b34801561047957600080fd5b506000546001600160a01b03166102b6565b34801561049757600080fd5b506102946104a63660046131af565b6113f8565b3480156104b757600080fd5b506104cb6104c6366004612f8c565b611454565b60408051931515845291151560208401521515908201526060016102ca565b3480156104f657600080fd5b50610294610505366004612f8c565b611502565b34801561051657600080fd5b5061052a610525366004612f8c565b611567565b604051905181526020016102ca565b34801561054557600080fd5b50610348610554366004613233565b611652565b34801561056557600080fd5b50610294610574366004613268565b611689565b34801561058557600080fd5b50610599610594366004612f8c565b611970565b60408051825181526020808401519082015291810151908201526060016102ca565b3480156105c757600080fd5b506102946105d6366004612f4e565b611a72565b3480156105e757600080fd5b506103486105f6366004612fea565b611aab565b34801561060757600080fd5b506103486106163660046132a0565b611b06565b34801561062757600080fd5b50610294610636366004612fea565b611b7c565b610643610b43565b6001600160a01b031663452572f3848484336040518563ffffffff1660e01b8152600401610674949392919061330a565b600060405180830381600087803b15801561068e57600080fd5b505af11580156106a2573d6000803e3d6000fd5b50505050505050565b60008054604080517f767ed933000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163767ed933916004808301926020929190829003018186803b15801561070957600080fd5b505afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610741919061334c565b92915050565b6000610751610ae5565b6040517f0eb9af380000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529190911690630eb9af389060240160206040518083038186803b15801561070957600080fd5b60007f6372656174655661756c740000000000000000000000000000000000000000006107d86106ab565b604051632fd702bb60e11b81523360048201526001600160a01b039190911690635fae05769060240160206040518083038186803b15801561081957600080fd5b505afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190613379565b61089d5760405162461bcd60e51b815260206004820181905260248201527f566f79616765723a206e6f742077686974656c697374656420616464726573736044820152606401610247565b6108a56106ab565b6001600160a01b031663128358c5826040518263ffffffff1660e01b81526004016108d291815260200190565b60206040518083038186803b1580156108ea57600080fd5b505afa1580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109229190613379565b6109795760405162461bcd60e51b815260206004820152602260248201527f566f79616765723a206e6f742077686974656c69737465642066756e6374696f6044820152616e7360f01b6064820152608401610247565b6000610983610ae5565b6040517f1008df280000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301528781166024830152604482018790529192508291821690631008df2890606401602060405180830381600087803b1580156109f357600080fd5b505af1158015610a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2b919061334c565b979650505050505050565b600080610a41610ae5565b6040517f1a075aae0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301529190911690631a075aae9060440160206040518083038186803b158015610aa557600080fd5b505afa158015610ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610add9190613394565b949350505050565b60008054604080517f40ccb0ae000000000000000000000000000000000000000000000000000000008152905183926001600160a01b0316916340ccb0ae916004808301926020929190829003018186803b15801561070957600080fd5b60008054604080517f6dd4bbf8000000000000000000000000000000000000000000000000000000008152905183926001600160a01b031691636dd4bbf8916004808301926020929190829003018186803b15801561070957600080fd5b604080516102408101825260006102208201818152825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e08101829052610200810191909152604080518082019091526002815261036360f41b60208201526001600160a01b0383163b610c725760405162461bcd60e51b81526004016102479190613423565b50610c7b610b43565b6040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906335ea6a75906024016102206040518083038186803b158015610cd857600080fd5b505afa158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074191906134d3565b610d18610ae5565b6040517f3aa63c610000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301528481166044830152606482018490529190911690633aa63c61906084015b600060405180830381600087803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b5050505050505050565b610db4611eca565b6000610dbe6106ab565b6040517f45e148790000000000000000000000000000000000000000000000000000000081529091506001600160a01b038216906345e148799061067490869086906004016135dd565b7f72656465656d5365637572697479000000000000000000000000000000000000610e316106ab565b604051632fd702bb60e11b81523360048201526001600160a01b039190911690635fae05769060240160206040518083038186803b158015610e7257600080fd5b505afa158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa9190613379565b610ef65760405162461bcd60e51b815260206004820181905260248201527f566f79616765723a206e6f742077686974656c697374656420616464726573736044820152606401610247565b610efe6106ab565b6001600160a01b031663128358c5826040518263ffffffff1660e01b8152600401610f2b91815260200190565b60206040518083038186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7b9190613379565b610fd25760405162461bcd60e51b815260206004820152602260248201527f566f79616765723a206e6f742077686974656c69737465642066756e6374696f6044820152616e7360f01b6064820152608401610247565b610fda610ae5565b6040517f365a07170000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038681166024830152858116604483015260648201859052919091169063365a071790608401610d74565b60008054906101000a90046001600160a01b03166001600160a01b031663a5c84e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561108457600080fd5b505afa158015611098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bc919061334c565b6040517f52da17a40000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03858116602483015260448201859052838116606483015291909116906352da17a490608401610674565b6000611124610ae5565b6040517f5db22de60000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015284811660248301529190911690635db22de6906044015b60206040518083038186803b15801561118957600080fd5b505afa15801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c19190613394565b9392505050565b7f6465706f736974536563757269747900000000000000000000000000000000006111f16106ab565b604051632fd702bb60e11b81523360048201526001600160a01b039190911690635fae05769060240160206040518083038186803b15801561123257600080fd5b505afa158015611246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126a9190613379565b6112b65760405162461bcd60e51b815260206004820181905260248201527f566f79616765723a206e6f742077686974656c697374656420616464726573736044820152606401610247565b6112be6106ab565b6001600160a01b031663128358c5826040518263ffffffff1660e01b81526004016112eb91815260200190565b60206040518083038186803b15801561130357600080fd5b505afa158015611317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133b9190613379565b6113925760405162461bcd60e51b815260206004820152602260248201527f566f79616765723a206e6f742077686974656c69737465642066756e6374696f6044820152616e7360f01b6064820152608401610247565b61139a610ae5565b6040517ff7e140ce0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038681166024830152858116604483015260648201859052919091169063f7e140ce90608401610d74565b611400611eca565b600061140a6106ab565b6040517fb31d61b00000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063b31d61b0906106749086908690600401613632565b6000806000611461610b43565b6040517f817ad5d30000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152919091169063817ad5d39060240160606040518083038186803b1580156114bd57600080fd5b505afa1580156114d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f59190613680565b9250925092509193909250565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b0316331461153857600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60408051602080820183526000825282518084019093526002835261036360f41b90830152906001600160a01b0383163b6115b55760405162461bcd60e51b81526004016102479190613423565b506115be610b43565b6040517fc44b11f70000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063c44b11f79060240160206040518083038186803b15801561161a57600080fd5b505afa15801561162e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074191906136c3565b600061165c610b43565b6001600160a01b031663284592b284846040518363ffffffff1660e01b81526004016111719291906136df565b7f626f72726f7700000000000000000000000000000000000000000000000000006116b26106ab565b604051632fd702bb60e11b81523360048201526001600160a01b039190911690635fae05769060240160206040518083038186803b1580156116f357600080fd5b505afa158015611707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172b9190613379565b6117775760405162461bcd60e51b815260206004820181905260248201527f566f79616765723a206e6f742077686974656c697374656420616464726573736044820152606401610247565b61177f6106ab565b6001600160a01b031663128358c5826040518263ffffffff1660e01b81526004016117ac91815260200190565b60206040518083038186803b1580156117c457600080fd5b505afa1580156117d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fc9190613379565b6118535760405162461bcd60e51b815260206004820152602260248201527f566f79616765723a206e6f742077686974656c69737465642066756e6374696f6044820152616e7360f01b6064820152608401610247565b60008054906101000a90046001600160a01b03166001600160a01b031663a5c84e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561189f57600080fd5b505afa1580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d7919061334c565b6040517fca89346a0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03878116602483015260448201879052858116606483015260848201859052919091169063ca89346a9060a401600060405180830381600087803b15801561195157600080fd5b505af1158015611965573d6000803e3d6000fd5b505050505050505050565b61199460405180606001604052806000815260200160008152602001600081525090565b604080518082019091526002815261036360f41b60208201526001600160a01b0383163b6119d55760405162461bcd60e51b81526004016102479190613423565b506119de610ae5565b6040517fde1eb9a30000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063de1eb9a39060240160606040518083038186803b158015611a3a57600080fd5b505afa158015611a4e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074191906136fc565b611a7a610b43565b6001600160a01b031663c38354ef848484336040518563ffffffff1660e01b8152600401610674949392919061330a565b6000611ab5610ae5565b6040517feafe74b50000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528481166024830152919091169063eafe74b590604401611171565b6000611b10610ae5565b6040517f6e19433a0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015284811660448301529190911690636e19433a9060640160206040518083038186803b158015610aa557600080fd5b6000611b86610ae5565b6040517ffe5cd40e0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528481166024830152919250829182169063fe5cd40e90604401610d74565b60005b8351811015611db9576000848281518110611bfa57611bfa613766565b602002602001015160200151905060006002811115611c1b57611c1b6132e0565b816002811115611c2d57611c2d6132e0565b1415611c7c57611c77858381518110611c4857611c48613766565b602002602001015160000151868481518110611c6657611c66613766565b602002602001015160400151612033565b611da6565b6001816002811115611c9057611c906132e0565b1415611cda57611c77858381518110611cab57611cab613766565b602002602001015160000151868481518110611cc957611cc9613766565b602002602001015160400151612383565b6002816002811115611cee57611cee6132e0565b1415611d3857611c77858381518110611d0957611d09613766565b602002602001015160000151868481518110611d2757611d27613766565b6020026020010151604001516126fd565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560448201527f74416374696f6e000000000000000000000000000000000000000000000000006064820152608401610247565b5080611db181613792565b915050611bdd565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673838383604051611ded939291906137ad565b60405180910390a1611dff8282612889565b505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b038481169182179093556040517fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c939092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60008060009054906101000a90046001600160a01b03166001600160a01b031663c2c855c26040518163ffffffff1660e01b815260040160206040518083038186803b158015611f1957600080fd5b505afa158015611f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f51919061334c565b6040517f1f77f8c60000000000000000000000000000000000000000000000000000000081523260048201529091506001600160a01b03821690631f77f8c69060240160206040518083038186803b158015611fac57600080fd5b505afa158015611fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe49190613379565b6120305760405162461bcd60e51b815260206004820152600f60248201527f4e6f74207661756c742061646d696e00000000000000000000000000000000006044820152606401610247565b50565b60008151116120aa5760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f206375740000000000000000000000000000000000000000006064820152608401610247565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b0383166121475760405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201527f65206164647265737328302900000000000000000000000000000000000000006064820152608401610247565b6001600160a01b038316600090815260018201602052604090205461ffff81166121f65761218d8460405180606001604052806024815260200161395160249139612aad565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff909616959095179094558454908101855593815291909120909101805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60005b835181101561237c57600084828151811061221657612216613766565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b031680156122bc5760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c72656164792065786973747300000000000000000000006064820152608401610247565b6001600160a01b03871660008181526001878101602090815260408084208054938401815584528184206008840401805463ffffffff60079095166004026101000a948502191660e089901c94909402939093179092556001600160e01b031986168352889052902080547fffffffffffffffffffff0000000000000000000000000000000000000000000016909117600160a01b61ffff87160217905583612364816138bd565b9450505050808061237490613792565b9150506121f9565b5050505050565b60008151116123fa5760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f206375740000000000000000000000000000000000000000006064820152608401610247565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b0383166124975760405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201527f65206164647265737328302900000000000000000000000000000000000000006064820152608401610247565b6001600160a01b038316600090815260018201602052604090205461ffff8116612546576124dd8460405180606001604052806024815260200161395160249139612aad565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff909616959095179094558454908101855593815291909120909101805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60005b835181101561237c57600084828151811061256657612566613766565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b039081169087168114156126125760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e00000000000000006064820152608401610247565b61261c8183612ace565b6001600160e01b0319821660008181526020878152604080832080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8b16021781556001600160a01b038c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c949094029390931790925593909252879052815473ffffffffffffffffffffffffffffffffffffffff1916179055836126e5816138bd565b945050505080806126f590613792565b915050612549565b60008151116127745760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f206375740000000000000000000000000000000000000000006064820152608401610247565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b038316156128125760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d7573742062652061646472657373283029000000000000000000006064820152608401610247565b60005b825181101561288357600083828151811061283257612832613766565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b031661286e8183612ace565b5050808061287b90613792565b915050612815565b50505050565b6001600160a01b0382166129105780511561290c5760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527f3029206275745f63616c6c64617461206973206e6f7420656d707479000000006064820152608401610247565b5050565b60008151116129875760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f7420616464726573732830290000006064820152608401610247565b6001600160a01b03821630146129b9576129b98260405180606001604052806028815260200161392960289139612aad565b600080836001600160a01b0316836040516129d491906138df565b600060405180830381855af49150503d8060008114612a0f576040519150601f19603f3d011682016040523d82523d6000602084013e612a14565b606091505b50915091508161288357805115612a3f578060405162461bcd60e51b81526004016102479190613423565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e20726560448201527f76657274656400000000000000000000000000000000000000000000000000006064820152608401610247565b813b81816128835760405162461bcd60e51b81526004016102479190613423565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b038316612b6b5760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e27742065786973740000000000000000006064820152608401610247565b6001600160a01b038316301415612bea5760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201527f7461626c652066756e6374696f6e0000000000000000000000000000000000006064820152608401610247565b6001600160e01b03198216600090815260208281526040808320546001600160a01b0387168452600180860190935290832054600160a01b90910461ffff169291612c34916138fb565b9050808214612d3a576001600160a01b03851660009081526001840160205260408120805483908110612c6957612c69613766565b600091825260208083206008830401546001600160a01b038a168452600188019091526040909220805460079092166004026101000a90920460e01b925082919085908110612cba57612cba613766565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528490526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8516021790555b6001600160a01b03851660009081526001840160205260409020805480612d6357612d63613912565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319861682528490526040902080547fffffffffffffffffffff000000000000000000000000000000000000000000001690558061237c576002830154600090612de7906001906138fb565b6001600160a01b038716600090815260018087016020526040909120015490915061ffff16808214612eb3576000856002018381548110612e2a57612e2a613766565b6000918252602090912001546002870180546001600160a01b039092169250829184908110612e5b57612e5b613766565b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0394851617905592909116815260018781019092526040902001805461ffff191661ffff83161790555b84600201805480612ec657612ec6613912565b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b03891682526001878101909152604090912001805461ffff1916905550505050505050565b6001600160a01b038116811461203057600080fd5b803560028110612f4957600080fd5b919050565b600080600060608486031215612f6357600080fd5b8335612f6e81612f25565b9250612f7c60208501612f3a565b9150604084013590509250925092565b600060208284031215612f9e57600080fd5b81356111c181612f25565b600080600060608486031215612fbe57600080fd5b8335612fc981612f25565b92506020840135612fd981612f25565b929592945050506040919091013590565b60008060408385031215612ffd57600080fd5b823561300881612f25565b9150602083013561301881612f25565b809150509250929050565b815151815261022081016020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015161308360e08401826001600160a01b03169052565b50610100838101516001600160a01b0390811691840191909152610120808501518216908401526101408085015182169084015261016080850151909116908301526101808084015164ffffffffff908116918401919091526101a080850151909116908301526101c080840151908301526101e0808401519083015261020092830151929091019190915290565b6000806000806080858703121561312857600080fd5b843561313381612f25565b9350602085013561314381612f25565b9250604085013561315381612f25565b9396929550929360600135925050565b60008083601f84011261317557600080fd5b50813567ffffffffffffffff81111561318d57600080fd5b6020830191508360208260051b85010111156131a857600080fd5b9250929050565b600080602083850312156131c257600080fd5b823567ffffffffffffffff8111156131d957600080fd5b6131e585828601613163565b90969095509350505050565b60008060006060848603121561320657600080fd5b833561321181612f25565b925060208401359150604084013561322881612f25565b809150509250925092565b6000806040838503121561324657600080fd5b823561325181612f25565b915061325f60208401612f3a565b90509250929050565b6000806000806080858703121561327e57600080fd5b843561328981612f25565b935060208501359250604085013561315381612f25565b6000806000606084860312156132b557600080fd5b83356132c081612f25565b925060208401356132d081612f25565b9150604084013561322881612f25565b634e487b7160e01b600052602160045260246000fd5b60028110613306576133066132e0565b9052565b6001600160a01b038581168252608082019061332960208401876132f6565b84604084015280841660608401525095945050505050565b8051612f4981612f25565b60006020828403121561335e57600080fd5b81516111c181612f25565b80518015158114612f4957600080fd5b60006020828403121561338b57600080fd5b6111c182613369565b6000602082840312156133a657600080fd5b5051919050565b60005b838110156133c85781810151838201526020016133b0565b838111156128835750506000910152565b600081518084526133f18160208601602086016133ad565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006111c160208301846133d9565b604051610220810167ffffffffffffffff8111828210171561346857634e487b7160e01b600052604160045260246000fd5b60405290565b60006020828403121561348057600080fd5b6040516020810181811067ffffffffffffffff821117156134b157634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b805164ffffffffff81168114612f4957600080fd5b600061022082840312156134e657600080fd5b6134ee613436565b6134f8848461346e565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261354260e08401613341565b60e0820152610100613555818501613341565b90820152610120613567848201613341565b90820152610140613579848201613341565b9082015261016061358b848201613341565b9082015261018061359d8482016134be565b908201526101a06135af8482016134be565b908201526101c083810151908201526101e08084015190820152610200928301519281019290925250919050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561361657600080fd5b8260051b80856040850137600092016040019182525092915050565b60208082528181018390526000908460408401835b8681101561367557823561365a81612f25565b6001600160a01b031682529183019190830190600101613647565b509695505050505050565b60008060006060848603121561369557600080fd5b61369e84613369565b92506136ac60208501613369565b91506136ba60408501613369565b90509250925092565b6000602082840312156136d557600080fd5b6111c1838361346e565b6001600160a01b0383168152604081016111c160208301846132f6565b60006060828403121561370e57600080fd5b6040516060810181811067ffffffffffffffff8211171561373f57634e487b7160e01b600052604160045260246000fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156137a6576137a661377c565b5060010190565b60006060808301818452808751808352608092508286019150828160051b8701016020808b016000805b8581101561388c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808b860301875282518986016001600160a01b038251168752858201516003811061382c5761382c6132e0565b878701526040918201519187018b90528151908190529085019083908a8801905b808310156138775783516001600160e01b031916825292870192600192909201919087019061384d565b509886019896505050918301916001016137d7565b5050506001600160a01b038a169088015286810360408801526138af81896133d9565b9a9950505050505050505050565b600061ffff808316818114156138d5576138d561377c565b6001019392505050565b600082516138f18184602087016133ad565b9190910192915050565b60008282101561390d5761390d61377c565b500390565b634e487b7160e01b600052603160045260246000fdfe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a2646970667358221220ddeec2141436e70f80037cda8c6ee0afb2add645607c018f5fd41024807b592464736f6c63430008090033",
  "facets": [
    {
      "facetAddress": "0x543b568E9819294107c6fB35814Ec5f17AeEaa60",
      "functionSelectors": [
        "0x1f931c1c"
      ]
    },
    {
      "facetAddress": "0x1a8181366765c960a9b1cfCC0849E64f2Cb86014",
      "functionSelectors": [
        "0x8da5cb5b",
        "0xf2fde38b"
      ]
    },
    {
      "facetAddress": "0x981917e3De1E52FCd352DDe8Feb203ee38a6E75D",
      "functionSelectors": [
        "0xcdffacc6",
        "0x52ef6b2c",
        "0xadfca15e",
        "0x7a0ed627",
        "0x01ffc9a7"
      ]
    }
  ],
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createVault(address,address,bytes32)": {
        "details": "Create an empty Vault for msg.sender, in addition to this, a vault also deploy a SecurityDepositEscrow contract which the fund will be held in",
        "returns": {
          "_0": "address of Vault*"
        }
      },
      "deposit(address,uint8,uint256)": {
        "details": "Deposits an `amount` of underlying asset into the reserve, receiving in return overlying tokens: Either Junior Deposit Token or Senior Deposit token",
        "params": {
          "_amount": "The amount to be deposited*",
          "_asset": "The address of the underlying asset to deposit",
          "_tranche": "The tranche of the liquidity pool the user wants to deposit to"
        }
      },
      "depositMargin(address,address,uint256)": {
        "details": "Deposit specific amount of security deposit to user owned Vault",
        "params": {
          "_amount": "deposit amount*",
          "_reserve": "address of reserve",
          "_vaultUser": "the user address that will be sponsored"
        }
      },
      "getAddressResolverAddress()": {
        "details": "Get addressResolver contract address",
        "returns": {
          "_0": "address of the resolver contract*"
        }
      },
      "getAvailableCredit(address,address)": {
        "details": "Get available credit",
        "params": {
          "_reserve": "address of reserve*",
          "_user": "user address"
        }
      },
      "getConfiguration(address)": {
        "details": "Returns the configuration of the reserve",
        "params": {
          "_asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The state of the reserve*"
        }
      },
      "getCreditLimit(address,address)": {
        "details": "Get maximum reserve amount the use can borrow",
        "params": {
          "_reserve": "reserve contract address*",
          "_user": "user address"
        }
      },
      "getExtCallACLProxyAddress()": {
        "details": "Get ExtCallACLProxy contract address*"
      },
      "getLiquidityManagerProxyAddress()": {
        "details": "Get LiquidityManagerProxy contract address*"
      },
      "getReserveData(address)": {
        "details": "Returns the state and configuration of the reserve",
        "params": {
          "_asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The state of the reserve*"
        }
      },
      "getReserveFlags(address)": {
        "details": "Returns the reserve flags",
        "params": {
          "_asset": "The address of asset"
        },
        "returns": {
          "_0": "The state flags representing active, frozen, borrowing enabled*"
        }
      },
      "getVault(address)": {
        "details": "Get vault address",
        "params": {
          "_user": "The owner of the vault*"
        }
      },
      "getVaultManagerProxyAddress()": {
        "details": "Get VaultManagerProxy contract address",
        "returns": {
          "_0": "address of the VaultManager*"
        }
      },
      "liquidityRate(address,uint8)": {
        "details": "Get current liquidity rate for a specific reserve for it junior tranche or senior tranche",
        "params": {
          "_asset": "The address of the underlying asset of the reserve",
          "_tranche": "Either junior tranche or senior tranche*"
        }
      },
      "redeemMargin(address,address,uint256)": {
        "details": "Redeem specific amount of security deposit to user owned Vault",
        "params": {
          "_amount": "deposit amount*",
          "_reserve": "address of reserve",
          "_vaultUser": "the user address that has be sponsored"
        }
      },
      "setAddressResolverAddress(address)": {
        "details": "Update addressResolver contract address",
        "params": {
          "_addressResolver": "address of the resolver contract*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4842,
        "contract": "contracts/component/Voyager.sol:Voyager",
        "label": "addressResolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AddressResolver)4814"
      }
    ],
    "types": {
      "t_contract(AddressResolver)4814": {
        "encoding": "inplace",
        "label": "contract AddressResolver",
        "numberOfBytes": "20"
      }
    }
  }
}
