{
  "address": "0x5cC67e5183C5322308747558C492194d73709a94",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "686fcfb77ebcbd9335e616f0b479388f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/component/facets/SecurityFacet.sol\":\"SecurityFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/component/facets/SecurityFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {Storage} from \\\"../../libraries/LibAppStorage.sol\\\";\\n\\ncontract SecurityFacet is Storage {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    function paused() public view returns (bool) {\\n        return s._paused;\\n    }\\n\\n    function pause() public onlyAdmin {\\n        s._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    function unpause() public onlyAdmin {\\n        s._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xeb2c60b3d95534f4a042ec0e7ecbcf8a6b355f22c4b7f1d1004d8894f596c04f\",\"license\":\"GPL-3.0\"},\"contracts/component/infra/AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {IAddressResolver} from \\\"../../interfaces/IAddressResolver.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AddressResolver is IAddressResolver, Ownable {\\n    bytes32 public constant voyageName = \\\"voyager\\\";\\n    bytes32 public constant aclManagerName = \\\"aclManager\\\";\\n    bytes32 public constant liquidityDepositEscrowName =\\n        \\\"liquidityDepositEscrow\\\";\\n    bytes32 public constant juniorDepositTokenName = \\\"juniorDepositToken\\\";\\n    bytes32 public constant seniorDepositTokenName = \\\"seniorDepositToken\\\";\\n    bytes32 public constant priceOracleName = \\\"priceOracle\\\";\\n\\n    mapping(bytes32 => address) public repository;\\n\\n    function importAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external onlyOwner {\\n        require(\\n            names.length == destinations.length,\\n            \\\"Input lengths must match\\\"\\n        );\\n\\n        for (uint256 i = 0; i < names.length; i++) {\\n            bytes32 name = names[i];\\n            address destination = destinations[i];\\n            repository[name] = destination;\\n            emit AddressImported(name, destination);\\n        }\\n    }\\n\\n    function getVoyage() external view returns (address) {\\n        return repository[voyageName];\\n    }\\n\\n    function getJuniorDepositToken() external view returns (address) {\\n        return repository[juniorDepositTokenName];\\n    }\\n\\n    function getSeniorDepositToken() external view returns (address) {\\n        return repository[seniorDepositTokenName];\\n    }\\n\\n    function getAclManager() external view returns (address) {\\n        return repository[aclManagerName];\\n    }\\n\\n    function getPriceOracle() external view returns (address) {\\n        return repository[priceOracleName];\\n    }\\n\\n    function getAddress(bytes32 name) external view returns (address) {\\n        return repository[name];\\n    }\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address)\\n    {\\n        address _foundAddress = repository[name];\\n        require(_foundAddress != address(0), reason);\\n        return _foundAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x9d0e87f51e32489773974a4ac57b86be3849d1d987cb224ee103e4acfe62c211\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IACLManager {\\n    function grantLiquidityManager(address _admin) external;\\n\\n    function isLiquidityManager(address _admin) external view returns (bool);\\n\\n    function grantVaultManager(address _admin) external;\\n\\n    function isVaultManager(address _admin) external view returns (bool);\\n\\n    function grantPoolManager(address _admin) external;\\n\\n    function grantLoanManager(address _admin) external;\\n\\n    function isLoanManager(address _admin) external view returns (bool);\\n\\n    function isProtocolManager(address _admin) external view returns (bool);\\n\\n    function grantLiquidityManagerContract(address _admin) external;\\n\\n    function isLiquidityManagerContract(address _admin)\\n        external\\n        view\\n        returns (bool);\\n\\n    function grantLoanManagerContract(address _admin) external;\\n\\n    function isLoanManagerContract(address _admin) external view returns (bool);\\n\\n    function grantVaultManagerContract(address _admin) external;\\n\\n    function isVaultManagerContract(address _admin)\\n        external\\n        view\\n        returns (bool);\\n\\n    function grantVaultConfigurator(address _amin) external;\\n\\n    function isVaultConfigurator(address _admin) external view returns (bool);\\n\\n    function grantVoyagerContract(address _admin) external;\\n\\n    function isVoyagerContract(address _admin) external view returns (bool);\\n\\n    function grantOracleManager(address _admin) external;\\n\\n    function isOracleManager(address _admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x090955749b2269dd012fe139c3b5fb738c40ef4faeef29fea91eb66314c62bd8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function importAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external;\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address);\\n\\n    function getVoyage() external view returns (address);\\n\\n    function getAclManager() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function getJuniorDepositToken() external view returns (address);\\n\\n    function getSeniorDepositToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd9a16439a4568e5bdae4cb1bb87c944eb185c74d2db8e853159af9910b922484\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {IACLManager} from \\\"../interfaces/IACLManager.sol\\\";\\nimport {AddressResolver} from \\\"../component/infra/AddressResolver.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\n\\nbytes32 constant ADDRESS_RESOLVER = \\\"address_resolver\\\";\\nbytes32 constant ACL = \\\"ACL\\\";\\n\\nenum Tranche {\\n    JUNIOR,\\n    SENIOR\\n}\\n\\nstruct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    // for calculating overall interested accumulated\\n    // then split it into two indexs base on two allocations\\n    uint256 currentOverallLiquidityRate;\\n    uint256 currentJuniorLiquidityRate;\\n    uint256 currentSeniorLiquidityRate;\\n    uint256 currentBorrowRate;\\n    // Expressed in ray\\n    uint256 marginRequirement;\\n    //the decimals of the reserve asset\\n    uint256 decimals;\\n    address interestRateStrategyAddress;\\n    address healthStrategyAddress;\\n    address loanStrategyAddress;\\n    address juniorDepositTokenAddress;\\n    address seniorDepositTokenAddress;\\n    uint40 juniorLastUpdateTimestamp;\\n    uint40 seniorLastUpdateTimestamp;\\n    uint256 optimalTrancheRatio;\\n    uint256 currentIncomeRatio;\\n    uint256 optimalIncomeRatio;\\n    address nftAddress;\\n    bool initialized;\\n}\\n\\nstruct ReserveConfigurationMap {\\n    //bit 0-15: Liquidate bonus\\n    //bit 16-23: Decimals\\n    //bit 24: Reserve is active\\n    //bit 25: reserve is frozen\\n    //bit 26: borrowing is enabled\\n    //bit 27-30: reserved\\n    //bit 31-46: reserve factor\\n    //bit 47-62: lock up period in seconds\\n    uint256 data;\\n}\\n\\nstruct PMT {\\n    uint256 principal;\\n    uint256 interest;\\n    uint256 pmt;\\n}\\n\\nstruct RepaymentData {\\n    uint256 principal;\\n    uint256 interest;\\n    // principal + interest\\n    uint256 total;\\n    uint40 paidAt;\\n    bool isLiquidated;\\n}\\n\\nstruct DrawDown {\\n    uint256 principal;\\n    // the total intended length of the loan in seconds - e.g., 90 days\\n    uint256 term;\\n    // the repayment interval - e.g., 30 days\\n    uint256 epoch;\\n    // number of instalments, term / epoch\\n    uint256 nper;\\n    // the amount to be repaid per instalment (principal + interest)\\n    PMT pmt;\\n    // the borrow rate of this loan\\n    uint256 apr;\\n    uint256 borrowAt;\\n    // next due data\\n    uint256 nextPaymentDue;\\n    // principal paid\\n    uint256 totalPrincipalPaid;\\n    // interest paid\\n    uint256 totalInterestPaid;\\n    RepaymentData[] repayments;\\n    // size pf repayments\\n    uint256 paidTimes;\\n}\\n\\nstruct DrawDownList {\\n    uint256 head;\\n    uint256 tail;\\n}\\n\\nstruct BorrowData {\\n    uint256 paidDrawDownNumber;\\n    // next draw down number\\n    uint256 nextDrawDownNumber;\\n    uint256 totalPrincipal;\\n    uint256 totalInterest;\\n    uint256 mapSize;\\n    mapping(uint256 => DrawDown) drawDowns;\\n}\\n\\nstruct BorrowState {\\n    uint256 totalDebt;\\n    uint256 totalInterest;\\n    uint256 avgBorrowRate;\\n}\\n\\nstruct VaultConfig {\\n    uint256 minMargin;\\n    uint256 maxMargin;\\n    uint256 marginRequirement;\\n}\\n\\nstruct VaultData {\\n    uint256 borrowRate;\\n    uint256 totalDebt;\\n    DrawDownList drawDownList;\\n    uint256 totalMargin;\\n    uint256 withdrawableSecurityDeposit;\\n    uint256 creditLimit;\\n    uint256 spendableBalance;\\n    uint256 gav;\\n    uint256 ltv;\\n    uint256 healthFactor;\\n}\\n\\nstruct AppStorage {\\n    /* -------------------------------- plumbing -------------------------------- */\\n    mapping(bytes32 => address) _addresses;\\n    /* -------------------------------- liquidity ------------------------------- */\\n    mapping(address => ReserveData) _reserves;\\n    // List of reserves as a map (reserveId => reserve)\\n    mapping(uint256 => address) _reserveList;\\n    uint16 _reservesCount;\\n    /* ---------------------------------- debt ---------------------------------- */\\n    mapping(address => mapping(address => BorrowData)) _borrowData;\\n    mapping(address => BorrowState) _borrowState;\\n    bool _paused;\\n    /* ---------------------------------- vault --------------------------------- */\\n    UpgradeableBeacon upgradeableBeacon;\\n    address[] vaults;\\n    // mapping of vault owner to vault instance address\\n    mapping(address => address) vaultMap;\\n    // mapping of vault instance to vault configuration\\n    mapping(address => VaultConfig) vaultConfigMap;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n}\\n\\ncontract Storage is Context {\\n    AppStorage internal s;\\n\\n    modifier whenPaused() {\\n        require(s._paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!s._paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        IACLManager aclManager = IACLManager(\\n            AddressResolver(_addressResolver()).getAclManager()\\n        );\\n        require(aclManager.isProtocolManager(msg.sender), \\\"Not protocol admin\\\");\\n        _;\\n    }\\n\\n    function _addressResolver() internal view returns (address) {\\n        return s._addresses[ADDRESS_RESOLVER];\\n    }\\n}\\n\",\"keccak256\":\"0xc39cadab84426e2e2ba4bca4ed3bc149febafc8dafcdd69af352ccea584c0ddd\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610571806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633f4ba83a146100465780635c975abb146100505780638456cb591461006a575b600080fd5b61004e610072565b005b60065460ff16604051901515815260200160405180910390f35b61004e6102bb565b60006100db7f616464726573735f7265736f6c7665720000000000000000000000000000000060009081526020527fbc00e0b13890defa5673414f271f9a202467a774b325edce723f5f9c26a5eb4e5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1663c2c855c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561012057600080fd5b505afa158015610134573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015891906104dc565b6040517f1f77f8c600000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff821690631f77f8c69060240160206040518083038186803b1580156101c057600080fd5b505afa1580156101d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f89190610519565b610263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f742070726f746f636f6c2061646d696e000000000000000000000000000060448201526064015b60405180910390fd5b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b60006103247f616464726573735f7265736f6c7665720000000000000000000000000000000060009081526020527fbc00e0b13890defa5673414f271f9a202467a774b325edce723f5f9c26a5eb4e5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1663c2c855c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561036957600080fd5b505afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a191906104dc565b6040517f1f77f8c600000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff821690631f77f8c69060240160206040518083038186803b15801561040957600080fd5b505afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190610519565b6104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f742070726f746f636f6c2061646d696e0000000000000000000000000000604482015260640161025a565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586102903390565b6000602082840312156104ee57600080fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461051257600080fd5b9392505050565b60006020828403121561052b57600080fd5b8151801515811461051257600080fdfea264697066735822122017714cd4de79d13b0dc1874cf867d925e36fd0c0cd279705e3edd6ccf55fa56c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80633f4ba83a146100465780635c975abb146100505780638456cb591461006a575b600080fd5b61004e610072565b005b60065460ff16604051901515815260200160405180910390f35b61004e6102bb565b60006100db7f616464726573735f7265736f6c7665720000000000000000000000000000000060009081526020527fbc00e0b13890defa5673414f271f9a202467a774b325edce723f5f9c26a5eb4e5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1663c2c855c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561012057600080fd5b505afa158015610134573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015891906104dc565b6040517f1f77f8c600000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff821690631f77f8c69060240160206040518083038186803b1580156101c057600080fd5b505afa1580156101d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f89190610519565b610263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f742070726f746f636f6c2061646d696e000000000000000000000000000060448201526064015b60405180910390fd5b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b60006103247f616464726573735f7265736f6c7665720000000000000000000000000000000060009081526020527fbc00e0b13890defa5673414f271f9a202467a774b325edce723f5f9c26a5eb4e5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1663c2c855c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561036957600080fd5b505afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a191906104dc565b6040517f1f77f8c600000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff821690631f77f8c69060240160206040518083038186803b15801561040957600080fd5b505afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190610519565b6104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f742070726f746f636f6c2061646d696e0000000000000000000000000000604482015260640161025a565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586102903390565b6000602082840312156104ee57600080fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461051257600080fd5b9392505050565b60006020828403121561052b57600080fd5b8151801515811461051257600080fdfea264697066735822122017714cd4de79d13b0dc1874cf867d925e36fd0c0cd279705e3edd6ccf55fa56c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11912,
        "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)11898_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RepaymentData)11768_storage)dyn_storage": {
        "base": "t_struct(RepaymentData)11768_storage",
        "encoding": "dynamic_array",
        "label": "struct RepaymentData[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(UpgradeableBeacon)1050": {
        "encoding": "inplace",
        "label": "contract UpgradeableBeacon",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(BorrowData)11817_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct BorrowData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(BorrowData)11817_storage)"
      },
      "t_mapping(t_address,t_struct(BorrowData)11817_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BorrowData)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowData)11817_storage"
      },
      "t_mapping(t_address,t_struct(BorrowState)11824_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BorrowState)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowState)11824_storage"
      },
      "t_mapping(t_address,t_struct(ReserveData)11747_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ReserveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveData)11747_storage"
      },
      "t_mapping(t_address,t_struct(VaultConfig)11831_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultConfig)11831_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(DrawDown)11796_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DrawDown)",
        "numberOfBytes": "32",
        "value": "t_struct(DrawDown)11796_storage"
      },
      "t_struct(AppStorage)11898_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 11857,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "_addresses",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 11862,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "_reserves",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(ReserveData)11747_storage)"
          },
          {
            "astId": 11866,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "_reserveList",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 11868,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "_reservesCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 11875,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "_borrowData",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(BorrowData)11817_storage))"
          },
          {
            "astId": 11880,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "_borrowState",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(BorrowState)11824_storage)"
          },
          {
            "astId": 11882,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "_paused",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 11885,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "upgradeableBeacon",
            "offset": 1,
            "slot": "6",
            "type": "t_contract(UpgradeableBeacon)1050"
          },
          {
            "astId": 11888,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "vaults",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 11892,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "vaultMap",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 11897,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "vaultConfigMap",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_struct(VaultConfig)11831_storage)"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(BorrowData)11817_storage": {
        "encoding": "inplace",
        "label": "struct BorrowData",
        "members": [
          {
            "astId": 11803,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "paidDrawDownNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11805,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "nextDrawDownNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11807,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "totalPrincipal",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11809,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "totalInterest",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11811,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "mapSize",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11816,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "drawDowns",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_struct(DrawDown)11796_storage)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(BorrowState)11824_storage": {
        "encoding": "inplace",
        "label": "struct BorrowState",
        "members": [
          {
            "astId": 11819,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11821,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "totalInterest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11823,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "avgBorrowRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DrawDown)11796_storage": {
        "encoding": "inplace",
        "label": "struct DrawDown",
        "members": [
          {
            "astId": 11770,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11772,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "term",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11774,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "epoch",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11776,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "nper",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11779,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "pmt",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(PMT)11757_storage"
          },
          {
            "astId": 11781,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "apr",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 11783,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "borrowAt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 11785,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "nextPaymentDue",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 11787,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "totalPrincipalPaid",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 11789,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "totalInterestPaid",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 11793,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "repayments",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_struct(RepaymentData)11768_storage)dyn_storage"
          },
          {
            "astId": 11795,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "paidTimes",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(PMT)11757_storage": {
        "encoding": "inplace",
        "label": "struct PMT",
        "members": [
          {
            "astId": 11752,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11754,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11756,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "pmt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RepaymentData)11768_storage": {
        "encoding": "inplace",
        "label": "struct RepaymentData",
        "members": [
          {
            "astId": 11759,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11761,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11763,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "total",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11765,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "paidAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint40"
          },
          {
            "astId": 11767,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "isLiquidated",
            "offset": 5,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ReserveConfigurationMap)11750_storage": {
        "encoding": "inplace",
        "label": "struct ReserveConfigurationMap",
        "members": [
          {
            "astId": 11749,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ReserveData)11747_storage": {
        "encoding": "inplace",
        "label": "struct ReserveData",
        "members": [
          {
            "astId": 11710,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "configuration",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ReserveConfigurationMap)11750_storage"
          },
          {
            "astId": 11712,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "currentOverallLiquidityRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11714,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "currentJuniorLiquidityRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11716,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "currentSeniorLiquidityRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11718,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "currentBorrowRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11720,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "marginRequirement",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11722,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "decimals",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 11724,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "interestRateStrategyAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 11726,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "healthStrategyAddress",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 11728,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "loanStrategyAddress",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 11730,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "juniorDepositTokenAddress",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 11732,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "seniorDepositTokenAddress",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          },
          {
            "astId": 11734,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "juniorLastUpdateTimestamp",
            "offset": 20,
            "slot": "11",
            "type": "t_uint40"
          },
          {
            "astId": 11736,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "seniorLastUpdateTimestamp",
            "offset": 25,
            "slot": "11",
            "type": "t_uint40"
          },
          {
            "astId": 11738,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "optimalTrancheRatio",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 11740,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "currentIncomeRatio",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 11742,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "optimalIncomeRatio",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 11744,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "nftAddress",
            "offset": 0,
            "slot": "15",
            "type": "t_address"
          },
          {
            "astId": 11746,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "initialized",
            "offset": 20,
            "slot": "15",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(VaultConfig)11831_storage": {
        "encoding": "inplace",
        "label": "struct VaultConfig",
        "members": [
          {
            "astId": 11826,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "minMargin",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11828,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "maxMargin",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11830,
            "contract": "contracts/component/facets/SecurityFacet.sol:SecurityFacet",
            "label": "marginRequirement",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}