{
  "address": "0x09C309d418B41f2Ab08B852d5562e6a9cAa798Eb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "associatedContract",
          "type": "address"
        }
      ],
      "name": "AssociatedContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allVaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "associatedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllVaults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getVaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "getVaultConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minSecurityDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSecurityDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "securityDepositRequirement",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.VaultConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "pushNewVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_associatedContract",
          "type": "address"
        }
      ],
      "name": "setAssociatedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMaxSecurityDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMinSecurityDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requirement",
          "type": "uint256"
        }
      ],
      "name": "setSecurityDepositRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minSecurityDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSecurityDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "securityDepositRequirement",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x41376925bd5a6fcad405684e09902d0e00efedac9209f62d8b71734f4f8a6656",
  "receipt": {
    "to": null,
    "from": "0x4C616d9377Fa8d928385F0b11Ab16D4bf0f2d544",
    "contractAddress": "0x09C309d418B41f2Ab08B852d5562e6a9cAa798Eb",
    "transactionIndex": 0,
    "gasUsed": "709462",
    "logsBloom": "0x
    "blockHash": "0x71683f33277afb4882f179bbe601a4ee941b8ed556426f7f1b328fb644fc00d1",
    "transactionHash": "0x41376925bd5a6fcad405684e09902d0e00efedac9209f62d8b71734f4f8a6656",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10670136,
        "transactionHash": "0x41376925bd5a6fcad405684e09902d0e00efedac9209f62d8b71734f4f8a6656",
        "address": "0x09C309d418B41f2Ab08B852d5562e6a9cAa798Eb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004c616d9377fa8d928385f0b11ab16d4bf0f2d544"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x71683f33277afb4882f179bbe601a4ee941b8ed556426f7f1b328fb644fc00d1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10670136,
        "transactionHash": "0x41376925bd5a6fcad405684e09902d0e00efedac9209f62d8b71734f4f8a6656",
        "address": "0x09C309d418B41f2Ab08B852d5562e6a9cAa798Eb",
        "topics": [
          "0x73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e03"
        ],
        "data": "0x000000000000000000000000951a838ab600dbbd5a2de822c0d14f9db3c26dcc",
        "logIndex": 1,
        "blockHash": "0x71683f33277afb4882f179bbe601a4ee941b8ed556426f7f1b328fb644fc00d1"
      }
    ],
    "blockNumber": 10670136,
    "cumulativeGasUsed": "709462",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x951A838ab600DBbD5A2dE822C0D14f9DB3C26DCC"
  ],
  "numDeployments": 2,
  "solcInputHash": "12f50c75a18b6f714019b390413b1deb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"associatedContract\",\"type\":\"address\"}],\"name\":\"AssociatedContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"associatedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"getVaultConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minSecurityDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSecurityDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"securityDepositRequirement\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.VaultConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"pushNewVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_associatedContract\",\"type\":\"address\"}],\"name\":\"setAssociatedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSecurityDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinSecurityDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requirement\",\"type\":\"uint256\"}],\"name\":\"setSecurityDepositRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minSecurityDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSecurityDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"securityDepositRequirement\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAllVaults()\":{\"details\":\"Get all credit account addresses*\"},\"getVaultAddress(address)\":{\"details\":\"Get Vault address for a specific user\",\"params\":{\"_user\":\"the address of the player*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/component/vault/VaultStorage.sol\":\"VaultStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/component/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../libraries/state/State.sol\\\";\\nimport \\\"../../libraries/types/DataTypes.sol\\\";\\nimport \\\"../../libraries/math/WadRayMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// central storage for all vaults\\ncontract VaultStorage is State {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n\\n    address[] public allVaults;\\n    // player address => vault address\\n    mapping(address => address) public getVault;\\n\\n    mapping(address => DataTypes.VaultConfig) public vaultConfig;\\n\\n    constructor(address _vaultManager) State(_vaultManager) {}\\n\\n    function pushNewVault(address _player, address vault)\\n        external\\n        onlyAssociatedContract\\n        returns (uint256)\\n    {\\n        allVaults.push(vault);\\n        require(getVault[_player] == address(0), \\\"vault exists\\\");\\n        getVault[_player] = vault;\\n        return allVaults.length;\\n    }\\n\\n    function setMaxSecurityDeposit(address _reserve, uint256 _amount)\\n        external\\n        onlyAssociatedContract\\n    {\\n        vaultConfig[_reserve].maxSecurityDeposit = _amount;\\n    }\\n\\n    function setMinSecurityDeposit(address _reserve, uint256 _amount)\\n        external\\n        onlyAssociatedContract\\n    {\\n        vaultConfig[_reserve].minSecurityDeposit = _amount;\\n    }\\n\\n    function setSecurityDepositRequirement(\\n        address _reserve,\\n        uint256 _requirement\\n    ) external onlyAssociatedContract {\\n        vaultConfig[_reserve].securityDepositRequirement = _requirement;\\n    }\\n\\n    /**\\n     * @dev Get Vault address for a specific user\\n     * @param _user the address of the player\\n     **/\\n    function getVaultAddress(address _user) external view returns (address) {\\n        return getVault[_user];\\n    }\\n\\n    /**\\n     * @dev Get all credit account addresses\\n     **/\\n    function getAllVaults() external view returns (address[] memory) {\\n        return allVaults;\\n    }\\n\\n    function getVaultConfig(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.VaultConfig memory)\\n    {\\n        return vaultConfig[_reserve];\\n    }\\n}\\n\",\"keccak256\":\"0x95605ad4d11bdba5b67080af1df017a4490b10c128c1dc18999ce41a41f32b55\",\"license\":\"GPL-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7cd9f5c44c880296f68a612b02370ca94fea3aba2eb2678636345c10edd21e42\"},\"contracts/libraries/state/State.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract State is Ownable {\\n    mapping(address => bool) public associatedContracts;\\n\\n    constructor(address _associatedContract) {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner() != address(0), \\\"Owner must be set\\\");\\n\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n\\n    event AssociatedContractUpdated(address associatedContract);\\n\\n    modifier onlyAssociatedContract() {\\n        require(\\n            associatedContracts[msg.sender],\\n            \\\"Only the associated contract can perform this action\\\"\\n        );\\n        _;\\n    }\\n\\n    // Change the associated contract to a new address\\n    function setAssociatedContract(address _associatedContract)\\n        external\\n        onlyOwner\\n    {\\n        associatedContracts[_associatedContract] = true;\\n        emit AssociatedContractUpdated(_associatedContract);\\n    }\\n}\\n\",\"keccak256\":\"0x9c66fe38762227064a6a3be2d1182746b90e6ed3e7d2901b9a2275a899352891\",\"license\":\"GPL-3.0\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary DataTypes {\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        // for calculating overall interested accumulated\\n        // then split it into two indexs base on two allocations\\n        uint256 currentOverallLiquidityRate;\\n        uint256 currentJuniorLiquidityRate;\\n        uint256 currentSeniorLiquidityRate;\\n        uint256 currentBorrowRate;\\n        // Expressed in ray\\n        uint256 securityRequirement;\\n        //the decimals of the reserve asset\\n        uint256 decimals;\\n        address interestRateStrategyAddress;\\n        address healthStrategyAddress;\\n        address loanStrategyAddress;\\n        address juniorDepositTokenAddress;\\n        address seniorDepositTokenAddress;\\n        uint40 juniorLastUpdateTimestamp;\\n        uint40 seniorLastUpdateTimestamp;\\n        uint256 optimalTrancheRatio;\\n        uint256 currentIncomeRatio;\\n        uint256 optimalIncomeRatio;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: Liquidate bonus\\n        //bit 16-23: Decimals\\n        //bit 24: Reserve is active\\n        //bit 25: reserve is frozen\\n        //bit 26: borrowing is enabled\\n        //bit 27-30: reserved\\n        //bit 31-46: reserve factor\\n        //bit 47-62: lock up period in seconds\\n        uint256 data;\\n    }\\n\\n    struct VaultConfig {\\n        uint256 minSecurityDeposit;\\n        uint256 maxSecurityDeposit;\\n        uint256 securityDepositRequirement;\\n    }\\n\\n    struct FungibleTokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    struct BorrowData {\\n        uint256 paidDrawDownNumber;\\n        // next draw down number\\n        uint256 nextDrawDownNumber;\\n        uint256 totalPrincipal;\\n        uint256 totalInterest;\\n        uint256 mapSize;\\n        mapping(uint256 => DrawDown) drawDowns;\\n    }\\n\\n    struct BorrowStat {\\n        uint256 totalDebt;\\n        uint256 totalInterest;\\n        uint256 avgBorrowRate;\\n    }\\n\\n    struct PMT {\\n        uint256 principal;\\n        uint256 interest;\\n        uint256 pmt;\\n    }\\n\\n    struct DrawDown {\\n        uint256 principal;\\n        // the total intended length of the loan in seconds - e.g., 90 days\\n        uint256 term;\\n        // the repayment interval - e.g., 30 days\\n        uint256 epoch;\\n        // number of instalments, term / epoch\\n        uint256 nper;\\n        // the amount to be repaid per instalment (principal + interest)\\n        PMT pmt;\\n        // the borrow rate of this loan\\n        uint256 apr;\\n        uint256 borrowAt;\\n        // next due data\\n        uint256 nextPaymentDue;\\n        // principal paid\\n        uint256 totalPrincipalPaid;\\n        // interest paid\\n        uint256 totalInterestPaid;\\n        RepaymentData[] repayments;\\n        // size pf repayments\\n        uint256 paidTimes;\\n    }\\n\\n    struct DebtDetail {\\n        uint256 principal;\\n        uint256 term;\\n        uint256 epoch;\\n        uint256 nper;\\n        PMT pmt;\\n        uint256 apr;\\n        uint256 borrowAt;\\n        uint256 nextPaymentDue;\\n        uint256 totalPrincipalPaid;\\n        uint256 totalInterestPaid;\\n        uint256 paidTimes;\\n    }\\n\\n    struct RepaymentData {\\n        uint256 principal;\\n        uint256 interest;\\n        // principal + interest\\n        uint256 total;\\n        uint40 paidAt;\\n    }\\n\\n    struct Repayment {\\n        uint256 principal;\\n        uint256 interest;\\n        // principal + interest\\n        uint256 total;\\n        uint40 paidAt;\\n        // about to drop\\n        uint256 totalPaid;\\n        uint256 principalPaid;\\n        uint256 interestPaid;\\n        uint256 numPayments;\\n    }\\n\\n    struct RepaymentDetail {\\n        uint256 totalPaid;\\n        uint256 numPayments;\\n    }\\n\\n    // tmp struct to avoid stack too long\\n\\n    struct DepositAndDebt {\\n        uint256 juniorDepositAmount;\\n        uint256 seniorDepositAmount;\\n        uint256 totalDebt;\\n        uint256 totalInterest;\\n        uint256 avgBorrowRate;\\n    }\\n\\n    struct HealthRiskParameter {\\n        uint256 securityDeposit;\\n        uint256 currentBorrowRate;\\n        uint256 compoundedDebt;\\n        uint256 grossAssetValue;\\n    }\\n\\n    struct PoolConfiguration {\\n        uint256 securityRequirement;\\n        uint256 minSecurity;\\n        uint256 maxSecurity;\\n        uint256 loanTenure;\\n        uint256 optimalTrancheRatio;\\n        uint256 optimalIncomeRatio;\\n        bool isActive;\\n    }\\n\\n    struct PoolData {\\n        uint256 totalLiquidity;\\n        uint256 juniorLiquidity;\\n        uint256 seniorLiquidity;\\n        uint256 juniorLiquidityRate;\\n        uint256 seniorLiquidityRate;\\n        uint256 totalDebt;\\n        uint256 utilizationRate;\\n        uint256 trancheRatio;\\n        uint256 decimals;\\n        string symbol;\\n        bool isActive;\\n    }\\n\\n    struct DrawDownList {\\n        uint256 head;\\n        uint256 tail;\\n    }\\n\\n    struct VaultData {\\n        uint256 borrowRate;\\n        uint256 totalDebt;\\n        DrawDownList drawDownList;\\n        uint256 totalSecurityDeposit;\\n        uint256 withdrawableSecurityDeposit;\\n        uint256 creditLimit;\\n        uint256 spendableBalance;\\n        uint256 gav;\\n        uint256 ltv;\\n        uint256 healthFactor;\\n    }\\n\\n    struct UserPoolData {\\n        uint256 juniorTrancheBalance;\\n        uint256 withdrawableJuniorTrancheBalance;\\n        uint256 seniorTrancheBalance;\\n        uint256 withdrawableSeniorTrancheBalance;\\n        uint256 decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xf5f962b351e7af689a7efb3106b99aa54c6073ad99c7b146f211d346f767cb15\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c64380380610c6483398101604081905261002f91610138565b80610039336100e8565b6000546001600160a01b03166100895760405162461bcd60e51b815260206004820152601160248201527013dddb995c881b5d5cdd081899481cd95d607a1b604482015260640160405180910390fd5b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e03910160405180910390a15050610168565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561014a57600080fd5b81516001600160a01b038116811461016157600080fd5b9392505050565b610aed806101776000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806397331bf911610097578063de1eb9a311610066578063de1eb9a314610223578063ef88c31e14610258578063f2fde38b14610284578063f857ef671461029757600080fd5b806397331bf9146101c7578063a3fdd98f146101dc578063d3f3e96f146101fd578063d60cad231461021057600080fd5b80635748ff18116100d35780635748ff1814610168578063715018a61461019b5780638da5cb5b146101a35780639094a91e146101b457600080fd5b80630eb9af38146100fa57806352f445ca1461014057806353b83e9214610155575b600080fd5b6101236101083660046109d2565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361014e3660046109d2565b6102e1565b005b6101536101633660046109f4565b6103b9565b61018b6101763660046109d2565b60016020526000908152604090205460ff1681565b6040519015158152602001610137565b61015361045d565b6000546001600160a01b0316610123565b6101236101c2366004610a1e565b6104c3565b6101cf6104ed565b6040516101379190610a37565b6101ef6101ea366004610a84565b61054f565b604051908152602001610137565b61015361020b3660046109f4565b6106cc565b61015361021e3660046109f4565b610770565b6102366102313660046109d2565b610811565b6040805182518152602080840151908201529181015190820152606001610137565b6101236102663660046109d2565b6001600160a01b039081166000908152600360205260409020541690565b6101536102923660046109d2565b610877565b6102c66102a53660046109d2565b60046020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610137565b6000546001600160a01b031633146103405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690921790915590519182527f73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e03910160405180910390a150565b3360009081526001602052604090205460ff1661043e5760405162461bcd60e51b815260206004820152603460248201527f4f6e6c7920746865206173736f63696174656420636f6e74726163742063616e60448201527f20706572666f726d207468697320616374696f6e0000000000000000000000006064820152608401610337565b6001600160a01b03909116600090815260046020526040902060010155565b6000546001600160a01b031633146104b75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610337565b6104c16000610959565b565b600281815481106104d357600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600280548060200260200160405190810160405280929190818152602001828054801561054557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610527575b5050505050905090565b3360009081526001602052604081205460ff166105d45760405162461bcd60e51b815260206004820152603460248201527f4f6e6c7920746865206173736f63696174656420636f6e74726163742063616e60448201527f20706572666f726d207468697320616374696f6e0000000000000000000000006064820152608401610337565b60028054600181019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384811691909117909155838116600090815260036020526040902054161561068c5760405162461bcd60e51b815260206004820152600c60248201527f7661756c742065786973747300000000000000000000000000000000000000006044820152606401610337565b506001600160a01b039182166000908152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff19169190921617905560025490565b3360009081526001602052604090205460ff166107515760405162461bcd60e51b815260206004820152603460248201527f4f6e6c7920746865206173736f63696174656420636f6e74726163742063616e60448201527f20706572666f726d207468697320616374696f6e0000000000000000000000006064820152608401610337565b6001600160a01b03909116600090815260046020526040902060020155565b3360009081526001602052604090205460ff166107f55760405162461bcd60e51b815260206004820152603460248201527f4f6e6c7920746865206173736f63696174656420636f6e74726163742063616e60448201527f20706572666f726d207468697320616374696f6e0000000000000000000000006064820152608401610337565b6001600160a01b03909116600090815260046020526040902055565b61083560405180606001604052806000815260200160008152602001600081525090565b506001600160a01b0316600090815260046020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b6000546001600160a01b031633146108d15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610337565b6001600160a01b03811661094d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610337565b61095681610959565b50565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146109cd57600080fd5b919050565b6000602082840312156109e457600080fd5b6109ed826109b6565b9392505050565b60008060408385031215610a0757600080fd5b610a10836109b6565b946020939093013593505050565b600060208284031215610a3057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610a785783516001600160a01b031683529284019291840191600101610a53565b50909695505050505050565b60008060408385031215610a9757600080fd5b610aa0836109b6565b9150610aae602084016109b6565b9050925092905056fea2646970667358221220eb1a7edddc001db3131e00b0c0edd9bd20446d392d238739c4e1fe86a96ffdcd64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806397331bf911610097578063de1eb9a311610066578063de1eb9a314610223578063ef88c31e14610258578063f2fde38b14610284578063f857ef671461029757600080fd5b806397331bf9146101c7578063a3fdd98f146101dc578063d3f3e96f146101fd578063d60cad231461021057600080fd5b80635748ff18116100d35780635748ff1814610168578063715018a61461019b5780638da5cb5b146101a35780639094a91e146101b457600080fd5b80630eb9af38146100fa57806352f445ca1461014057806353b83e9214610155575b600080fd5b6101236101083660046109d2565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361014e3660046109d2565b6102e1565b005b6101536101633660046109f4565b6103b9565b61018b6101763660046109d2565b60016020526000908152604090205460ff1681565b6040519015158152602001610137565b61015361045d565b6000546001600160a01b0316610123565b6101236101c2366004610a1e565b6104c3565b6101cf6104ed565b6040516101379190610a37565b6101ef6101ea366004610a84565b61054f565b604051908152602001610137565b61015361020b3660046109f4565b6106cc565b61015361021e3660046109f4565b610770565b6102366102313660046109d2565b610811565b6040805182518152602080840151908201529181015190820152606001610137565b6101236102663660046109d2565b6001600160a01b039081166000908152600360205260409020541690565b6101536102923660046109d2565b610877565b6102c66102a53660046109d2565b60046020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610137565b6000546001600160a01b031633146103405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03811660008181526001602081815260409283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690921790915590519182527f73f20cff579e8a4086fa607db83867595f1b6a798e718c0bfa0b94a404128e03910160405180910390a150565b3360009081526001602052604090205460ff1661043e5760405162461bcd60e51b815260206004820152603460248201527f4f6e6c7920746865206173736f63696174656420636f6e74726163742063616e60448201527f20706572666f726d207468697320616374696f6e0000000000000000000000006064820152608401610337565b6001600160a01b03909116600090815260046020526040902060010155565b6000546001600160a01b031633146104b75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610337565b6104c16000610959565b565b600281815481106104d357600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600280548060200260200160405190810160405280929190818152602001828054801561054557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610527575b5050505050905090565b3360009081526001602052604081205460ff166105d45760405162461bcd60e51b815260206004820152603460248201527f4f6e6c7920746865206173736f63696174656420636f6e74726163742063616e60448201527f20706572666f726d207468697320616374696f6e0000000000000000000000006064820152608401610337565b60028054600181019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384811691909117909155838116600090815260036020526040902054161561068c5760405162461bcd60e51b815260206004820152600c60248201527f7661756c742065786973747300000000000000000000000000000000000000006044820152606401610337565b506001600160a01b039182166000908152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff19169190921617905560025490565b3360009081526001602052604090205460ff166107515760405162461bcd60e51b815260206004820152603460248201527f4f6e6c7920746865206173736f63696174656420636f6e74726163742063616e60448201527f20706572666f726d207468697320616374696f6e0000000000000000000000006064820152608401610337565b6001600160a01b03909116600090815260046020526040902060020155565b3360009081526001602052604090205460ff166107f55760405162461bcd60e51b815260206004820152603460248201527f4f6e6c7920746865206173736f63696174656420636f6e74726163742063616e60448201527f20706572666f726d207468697320616374696f6e0000000000000000000000006064820152608401610337565b6001600160a01b03909116600090815260046020526040902055565b61083560405180606001604052806000815260200160008152602001600081525090565b506001600160a01b0316600090815260046020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b6000546001600160a01b031633146108d15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610337565b6001600160a01b03811661094d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610337565b61095681610959565b50565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146109cd57600080fd5b919050565b6000602082840312156109e457600080fd5b6109ed826109b6565b9392505050565b60008060408385031215610a0757600080fd5b610a10836109b6565b946020939093013593505050565b600060208284031215610a3057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610a785783516001600160a01b031683529284019291840191600101610a53565b50909695505050505050565b60008060408385031215610a9757600080fd5b610aa0836109b6565b9150610aae602084016109b6565b9050925092905056fea2646970667358221220eb1a7edddc001db3131e00b0c0edd9bd20446d392d238739c4e1fe86a96ffdcd64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAllVaults()": {
        "details": "Get all credit account addresses*"
      },
      "getVaultAddress(address)": {
        "details": "Get Vault address for a specific user",
        "params": {
          "_user": "the address of the player*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 389,
        "contract": "contracts/component/vault/VaultStorage.sol:VaultStorage",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16626,
        "contract": "contracts/component/vault/VaultStorage.sol:VaultStorage",
        "label": "associatedContracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11283,
        "contract": "contracts/component/vault/VaultStorage.sol:VaultStorage",
        "label": "allVaults",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11287,
        "contract": "contracts/component/vault/VaultStorage.sol:VaultStorage",
        "label": "getVault",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11292,
        "contract": "contracts/component/vault/VaultStorage.sol:VaultStorage",
        "label": "vaultConfig",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(VaultConfig)16739_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(VaultConfig)16739_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.VaultConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultConfig)16739_storage"
      },
      "t_struct(VaultConfig)16739_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.VaultConfig",
        "members": [
          {
            "astId": 16734,
            "contract": "contracts/component/vault/VaultStorage.sol:VaultStorage",
            "label": "minSecurityDeposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16736,
            "contract": "contracts/component/vault/VaultStorage.sol:VaultStorage",
            "label": "maxSecurityDeposit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16738,
            "contract": "contracts/component/vault/VaultStorage.sol:VaultStorage",
            "label": "securityDepositRequirement",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}