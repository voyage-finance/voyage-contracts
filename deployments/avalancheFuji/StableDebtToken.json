{
  "address": "0xD284d99Cc71a6EAa9278bc39193065478d454e8B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "debtTokenDecimals",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "debtTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "debtTokenSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEBT_TOKEN_REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAverageStableRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalSupplyAndAvgRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlyingAsset",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_debtTokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_debtTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_debtTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_params",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0610442f30ad4af5552e131e68f19a6de498bcc26d8870146952d19366966eac",
  "receipt": {
    "to": null,
    "from": "0xc4940D382C8EAFD2526D1ad56B36CD9674285c43",
    "contractAddress": "0xD284d99Cc71a6EAa9278bc39193065478d454e8B",
    "transactionIndex": 0,
    "gasUsed": "1392474",
    "logsBloom": "0x
    "blockHash": "0x13bd3b3380dd27a2858179c76504657281666be37c7da3ca791dd4706cbcbd4f",
    "transactionHash": "0x0610442f30ad4af5552e131e68f19a6de498bcc26d8870146952d19366966eac",
    "logs": [],
    "blockNumber": 8265330,
    "cumulativeGasUsed": "1392474",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "99f304c05d396759818c8715e3c3dcf9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"debtTokenDecimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"debtTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"debtTokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEBT_TOKEN_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAverageStableRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyAndAvgRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_debtTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_debtTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_debtTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"Calculates the current user debt balance\",\"returns\":{\"_0\":\"The accumulated debt of the user*\"}},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getAverageStableRate()\":{\"details\":\"Returns the average stable rate*\"},\"getTotalSupplyAndAvgRate()\":{\"details\":\"Returns the the total supply and the average stable rate*\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"isInitialized()\":{\"details\":\"Returns true if the contract has been initialized*\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"Being non transferrable, the debt token does not implement any of the standard ERC20 functions for transfer and allowance.*\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokenization/StableDebtToken.sol\":\"StableDebtToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/component/infra/AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../interfaces/IAddressResolver.sol';\\nimport '../../libraries/ownership/Ownable.sol';\\n\\ncontract AddressResolver is IAddressResolver, Ownable {\\n    mapping(bytes32 => address) public repository;\\n\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function importAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external onlyOwner {\\n        require(\\n            names.length == destinations.length,\\n            'Input lengths must match'\\n        );\\n\\n        for (uint256 i = 0; i < names.length; i++) {\\n            bytes32 name = names[i];\\n            address destination = destinations[i];\\n            repository[name] = destination;\\n            emit AddressImported(name, destination);\\n        }\\n    }\\n\\n    function getAddress(bytes32 name) external view returns (address) {\\n        return repository[name];\\n    }\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address)\\n    {\\n        address _foundAddress = repository[name];\\n        require(_foundAddress != address(0), reason);\\n        return _foundAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xd006ad78680655b1bc94b65fe123e90b7ca8e684ed3b22d3ba3868ccf21b2817\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    //function getSynth(byte32 key) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x74dd91308fdcb0c7c8231569d453ff5446740bfc6b1916971ad4b361e5fcd628\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IStableDebtToken {\\n    function getAverageStableRate() external view returns (uint256);\\n\\n    function getTotalSupplyAndAvgRate()\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x535bfa631faf7d4836901d80eef474cc530eccdb3afcd488b3e506ea78cced85\",\"license\":\"GPL-3.0\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(\\n            uint256(lastUpdateTimestamp)\\n        );\\n\\n        return\\n            (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n     * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        if (exp == 0) {\\n            return WadRayMath.ray();\\n        }\\n\\n        uint256 expMinusOne = exp - 1;\\n\\n        uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n        uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n        uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n        uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n        uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n        uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(\\n            basePowerThree\\n        ) / 6;\\n\\n        return\\n            WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(\\n                thirdTerm\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xeb644d3d04ac6c043657b2b835fbf71d1f2795f1f713b900cc43582158f31eac\",\"license\":\"agpl-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87bc93b45f82b290b2b6a9f00ce09f8c5c2b758931a85b37fb5d117a79031d3f\"},\"contracts/libraries/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(owner, pendingOwner);\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x5dca7c2446290ea3519aa0f9295e1edfbff47a1474edbe126f08dca92843e2c8\"},\"contracts/tokenization/BaseERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Context.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract BaseERC20 is Context, IERC20, IERC20Metadata {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint256 internal _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 _decimals\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return The balance of the token\\n     **/\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            'ERC20: transfer amount exceeds allowance'\\n        );\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            'ERC20: decreased allowance below zero'\\n        );\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), 'ERC20: transfer from the zero address');\\n        require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            'ERC20: transfer amount exceeds balance'\\n        );\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: mint to the zero address');\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply.add(amount);\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        _balances[account] = oldAccountBalance.add(amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: burn from the zero address');\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply.sub(amount);\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        _balances[account] = oldAccountBalance.sub(\\n            amount,\\n            'ERC20: burn amount exceeds balance'\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), 'ERC20: approve from the zero address');\\n        require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _setName(string memory newName) internal {\\n        _name = newName;\\n    }\\n\\n    function _setSymbol(string memory newSymbol) internal {\\n        _symbol = newSymbol;\\n    }\\n\\n    function _setDecimals(uint8 newDecimals) internal {\\n        _decimals = newDecimals;\\n    }\\n}\\n\",\"keccak256\":\"0x2e6345cb5f601dcd27e5792f9363032f8b789f372edfa3caa4a4fdd83916f960\",\"license\":\"MIT\"},\"contracts/tokenization/DebtTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './BaseERC20.sol';\\n\\nabstract contract DebtTokenBase is\\n    BaseERC20('DEBTTOKEN_IMPL', 'DEBTTOKEN_IMPL', 0)\\n{\\n    mapping(address => mapping(address => uint256)) internal _borrowAllowances;\\n\\n    /**\\n     * @dev Being non transferrable, the debt token does not implement any of the\\n     * standard ERC20 functions for transfer and allowance.\\n     **/\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        recipient;\\n        amount;\\n        revert('TRANSFER_NOT_SUPPORTED');\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        owner;\\n        spender;\\n        revert('ALLOWANCE_NOT_SUPPORTED');\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        spender;\\n        amount;\\n        revert('APPROVAL_NOT_SUPPORTED');\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        sender;\\n        recipient;\\n        amount;\\n        revert('TRANSFER_NOT_SUPPORTED');\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        spender;\\n        addedValue;\\n        revert('ALLOWANCE_NOT_SUPPORTED');\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        spender;\\n        subtractedValue;\\n        revert('ALLOWANCE_NOT_SUPPORTED');\\n    }\\n\\n    function _getUnderlyingAssetAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x33907655bfd1387f4637553f76e0d7ce773c4d59cd5e6e6ab560ba55da3d1207\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nabstract contract IInitializableDebtToken {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    uint256 private lastInitializedRevision = 0;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Emitted when a debt token is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param debtTokenDecimals the decimals of the debt token\\n     * @param debtTokenName the name of the debt token\\n     * @param debtTokenSymbol the symbol of the debt token\\n     * @param params A set of encoded parameters for additional initialization\\n     **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        uint8 debtTokenDecimals,\\n        string debtTokenName,\\n        string debtTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        uint256 revision = getRevision();\\n        require(\\n            initializing ||\\n                isConstructor() ||\\n                revision > lastInitializedRevision,\\n            'Contract instance has already been initialized'\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            lastInitializedRevision = revision;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the revision number of the contract\\n     * Needs to be defined in the inherited class as a constant.\\n     **/\\n    function getRevision() internal pure virtual returns (uint256);\\n\\n    /**\\n     * @dev Returns true if the contract has been initialized\\n     **/\\n    function isInitialized() public view returns (bool) {\\n        return !initializing && getRevision() <= lastInitializedRevision;\\n    }\\n\\n    /**\\n     * @dev Returns true if and only if the function is running in the constructor\\n     **/\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xbb0699aeb7755cc9e1476d09fce31076cee5b0e2e0f697ffc400fe4853554f11\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/StableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../libraries/math/MathUtils.sol';\\nimport './IInitializableDebtToken.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport './DebtTokenBase.sol';\\nimport '../interfaces/IDebtToken.sol';\\n\\ncontract StableDebtToken is\\n    IInitializableDebtToken,\\n    IStableDebtToken,\\n    DebtTokenBase\\n{\\n    using WadRayMath for uint256;\\n\\n    uint256 public constant DEBT_TOKEN_REVISION = 0x1;\\n\\n    uint256 internal _avgStableRate;\\n    mapping(address => uint40) internal _timestamps;\\n    mapping(address => uint256) internal _usersStableRate;\\n    uint40 internal _totalSupplyTimestamp;\\n\\n    AddressResolver internal addressResolver;\\n    address internal underlyingAsset;\\n\\n    function initialize(\\n        address _underlyingAsset,\\n        uint8 _debtTokenDecimals,\\n        string memory _debtTokenName,\\n        string memory _debtTokenSymbol,\\n        bytes calldata _params\\n    ) external initializer {\\n        _setName(_debtTokenName);\\n        _setSymbol(_debtTokenSymbol);\\n        _setDecimals(_debtTokenDecimals);\\n\\n        underlyingAsset = _underlyingAsset;\\n\\n        emit Initialized(\\n            underlyingAsset,\\n            _debtTokenDecimals,\\n            _debtTokenName,\\n            _debtTokenSymbol,\\n            _params\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the average stable rate\\n     **/\\n    function getAverageStableRate() external view override returns (uint256) {\\n        return _avgStableRate;\\n    }\\n\\n    /**\\n     * @dev Calculates the current user debt balance\\n     * @return The accumulated debt of the user\\n     **/\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 accountBalance = super.balanceOf(_account);\\n        uint256 stableRate = _usersStableRate[_account];\\n        if (accountBalance == 0) {\\n            return 0;\\n        }\\n\\n        uint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(\\n            stableRate,\\n            _timestamps[_account]\\n        );\\n        return accountBalance.rayMul(cumulatedInterest);\\n    }\\n\\n    /**\\n     * @dev Returns the the total supply and the average stable rate\\n     **/\\n    function getTotalSupplyAndAvgRate()\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        uint256 avgRate = _avgStableRate;\\n        return (_calcTotalSupply(avgRate), avgRate);\\n    }\\n\\n    /**\\n     * @dev Calculates the total supply\\n     * @param avgRate The average rate at which the total supply increases\\n     * @return The debt balance of the user since the last burn/mint action\\n     **/\\n    function _calcTotalSupply(uint256 avgRate)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 principalSupply = super.totalSupply();\\n\\n        if (principalSupply == 0) {\\n            return 0;\\n        }\\n\\n        uint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(\\n            avgRate,\\n            _totalSupplyTimestamp\\n        );\\n\\n        return principalSupply.rayMul(cumulatedInterest);\\n    }\\n\\n    function _getUnderlyingAssetAddress()\\n        internal\\n        view\\n        override\\n        returns (address)\\n    {\\n        return underlyingAsset;\\n    }\\n\\n    function getRevision() internal pure virtual override returns (uint256) {\\n        return DEBT_TOKEN_REVISION;\\n    }\\n}\\n\",\"keccak256\":\"0x59dc4eb0b0b27628f0c136cb7f8636fb188caaaf9c41823b048673b4bf71d7ee\",\"license\":\"GPL-3.0\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600080553480156200001557600080fd5b506040518060400160405280600e81526020017f44454254544f4b454e5f494d504c0000000000000000000000000000000000008152506040518060400160405280600e81526020017f44454254544f4b454e5f494d504c000000000000000000000000000000000000815250600082603790805190602001906200009c929190620000bf565b508160389080519060200190620000b5929190620000bf565b50505050620001d4565b828054620000cd906200019e565b90600052602060002090601f016020900481019282620000f157600085556200013d565b82601f106200010c57805160ff19168380011785556200013d565b828001600101855582156200013d579182015b828111156200013c5782518255916020019190600101906200011f565b5b5090506200014c919062000150565b5090565b5b808211156200016b57600081600090555060010162000151565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001b757607f821691505b60208210811415620001ce57620001cd6200016f565b5b50919050565b61175980620001e46000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637e6b081311610097578063a9059cbb11610066578063a9059cbb146102c5578063b9a7b622146102f5578063dd62ed3e14610313578063f731e9be1461034357610100565b80637e6b08131461023d57806390f6fcf21461025957806395d89b4114610277578063a457c2d71461029557610100565b8063313ce567116100d3578063313ce567146101a1578063392e53cd146101bf57806339509351146101dd57806370a082311461020d57610100565b806306fdde0314610105578063095ea7b31461012357806318160ddd1461015357806323b872dd14610171575b600080fd5b61010d610362565b60405161011a9190610dc2565b60405180910390f35b61013d60048036038101906101389190610e8c565b6103f4565b60405161014a9190610ee7565b60405180910390f35b61015b610431565b6040516101689190610f11565b60405180910390f35b61018b60048036038101906101869190610f2c565b61043b565b6040516101989190610ee7565b60405180910390f35b6101a9610478565b6040516101b69190610f9b565b60405180910390f35b6101c761048f565b6040516101d49190610ee7565b60405180910390f35b6101f760048036038101906101f29190610e8c565b6104bc565b6040516102049190610ee7565b60405180910390f35b61022760048036038101906102229190610fb6565b6104f9565b6040516102349190610f11565b60405180910390f35b610257600480360381019061025291906111a4565b6105db565b005b61026161078e565b60405161026e9190610f11565b60405180910390f35b61027f610798565b60405161028c9190610dc2565b60405180910390f35b6102af60048036038101906102aa9190610e8c565b61082a565b6040516102bc9190610ee7565b60405180910390f35b6102df60048036038101906102da9190610e8c565b610867565b6040516102ec9190610ee7565b60405180910390f35b6102fd6108a4565b60405161030a9190610f11565b60405180910390f35b61032d60048036038101906103289190611276565b6108a9565b60405161033a9190610f11565b60405180910390f35b61034b6108e6565b6040516103599291906112b6565b60405180910390f35b6060603780546103719061130e565b80601f016020809104026020016040519081016040528092919081815260200182805461039d9061130e565b80156103ea5780601f106103bf576101008083540402835291602001916103ea565b820191906000526020600020905b8154815290600101906020018083116103cd57829003601f168201915b5050505050905090565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104289061138c565b60405180910390fd5b6000603654905090565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046f906113f8565b60405180910390fd5b6000603960009054906101000a900460ff16905090565b6000600160009054906101000a900460ff161580156104b757506000546104b4610903565b11155b905090565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f090611464565b60405180910390fd5b6000806105058361090c565b90506000603d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600082141561055f576000925050506105d6565b60006105bb82603c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900464ffffffffff16610955565b90506105d0818461096a90919063ffffffff16565b93505050505b919050565b60006105e5610903565b9050600160009054906101000a900460ff168061060657506106056109cf565b5b80610612575060005481115b610651576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610648906114f6565b60405180910390fd5b6000600160009054906101000a900460ff16159050801561068e5760018060006101000a81548160ff021916908315150217905550816000819055505b610697866109e0565b6106a0856109fa565b6106a987610a14565b87603f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f389060560c0359f25d35df53e1ca8e42dd4157a705d94c49b469409f4391ea70888888888860405161075a959493929190611554565b60405180910390a28015610784576000600160006101000a81548160ff0219169083151502179055505b5050505050505050565b6000603b54905090565b6060603880546107a79061130e565b80601f01602080910402602001604051908101604052809291908181526020018280546107d39061130e565b80156108205780601f106107f557610100808354040283529160200191610820565b820191906000526020600020905b81548152906001019060200180831161080357829003601f168201915b5050505050905090565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085e90611464565b60405180910390fd5b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089b906113f8565b60405180910390fd5b600181565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dd90611464565b60405180910390fd5b6000806000603b5490506108f981610a32565b8192509250509091565b60006001905090565b6000603460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610962838342610a90565b905092915050565b60006109c76b033b2e3c9fd0803ce80000006109b96109928587610c1a90919063ffffffff16565b60026b033b2e3c9fd0803ce80000006109ab919061160e565b610c3090919063ffffffff16565b610c4690919063ffffffff16565b905092915050565b600080303b90506000811491505090565b80603790805190602001906109f6929190610c86565b5050565b8060389080519060200190610a10929190610c86565b5050565b80603960006101000a81548160ff021916908360ff16021790555050565b600080610a3d610431565b90506000811415610a52576000915050610a8b565b6000610a7184603e60009054906101000a900464ffffffffff16610955565b9050610a86818361096a90919063ffffffff16565b925050505b919050565b600080610aad8464ffffffffff1684610c5c90919063ffffffff16565b90506000811415610ac857610ac0610c72565b915050610c13565b6000600182610ad7919061163f565b9050600060028311610aea576000610af8565b600283610af7919061163f565b5b905060006301e1338088610b0c919061160e565b90506000610b23828361096a90919063ffffffff16565b90506000610b3a838361096a90919063ffffffff16565b905060006002610b6584610b57898b610c1a90919063ffffffff16565b610c1a90919063ffffffff16565b610b6f919061160e565b905060006006610bac84610b9e89610b908c8e610c1a90919063ffffffff16565b610c1a90919063ffffffff16565b610c1a90919063ffffffff16565b610bb6919061160e565b9050610c0881610bfa84610bec610bd68d8b610c1a90919063ffffffff16565b610bde610c72565b610c3090919063ffffffff16565b610c3090919063ffffffff16565b610c3090919063ffffffff16565b985050505050505050505b9392505050565b60008183610c289190611673565b905092915050565b60008183610c3e91906116cd565b905092915050565b60008183610c54919061160e565b905092915050565b60008183610c6a919061163f565b905092915050565b60006b033b2e3c9fd0803ce8000000905090565b828054610c929061130e565b90600052602060002090601f016020900481019282610cb45760008555610cfb565b82601f10610ccd57805160ff1916838001178555610cfb565b82800160010185558215610cfb579182015b82811115610cfa578251825591602001919060010190610cdf565b5b509050610d089190610d0c565b5090565b5b80821115610d25576000816000905550600101610d0d565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d63578082015181840152602081019050610d48565b83811115610d72576000848401525b50505050565b6000601f19601f8301169050919050565b6000610d9482610d29565b610d9e8185610d34565b9350610dae818560208601610d45565b610db781610d78565b840191505092915050565b60006020820190508181036000830152610ddc8184610d89565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2382610df8565b9050919050565b610e3381610e18565b8114610e3e57600080fd5b50565b600081359050610e5081610e2a565b92915050565b6000819050919050565b610e6981610e56565b8114610e7457600080fd5b50565b600081359050610e8681610e60565b92915050565b60008060408385031215610ea357610ea2610dee565b5b6000610eb185828601610e41565b9250506020610ec285828601610e77565b9150509250929050565b60008115159050919050565b610ee181610ecc565b82525050565b6000602082019050610efc6000830184610ed8565b92915050565b610f0b81610e56565b82525050565b6000602082019050610f266000830184610f02565b92915050565b600080600060608486031215610f4557610f44610dee565b5b6000610f5386828701610e41565b9350506020610f6486828701610e41565b9250506040610f7586828701610e77565b9150509250925092565b600060ff82169050919050565b610f9581610f7f565b82525050565b6000602082019050610fb06000830184610f8c565b92915050565b600060208284031215610fcc57610fcb610dee565b5b6000610fda84828501610e41565b91505092915050565b610fec81610f7f565b8114610ff757600080fd5b50565b60008135905061100981610fe3565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61105182610d78565b810181811067ffffffffffffffff821117156110705761106f611019565b5b80604052505050565b6000611083610de4565b905061108f8282611048565b919050565b600067ffffffffffffffff8211156110af576110ae611019565b5b6110b882610d78565b9050602081019050919050565b82818337600083830152505050565b60006110e76110e284611094565b611079565b90508281526020810184848401111561110357611102611014565b5b61110e8482856110c5565b509392505050565b600082601f83011261112b5761112a61100f565b5b813561113b8482602086016110d4565b91505092915050565b600080fd5b600080fd5b60008083601f8401126111645761116361100f565b5b8235905067ffffffffffffffff81111561118157611180611144565b5b60208301915083600182028301111561119d5761119c611149565b5b9250929050565b60008060008060008060a087890312156111c1576111c0610dee565b5b60006111cf89828a01610e41565b96505060206111e089828a01610ffa565b955050604087013567ffffffffffffffff81111561120157611200610df3565b5b61120d89828a01611116565b945050606087013567ffffffffffffffff81111561122e5761122d610df3565b5b61123a89828a01611116565b935050608087013567ffffffffffffffff81111561125b5761125a610df3565b5b61126789828a0161114e565b92509250509295509295509295565b6000806040838503121561128d5761128c610dee565b5b600061129b85828601610e41565b92505060206112ac85828601610e41565b9150509250929050565b60006040820190506112cb6000830185610f02565b6112d86020830184610f02565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061132657607f821691505b6020821081141561133a576113396112df565b5b50919050565b7f415050524f56414c5f4e4f545f535550504f5254454400000000000000000000600082015250565b6000611376601683610d34565b915061138182611340565b602082019050919050565b600060208201905081810360008301526113a581611369565b9050919050565b7f5452414e534645525f4e4f545f535550504f5254454400000000000000000000600082015250565b60006113e2601683610d34565b91506113ed826113ac565b602082019050919050565b60006020820190508181036000830152611411816113d5565b9050919050565b7f414c4c4f57414e43455f4e4f545f535550504f52544544000000000000000000600082015250565b600061144e601783610d34565b915061145982611418565b602082019050919050565b6000602082019050818103600083015261147d81611441565b9050919050565b7f436f6e747261637420696e7374616e63652068617320616c726561647920626560008201527f656e20696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006114e0602e83610d34565b91506114eb82611484565b604082019050919050565b6000602082019050818103600083015261150f816114d3565b9050919050565b600082825260208201905092915050565b60006115338385611516565b93506115408385846110c5565b61154983610d78565b840190509392505050565b60006080820190506115696000830188610f8c565b818103602083015261157b8187610d89565b9050818103604083015261158f8186610d89565b905081810360608301526115a4818486611527565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061161982610e56565b915061162483610e56565b925082611634576116336115b0565b5b828204905092915050565b600061164a82610e56565b915061165583610e56565b925082821015611668576116676115df565b5b828203905092915050565b600061167e82610e56565b915061168983610e56565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116c2576116c16115df565b5b828202905092915050565b60006116d882610e56565b91506116e383610e56565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611718576117176115df565b5b82820190509291505056fea26469706673582212200c45c692a5ed39c298ca74b036de7645bc9700e221c730a1adda30fd377e1ce464736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80637e6b081311610097578063a9059cbb11610066578063a9059cbb146102c5578063b9a7b622146102f5578063dd62ed3e14610313578063f731e9be1461034357610100565b80637e6b08131461023d57806390f6fcf21461025957806395d89b4114610277578063a457c2d71461029557610100565b8063313ce567116100d3578063313ce567146101a1578063392e53cd146101bf57806339509351146101dd57806370a082311461020d57610100565b806306fdde0314610105578063095ea7b31461012357806318160ddd1461015357806323b872dd14610171575b600080fd5b61010d610362565b60405161011a9190610dc2565b60405180910390f35b61013d60048036038101906101389190610e8c565b6103f4565b60405161014a9190610ee7565b60405180910390f35b61015b610431565b6040516101689190610f11565b60405180910390f35b61018b60048036038101906101869190610f2c565b61043b565b6040516101989190610ee7565b60405180910390f35b6101a9610478565b6040516101b69190610f9b565b60405180910390f35b6101c761048f565b6040516101d49190610ee7565b60405180910390f35b6101f760048036038101906101f29190610e8c565b6104bc565b6040516102049190610ee7565b60405180910390f35b61022760048036038101906102229190610fb6565b6104f9565b6040516102349190610f11565b60405180910390f35b610257600480360381019061025291906111a4565b6105db565b005b61026161078e565b60405161026e9190610f11565b60405180910390f35b61027f610798565b60405161028c9190610dc2565b60405180910390f35b6102af60048036038101906102aa9190610e8c565b61082a565b6040516102bc9190610ee7565b60405180910390f35b6102df60048036038101906102da9190610e8c565b610867565b6040516102ec9190610ee7565b60405180910390f35b6102fd6108a4565b60405161030a9190610f11565b60405180910390f35b61032d60048036038101906103289190611276565b6108a9565b60405161033a9190610f11565b60405180910390f35b61034b6108e6565b6040516103599291906112b6565b60405180910390f35b6060603780546103719061130e565b80601f016020809104026020016040519081016040528092919081815260200182805461039d9061130e565b80156103ea5780601f106103bf576101008083540402835291602001916103ea565b820191906000526020600020905b8154815290600101906020018083116103cd57829003601f168201915b5050505050905090565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104289061138c565b60405180910390fd5b6000603654905090565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046f906113f8565b60405180910390fd5b6000603960009054906101000a900460ff16905090565b6000600160009054906101000a900460ff161580156104b757506000546104b4610903565b11155b905090565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f090611464565b60405180910390fd5b6000806105058361090c565b90506000603d60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600082141561055f576000925050506105d6565b60006105bb82603c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900464ffffffffff16610955565b90506105d0818461096a90919063ffffffff16565b93505050505b919050565b60006105e5610903565b9050600160009054906101000a900460ff168061060657506106056109cf565b5b80610612575060005481115b610651576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610648906114f6565b60405180910390fd5b6000600160009054906101000a900460ff16159050801561068e5760018060006101000a81548160ff021916908315150217905550816000819055505b610697866109e0565b6106a0856109fa565b6106a987610a14565b87603f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f389060560c0359f25d35df53e1ca8e42dd4157a705d94c49b469409f4391ea70888888888860405161075a959493929190611554565b60405180910390a28015610784576000600160006101000a81548160ff0219169083151502179055505b5050505050505050565b6000603b54905090565b6060603880546107a79061130e565b80601f01602080910402602001604051908101604052809291908181526020018280546107d39061130e565b80156108205780601f106107f557610100808354040283529160200191610820565b820191906000526020600020905b81548152906001019060200180831161080357829003601f168201915b5050505050905090565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085e90611464565b60405180910390fd5b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089b906113f8565b60405180910390fd5b600181565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dd90611464565b60405180910390fd5b6000806000603b5490506108f981610a32565b8192509250509091565b60006001905090565b6000603460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610962838342610a90565b905092915050565b60006109c76b033b2e3c9fd0803ce80000006109b96109928587610c1a90919063ffffffff16565b60026b033b2e3c9fd0803ce80000006109ab919061160e565b610c3090919063ffffffff16565b610c4690919063ffffffff16565b905092915050565b600080303b90506000811491505090565b80603790805190602001906109f6929190610c86565b5050565b8060389080519060200190610a10929190610c86565b5050565b80603960006101000a81548160ff021916908360ff16021790555050565b600080610a3d610431565b90506000811415610a52576000915050610a8b565b6000610a7184603e60009054906101000a900464ffffffffff16610955565b9050610a86818361096a90919063ffffffff16565b925050505b919050565b600080610aad8464ffffffffff1684610c5c90919063ffffffff16565b90506000811415610ac857610ac0610c72565b915050610c13565b6000600182610ad7919061163f565b9050600060028311610aea576000610af8565b600283610af7919061163f565b5b905060006301e1338088610b0c919061160e565b90506000610b23828361096a90919063ffffffff16565b90506000610b3a838361096a90919063ffffffff16565b905060006002610b6584610b57898b610c1a90919063ffffffff16565b610c1a90919063ffffffff16565b610b6f919061160e565b905060006006610bac84610b9e89610b908c8e610c1a90919063ffffffff16565b610c1a90919063ffffffff16565b610c1a90919063ffffffff16565b610bb6919061160e565b9050610c0881610bfa84610bec610bd68d8b610c1a90919063ffffffff16565b610bde610c72565b610c3090919063ffffffff16565b610c3090919063ffffffff16565b610c3090919063ffffffff16565b985050505050505050505b9392505050565b60008183610c289190611673565b905092915050565b60008183610c3e91906116cd565b905092915050565b60008183610c54919061160e565b905092915050565b60008183610c6a919061163f565b905092915050565b60006b033b2e3c9fd0803ce8000000905090565b828054610c929061130e565b90600052602060002090601f016020900481019282610cb45760008555610cfb565b82601f10610ccd57805160ff1916838001178555610cfb565b82800160010185558215610cfb579182015b82811115610cfa578251825591602001919060010190610cdf565b5b509050610d089190610d0c565b5090565b5b80821115610d25576000816000905550600101610d0d565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d63578082015181840152602081019050610d48565b83811115610d72576000848401525b50505050565b6000601f19601f8301169050919050565b6000610d9482610d29565b610d9e8185610d34565b9350610dae818560208601610d45565b610db781610d78565b840191505092915050565b60006020820190508181036000830152610ddc8184610d89565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2382610df8565b9050919050565b610e3381610e18565b8114610e3e57600080fd5b50565b600081359050610e5081610e2a565b92915050565b6000819050919050565b610e6981610e56565b8114610e7457600080fd5b50565b600081359050610e8681610e60565b92915050565b60008060408385031215610ea357610ea2610dee565b5b6000610eb185828601610e41565b9250506020610ec285828601610e77565b9150509250929050565b60008115159050919050565b610ee181610ecc565b82525050565b6000602082019050610efc6000830184610ed8565b92915050565b610f0b81610e56565b82525050565b6000602082019050610f266000830184610f02565b92915050565b600080600060608486031215610f4557610f44610dee565b5b6000610f5386828701610e41565b9350506020610f6486828701610e41565b9250506040610f7586828701610e77565b9150509250925092565b600060ff82169050919050565b610f9581610f7f565b82525050565b6000602082019050610fb06000830184610f8c565b92915050565b600060208284031215610fcc57610fcb610dee565b5b6000610fda84828501610e41565b91505092915050565b610fec81610f7f565b8114610ff757600080fd5b50565b60008135905061100981610fe3565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61105182610d78565b810181811067ffffffffffffffff821117156110705761106f611019565b5b80604052505050565b6000611083610de4565b905061108f8282611048565b919050565b600067ffffffffffffffff8211156110af576110ae611019565b5b6110b882610d78565b9050602081019050919050565b82818337600083830152505050565b60006110e76110e284611094565b611079565b90508281526020810184848401111561110357611102611014565b5b61110e8482856110c5565b509392505050565b600082601f83011261112b5761112a61100f565b5b813561113b8482602086016110d4565b91505092915050565b600080fd5b600080fd5b60008083601f8401126111645761116361100f565b5b8235905067ffffffffffffffff81111561118157611180611144565b5b60208301915083600182028301111561119d5761119c611149565b5b9250929050565b60008060008060008060a087890312156111c1576111c0610dee565b5b60006111cf89828a01610e41565b96505060206111e089828a01610ffa565b955050604087013567ffffffffffffffff81111561120157611200610df3565b5b61120d89828a01611116565b945050606087013567ffffffffffffffff81111561122e5761122d610df3565b5b61123a89828a01611116565b935050608087013567ffffffffffffffff81111561125b5761125a610df3565b5b61126789828a0161114e565b92509250509295509295509295565b6000806040838503121561128d5761128c610dee565b5b600061129b85828601610e41565b92505060206112ac85828601610e41565b9150509250929050565b60006040820190506112cb6000830185610f02565b6112d86020830184610f02565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061132657607f821691505b6020821081141561133a576113396112df565b5b50919050565b7f415050524f56414c5f4e4f545f535550504f5254454400000000000000000000600082015250565b6000611376601683610d34565b915061138182611340565b602082019050919050565b600060208201905081810360008301526113a581611369565b9050919050565b7f5452414e534645525f4e4f545f535550504f5254454400000000000000000000600082015250565b60006113e2601683610d34565b91506113ed826113ac565b602082019050919050565b60006020820190508181036000830152611411816113d5565b9050919050565b7f414c4c4f57414e43455f4e4f545f535550504f52544544000000000000000000600082015250565b600061144e601783610d34565b915061145982611418565b602082019050919050565b6000602082019050818103600083015261147d81611441565b9050919050565b7f436f6e747261637420696e7374616e63652068617320616c726561647920626560008201527f656e20696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006114e0602e83610d34565b91506114eb82611484565b604082019050919050565b6000602082019050818103600083015261150f816114d3565b9050919050565b600082825260208201905092915050565b60006115338385611516565b93506115408385846110c5565b61154983610d78565b840190509392505050565b60006080820190506115696000830188610f8c565b818103602083015261157b8187610d89565b9050818103604083015261158f8186610d89565b905081810360608301526115a4818486611527565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061161982610e56565b915061162483610e56565b925082611634576116336115b0565b5b828204905092915050565b600061164a82610e56565b915061165583610e56565b925082821015611668576116676115df565b5b828203905092915050565b600061167e82610e56565b915061168983610e56565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116c2576116c16115df565b5b828202905092915050565b60006116d882610e56565b91506116e383610e56565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611718576117176115df565b5b82820190509291505056fea26469706673582212200c45c692a5ed39c298ca74b036de7645bc9700e221c730a1adda30fd377e1ce464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "Calculates the current user debt balance",
        "returns": {
          "_0": "The accumulated debt of the user*"
        }
      },
      "decimals()": {
        "details": "Returns the decimals places of the token."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getAverageStableRate()": {
        "details": "Returns the average stable rate*"
      },
      "getTotalSupplyAndAvgRate()": {
        "details": "Returns the the total supply and the average stable rate*"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "isInitialized()": {
        "details": "Returns true if the contract has been initialized*"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "Being non transferrable, the debt token does not implement any of the standard ERC20 functions for transfer and allowance.*"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7659,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7662,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "initializing",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 7760,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "______gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6968,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_balances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6974,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6976,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 6978,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_name",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 6980,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "56",
        "type": "t_string_storage"
      },
      {
        "astId": 6982,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_decimals",
        "offset": 0,
        "slot": "57",
        "type": "t_uint8"
      },
      {
        "astId": 7528,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_borrowAllowances",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8800,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_avgStableRate",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 8804,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_timestamps",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_uint40)"
      },
      {
        "astId": 8808,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_usersStableRate",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8810,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_totalSupplyTimestamp",
        "offset": 0,
        "slot": "62",
        "type": "t_uint40"
      },
      {
        "astId": 8813,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "addressResolver",
        "offset": 5,
        "slot": "62",
        "type": "t_contract(AddressResolver)1009"
      },
      {
        "astId": 8815,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "underlyingAsset",
        "offset": 0,
        "slot": "63",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AddressResolver)1009": {
        "encoding": "inplace",
        "label": "contract AddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint40)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint40)",
        "numberOfBytes": "32",
        "value": "t_uint40"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}