{
  "address": "0x5ADCE9435a9433af10e3cef246535611Fa7A9800",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "debtTokenDecimals",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "debtTokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "debtTokenSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "avgStableRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEBT_TOKEN_REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAggregateActualRepaymentRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAggregateOptimalRepaymentRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAverageStableRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalSupplyAndAvgRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalSupplyLastUpdated",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlyingAsset",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_debtTokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_debtTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_debtTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_params",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tenure",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "principalOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingAssetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4623e5d10e0b290b61d138dab88a752c3ac2f0ed010f00e9462fbfbbb9a9e996",
  "receipt": {
    "to": null,
    "from": "0x4C616d9377Fa8d928385F0b11Ab16D4bf0f2d544",
    "contractAddress": "0x5ADCE9435a9433af10e3cef246535611Fa7A9800",
    "transactionIndex": 7,
    "gasUsed": "2195704",
    "logsBloom": "0x
    "blockHash": "0x8e464063f95193d8ce095d6a1c6c1c97c29769a28473e41f8f9f6199b5630bac",
    "transactionHash": "0x4623e5d10e0b290b61d138dab88a752c3ac2f0ed010f00e9462fbfbbb9a9e996",
    "logs": [],
    "blockNumber": 8678266,
    "cumulativeGasUsed": "2521813",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "18122cecad17c7f35277e81b5475a72e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"debtTokenDecimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"debtTokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"debtTokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgStableRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEBT_TOKEN_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAggregateActualRepaymentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAggregateOptimalRepaymentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAverageStableRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyAndAvgRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyLastUpdated\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_debtTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_debtTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_debtTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tenure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"principalOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"Calculates the current user debt balance\",\"returns\":{\"_0\":\"The accumulated debt of the user*\"}},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getAverageStableRate()\":{\"details\":\"Returns the average stable rate*\"},\"getTotalSupplyAndAvgRate()\":{\"details\":\"Returns the the total supply and the average stable rate*\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"isInitialized()\":{\"details\":\"Returns true if the contract has been initialized*\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"principalOf(address)\":{\"details\":\"Calculate the current user debt principal*\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"Being non transferrable, the debt token does not implement any of the standard ERC20 functions for transfer and allowance.*\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokenization/StableDebtToken.sol\":\"StableDebtToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/component/infra/AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../interfaces/IAddressResolver.sol';\\nimport '../../libraries/ownership/Ownable.sol';\\n\\ncontract AddressResolver is IAddressResolver, Ownable {\\n    bytes32 public constant aclManagerName = 'aclManager';\\n    bytes32 public constant liquidityManagerProxyName = 'liquidityManagerProxy';\\n    bytes32 public constant liquidityManagerName = 'liquidityManager';\\n    bytes32 public constant liquidityManagerStorageName =\\n        'liquidityManagerStorage';\\n    bytes32 public constant loanManagerName = 'loanManager';\\n    bytes32 public constant vaultManagerProxyName = 'vaultManagerProxy';\\n    bytes32 public constant vaultStorageName = 'vaultStorage';\\n    bytes32 public constant securityDepositTokenName = 'securityDepositToken';\\n    bytes32 public constant stableDebtTokenName = 'stableDebtToken';\\n    bytes32 public constant extCallACLProxyName = 'extCallACLProxy';\\n\\n    mapping(bytes32 => address) public repository;\\n\\n    function importAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external onlyOwner {\\n        require(\\n            names.length == destinations.length,\\n            'Input lengths must match'\\n        );\\n\\n        for (uint256 i = 0; i < names.length; i++) {\\n            bytes32 name = names[i];\\n            address destination = destinations[i];\\n            repository[name] = destination;\\n            emit AddressImported(name, destination);\\n        }\\n    }\\n\\n    function getLiquidityManagerProxy() external view returns (address) {\\n        return repository[liquidityManagerProxyName];\\n    }\\n\\n    function getAddress(bytes32 name) external view returns (address) {\\n        return repository[name];\\n    }\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address)\\n    {\\n        address _foundAddress = repository[name];\\n        require(_foundAddress != address(0), reason);\\n        return _foundAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x71f72ca85da06af1e8382ece88e9b57978b10a453e0eae0808207078887e328d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IAddressResolver {\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function importAddresses(\\n        bytes32[] calldata names,\\n        address[] calldata destinations\\n    ) external;\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason)\\n        external\\n        view\\n        returns (address);\\n\\n    function getLiquidityManagerProxy() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2d3659f5a65316556a4cf6e70faf506eb6f0fa2a4899c89bba51609ac4884f7c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IStableDebtToken {\\n    /**\\n     * @dev Emitted when new stable debt is minted\\n     * @param user The address of the user who triggered the minting\\n     * @param amount The amount minted (user entered amount + balance increase from interest)\\n     * @param currentBalance The current balance of the user\\n     * @param balanceIncrease The increase in balance since the last action of the user\\n     * @param newRate The rate of the debt after the minting\\n     * @param avgStableRate The next average stable rate after the minting\\n     * @param newTotalSupply The next total supply of the stable debt token after the action\\n     **/\\n    event Mint(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 currentBalance,\\n        uint256 balanceIncrease,\\n        uint256 newRate,\\n        uint256 avgStableRate,\\n        uint256 newTotalSupply\\n    );\\n\\n    function getAverageStableRate() external view returns (uint256);\\n\\n    function getTotalSupplyAndAvgRate()\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getAggregateOptimalRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAggregateActualRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xe2f108067bebe79426ae636585fd801a5e0c0efcb97e2116ba5ec57d167be796\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nabstract contract IInitializableDebtToken {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    uint256 private lastInitializedRevision = 0;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Emitted when a debt token is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param debtTokenDecimals the decimals of the debt token\\n     * @param debtTokenName the name of the debt token\\n     * @param debtTokenSymbol the symbol of the debt token\\n     * @param params A set of encoded parameters for additional initialization\\n     **/\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        uint8 debtTokenDecimals,\\n        string debtTokenName,\\n        string debtTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        uint256 revision = getRevision();\\n        require(\\n            initializing ||\\n                isConstructor() ||\\n                revision > lastInitializedRevision,\\n            'Contract instance has already been initialized'\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            lastInitializedRevision = revision;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the revision number of the contract\\n     * Needs to be defined in the inherited class as a constant.\\n     **/\\n    function getRevision() internal pure virtual returns (uint256);\\n\\n    /**\\n     * @dev Returns true if the contract has been initialized\\n     **/\\n    function isInitialized() public view returns (bool) {\\n        return !initializing && getRevision() <= lastInitializedRevision;\\n    }\\n\\n    // todo return value\\n    function mint(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _tenure,\\n        uint256 _rate\\n    ) external virtual;\\n\\n    /**\\n     * @dev Returns true if and only if the function is running in the constructor\\n     **/\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x039d40f57de228bbc6991bb2d7ca3203986f3bf803d4da625e635bce71c5d29d\",\"license\":\"GPL-3.0\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors library\\n * @author Voyager\\n * @notice Defines the error messages emitted by the different contracts of the Voyager protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - LM = LiquidityManager\\n *  - LOM = LoanManager\\n *  - CT = Common errors between tokens\\n *  - RL = ReserveLogic\\n */\\nlibrary Errors {\\n    string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n    string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n    string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL = '20';\\n    string public constant CT_CALLER_MUST_BE_LOAN_MANAGER = '21';\\n    string public constant CT_INVALID_MINT_AMOUNT = '21';\\n    string public constant CT_INVALID_BURN_AMOUNT = '22';\\n    string public constant LM_NOT_CONTRACT = '60';\\n    string public constant LP_IS_PAUSED = '61'; // 'Pool is paused'\\n    string public constant LOM_RESERVE_NOT_SUFFICIENT = '70';\\n    string public constant LOM_CREDIT_NOT_SUFFICIENT = '71';\\n    string public constant LOM_HEALTH_RISK_BELOW_ONE = '71';\\n    string public constant LOM_NOT_VAULT_OWNER = '72';\\n    string public constant RL_LIQUIDITY_RATE_OVERFLOW = '80'; //  Liquidity rate overflows uint128\\n    string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '81'; //  Stable borrow rate overflows uint128\\n}\\n\",\"keccak256\":\"0x99c4bd1d0e99adf35c543608d5ac127fd65983ad861424b1e30d8674671960bd\",\"license\":\"agpl-3.0\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(\\n            uint256(lastUpdateTimestamp)\\n        );\\n\\n        return\\n            (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n     * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        if (exp == 0) {\\n            return WadRayMath.ray();\\n        }\\n\\n        uint256 expMinusOne = exp - 1;\\n\\n        uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n        uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n        uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n        uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n        uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n        uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(\\n            basePowerThree\\n        ) / 6;\\n\\n        return\\n            WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(\\n                thirdTerm\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xeb644d3d04ac6c043657b2b835fbf71d1f2795f1f713b900cc43582158f31eac\",\"license\":\"agpl-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87bc93b45f82b290b2b6a9f00ce09f8c5c2b758931a85b37fb5d117a79031d3f\"},\"contracts/libraries/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(owner, pendingOwner);\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x5dca7c2446290ea3519aa0f9295e1edfbff47a1474edbe126f08dca92843e2c8\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary DataTypes {\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        // for calculating overall interested accumulated\\n        // then split it into two indexs base on two allocations\\n        uint256 currentOverallLiquidityRate;\\n        // Expressed in ray\\n        uint256 currentSeniorIncomeAllocation;\\n        // Expressed in ray\\n        uint256 currentJuniorIncomeAllocation;\\n        uint256 juniorLiquidityIndex;\\n        uint256 seniorLiquidityIndex;\\n        uint256 totalBorrows;\\n        uint256 currentBorrowRate;\\n        // Expressed in ray\\n        uint256 securityRequirement;\\n        //the decimals of the reserve asset\\n        uint256 decimals;\\n        address interestRateStrategyAddress;\\n        address healthStrategyAddress;\\n        address juniorDepositTokenAddress;\\n        address seniorDepositTokenAddress;\\n        address stableDebtAddress;\\n        uint40 juniorLastUpdateTimestamp;\\n        uint40 seniorLastUpdateTimestamp;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: Liquidate bonus\\n        //bit 16-23: Decimals\\n        //bit 24: Reserve is active\\n        //bit 25: reserve is frozen\\n        //bit 26: borrowing is enabled\\n        //bit 27-30: reserved\\n        //bit 31-46: reserve factor\\n        //bit 47-62: lock up period in seconds\\n        uint256 data;\\n    }\\n\\n    struct FungibleTokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    struct BorrowData {\\n        uint256 drawDownNumber;\\n        uint256 totalDebt;\\n        mapping(uint256 => DrawDown) drawDowns;\\n        mapping(uint256 => Repayment) repayments;\\n    }\\n\\n    struct DrawDown {\\n        uint256 amount;\\n        uint256 tenure;\\n        uint40 timestamp;\\n        uint256 borrowRate;\\n        Repayment repayment;\\n    }\\n\\n    struct Repayment {\\n        uint256 totalPaid;\\n        // tenure => amount\\n        // todo wrapper this in the future\\n        mapping(uint256 => uint256) repayment;\\n    }\\n\\n    // tmp struct to avoid stack too long\\n\\n    struct DepositAndDebt {\\n        uint256 juniorDepositAmount;\\n        uint256 seniorDepositAmount;\\n        uint256 totalDebt;\\n    }\\n\\n    struct HealthRiskParameter {\\n        uint256 securityDeposit;\\n        uint256 currentBorrowRate;\\n        uint256 compoundedDebt;\\n        uint256 grossAssetValue;\\n        uint256 aggregateOptimalRepaymentRate;\\n        uint256 aggregateActualRepaymentRate;\\n    }\\n}\\n\",\"keccak256\":\"0x2475d0cacc4f46847d0f7c21081a6957410f0bfe47a4c4e919d97f4b8fd1cb73\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/BaseERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Context.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract BaseERC20 is Context, IERC20, IERC20Metadata {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint256 internal _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 _decimals\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return The balance of the token\\n     **/\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            'ERC20: transfer amount exceeds allowance'\\n        );\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            'ERC20: decreased allowance below zero'\\n        );\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), 'ERC20: transfer from the zero address');\\n        require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            'ERC20: transfer amount exceeds balance'\\n        );\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: mint to the zero address');\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply.add(amount);\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        _balances[account] = oldAccountBalance.add(amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), 'ERC20: burn from the zero address');\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 oldTotalSupply = _totalSupply;\\n        _totalSupply = oldTotalSupply.sub(amount);\\n\\n        uint256 oldAccountBalance = _balances[account];\\n        _balances[account] = oldAccountBalance.sub(\\n            amount,\\n            'ERC20: burn amount exceeds balance'\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), 'ERC20: approve from the zero address');\\n        require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _setName(string memory newName) internal {\\n        _name = newName;\\n    }\\n\\n    function _setSymbol(string memory newSymbol) internal {\\n        _symbol = newSymbol;\\n    }\\n\\n    function _setDecimals(uint8 newDecimals) internal {\\n        _decimals = newDecimals;\\n    }\\n}\\n\",\"keccak256\":\"0x2e6345cb5f601dcd27e5792f9363032f8b789f372edfa3caa4a4fdd83916f960\",\"license\":\"MIT\"},\"contracts/tokenization/DebtTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './BaseERC20.sol';\\n\\nabstract contract DebtTokenBase is\\n    BaseERC20('DEBTTOKEN_IMPL', 'DEBTTOKEN_IMPL', 0)\\n{\\n    mapping(address => mapping(address => uint256)) internal _borrowAllowances;\\n\\n    /**\\n     * @dev Being non transferrable, the debt token does not implement any of the\\n     * standard ERC20 functions for transfer and allowance.\\n     **/\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        recipient;\\n        amount;\\n        revert('TRANSFER_NOT_SUPPORTED');\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        owner;\\n        spender;\\n        revert('ALLOWANCE_NOT_SUPPORTED');\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        spender;\\n        amount;\\n        revert('APPROVAL_NOT_SUPPORTED');\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        sender;\\n        recipient;\\n        amount;\\n        revert('TRANSFER_NOT_SUPPORTED');\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        spender;\\n        addedValue;\\n        revert('ALLOWANCE_NOT_SUPPORTED');\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        spender;\\n        subtractedValue;\\n        revert('ALLOWANCE_NOT_SUPPORTED');\\n    }\\n\\n    function _getUnderlyingAssetAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x33907655bfd1387f4637553f76e0d7ce773c4d59cd5e6e6ab560ba55da3d1207\",\"license\":\"GPL-3.0\"},\"contracts/tokenization/StableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/math/WadRayMath.sol';\\nimport '../libraries/math/MathUtils.sol';\\nimport '../component/infra/AddressResolver.sol';\\nimport './DebtTokenBase.sol';\\nimport '../interfaces/IDebtToken.sol';\\nimport '../libraries/types/DataTypes.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeCast.sol';\\nimport 'openzeppelin-solidity/contracts/utils/Context.sol';\\nimport '../libraries/helpers/Errors.sol';\\nimport '../interfaces/IInitializableDebtToken.sol';\\n\\ncontract StableDebtToken is\\n    Context,\\n    IInitializableDebtToken,\\n    IStableDebtToken,\\n    DebtTokenBase\\n{\\n    using WadRayMath for uint256;\\n    using SafeCast for uint256;\\n\\n    modifier onlyLoanManager() {\\n        require(\\n            _msgSender() == addressResolver.getAddress('loanManager'),\\n            Errors.CT_CALLER_MUST_BE_LOAN_MANAGER\\n        );\\n        _;\\n    }\\n\\n    uint256 public constant DEBT_TOKEN_REVISION = 0x1;\\n    uint256 public constant SECONDS_PER_DAY = 1 days;\\n\\n    uint256 internal _avgStableRate;\\n    mapping(address => uint256) internal _usersStableRate;\\n    uint40 internal _totalSupplyTimestamp;\\n    mapping(address => DataTypes.BorrowData) internal _borrowData;\\n\\n    AddressResolver internal addressResolver;\\n    address internal underlyingAsset;\\n\\n    function initialize(\\n        address _underlyingAsset,\\n        uint8 _debtTokenDecimals,\\n        string memory _debtTokenName,\\n        string memory _debtTokenSymbol,\\n        bytes calldata _params\\n    ) external initializer {\\n        _setName(_debtTokenName);\\n        _setSymbol(_debtTokenSymbol);\\n        _setDecimals(_debtTokenDecimals);\\n\\n        underlyingAsset = _underlyingAsset;\\n\\n        emit Initialized(\\n            underlyingAsset,\\n            _debtTokenDecimals,\\n            _debtTokenName,\\n            _debtTokenSymbol,\\n            _params\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the average stable rate\\n     **/\\n    function getAverageStableRate() external view override returns (uint256) {\\n        return _avgStableRate;\\n    }\\n\\n    /**\\n     * @dev Calculate the current user debt principal\\n     **/\\n    function principalOf(address _account) public view returns (uint256) {\\n        DataTypes.BorrowData storage borrowData = _borrowData[_account];\\n        uint256 principal;\\n        for (uint256 i = 0; i < borrowData.drawDownNumber; i++) {\\n            principal += borrowData.drawDowns[i].amount;\\n        }\\n\\n        return principal;\\n    }\\n\\n    /**\\n     * @dev Calculates the current user debt balance\\n     * @return The accumulated debt of the user\\n     **/\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        DataTypes.BorrowData storage borrowData = _borrowData[_account];\\n        uint256 cumulatedBalance;\\n        for (uint256 i = 0; i < borrowData.drawDownNumber; i++) {\\n            uint256 stableRate = borrowData.drawDowns[i].borrowRate;\\n            uint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(\\n                stableRate,\\n                borrowData.drawDowns[i].timestamp\\n            );\\n            cumulatedBalance += borrowData.drawDowns[i].amount.rayMul(\\n                cumulatedInterest\\n            );\\n        }\\n        return cumulatedBalance;\\n    }\\n\\n    function _mint(address _account) internal {\\n        DataTypes.BorrowData storage borrowData = _borrowData[_account];\\n        for (uint256 i = 0; i < borrowData.drawDownNumber; i++) {\\n            DataTypes.DrawDown storage drawDown = borrowData.drawDowns[i];\\n            uint256 stableRate = drawDown.borrowRate;\\n            uint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(\\n                stableRate,\\n                drawDown.timestamp\\n            );\\n            drawDown.amount = drawDown.amount.rayMul(cumulatedInterest);\\n            drawDown.timestamp = uint40(block.timestamp);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the the total supply and the average stable rate\\n     **/\\n    function getTotalSupplyAndAvgRate()\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        uint256 avgRate = _avgStableRate;\\n        return (_calcTotalSupply(avgRate), avgRate);\\n    }\\n\\n    /**\\n     * @dev Calculates the total supply\\n     * @param avgRate The average rate at which the total supply increases\\n     * @return The debt balance of the user since the last burn/mint action\\n     **/\\n    function _calcTotalSupply(uint256 avgRate)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 principalSupply = super.totalSupply();\\n\\n        if (principalSupply == 0) {\\n            return 0;\\n        }\\n\\n        uint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(\\n            avgRate,\\n            _totalSupplyTimestamp\\n        );\\n\\n        return principalSupply.rayMul(cumulatedInterest);\\n    }\\n\\n    function _getUnderlyingAssetAddress()\\n        internal\\n        view\\n        override\\n        returns (address)\\n    {\\n        return underlyingAsset;\\n    }\\n\\n    function getRevision() internal pure virtual override returns (uint256) {\\n        return DEBT_TOKEN_REVISION;\\n    }\\n\\n    function getAggregateOptimalRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        DataTypes.BorrowData storage bd = _borrowData[_user];\\n        uint256 stableRate = _usersStableRate[_user];\\n        uint256 aggregateOptimalRepaymentRate;\\n        for (uint256 i = 0; i < bd.drawDownNumber; i++) {\\n            DataTypes.DrawDown storage drawDone = bd.drawDowns[i];\\n            uint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(\\n                stableRate,\\n                drawDone.timestamp\\n            );\\n            uint256 cumulatedBalance = drawDone.amount.rayMul(\\n                cumulatedInterest\\n            );\\n            aggregateOptimalRepaymentRate += cumulatedBalance.rayDiv(\\n                drawDone.tenure.rayMul(SECONDS_PER_DAY * WadRayMath.ray())\\n            );\\n        }\\n        return aggregateOptimalRepaymentRate;\\n    }\\n\\n    function getAggregateActualRepaymentRate(address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        DataTypes.BorrowData storage bd = _borrowData[_user];\\n        uint256 aggregateActualRepayment;\\n        for (uint256 i = 0; i < bd.drawDownNumber; i++) {\\n            DataTypes.DrawDown storage drawDone = bd.drawDowns[i];\\n            DataTypes.Repayment storage repayment = drawDone.repayment;\\n            if (\\n                repayment.totalPaid != 0 && block.timestamp > drawDone.timestamp\\n            ) {\\n                aggregateActualRepayment += repayment.totalPaid.rayDiv(\\n                    (block.timestamp - drawDone.timestamp) * WadRayMath.ray()\\n                );\\n            }\\n        }\\n        return aggregateActualRepayment;\\n    }\\n\\n    struct MintLocalVars {\\n        uint256 previousSupply;\\n        uint256 nextSupply;\\n        uint256 amountInRay;\\n        uint256 currentStableRate;\\n        uint256 nextStableRate;\\n        uint256 currentAvgStableRate;\\n    }\\n\\n    function mint(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _tenure,\\n        uint256 _rate\\n    ) external override onlyLoanManager {\\n        MintLocalVars memory vars;\\n\\n        (\\n            ,\\n            uint256 currentBalance,\\n            uint256 balanceIncrease\\n        ) = _calculateBalanceIncrease(_user);\\n\\n        vars.previousSupply = totalSupply();\\n        vars.currentAvgStableRate = _avgStableRate;\\n        vars.nextSupply = _totalSupply = vars.previousSupply + _amount;\\n\\n        vars.amountInRay = _amount.wadToRay();\\n        vars.currentStableRate = _usersStableRate[_user];\\n\\n        DataTypes.BorrowData storage bd = _borrowData[_user];\\n        uint256 currentDrawDownNumber = bd.drawDownNumber;\\n        bd.drawDowns[currentDrawDownNumber].amount = _amount;\\n        bd.drawDowns[currentDrawDownNumber].tenure = _tenure;\\n        bd.drawDowns[currentDrawDownNumber].borrowRate = _rate;\\n        bd.drawDowns[currentDrawDownNumber].timestamp = uint40(block.timestamp);\\n        bd.drawDownNumber++;\\n\\n        vars.nextStableRate = (vars.currentStableRate.rayMul(\\n            currentBalance.wadToRay()\\n        ) + vars.amountInRay.rayMul(_rate)).rayDiv(\\n                (currentBalance + _amount).wadToRay()\\n            );\\n\\n        _usersStableRate[_user] = vars.nextStableRate.toUint128();\\n\\n        _totalSupplyTimestamp = uint40(block.timestamp);\\n\\n        // Calculates the updated average stable rate\\n        vars.currentAvgStableRate = _avgStableRate = (\\n            (vars.currentAvgStableRate.rayMul(vars.previousSupply.wadToRay()) +\\n                _rate.rayMul(vars.amountInRay)).rayDiv(\\n                    vars.nextSupply.wadToRay()\\n                )\\n        ).toUint128();\\n        _mint(_user);\\n        emit Mint(\\n            _user,\\n            _amount,\\n            currentBalance,\\n            balanceIncrease,\\n            vars.nextStableRate,\\n            vars.currentAvgStableRate,\\n            vars.nextSupply\\n        );\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _calcTotalSupply(_avgStableRate);\\n    }\\n\\n    function getTotalSupplyLastUpdated() external view returns (uint40) {\\n        return _totalSupplyTimestamp;\\n    }\\n\\n    function underlyingAssetAddress() external view returns (address) {\\n        return underlyingAsset;\\n    }\\n\\n    /**\\n     * @dev Calculates the increase in balance since the last user interaction\\n     * @param _user The address of the user for which the\\n     * @return The previous principal balance\\n     * @return The new principal balance\\n     * @return The balance increase\\n     **/\\n    function _calculateBalanceIncrease(address _user)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 principal = principalOf(_user);\\n        if (principal == 0) {\\n            return (0, 0, 0);\\n        }\\n\\n        uint256 newPrincipalBalance = balanceOf(_user);\\n        return (\\n            principal,\\n            newPrincipalBalance,\\n            newPrincipalBalance - principal\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x995a699c716368a1e60b7543b09c5d3ef154b373d5536fb7ae0bfab434f9f7a5\",\"license\":\"GPL-3.0\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600080553480156200001557600080fd5b506040518060400160405280600e81526020017f44454254544f4b454e5f494d504c0000000000000000000000000000000000008152506040518060400160405280600e81526020017f44454254544f4b454e5f494d504c000000000000000000000000000000000000815250600082603790805190602001906200009c929190620000bf565b508160389080519060200190620000b5929190620000bf565b50505050620001d4565b828054620000cd906200019e565b90600052602060002090601f016020900481019282620000f157600085556200013d565b82601f106200010c57805160ff19168380011785556200013d565b828001600101855582156200013d579182015b828111156200013c5782518255916020019190600101906200011f565b5b5090506200014c919062000150565b5090565b5b808211156200016b57600081600090555060010162000151565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001b757607f821691505b60208210811415620001ce57620001cd6200016f565b5b50919050565b6125eb80620001e46000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80637e6b0813116100c3578063a647e8ec1161007c578063a647e8ec146103de578063a9059cbb146103fa578063b9a7b6221461042a578063dd62ed3e14610448578063e748489014610478578063f731e9be146104965761014d565b80637e6b081314610308578063804ba0a91461032457806389d1a0fc1461035457806390f6fcf21461037257806395d89b4114610390578063a457c2d7146103ae5761014d565b8063313ce56711610115578063313ce5671461021e578063392e53cd1461023c578063395093511461025a57806361e20a1c1461028a57806370a08231146102ba57806374f0314f146102ea5761014d565b806306fdde0314610152578063095ea7b31461017057806318160ddd146101a0578063196a4cb3146101be57806323b872dd146101ee575b600080fd5b61015a6104b5565b60405161016791906119cb565b60405180910390f35b61018a60048036038101906101859190611a95565b610547565b6040516101979190611af0565b60405180910390f35b6101a8610584565b6040516101b59190611b1a565b60405180910390f35b6101d860048036038101906101d39190611b35565b610596565b6040516101e59190611b1a565b60405180910390f35b61020860048036038101906102039190611b62565b6106c2565b6040516102159190611af0565b60405180910390f35b6102266106ff565b6040516102339190611bd1565b60405180910390f35b610244610716565b6040516102519190611af0565b60405180910390f35b610274600480360381019061026f9190611a95565b610743565b6040516102819190611af0565b60405180910390f35b6102a4600480360381019061029f9190611b35565b610780565b6040516102b19190611b1a565b60405180910390f35b6102d460048036038101906102cf9190611b35565b61081c565b6040516102e19190611b1a565b60405180910390f35b6102f2610920565b6040516102ff9190611b1a565b60405180910390f35b610322600480360381019061031d9190611dad565b610927565b005b61033e60048036038101906103399190611b35565b610ada565b60405161034b9190611b1a565b60405180910390f35b61035c610c3a565b6040516103699190611e8e565b60405180910390f35b61037a610c64565b6040516103879190611b1a565b60405180910390f35b610398610c6e565b6040516103a591906119cb565b60405180910390f35b6103c860048036038101906103c39190611a95565b610d00565b6040516103d59190611af0565b60405180910390f35b6103f860048036038101906103f39190611ea9565b610d3d565b005b610414600480360381019061040f9190611a95565b61122d565b6040516104219190611af0565b60405180910390f35b61043261126a565b60405161043f9190611b1a565b60405180910390f35b610462600480360381019061045d9190611f10565b61126f565b60405161046f9190611b1a565b60405180910390f35b6104806112ac565b60405161048d9190611f70565b60405180910390f35b61049e6112c7565b6040516104ac929190611f8b565b60405180910390f35b6060603780546104c490611fe3565b80601f01602080910402602001604051908101604052809291908181526020018280546104f090611fe3565b801561053d5780601f106105125761010080835404028352916020019161053d565b820191906000526020600020905b81548152906001019060200180831161052057829003601f168201915b5050505050905090565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057b90612061565b60405180910390fd5b6000610591603b546112e4565b905090565b600080603e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080600090505b82600001548110156106b757600083600201600083815260200190815260200160002090506000816004019050600081600001541415801561063f57508160020160009054906101000a900464ffffffffff1664ffffffffff1642115b156106a25761069461064f611342565b8360020160009054906101000a900464ffffffffff1664ffffffffff164261067791906120b0565b61068191906120e4565b826000015461135690919063ffffffff16565b8461069f919061213e565b93505b505080806106af90612194565b9150506105e2565b508092505050919050565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f690612229565b60405180910390fd5b6000603960009054906101000a900460ff16905090565b6000600160009054906101000a900460ff1615801561073e575060005461073b6113b4565b11155b905090565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077790612295565b60405180910390fd5b600080603e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080600090505b82600001548110156108115782600201600082815260200190815260200160002060000154826107fc919061213e565b9150808061080990612194565b9150506107cc565b508092505050919050565b600080603e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080600090505b826000015481101561091557600083600201600083815260200190815260200160002060030154905060006108c68286600201600086815260200190815260200160002060020160009054906101000a900464ffffffffff166113bd565b90506108f381866002016000868152602001908152602001600020600001546113d290919063ffffffff16565b846108fe919061213e565b93505050808061090d90612194565b915050610868565b508092505050919050565b6201518081565b60006109316113b4565b9050600160009054906101000a900460ff16806109525750610951611437565b5b8061095e575060005481115b61099d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099490612327565b60405180910390fd5b6000600160009054906101000a900460ff1615905080156109da5760018060006101000a81548160ff021916908315150217905550816000819055505b6109e386611448565b6109ec85611462565b6109f58761147c565b87604060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f389060560c0359f25d35df53e1ca8e42dd4157a705d94c49b469409f4391ea708888888888604051610aa6959493929190612385565b60405180910390a28015610ad0576000600160006101000a81548160ff0219169083151502179055505b5050505050505050565b600080603e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000603c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080600090505b8360000154811015610c2e57600084600201600083815260200190815260200160002090506000610bb0858360020160009054906101000a900464ffffffffff166113bd565b90506000610bcb8284600001546113d290919063ffffffff16565b9050610c0b610bfc610bdb611342565b62015180610be991906120e4565b85600101546113d290919063ffffffff16565b8261135690919063ffffffff16565b85610c16919061213e565b94505050508080610c2690612194565b915050610b6a565b50809350505050919050565b6000604060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000603b54905090565b606060388054610c7d90611fe3565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca990611fe3565b8015610cf65780601f10610ccb57610100808354040283529160200191610cf6565b820191906000526020600020905b815481529060010190602001808311610cd957829003601f168201915b5050505050905090565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3490612295565b60405180910390fd5b603f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a7216040518163ffffffff1660e01b8152600401610d9690612407565b60206040518083038186803b158015610dae57600080fd5b505afa158015610dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de69190612435565b73ffffffffffffffffffffffffffffffffffffffff16610e0461149a565b73ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f323100000000000000000000000000000000000000000000000000000000000081525090610e92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8991906119cb565b60405180910390fd5b50610e9b611859565b600080610ea7876114a2565b9250925050610eb4610584565b836000018181525050603b548360a0018181525050858360000151610ed9919061213e565b6036819055836020018181525050610ef0866114f8565b836040018181525050603c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548360600181815250506000603e60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015490508782600201600083815260200190815260200160002060000181905550868260020160008381526020019081526020016000206001018190555085826002016000838152602001908152602001600020600301819055504282600201600083815260200190815260200160002060020160006101000a81548164ffffffffff021916908364ffffffffff16021790555081600001600081548092919061103390612194565b919050555061109d61104f898661104a919061213e565b6114f8565b6110668888604001516113d290919063ffffffff16565b611085611072886114f8565b89606001516113d290919063ffffffff16565b61108f919061213e565b61135690919063ffffffff16565b8560800181815250506110b38560800151611518565b6fffffffffffffffffffffffffffffffff16603c60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042603d60006101000a81548164ffffffffff021916908364ffffffffff16021790555061119561119061113e87602001516114f8565b61115588604001518a6113d290919063ffffffff16565b6111786111658a600001516114f8565b8a60a001516113d290919063ffffffff16565b611182919061213e565b61135690919063ffffffff16565b611518565b6fffffffffffffffffffffffffffffffff16603b8190558560a00181815250506111be89611577565b8873ffffffffffffffffffffffffffffffffffffffff167f926683a213f5704409a772ad857ee2929a5b82b1f28900f733ebb3035ebba57c89868689608001518a60a001518b6020015160405161121a96959493929190612462565b60405180910390a2505050505050505050565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126190612229565b60405180910390fd5b600181565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a390612295565b60405180910390fd5b6000603d60009054906101000a900464ffffffffff16905090565b6000806000603b5490506112da816112e4565b8192509250509091565b6000806112ef61166d565b9050600081141561130457600091505061133d565b600061132384603d60009054906101000a900464ffffffffff166113bd565b905061133881836113d290919063ffffffff16565b925050505b919050565b60006b033b2e3c9fd0803ce8000000905090565b60008060028361136691906124f2565b90506113ab8361139d61138e6b033b2e3c9fd0803ce80000008861167790919063ffffffff16565b8461168d90919063ffffffff16565b6116a390919063ffffffff16565b91505092915050565b60006001905090565b60006113ca8383426116b9565b905092915050565b600061142f6b033b2e3c9fd0803ce80000006114216113fa858761167790919063ffffffff16565b60026b033b2e3c9fd0803ce800000061141391906124f2565b61168d90919063ffffffff16565b6116a390919063ffffffff16565b905092915050565b600080303b90506000811491505090565b806037908051906020019061145e92919061188f565b5050565b806038908051906020019061147892919061188f565b5050565b80603960006101000a81548160ff021916908360ff16021790555050565b600033905090565b6000806000806114b185610780565b905060008114156114cd576000806000935093509350506114f1565b60006114d88661081c565b9050818183836114e891906120b0565b94509450945050505b9193909250565b6000611511633b9aca008361167790919063ffffffff16565b9050919050565b60006fffffffffffffffffffffffffffffffff801682111561156f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156690612595565b60405180910390fd5b819050919050565b6000603e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b81600001548110156116685760008260020160008381526020019081526020016000209050600081600301549050600061160c828460020160009054906101000a900464ffffffffff166113bd565b90506116258184600001546113d290919063ffffffff16565b8360000181905550428360020160006101000a81548164ffffffffff021916908364ffffffffff160217905550505050808061166090612194565b9150506115bd565b505050565b6000603654905090565b6000818361168591906120e4565b905092915050565b6000818361169b919061213e565b905092915050565b600081836116b191906124f2565b905092915050565b6000806116d68464ffffffffff168461184390919063ffffffff16565b905060008114156116f1576116e9611342565b91505061183c565b600060018261170091906120b0565b9050600060028311611713576000611721565b60028361172091906120b0565b5b905060006301e133808861173591906124f2565b9050600061174c82836113d290919063ffffffff16565b9050600061176383836113d290919063ffffffff16565b90506000600261178e84611780898b61167790919063ffffffff16565b61167790919063ffffffff16565b61179891906124f2565b9050600060066117d5846117c7896117b98c8e61167790919063ffffffff16565b61167790919063ffffffff16565b61167790919063ffffffff16565b6117df91906124f2565b905061183181611823846118156117ff8d8b61167790919063ffffffff16565b611807611342565b61168d90919063ffffffff16565b61168d90919063ffffffff16565b61168d90919063ffffffff16565b985050505050505050505b9392505050565b6000818361185191906120b0565b905092915050565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b82805461189b90611fe3565b90600052602060002090601f0160209004810192826118bd5760008555611904565b82601f106118d657805160ff1916838001178555611904565b82800160010185558215611904579182015b828111156119035782518255916020019190600101906118e8565b5b5090506119119190611915565b5090565b5b8082111561192e576000816000905550600101611916565b5090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561196c578082015181840152602081019050611951565b8381111561197b576000848401525b50505050565b6000601f19601f8301169050919050565b600061199d82611932565b6119a7818561193d565b93506119b781856020860161194e565b6119c081611981565b840191505092915050565b600060208201905081810360008301526119e58184611992565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a2c82611a01565b9050919050565b611a3c81611a21565b8114611a4757600080fd5b50565b600081359050611a5981611a33565b92915050565b6000819050919050565b611a7281611a5f565b8114611a7d57600080fd5b50565b600081359050611a8f81611a69565b92915050565b60008060408385031215611aac57611aab6119f7565b5b6000611aba85828601611a4a565b9250506020611acb85828601611a80565b9150509250929050565b60008115159050919050565b611aea81611ad5565b82525050565b6000602082019050611b056000830184611ae1565b92915050565b611b1481611a5f565b82525050565b6000602082019050611b2f6000830184611b0b565b92915050565b600060208284031215611b4b57611b4a6119f7565b5b6000611b5984828501611a4a565b91505092915050565b600080600060608486031215611b7b57611b7a6119f7565b5b6000611b8986828701611a4a565b9350506020611b9a86828701611a4a565b9250506040611bab86828701611a80565b9150509250925092565b600060ff82169050919050565b611bcb81611bb5565b82525050565b6000602082019050611be66000830184611bc2565b92915050565b611bf581611bb5565b8114611c0057600080fd5b50565b600081359050611c1281611bec565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c5a82611981565b810181811067ffffffffffffffff82111715611c7957611c78611c22565b5b80604052505050565b6000611c8c6119ed565b9050611c988282611c51565b919050565b600067ffffffffffffffff821115611cb857611cb7611c22565b5b611cc182611981565b9050602081019050919050565b82818337600083830152505050565b6000611cf0611ceb84611c9d565b611c82565b905082815260208101848484011115611d0c57611d0b611c1d565b5b611d17848285611cce565b509392505050565b600082601f830112611d3457611d33611c18565b5b8135611d44848260208601611cdd565b91505092915050565b600080fd5b600080fd5b60008083601f840112611d6d57611d6c611c18565b5b8235905067ffffffffffffffff811115611d8a57611d89611d4d565b5b602083019150836001820283011115611da657611da5611d52565b5b9250929050565b60008060008060008060a08789031215611dca57611dc96119f7565b5b6000611dd889828a01611a4a565b9650506020611de989828a01611c03565b955050604087013567ffffffffffffffff811115611e0a57611e096119fc565b5b611e1689828a01611d1f565b945050606087013567ffffffffffffffff811115611e3757611e366119fc565b5b611e4389828a01611d1f565b935050608087013567ffffffffffffffff811115611e6457611e636119fc565b5b611e7089828a01611d57565b92509250509295509295509295565b611e8881611a21565b82525050565b6000602082019050611ea36000830184611e7f565b92915050565b60008060008060808587031215611ec357611ec26119f7565b5b6000611ed187828801611a4a565b9450506020611ee287828801611a80565b9350506040611ef387828801611a80565b9250506060611f0487828801611a80565b91505092959194509250565b60008060408385031215611f2757611f266119f7565b5b6000611f3585828601611a4a565b9250506020611f4685828601611a4a565b9150509250929050565b600064ffffffffff82169050919050565b611f6a81611f50565b82525050565b6000602082019050611f856000830184611f61565b92915050565b6000604082019050611fa06000830185611b0b565b611fad6020830184611b0b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ffb57607f821691505b6020821081141561200f5761200e611fb4565b5b50919050565b7f415050524f56414c5f4e4f545f535550504f5254454400000000000000000000600082015250565b600061204b60168361193d565b915061205682612015565b602082019050919050565b6000602082019050818103600083015261207a8161203e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006120bb82611a5f565b91506120c683611a5f565b9250828210156120d9576120d8612081565b5b828203905092915050565b60006120ef82611a5f565b91506120fa83611a5f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561213357612132612081565b5b828202905092915050565b600061214982611a5f565b915061215483611a5f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561218957612188612081565b5b828201905092915050565b600061219f82611a5f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156121d2576121d1612081565b5b600182019050919050565b7f5452414e534645525f4e4f545f535550504f5254454400000000000000000000600082015250565b600061221360168361193d565b915061221e826121dd565b602082019050919050565b6000602082019050818103600083015261224281612206565b9050919050565b7f414c4c4f57414e43455f4e4f545f535550504f52544544000000000000000000600082015250565b600061227f60178361193d565b915061228a82612249565b602082019050919050565b600060208201905081810360008301526122ae81612272565b9050919050565b7f436f6e747261637420696e7374616e63652068617320616c726561647920626560008201527f656e20696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612311602e8361193d565b915061231c826122b5565b604082019050919050565b6000602082019050818103600083015261234081612304565b9050919050565b600082825260208201905092915050565b60006123648385612347565b9350612371838584611cce565b61237a83611981565b840190509392505050565b600060808201905061239a6000830188611bc2565b81810360208301526123ac8187611992565b905081810360408301526123c08186611992565b905081810360608301526123d5818486612358565b90509695505050505050565b7f6c6f616e4d616e61676572000000000000000000000000000000000000000000815250565b600060208201905061241b600083016123e1565b919050565b60008151905061242f81611a33565b92915050565b60006020828403121561244b5761244a6119f7565b5b600061245984828501612420565b91505092915050565b600060c0820190506124776000830189611b0b565b6124846020830188611b0b565b6124916040830187611b0b565b61249e6060830186611b0b565b6124ab6080830185611b0b565b6124b860a0830184611b0b565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006124fd82611a5f565b915061250883611a5f565b925082612518576125176124c3565b5b828204905092915050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203160008201527f3238206269747300000000000000000000000000000000000000000000000000602082015250565b600061257f60278361193d565b915061258a82612523565b604082019050919050565b600060208201905081810360008301526125ae81612572565b905091905056fea2646970667358221220a1fea4648c6ef3557cbda7ed94212dff5e36c8932d8bbb6c9266d754107a1d0764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80637e6b0813116100c3578063a647e8ec1161007c578063a647e8ec146103de578063a9059cbb146103fa578063b9a7b6221461042a578063dd62ed3e14610448578063e748489014610478578063f731e9be146104965761014d565b80637e6b081314610308578063804ba0a91461032457806389d1a0fc1461035457806390f6fcf21461037257806395d89b4114610390578063a457c2d7146103ae5761014d565b8063313ce56711610115578063313ce5671461021e578063392e53cd1461023c578063395093511461025a57806361e20a1c1461028a57806370a08231146102ba57806374f0314f146102ea5761014d565b806306fdde0314610152578063095ea7b31461017057806318160ddd146101a0578063196a4cb3146101be57806323b872dd146101ee575b600080fd5b61015a6104b5565b60405161016791906119cb565b60405180910390f35b61018a60048036038101906101859190611a95565b610547565b6040516101979190611af0565b60405180910390f35b6101a8610584565b6040516101b59190611b1a565b60405180910390f35b6101d860048036038101906101d39190611b35565b610596565b6040516101e59190611b1a565b60405180910390f35b61020860048036038101906102039190611b62565b6106c2565b6040516102159190611af0565b60405180910390f35b6102266106ff565b6040516102339190611bd1565b60405180910390f35b610244610716565b6040516102519190611af0565b60405180910390f35b610274600480360381019061026f9190611a95565b610743565b6040516102819190611af0565b60405180910390f35b6102a4600480360381019061029f9190611b35565b610780565b6040516102b19190611b1a565b60405180910390f35b6102d460048036038101906102cf9190611b35565b61081c565b6040516102e19190611b1a565b60405180910390f35b6102f2610920565b6040516102ff9190611b1a565b60405180910390f35b610322600480360381019061031d9190611dad565b610927565b005b61033e60048036038101906103399190611b35565b610ada565b60405161034b9190611b1a565b60405180910390f35b61035c610c3a565b6040516103699190611e8e565b60405180910390f35b61037a610c64565b6040516103879190611b1a565b60405180910390f35b610398610c6e565b6040516103a591906119cb565b60405180910390f35b6103c860048036038101906103c39190611a95565b610d00565b6040516103d59190611af0565b60405180910390f35b6103f860048036038101906103f39190611ea9565b610d3d565b005b610414600480360381019061040f9190611a95565b61122d565b6040516104219190611af0565b60405180910390f35b61043261126a565b60405161043f9190611b1a565b60405180910390f35b610462600480360381019061045d9190611f10565b61126f565b60405161046f9190611b1a565b60405180910390f35b6104806112ac565b60405161048d9190611f70565b60405180910390f35b61049e6112c7565b6040516104ac929190611f8b565b60405180910390f35b6060603780546104c490611fe3565b80601f01602080910402602001604051908101604052809291908181526020018280546104f090611fe3565b801561053d5780601f106105125761010080835404028352916020019161053d565b820191906000526020600020905b81548152906001019060200180831161052057829003601f168201915b5050505050905090565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057b90612061565b60405180910390fd5b6000610591603b546112e4565b905090565b600080603e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080600090505b82600001548110156106b757600083600201600083815260200190815260200160002090506000816004019050600081600001541415801561063f57508160020160009054906101000a900464ffffffffff1664ffffffffff1642115b156106a25761069461064f611342565b8360020160009054906101000a900464ffffffffff1664ffffffffff164261067791906120b0565b61068191906120e4565b826000015461135690919063ffffffff16565b8461069f919061213e565b93505b505080806106af90612194565b9150506105e2565b508092505050919050565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f690612229565b60405180910390fd5b6000603960009054906101000a900460ff16905090565b6000600160009054906101000a900460ff1615801561073e575060005461073b6113b4565b11155b905090565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077790612295565b60405180910390fd5b600080603e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080600090505b82600001548110156108115782600201600082815260200190815260200160002060000154826107fc919061213e565b9150808061080990612194565b9150506107cc565b508092505050919050565b600080603e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080600090505b826000015481101561091557600083600201600083815260200190815260200160002060030154905060006108c68286600201600086815260200190815260200160002060020160009054906101000a900464ffffffffff166113bd565b90506108f381866002016000868152602001908152602001600020600001546113d290919063ffffffff16565b846108fe919061213e565b93505050808061090d90612194565b915050610868565b508092505050919050565b6201518081565b60006109316113b4565b9050600160009054906101000a900460ff16806109525750610951611437565b5b8061095e575060005481115b61099d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099490612327565b60405180910390fd5b6000600160009054906101000a900460ff1615905080156109da5760018060006101000a81548160ff021916908315150217905550816000819055505b6109e386611448565b6109ec85611462565b6109f58761147c565b87604060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f389060560c0359f25d35df53e1ca8e42dd4157a705d94c49b469409f4391ea708888888888604051610aa6959493929190612385565b60405180910390a28015610ad0576000600160006101000a81548160ff0219169083151502179055505b5050505050505050565b600080603e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000603c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080600090505b8360000154811015610c2e57600084600201600083815260200190815260200160002090506000610bb0858360020160009054906101000a900464ffffffffff166113bd565b90506000610bcb8284600001546113d290919063ffffffff16565b9050610c0b610bfc610bdb611342565b62015180610be991906120e4565b85600101546113d290919063ffffffff16565b8261135690919063ffffffff16565b85610c16919061213e565b94505050508080610c2690612194565b915050610b6a565b50809350505050919050565b6000604060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000603b54905090565b606060388054610c7d90611fe3565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca990611fe3565b8015610cf65780601f10610ccb57610100808354040283529160200191610cf6565b820191906000526020600020905b815481529060010190602001808311610cd957829003601f168201915b5050505050905090565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3490612295565b60405180910390fd5b603f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a7216040518163ffffffff1660e01b8152600401610d9690612407565b60206040518083038186803b158015610dae57600080fd5b505afa158015610dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de69190612435565b73ffffffffffffffffffffffffffffffffffffffff16610e0461149a565b73ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600281526020017f323100000000000000000000000000000000000000000000000000000000000081525090610e92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8991906119cb565b60405180910390fd5b50610e9b611859565b600080610ea7876114a2565b9250925050610eb4610584565b836000018181525050603b548360a0018181525050858360000151610ed9919061213e565b6036819055836020018181525050610ef0866114f8565b836040018181525050603c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548360600181815250506000603e60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015490508782600201600083815260200190815260200160002060000181905550868260020160008381526020019081526020016000206001018190555085826002016000838152602001908152602001600020600301819055504282600201600083815260200190815260200160002060020160006101000a81548164ffffffffff021916908364ffffffffff16021790555081600001600081548092919061103390612194565b919050555061109d61104f898661104a919061213e565b6114f8565b6110668888604001516113d290919063ffffffff16565b611085611072886114f8565b89606001516113d290919063ffffffff16565b61108f919061213e565b61135690919063ffffffff16565b8560800181815250506110b38560800151611518565b6fffffffffffffffffffffffffffffffff16603c60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042603d60006101000a81548164ffffffffff021916908364ffffffffff16021790555061119561119061113e87602001516114f8565b61115588604001518a6113d290919063ffffffff16565b6111786111658a600001516114f8565b8a60a001516113d290919063ffffffff16565b611182919061213e565b61135690919063ffffffff16565b611518565b6fffffffffffffffffffffffffffffffff16603b8190558560a00181815250506111be89611577565b8873ffffffffffffffffffffffffffffffffffffffff167f926683a213f5704409a772ad857ee2929a5b82b1f28900f733ebb3035ebba57c89868689608001518a60a001518b6020015160405161121a96959493929190612462565b60405180910390a2505050505050505050565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126190612229565b60405180910390fd5b600181565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a390612295565b60405180910390fd5b6000603d60009054906101000a900464ffffffffff16905090565b6000806000603b5490506112da816112e4565b8192509250509091565b6000806112ef61166d565b9050600081141561130457600091505061133d565b600061132384603d60009054906101000a900464ffffffffff166113bd565b905061133881836113d290919063ffffffff16565b925050505b919050565b60006b033b2e3c9fd0803ce8000000905090565b60008060028361136691906124f2565b90506113ab8361139d61138e6b033b2e3c9fd0803ce80000008861167790919063ffffffff16565b8461168d90919063ffffffff16565b6116a390919063ffffffff16565b91505092915050565b60006001905090565b60006113ca8383426116b9565b905092915050565b600061142f6b033b2e3c9fd0803ce80000006114216113fa858761167790919063ffffffff16565b60026b033b2e3c9fd0803ce800000061141391906124f2565b61168d90919063ffffffff16565b6116a390919063ffffffff16565b905092915050565b600080303b90506000811491505090565b806037908051906020019061145e92919061188f565b5050565b806038908051906020019061147892919061188f565b5050565b80603960006101000a81548160ff021916908360ff16021790555050565b600033905090565b6000806000806114b185610780565b905060008114156114cd576000806000935093509350506114f1565b60006114d88661081c565b9050818183836114e891906120b0565b94509450945050505b9193909250565b6000611511633b9aca008361167790919063ffffffff16565b9050919050565b60006fffffffffffffffffffffffffffffffff801682111561156f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156690612595565b60405180910390fd5b819050919050565b6000603e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b81600001548110156116685760008260020160008381526020019081526020016000209050600081600301549050600061160c828460020160009054906101000a900464ffffffffff166113bd565b90506116258184600001546113d290919063ffffffff16565b8360000181905550428360020160006101000a81548164ffffffffff021916908364ffffffffff160217905550505050808061166090612194565b9150506115bd565b505050565b6000603654905090565b6000818361168591906120e4565b905092915050565b6000818361169b919061213e565b905092915050565b600081836116b191906124f2565b905092915050565b6000806116d68464ffffffffff168461184390919063ffffffff16565b905060008114156116f1576116e9611342565b91505061183c565b600060018261170091906120b0565b9050600060028311611713576000611721565b60028361172091906120b0565b5b905060006301e133808861173591906124f2565b9050600061174c82836113d290919063ffffffff16565b9050600061176383836113d290919063ffffffff16565b90506000600261178e84611780898b61167790919063ffffffff16565b61167790919063ffffffff16565b61179891906124f2565b9050600060066117d5846117c7896117b98c8e61167790919063ffffffff16565b61167790919063ffffffff16565b61167790919063ffffffff16565b6117df91906124f2565b905061183181611823846118156117ff8d8b61167790919063ffffffff16565b611807611342565b61168d90919063ffffffff16565b61168d90919063ffffffff16565b61168d90919063ffffffff16565b985050505050505050505b9392505050565b6000818361185191906120b0565b905092915050565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b82805461189b90611fe3565b90600052602060002090601f0160209004810192826118bd5760008555611904565b82601f106118d657805160ff1916838001178555611904565b82800160010185558215611904579182015b828111156119035782518255916020019190600101906118e8565b5b5090506119119190611915565b5090565b5b8082111561192e576000816000905550600101611916565b5090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561196c578082015181840152602081019050611951565b8381111561197b576000848401525b50505050565b6000601f19601f8301169050919050565b600061199d82611932565b6119a7818561193d565b93506119b781856020860161194e565b6119c081611981565b840191505092915050565b600060208201905081810360008301526119e58184611992565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a2c82611a01565b9050919050565b611a3c81611a21565b8114611a4757600080fd5b50565b600081359050611a5981611a33565b92915050565b6000819050919050565b611a7281611a5f565b8114611a7d57600080fd5b50565b600081359050611a8f81611a69565b92915050565b60008060408385031215611aac57611aab6119f7565b5b6000611aba85828601611a4a565b9250506020611acb85828601611a80565b9150509250929050565b60008115159050919050565b611aea81611ad5565b82525050565b6000602082019050611b056000830184611ae1565b92915050565b611b1481611a5f565b82525050565b6000602082019050611b2f6000830184611b0b565b92915050565b600060208284031215611b4b57611b4a6119f7565b5b6000611b5984828501611a4a565b91505092915050565b600080600060608486031215611b7b57611b7a6119f7565b5b6000611b8986828701611a4a565b9350506020611b9a86828701611a4a565b9250506040611bab86828701611a80565b9150509250925092565b600060ff82169050919050565b611bcb81611bb5565b82525050565b6000602082019050611be66000830184611bc2565b92915050565b611bf581611bb5565b8114611c0057600080fd5b50565b600081359050611c1281611bec565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c5a82611981565b810181811067ffffffffffffffff82111715611c7957611c78611c22565b5b80604052505050565b6000611c8c6119ed565b9050611c988282611c51565b919050565b600067ffffffffffffffff821115611cb857611cb7611c22565b5b611cc182611981565b9050602081019050919050565b82818337600083830152505050565b6000611cf0611ceb84611c9d565b611c82565b905082815260208101848484011115611d0c57611d0b611c1d565b5b611d17848285611cce565b509392505050565b600082601f830112611d3457611d33611c18565b5b8135611d44848260208601611cdd565b91505092915050565b600080fd5b600080fd5b60008083601f840112611d6d57611d6c611c18565b5b8235905067ffffffffffffffff811115611d8a57611d89611d4d565b5b602083019150836001820283011115611da657611da5611d52565b5b9250929050565b60008060008060008060a08789031215611dca57611dc96119f7565b5b6000611dd889828a01611a4a565b9650506020611de989828a01611c03565b955050604087013567ffffffffffffffff811115611e0a57611e096119fc565b5b611e1689828a01611d1f565b945050606087013567ffffffffffffffff811115611e3757611e366119fc565b5b611e4389828a01611d1f565b935050608087013567ffffffffffffffff811115611e6457611e636119fc565b5b611e7089828a01611d57565b92509250509295509295509295565b611e8881611a21565b82525050565b6000602082019050611ea36000830184611e7f565b92915050565b60008060008060808587031215611ec357611ec26119f7565b5b6000611ed187828801611a4a565b9450506020611ee287828801611a80565b9350506040611ef387828801611a80565b9250506060611f0487828801611a80565b91505092959194509250565b60008060408385031215611f2757611f266119f7565b5b6000611f3585828601611a4a565b9250506020611f4685828601611a4a565b9150509250929050565b600064ffffffffff82169050919050565b611f6a81611f50565b82525050565b6000602082019050611f856000830184611f61565b92915050565b6000604082019050611fa06000830185611b0b565b611fad6020830184611b0b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ffb57607f821691505b6020821081141561200f5761200e611fb4565b5b50919050565b7f415050524f56414c5f4e4f545f535550504f5254454400000000000000000000600082015250565b600061204b60168361193d565b915061205682612015565b602082019050919050565b6000602082019050818103600083015261207a8161203e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006120bb82611a5f565b91506120c683611a5f565b9250828210156120d9576120d8612081565b5b828203905092915050565b60006120ef82611a5f565b91506120fa83611a5f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561213357612132612081565b5b828202905092915050565b600061214982611a5f565b915061215483611a5f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561218957612188612081565b5b828201905092915050565b600061219f82611a5f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156121d2576121d1612081565b5b600182019050919050565b7f5452414e534645525f4e4f545f535550504f5254454400000000000000000000600082015250565b600061221360168361193d565b915061221e826121dd565b602082019050919050565b6000602082019050818103600083015261224281612206565b9050919050565b7f414c4c4f57414e43455f4e4f545f535550504f52544544000000000000000000600082015250565b600061227f60178361193d565b915061228a82612249565b602082019050919050565b600060208201905081810360008301526122ae81612272565b9050919050565b7f436f6e747261637420696e7374616e63652068617320616c726561647920626560008201527f656e20696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612311602e8361193d565b915061231c826122b5565b604082019050919050565b6000602082019050818103600083015261234081612304565b9050919050565b600082825260208201905092915050565b60006123648385612347565b9350612371838584611cce565b61237a83611981565b840190509392505050565b600060808201905061239a6000830188611bc2565b81810360208301526123ac8187611992565b905081810360408301526123c08186611992565b905081810360608301526123d5818486612358565b90509695505050505050565b7f6c6f616e4d616e61676572000000000000000000000000000000000000000000815250565b600060208201905061241b600083016123e1565b919050565b60008151905061242f81611a33565b92915050565b60006020828403121561244b5761244a6119f7565b5b600061245984828501612420565b91505092915050565b600060c0820190506124776000830189611b0b565b6124846020830188611b0b565b6124916040830187611b0b565b61249e6060830186611b0b565b6124ab6080830185611b0b565b6124b860a0830184611b0b565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006124fd82611a5f565b915061250883611a5f565b925082612518576125176124c3565b5b828204905092915050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203160008201527f3238206269747300000000000000000000000000000000000000000000000000602082015250565b600061257f60278361193d565b915061258a82612523565b604082019050919050565b600060208201905081810360008301526125ae81612572565b905091905056fea2646970667358221220a1fea4648c6ef3557cbda7ed94212dff5e36c8932d8bbb6c9266d754107a1d0764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "Calculates the current user debt balance",
        "returns": {
          "_0": "The accumulated debt of the user*"
        }
      },
      "decimals()": {
        "details": "Returns the decimals places of the token."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getAverageStableRate()": {
        "details": "Returns the average stable rate*"
      },
      "getTotalSupplyAndAvgRate()": {
        "details": "Returns the the total supply and the average stable rate*"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "isInitialized()": {
        "details": "Returns true if the contract has been initialized*"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "principalOf(address)": {
        "details": "Calculate the current user debt principal*"
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "Being non transferrable, the debt token does not implement any of the standard ERC20 functions for transfer and allowance.*"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5853,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5856,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "initializing",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5965,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "______gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9777,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_balances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9783,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9785,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 9787,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_name",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 9789,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "56",
        "type": "t_string_storage"
      },
      {
        "astId": 9791,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_decimals",
        "offset": 0,
        "slot": "57",
        "type": "t_uint8"
      },
      {
        "astId": 10337,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_borrowAllowances",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11480,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_avgStableRate",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 11484,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_usersStableRate",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11486,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_totalSupplyTimestamp",
        "offset": 0,
        "slot": "61",
        "type": "t_uint40"
      },
      {
        "astId": 11491,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "_borrowData",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_address,t_struct(BorrowData)9297_storage)"
      },
      {
        "astId": 11494,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "addressResolver",
        "offset": 0,
        "slot": "63",
        "type": "t_contract(AddressResolver)830"
      },
      {
        "astId": 11496,
        "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
        "label": "underlyingAsset",
        "offset": 0,
        "slot": "64",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AddressResolver)830": {
        "encoding": "inplace",
        "label": "contract AddressResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(BorrowData)9297_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.BorrowData)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowData)9297_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(DrawDown)9309_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.DrawDown)",
        "numberOfBytes": "32",
        "value": "t_struct(DrawDown)9309_storage"
      },
      "t_mapping(t_uint256,t_struct(Repayment)9316_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.Repayment)",
        "numberOfBytes": "32",
        "value": "t_struct(Repayment)9316_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BorrowData)9297_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.BorrowData",
        "members": [
          {
            "astId": 9284,
            "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
            "label": "drawDownNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9286,
            "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
            "label": "totalDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9291,
            "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
            "label": "drawDowns",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(DrawDown)9309_storage)"
          },
          {
            "astId": 9296,
            "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
            "label": "repayments",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_struct(Repayment)9316_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(DrawDown)9309_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.DrawDown",
        "members": [
          {
            "astId": 9299,
            "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9301,
            "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
            "label": "tenure",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9303,
            "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 9305,
            "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
            "label": "borrowRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9308,
            "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
            "label": "repayment",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Repayment)9316_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Repayment)9316_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Repayment",
        "members": [
          {
            "astId": 9311,
            "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
            "label": "totalPaid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9315,
            "contract": "contracts/tokenization/StableDebtToken.sol:StableDebtToken",
            "label": "repayment",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}