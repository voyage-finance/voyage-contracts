{
  "address": "0x7B99A97B39d0cDF9b88B94A5c0EcA9D91F5930dC",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract Proxyable",
          "name": "newTarget",
          "type": "address"
        }
      ],
      "name": "TargetUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "numTopics",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "topic1",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "topic2",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "topic3",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "topic4",
          "type": "bytes32"
        }
      ],
      "name": "_emit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "getConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "data",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ReserveConfigurationMap",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEscrowAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getFlags",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        }
      ],
      "name": "getLiquidityRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "data",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.ReserveConfigurationMap",
              "name": "configuration",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentOverallLiquidityRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentSeniorIncomeAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentJuniorIncomeAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "juniorLiquidityIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "seniorLiquidityIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "securityRequirement",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "juniorDepositTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seniorDepositTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableDebtAddress",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "juniorLastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "seniorLastUpdateTimestamp",
              "type": "uint40"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "enum ReserveLogic.Tranche",
          "name": "_tranche",
          "type": "uint8"
        }
      ],
      "name": "getReserveNormalizedIncome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Proxyable",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "setTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "contract Proxyable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2eb069c76f7687b1a5dcdf596139bdcf3cdee8c8f77f9886c9b5832039f3dea4",
  "receipt": {
    "to": null,
    "from": "0xc4940D382C8EAFD2526D1ad56B36CD9674285c43",
    "contractAddress": "0x7B99A97B39d0cDF9b88B94A5c0EcA9D91F5930dC",
    "transactionIndex": 0,
    "gasUsed": "1539098",
    "logsBloom": "0x
    "blockHash": "0xe7f6daaacbea6087eed24c06944961c42ef4e990d9b21df735600654e5764b9f",
    "transactionHash": "0x2eb069c76f7687b1a5dcdf596139bdcf3cdee8c8f77f9886c9b5832039f3dea4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8265281,
        "transactionHash": "0x2eb069c76f7687b1a5dcdf596139bdcf3cdee8c8f77f9886c9b5832039f3dea4",
        "address": "0x7B99A97B39d0cDF9b88B94A5c0EcA9D91F5930dC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c4940d382c8eafd2526d1ad56b36cd9674285c43"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe7f6daaacbea6087eed24c06944961c42ef4e990d9b21df735600654e5764b9f"
      }
    ],
    "blockNumber": 8265281,
    "cumulativeGasUsed": "1539098",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2196d022291140b1b6ee21061c33a3c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract Proxyable\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"TargetUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"numTopics\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"topic1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"topic2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"topic3\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"topic4\",\"type\":\"bytes32\"}],\"name\":\"_emit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEscrowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getFlags\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"getLiquidityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentOverallLiquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSeniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentJuniorIncomeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorLiquidityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorLiquidityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"securityRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"juniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seniorDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtAddress\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"juniorLastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"seniorLastUpdateTimestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"enum ReserveLogic.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Proxyable\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"contract Proxyable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimOwnership()\":{\"details\":\"Allows the pendingOwner address to finalize the transfer.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to set the pendingOwner address.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/component/liquiditymanager/LiquidityManagerProxy.sol\":\"LiquidityManagerProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/component/liquiditymanager/DefaultReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/math/WadRayMath.sol';\\nimport '../../interfaces/IReserveInterestRateStrategy.sol';\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport 'openzeppelin-solidity/contracts/token/ERC20/IERC20.sol';\\n\\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\\n    using WadRayMath for uint256;\\n    using SafeMath for uint256;\\n    /**\\n     * this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates\\n     * Expressed in RAY\\n     **/\\n    uint256 public immutable OPTIMAL_UTILIZATION_RATE;\\n\\n    // Base interest rate set by governance. Expressed in ray\\n    uint256 internal immutable baseBorrowRate;\\n\\n    // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope1;\\n\\n    // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n    uint256 internal immutable stableRateSlope2;\\n\\n    constructor(\\n        uint256 _optimalUtilizationRate,\\n        uint256 _stableRateSlope1,\\n        uint256 _stableRateSlope2,\\n        uint256 _baseBorrowRate\\n    ) public {\\n        OPTIMAL_UTILIZATION_RATE = _optimalUtilizationRate;\\n        baseBorrowRate = _baseBorrowRate;\\n        stableRateSlope1 = _stableRateSlope1;\\n        stableRateSlope2 = _stableRateSlope2;\\n    }\\n\\n    struct CalcInterestRatesLocalVars {\\n        uint256 totalDebt;\\n        uint256 currentStableBorrowRate;\\n        uint256 currentLiquidityRate;\\n        uint256 utilizationRate;\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configuration\\n     * @param reserve The address of the reserve\\n     * @param juniorDepositToken The address of junior deposit token\\n     * @param seniorDepositToken The address of senior deposit token\\n     * @param liquidityAdded The liquidity added during the operation\\n     * @param liquidityTaken The liquidity taken during the operation\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256) {\\n        uint256 availableJuniorLiquidity = IERC20(reserve).balanceOf(\\n            juniorDepositToken\\n        );\\n        uint256 availableSeniorLiquidity = IERC20(reserve).balanceOf(\\n            seniorDepositToken\\n        );\\n        uint256 availableLiquidity = availableJuniorLiquidity.add(\\n            availableSeniorLiquidity\\n        );\\n        availableLiquidity = availableLiquidity.add(liquidityAdded).sub(\\n            liquidityTaken\\n        );\\n        return\\n            calculateInterestRates(\\n                reserve,\\n                availableLiquidity,\\n                totalStableDebt,\\n                averageBorrowRate\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n     * @param reserve The address of the reserve\\n     * @param availableLiquidity The liquidity available in the corresponding aToken\\n     * @param totalStableDebt The total borrowed from the reserve a stable rate\\n     * @return The liquidity rate, the stable borrow rate\\n     * @param averageBorrowRate The current average borrow rate\\n     **/\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) public view returns (uint256, uint256) {\\n        CalcInterestRatesLocalVars memory vars;\\n\\n        vars.totalDebt = totalStableDebt;\\n        vars.currentStableBorrowRate = baseBorrowRate;\\n        vars.currentLiquidityRate = 0;\\n\\n        vars.utilizationRate = vars.totalDebt == 0\\n            ? 0\\n            : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\\n\\n        if (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n            vars.currentStableBorrowRate = vars\\n                .currentStableBorrowRate\\n                .add(stableRateSlope1)\\n                .add(\\n                    stableRateSlope2\\n                        .rayMul(\\n                            vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE)\\n                        )\\n                        .rayDiv(WadRayMath.Ray().sub(OPTIMAL_UTILIZATION_RATE))\\n                );\\n        } else {\\n            vars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\\n                stableRateSlope1.rayMul(vars.utilizationRate).rayDiv(\\n                    OPTIMAL_UTILIZATION_RATE\\n                )\\n            );\\n        }\\n\\n        vars.currentLiquidityRate = averageBorrowRate.rayMul(\\n            vars.utilizationRate\\n        );\\n        return (vars.currentLiquidityRate, vars.currentStableBorrowRate);\\n    }\\n}\\n\",\"keccak256\":\"0x501b0d30efd4654196b7940e1b24d0c44a4dcd82c32288da095e9c63625bd9c6\",\"license\":\"GPL-3.0\"},\"contracts/component/liquiditymanager/LiquidityManagerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../../libraries/proxy/Proxy.sol';\\nimport '../../interfaces/IReserveManager.sol';\\nimport '../../interfaces/ILiquidityManager.sol';\\nimport '../../libraries/logic/ReserveLogic.sol';\\n\\ncontract LiquidityManagerProxy is Proxy {\\n    function getLiquidityRate(address _reserve, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            IReserveManager(address(target)).getLiquidityRate(\\n                _reserve,\\n                _tranche\\n            );\\n    }\\n\\n    function getReserveData(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory)\\n    {\\n        return IReserveManager(address(target)).getReserveData(_reserve);\\n    }\\n\\n    function getConfiguration(address _reserve)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory)\\n    {\\n        return IReserveManager(address(target)).getConfiguration(_reserve);\\n    }\\n\\n    function getFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return IReserveManager(address(target)).getFlags(_asset);\\n    }\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256) {\\n        return\\n            ILiquidityManager(address(target)).getReserveNormalizedIncome(\\n                _asset,\\n                _tranche\\n            );\\n    }\\n\\n    function getEscrowAddress() external view returns (address) {\\n        return ILiquidityManager(address(target)).getEscrowAddress();\\n    }\\n}\\n\",\"keccak256\":\"0x18899d28257c010c65b4bb70592765fcd9c1cee6f11309e9449800be9a5462f7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IStableDebtToken {\\n    function getAverageStableRate() external view returns (uint256);\\n\\n    function getTotalSupplyAndAvgRate()\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x535bfa631faf7d4836901d80eef474cc530eccdb3afcd488b3e506ea78cced85\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ILiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/logic/ReserveLogic.sol';\\n\\ninterface ILiquidityManager {\\n    event Deposit(\\n        address indexed reserve,\\n        ReserveLogic.Tranche tranche,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount\\n    );\\n\\n    function getReserveNormalizedIncome(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche\\n    ) external view returns (uint256);\\n\\n    function getEscrowAddress() external view returns (address);\\n\\n    function deposit(\\n        address _asset,\\n        ReserveLogic.Tranche _tranche,\\n        uint256 _amount,\\n        address _user,\\n        address _onBehalfOf\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbe6a26b1178af707b96c154d573652d0e6f22e71a6b0f1f8ef6c81275a0c3f5e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/**\\n@title IReserveInterestRateStrategyInterface interface\\n@notice Interface for the calculation of the interest rates.\\n*/\\n\\ninterface IReserveInterestRateStrategy {\\n    function calculateInterestRates(\\n        address reserve,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n\\n    function calculateInterestRates(\\n        address reserve,\\n        address juniorDepositToken,\\n        address seniorDepositToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 averageBorrowRate\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xa80f4dca04db5b06c6ca898242c96f9d72816cf05e921ed4ba4081b90480c70e\"},\"contracts/interfaces/IReserveManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../libraries/logic/ReserveLogic.sol';\\n\\ninterface IReserveManager {\\n    function initReserve(\\n        address _asset,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress\\n    ) external;\\n\\n    function activeReserve(address _asset) external;\\n\\n    function setLoanManagerToEscrow(address _loadManager) external;\\n\\n    function getReserveData(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function getConfiguration(address _asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    function getFlags(address _asset)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        );\\n\\n    function getLiquidityRate(address _reserve, ReserveLogic.Tranche _tranche)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x51c2ff73993dbf5dee5f5646dfeddb1c0d85ce5f2fc3165a6cf235b8bb52f28b\",\"license\":\"GPL-3.0\"},\"contracts/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Errors library\\n * @author Voyager\\n * @notice Defines the error messages emitted by the different contracts of the Voyager protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - LM = LiquidityManager\\n *  - CT = Common errors between tokens\\n *  - RL = ReserveLogic\\n */\\nlibrary Errors {\\n    string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n    string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n    string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant CT_CALLER_MUST_BE_LIQUIDITY_MANAGER_POOL = '20';\\n    string public constant CT_INVALID_MINT_AMOUNT = '21';\\n    string public constant CT_INVALID_BURN_AMOUNT = '22';\\n    string public constant LM_NOT_CONTRACT = '60';\\n    string public constant RL_LIQUIDITY_RATE_OVERFLOW = '80'; //  Liquidity rate overflows uint128\\n    string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '81'; //  Stable borrow rate overflows uint128\\n}\\n\",\"keccak256\":\"0x7fd680f0b6d926ef626121d92f4102e8c87a74d21e6041ec377601da444fc56a\",\"license\":\"agpl-3.0\"},\"contracts/libraries/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport '../math/WadRayMath.sol';\\nimport '../math/MathUtils.sol';\\nimport '../types/DataTypes.sol';\\nimport '../helpers/Errors.sol';\\nimport '../../interfaces/IDebtToken.sol';\\nimport '../../component/liquiditymanager/DefaultReserveInterestRateStrategy.sol';\\n\\n/**\\n * @title ReserveLogic library\\n * @author Voyager\\n * @notice Implements the logic to update the reserves state\\n **/\\nlibrary ReserveLogic {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    using ReserveLogic for DataTypes.ReserveData;\\n\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed asset,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 liquidityIndex\\n    );\\n\\n    function init(\\n        DataTypes.ReserveData storage reserve,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        uint256 _juniorIncomeAllocation,\\n        uint256 _seniorIncomeAllocation,\\n        address _stableDebtAddress,\\n        address _interestRateStrategyAddress\\n    ) external {\\n        reserve.juniorLiquidityIndex = WadRayMath.ray();\\n        reserve.seniorLiquidityIndex = WadRayMath.ray();\\n        reserve.juniorDepositTokenAddress = _juniorDepositTokenAddress;\\n        reserve.seniorDepositTokenAddress = _seniorDepositTokenAddress;\\n        //reserve.currentOverallLiquidityRate = WadRayMath.ray();\\n        reserve.currentJuniorIncomeAllocation = _juniorIncomeAllocation;\\n        reserve.currentSeniorIncomeAllocation = _seniorIncomeAllocation;\\n        reserve.stableDebtAddress = _stableDebtAddress;\\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\\n    }\\n\\n    function updateState(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public {\\n        _updateIndexes(reserve, _tranche);\\n    }\\n\\n    function getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) public view returns (uint256) {\\n        return reserve._getLiquidityRate(_tranche);\\n    }\\n\\n    struct UpdateInterestRatesLocalVars {\\n        address stableDebtTokenAddress;\\n        uint256 availableLiquidity;\\n        uint256 totalStableDebt;\\n        uint256 newLiquidityRate;\\n        uint256 newStableRate;\\n        uint256 avgStableRate;\\n    }\\n\\n    function updateInterestRates(\\n        DataTypes.ReserveData storage _reserve,\\n        address _reserveAddress,\\n        uint256 _juniorLiquidityAdded,\\n        uint256 _juniorLiquidityTaken,\\n        uint256 _seniorLiquidityAdded,\\n        uint256 _seniorLiquidityTaken\\n    ) public {\\n        UpdateInterestRatesLocalVars memory vars;\\n\\n        vars.stableDebtTokenAddress = _reserve.stableDebtAddress;\\n        uint256 liquidityAdded = _juniorLiquidityAdded.add(\\n            _seniorLiquidityAdded\\n        );\\n        uint256 liquidityTaken = _juniorLiquidityTaken.add(\\n            _seniorLiquidityTaken\\n        );\\n\\n        (vars.totalStableDebt, vars.avgStableRate) = IStableDebtToken(\\n            _reserve.stableDebtAddress\\n        ).getTotalSupplyAndAvgRate();\\n\\n        (\\n            vars.newLiquidityRate,\\n            vars.newStableRate\\n        ) = IReserveInterestRateStrategy(_reserve.interestRateStrategyAddress)\\n            .calculateInterestRates(\\n                _reserveAddress,\\n                _reserve.juniorDepositTokenAddress,\\n                _reserve.seniorDepositTokenAddress,\\n                liquidityAdded,\\n                liquidityTaken,\\n                _reserve.totalBorrows,\\n                vars.avgStableRate\\n            );\\n        require(\\n            vars.newLiquidityRate <= type(uint128).max,\\n            Errors.RL_LIQUIDITY_RATE_OVERFLOW\\n        );\\n        require(\\n            vars.newStableRate <= type(uint128).max,\\n            Errors.RL_STABLE_BORROW_RATE_OVERFLOW\\n        );\\n        _reserve.currentOverallLiquidityRate = vars.newLiquidityRate;\\n        _reserve.currentBorrowRate = vars.newStableRate;\\n\\n        emit ReserveDataUpdated(\\n            _reserveAddress,\\n            vars.newLiquidityRate,\\n            vars.newStableRate,\\n            vars.newLiquidityRate\\n        );\\n    }\\n\\n    function getNormalizedIncome(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        uint40 timestamp;\\n        uint256 liquidityIndex;\\n        if (_tranche == Tranche.JUNIOR) {\\n            timestamp = reserve.juniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.juniorLiquidityIndex;\\n        } else {\\n            timestamp = reserve.seniorLastUpdateTimestamp;\\n            liquidityIndex = reserve.seniorLiquidityIndex;\\n        }\\n\\n        //solium-disable-next-line\\n        if (timestamp == uint40(block.timestamp)) {\\n            return liquidityIndex;\\n        }\\n\\n        uint256 cumulated = MathUtils\\n            .calculateLinearInterest(\\n                reserve._getLiquidityRate(_tranche),\\n                timestamp\\n            )\\n            .rayMul(liquidityIndex);\\n        return cumulated;\\n    }\\n\\n    function _getLiquidityRate(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        uint256 totalAllocationInRay = reserve\\n            .currentJuniorIncomeAllocation\\n            .add(reserve.currentSeniorIncomeAllocation);\\n        if (_tranche == Tranche.JUNIOR) {\\n            return\\n                reserve.currentOverallLiquidityRate.rayMul(\\n                    reserve.currentJuniorIncomeAllocation.rayDiv(\\n                        totalAllocationInRay\\n                    )\\n                );\\n        } else {\\n            return\\n                reserve.currentOverallLiquidityRate.rayMul(\\n                    reserve.currentSeniorIncomeAllocation.rayDiv(\\n                        totalAllocationInRay\\n                    )\\n                );\\n        }\\n    }\\n\\n    function _updateIndexes(\\n        DataTypes.ReserveData storage reserve,\\n        Tranche _tranche\\n    ) internal {\\n        if (_tranche == Tranche.JUNIOR) {\\n            uint256 previousJuniorLiquidityIndex = reserve.juniorLiquidityIndex;\\n            uint256 lastJuniorUpdatedTimestamp = reserve\\n                .juniorLastUpdateTimestamp;\\n            reserve._updateJuniorLiquidityIndex(\\n                previousJuniorLiquidityIndex,\\n                uint40(lastJuniorUpdatedTimestamp)\\n            );\\n        } else {\\n            uint256 previousSeniorLiquidityIndex = reserve.seniorLiquidityIndex;\\n            uint256 lastSeniorUpdatedTimestamp = reserve\\n                .seniorLastUpdateTimestamp;\\n            reserve._updateSeniorLiquidityIndex(\\n                previousSeniorLiquidityIndex,\\n                uint40(lastSeniorUpdatedTimestamp)\\n            );\\n        }\\n    }\\n\\n    function _updateJuniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 juniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 juniorLiquidityRate = reserve._getLiquidityRate(Tranche.JUNIOR);\\n        uint256 newJuniorLiquidityIndex = juniorLiquidityIndex;\\n\\n        // only cumulating if there is any income being produced\\n        if (juniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(juniorLiquidityRate, timestamp);\\n            newJuniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                juniorLiquidityIndex\\n            );\\n            reserve.juniorLiquidityIndex = newJuniorLiquidityIndex;\\n        }\\n\\n        reserve.juniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newJuniorLiquidityIndex;\\n    }\\n\\n    function _updateSeniorLiquidityIndex(\\n        DataTypes.ReserveData storage reserve,\\n        uint256 seniorLiquidityIndex,\\n        uint40 timestamp\\n    ) internal returns (uint256) {\\n        uint256 seniorLiquidityRate = reserve._getLiquidityRate(Tranche.SENIOR);\\n        uint256 newSeniorLiquidityIndex = seniorLiquidityIndex;\\n\\n        if (seniorLiquidityRate > 0) {\\n            uint256 cumulatedLiquidityInterest = MathUtils\\n                .calculateLinearInterest(seniorLiquidityRate, timestamp);\\n            newSeniorLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\n                seniorLiquidityIndex\\n            );\\n            reserve.seniorLiquidityIndex = newSeniorLiquidityIndex;\\n        }\\n        reserve.seniorLastUpdateTimestamp = uint40(block.timestamp);\\n        return newSeniorLiquidityIndex;\\n    }\\n}\\n\",\"keccak256\":\"0xbbdd75288e734f54c4fe1cb804e510419626ccc7dfcdb1e15790a417022d134e\",\"license\":\"GPL-3.0\"},\"contracts/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\nimport {WadRayMath} from './WadRayMath.sol';\\n\\nlibrary MathUtils {\\n    using SafeMath for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //solium-disable-next-line\\n        uint256 timeDifference = block.timestamp.sub(\\n            uint256(lastUpdateTimestamp)\\n        );\\n\\n        return\\n            (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n     * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n        if (exp == 0) {\\n            return WadRayMath.ray();\\n        }\\n\\n        uint256 expMinusOne = exp - 1;\\n\\n        uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n        uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n        uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n        uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n        uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n        uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(\\n            basePowerThree\\n        ) / 6;\\n\\n        return\\n            WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(\\n                thirdTerm\\n            );\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     **/\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xeb644d3d04ac6c043657b2b835fbf71d1f2795f1f713b900cc43582158f31eac\",\"license\":\"agpl-3.0\"},\"contracts/libraries/math/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport 'openzeppelin-solidity/contracts/utils/math/SafeMath.sol';\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87bc93b45f82b290b2b6a9f00ce09f8c5c2b758931a85b37fb5d117a79031d3f\"},\"contracts/libraries/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(owner, pendingOwner);\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x5dca7c2446290ea3519aa0f9295e1edfbff47a1474edbe126f08dca92843e2c8\"},\"contracts/libraries/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport '../ownership/Ownable.sol';\\nimport './Proxyable.sol';\\n\\ncontract Proxy is Ownable {\\n    Proxyable public target;\\n\\n    event TargetUpdated(Proxyable newTarget);\\n\\n    modifier onlyTarget() {\\n        require(Proxyable(msg.sender) == target, 'Must be proxy target');\\n        _;\\n    }\\n\\n    function setTarget(Proxyable _target) external onlyOwner {\\n        target = _target;\\n        emit TargetUpdated(_target);\\n    }\\n\\n    function _emit(\\n        bytes calldata callData,\\n        uint256 numTopics,\\n        bytes32 topic1,\\n        bytes32 topic2,\\n        bytes32 topic3,\\n        bytes32 topic4\\n    ) external onlyTarget {\\n        uint256 size = callData.length;\\n        bytes memory _callData = callData;\\n\\n        assembly {\\n            /* The first 32 bytes of callData contain its length (as specified by the abi).\\n             * Length is assumed to be a uint256 and therefore maximum of 32 bytes\\n             * in length. It is also leftpadded to be a multiple of 32 bytes.\\n             * This means moving call_data across 32 bytes guarantees we correctly access\\n             * the data itself. */\\n            switch numTopics\\n            case 0 {\\n                log0(add(_callData, 32), size)\\n            }\\n            case 1 {\\n                log1(add(_callData, 32), size, topic1)\\n            }\\n            case 2 {\\n                log2(add(_callData, 32), size, topic1, topic2)\\n            }\\n            case 3 {\\n                log3(add(_callData, 32), size, topic1, topic2, topic3)\\n            }\\n            case 4 {\\n                log4(add(_callData, 32), size, topic1, topic2, topic3, topic4)\\n            }\\n        }\\n    }\\n\\n    // solhint-disable no-complex-fallback\\n    fallback() external payable onlyOwner {\\n        // Mutable call setting Proxyable.messageSender as this is using call not delegatecall\\n        target.setMessageSender(msg.sender);\\n\\n        assembly {\\n            let free_ptr := mload(0x40)\\n            calldatacopy(free_ptr, 0, calldatasize())\\n\\n            /* We must explicitly forward ether to the underlying contract as well. */\\n            let result := call(\\n                gas(),\\n                sload(target.slot),\\n                callvalue(),\\n                free_ptr,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(free_ptr, 0, returndatasize())\\n\\n            if iszero(result) {\\n                revert(free_ptr, returndatasize())\\n            }\\n            return(free_ptr, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x49854e3f5496018aea83a0d6d4f58478b99d8bfd5a03293148f9303dc29c22c1\",\"license\":\"GPL-3.0\"},\"contracts/libraries/proxy/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport './Proxy.sol';\\nimport '../ownership/Ownable.sol';\\n\\nabstract contract Proxyable is Ownable {\\n    /* The proxy this contract exists behind. */\\n    Proxy public proxy;\\n\\n    /* The caller of the proxy, passed through to this contract.\\n     * Note that every function using this member must apply the onlyProxy or\\n     * optionalProxy modifiers, otherwise their invocations can use stale values. */\\n    address public messageSender;\\n\\n    modifier onlyProxy() {\\n        _onlyProxy();\\n        _;\\n    }\\n\\n    modifier optionalProxy_onlyOwner() {\\n        _optionalProxy_onlyOwner();\\n        _;\\n    }\\n\\n    event ProxyUpdated(address proxyAddress);\\n\\n    constructor(address payable _proxy) internal {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner != address(0), 'Owner must be set');\\n\\n        proxy = Proxy(_proxy);\\n        emit ProxyUpdated(_proxy);\\n    }\\n\\n    function _onlyProxy() private view {\\n        require(msg.sender == address(proxy), 'Only the proxy can call');\\n    }\\n\\n    function setProxy(address payable _proxy) external onlyOwner {\\n        proxy = Proxy(_proxy);\\n        emit ProxyUpdated(_proxy);\\n    }\\n\\n    function setMessageSender(address sender) external onlyProxy {\\n        messageSender = sender;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _optionalProxy_onlyOwner() private {\\n        if (msg.sender != address(proxy) && messageSender != msg.sender) {\\n            messageSender = msg.sender;\\n        }\\n        require(messageSender == owner, 'Owner only function');\\n    }\\n}\\n\",\"keccak256\":\"0x8107e4e558c8336f3d96f8ebdb63bc67c18b983b5149f0e38a037e35a7e53bb8\",\"license\":\"GPL-3.0\"},\"contracts/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary DataTypes {\\n    enum Tranche {\\n        JUNIOR,\\n        SENIOR\\n    }\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        // for calculating overall interested accumulated\\n        // then split it into two indexs base on two allocations\\n        uint256 currentOverallLiquidityRate;\\n        // Expressed in ray\\n        uint256 currentSeniorIncomeAllocation;\\n        // Expressed in ray\\n        uint256 currentJuniorIncomeAllocation;\\n        uint256 juniorLiquidityIndex;\\n        uint256 seniorLiquidityIndex;\\n        uint256 totalBorrows;\\n        uint256 currentBorrowRate;\\n        // Expressed in ray\\n        uint256 securityRequirement;\\n        //the decimals of the reserve asset\\n        uint256 decimals;\\n        address interestRateStrategyAddress;\\n        address juniorDepositTokenAddress;\\n        address seniorDepositTokenAddress;\\n        address stableDebtAddress;\\n        uint40 juniorLastUpdateTimestamp;\\n        uint40 seniorLastUpdateTimestamp;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: Liquidate bonus\\n        //bit 16-23: Decimals\\n        //bit 24: Reserve is active\\n        //bit 25: reserve is frozen\\n        //bit 26: borrowing is enabled\\n        //bit 27-30: reserved\\n        //bit 31-46: reserve factor\\n        //bit 47-62: lock up period in seconds\\n        uint256 data;\\n    }\\n}\\n\",\"keccak256\":\"0x9bfbc7b717a74aaed343b3add5af6eec7c69dbefb556c4481cbbf96d10ef866b\",\"license\":\"GPL-3.0\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3611a73806100db6000396000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063c44b11f711610059578063c44b11f7146103bb578063d4b83992146103f8578063e30c397814610423578063f2fde38b1461044e576100e2565b80638da5cb5b1461033c5780638f32d59b14610367578063907dff9714610392576100e2565b80634e71e0c8116100bb5780634e71e0c814610280578063776d1a0114610297578063776f6891146102c0578063817ad5d3146102fd576100e2565b8063122fd48a146101db578063284592b21461020657806335ea6a7514610243576100e2565b5b6100ea610477565b610129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012090610f1f565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc67f832336040518263ffffffff1660e01b81526004016101849190610f80565b600060405180830381600087803b15801561019e57600080fd5b505af11580156101b2573d6000803e3d6000fd5b5050505060405136600082376000803683346002545af13d6000833e806101d7573d82fd5b3d82f35b3480156101e757600080fd5b506101f06104ce565b6040516101fd9190610f80565b60405180910390f35b34801561021257600080fd5b5061022d60048036038101906102289190611000565b610575565b60405161023a9190611059565b60405180910390f35b34801561024f57600080fd5b5061026a60048036038101906102659190611074565b61062c565b6040516102779190611245565b60405180910390f35b34801561028c57600080fd5b506102956106e7565b005b3480156102a357600080fd5b506102be60048036038101906102b9919061129f565b610883565b005b3480156102cc57600080fd5b506102e760048036038101906102e29190611000565b610945565b6040516102f49190611059565b60405180910390f35b34801561030957600080fd5b50610324600480360381019061031f9190611074565b6109fc565b604051610333939291906112e7565b60405180910390f35b34801561034857600080fd5b50610351610ab9565b60405161035e9190610f80565b60405180910390f35b34801561037357600080fd5b5061037c610477565b604051610389919061131e565b60405180910390f35b34801561039e57600080fd5b506103b960048036038101906103b49190611400565b610add565b005b3480156103c757600080fd5b506103e260048036038101906103dd9190611074565b610c35565b6040516103ef91906114cb565b60405180910390f35b34801561040457600080fd5b5061040d610cef565b60405161041a9190611545565b60405180910390f35b34801561042f57600080fd5b50610438610d15565b6040516104459190610f80565b60405180910390f35b34801561045a57600080fd5b5061047560048036038101906104709190611074565b610d3b565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663122fd48a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561053857600080fd5b505afa15801561054c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105709190611575565b905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663284592b284846040518363ffffffff1660e01b81526004016105d4929190611619565b60206040518083038186803b1580156105ec57600080fd5b505afa158015610600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106249190611657565b905092915050565b610634610dc6565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166335ea6a75836040518263ffffffff1660e01b815260040161068f9190610f80565b6102006040518083038186803b1580156106a857600080fd5b505afa1580156106bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e091906118f7565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074157600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61088b610477565b6108ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c190610f1f565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f814250a3b8c79fcbe2ead2c131c952a278491c8f4322a79fe84b5040a810373e8160405161093a9190611545565b60405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663776f689184846040518363ffffffff1660e01b81526004016109a4929190611619565b60206040518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f49190611657565b905092915050565b6000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663817ad5d3856040518263ffffffff1660e01b8152600401610a5c9190610f80565b60606040518083038186803b158015610a7457600080fd5b505afa158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aac9190611951565b9250925092509193909250565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b64906119f0565b60405180910390fd5b6000878790509050600088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090508660008114610bec5760018114610bf75760028114610c035760038114610c105760048114610c1e57610c29565b8260208301a0610c29565b868360208401a1610c29565b85878460208501a2610c29565b8486888560208601a3610c29565b838587898660208701a45b50505050505050505050565b610c3d610eaf565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c44b11f7836040518263ffffffff1660e01b8152600401610c989190610f80565b60206040518083038186803b158015610cb057600080fd5b505afa158015610cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce89190611a10565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d43610477565b610d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7990610f1f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b604051806102000160405280610dda610eaf565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600064ffffffffff1681525090565b6040518060200160405280600081525090565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610f09602083610ec2565b9150610f1482610ed3565b602082019050919050565b60006020820190508181036000830152610f3881610efc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f6a82610f3f565b9050919050565b610f7a81610f5f565b82525050565b6000602082019050610f956000830184610f71565b92915050565b6000604051905090565b600080fd5b600080fd5b610fb881610f5f565b8114610fc357600080fd5b50565b600081359050610fd581610faf565b92915050565b60028110610fe857600080fd5b50565b600081359050610ffa81610fdb565b92915050565b6000806040838503121561101757611016610fa5565b5b600061102585828601610fc6565b925050602061103685828601610feb565b9150509250929050565b6000819050919050565b61105381611040565b82525050565b600060208201905061106e600083018461104a565b92915050565b60006020828403121561108a57611089610fa5565b5b600061109884828501610fc6565b91505092915050565b6110aa81611040565b82525050565b6020820160008201516110c660008501826110a1565b50505050565b6110d581610f5f565b82525050565b600064ffffffffff82169050919050565b6110f5816110db565b82525050565b6102008201600082015161111260008501826110b0565b50602082015161112560208501826110a1565b50604082015161113860408501826110a1565b50606082015161114b60608501826110a1565b50608082015161115e60808501826110a1565b5060a082015161117160a08501826110a1565b5060c082015161118460c08501826110a1565b5060e082015161119760e08501826110a1565b506101008201516111ac6101008501826110a1565b506101208201516111c16101208501826110a1565b506101408201516111d66101408501826110cc565b506101608201516111eb6101608501826110cc565b506101808201516112006101808501826110cc565b506101a08201516112156101a08501826110cc565b506101c082015161122a6101c08501826110ec565b506101e082015161123f6101e08501826110ec565b50505050565b60006102008201905061125b60008301846110fb565b92915050565b600061126c82610f5f565b9050919050565b61127c81611261565b811461128757600080fd5b50565b60008135905061129981611273565b92915050565b6000602082840312156112b5576112b4610fa5565b5b60006112c38482850161128a565b91505092915050565b60008115159050919050565b6112e1816112cc565b82525050565b60006060820190506112fc60008301866112d8565b61130960208301856112d8565b61131660408301846112d8565b949350505050565b600060208201905061133360008301846112d8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261135e5761135d611339565b5b8235905067ffffffffffffffff81111561137b5761137a61133e565b5b60208301915083600182028301111561139757611396611343565b5b9250929050565b6113a781611040565b81146113b257600080fd5b50565b6000813590506113c48161139e565b92915050565b6000819050919050565b6113dd816113ca565b81146113e857600080fd5b50565b6000813590506113fa816113d4565b92915050565b600080600080600080600060c0888a03121561141f5761141e610fa5565b5b600088013567ffffffffffffffff81111561143d5761143c610faa565b5b6114498a828b01611348565b9750975050602061145c8a828b016113b5565b955050604061146d8a828b016113eb565b945050606061147e8a828b016113eb565b935050608061148f8a828b016113eb565b92505060a06114a08a828b016113eb565b91505092959891949750929550565b6020820160008201516114c560008501826110a1565b50505050565b60006020820190506114e060008301846114af565b92915050565b6000819050919050565b600061150b61150661150184610f3f565b6114e6565b610f3f565b9050919050565b600061151d826114f0565b9050919050565b600061152f82611512565b9050919050565b61153f81611524565b82525050565b600060208201905061155a6000830184611536565b92915050565b60008151905061156f81610faf565b92915050565b60006020828403121561158b5761158a610fa5565b5b600061159984828501611560565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106115e2576115e16115a2565b5b50565b60008190506115f3826115d1565b919050565b6000611603826115e5565b9050919050565b611613816115f8565b82525050565b600060408201905061162e6000830185610f71565b61163b602083018461160a565b9392505050565b6000815190506116518161139e565b92915050565b60006020828403121561166d5761166c610fa5565b5b600061167b84828501611642565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116d282611689565b810181811067ffffffffffffffff821117156116f1576116f061169a565b5b80604052505050565b6000611704610f9b565b905061171082826116c9565b919050565b60006020828403121561172b5761172a611684565b5b61173560206116fa565b9050600061174584828501611642565b60008301525092915050565b61175a816110db565b811461176557600080fd5b50565b60008151905061177781611751565b92915050565b6000610200828403121561179457611793611684565b5b61179f6102006116fa565b905060006117af84828501611715565b60008301525060206117c384828501611642565b60208301525060406117d784828501611642565b60408301525060606117eb84828501611642565b60608301525060806117ff84828501611642565b60808301525060a061181384828501611642565b60a08301525060c061182784828501611642565b60c08301525060e061183b84828501611642565b60e08301525061010061185084828501611642565b6101008301525061012061186684828501611642565b6101208301525061014061187c84828501611560565b6101408301525061016061189284828501611560565b610160830152506101806118a884828501611560565b610180830152506101a06118be84828501611560565b6101a0830152506101c06118d484828501611768565b6101c0830152506101e06118ea84828501611768565b6101e08301525092915050565b6000610200828403121561190e5761190d610fa5565b5b600061191c8482850161177d565b91505092915050565b61192e816112cc565b811461193957600080fd5b50565b60008151905061194b81611925565b92915050565b60008060006060848603121561196a57611969610fa5565b5b60006119788682870161193c565b93505060206119898682870161193c565b925050604061199a8682870161193c565b9150509250925092565b7f4d7573742062652070726f787920746172676574000000000000000000000000600082015250565b60006119da601483610ec2565b91506119e5826119a4565b602082019050919050565b60006020820190508181036000830152611a09816119cd565b9050919050565b600060208284031215611a2657611a25610fa5565b5b6000611a3484828501611715565b9150509291505056fea2646970667358221220c5b2460e77a4765a0c3ac508ebd9bf469e0c3a0499fc00306b7b63724ca270e764736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063c44b11f711610059578063c44b11f7146103bb578063d4b83992146103f8578063e30c397814610423578063f2fde38b1461044e576100e2565b80638da5cb5b1461033c5780638f32d59b14610367578063907dff9714610392576100e2565b80634e71e0c8116100bb5780634e71e0c814610280578063776d1a0114610297578063776f6891146102c0578063817ad5d3146102fd576100e2565b8063122fd48a146101db578063284592b21461020657806335ea6a7514610243576100e2565b5b6100ea610477565b610129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012090610f1f565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bc67f832336040518263ffffffff1660e01b81526004016101849190610f80565b600060405180830381600087803b15801561019e57600080fd5b505af11580156101b2573d6000803e3d6000fd5b5050505060405136600082376000803683346002545af13d6000833e806101d7573d82fd5b3d82f35b3480156101e757600080fd5b506101f06104ce565b6040516101fd9190610f80565b60405180910390f35b34801561021257600080fd5b5061022d60048036038101906102289190611000565b610575565b60405161023a9190611059565b60405180910390f35b34801561024f57600080fd5b5061026a60048036038101906102659190611074565b61062c565b6040516102779190611245565b60405180910390f35b34801561028c57600080fd5b506102956106e7565b005b3480156102a357600080fd5b506102be60048036038101906102b9919061129f565b610883565b005b3480156102cc57600080fd5b506102e760048036038101906102e29190611000565b610945565b6040516102f49190611059565b60405180910390f35b34801561030957600080fd5b50610324600480360381019061031f9190611074565b6109fc565b604051610333939291906112e7565b60405180910390f35b34801561034857600080fd5b50610351610ab9565b60405161035e9190610f80565b60405180910390f35b34801561037357600080fd5b5061037c610477565b604051610389919061131e565b60405180910390f35b34801561039e57600080fd5b506103b960048036038101906103b49190611400565b610add565b005b3480156103c757600080fd5b506103e260048036038101906103dd9190611074565b610c35565b6040516103ef91906114cb565b60405180910390f35b34801561040457600080fd5b5061040d610cef565b60405161041a9190611545565b60405180910390f35b34801561042f57600080fd5b50610438610d15565b6040516104459190610f80565b60405180910390f35b34801561045a57600080fd5b5061047560048036038101906104709190611074565b610d3b565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663122fd48a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561053857600080fd5b505afa15801561054c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105709190611575565b905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663284592b284846040518363ffffffff1660e01b81526004016105d4929190611619565b60206040518083038186803b1580156105ec57600080fd5b505afa158015610600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106249190611657565b905092915050565b610634610dc6565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166335ea6a75836040518263ffffffff1660e01b815260040161068f9190610f80565b6102006040518083038186803b1580156106a857600080fd5b505afa1580156106bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e091906118f7565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074157600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61088b610477565b6108ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c190610f1f565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f814250a3b8c79fcbe2ead2c131c952a278491c8f4322a79fe84b5040a810373e8160405161093a9190611545565b60405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663776f689184846040518363ffffffff1660e01b81526004016109a4929190611619565b60206040518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f49190611657565b905092915050565b6000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663817ad5d3856040518263ffffffff1660e01b8152600401610a5c9190610f80565b60606040518083038186803b158015610a7457600080fd5b505afa158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aac9190611951565b9250925092509193909250565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b64906119f0565b60405180910390fd5b6000878790509050600088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090508660008114610bec5760018114610bf75760028114610c035760038114610c105760048114610c1e57610c29565b8260208301a0610c29565b868360208401a1610c29565b85878460208501a2610c29565b8486888560208601a3610c29565b838587898660208701a45b50505050505050505050565b610c3d610eaf565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c44b11f7836040518263ffffffff1660e01b8152600401610c989190610f80565b60206040518083038186803b158015610cb057600080fd5b505afa158015610cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce89190611a10565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d43610477565b610d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7990610f1f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b604051806102000160405280610dda610eaf565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600064ffffffffff1681525090565b6040518060200160405280600081525090565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610f09602083610ec2565b9150610f1482610ed3565b602082019050919050565b60006020820190508181036000830152610f3881610efc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f6a82610f3f565b9050919050565b610f7a81610f5f565b82525050565b6000602082019050610f956000830184610f71565b92915050565b6000604051905090565b600080fd5b600080fd5b610fb881610f5f565b8114610fc357600080fd5b50565b600081359050610fd581610faf565b92915050565b60028110610fe857600080fd5b50565b600081359050610ffa81610fdb565b92915050565b6000806040838503121561101757611016610fa5565b5b600061102585828601610fc6565b925050602061103685828601610feb565b9150509250929050565b6000819050919050565b61105381611040565b82525050565b600060208201905061106e600083018461104a565b92915050565b60006020828403121561108a57611089610fa5565b5b600061109884828501610fc6565b91505092915050565b6110aa81611040565b82525050565b6020820160008201516110c660008501826110a1565b50505050565b6110d581610f5f565b82525050565b600064ffffffffff82169050919050565b6110f5816110db565b82525050565b6102008201600082015161111260008501826110b0565b50602082015161112560208501826110a1565b50604082015161113860408501826110a1565b50606082015161114b60608501826110a1565b50608082015161115e60808501826110a1565b5060a082015161117160a08501826110a1565b5060c082015161118460c08501826110a1565b5060e082015161119760e08501826110a1565b506101008201516111ac6101008501826110a1565b506101208201516111c16101208501826110a1565b506101408201516111d66101408501826110cc565b506101608201516111eb6101608501826110cc565b506101808201516112006101808501826110cc565b506101a08201516112156101a08501826110cc565b506101c082015161122a6101c08501826110ec565b506101e082015161123f6101e08501826110ec565b50505050565b60006102008201905061125b60008301846110fb565b92915050565b600061126c82610f5f565b9050919050565b61127c81611261565b811461128757600080fd5b50565b60008135905061129981611273565b92915050565b6000602082840312156112b5576112b4610fa5565b5b60006112c38482850161128a565b91505092915050565b60008115159050919050565b6112e1816112cc565b82525050565b60006060820190506112fc60008301866112d8565b61130960208301856112d8565b61131660408301846112d8565b949350505050565b600060208201905061133360008301846112d8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261135e5761135d611339565b5b8235905067ffffffffffffffff81111561137b5761137a61133e565b5b60208301915083600182028301111561139757611396611343565b5b9250929050565b6113a781611040565b81146113b257600080fd5b50565b6000813590506113c48161139e565b92915050565b6000819050919050565b6113dd816113ca565b81146113e857600080fd5b50565b6000813590506113fa816113d4565b92915050565b600080600080600080600060c0888a03121561141f5761141e610fa5565b5b600088013567ffffffffffffffff81111561143d5761143c610faa565b5b6114498a828b01611348565b9750975050602061145c8a828b016113b5565b955050604061146d8a828b016113eb565b945050606061147e8a828b016113eb565b935050608061148f8a828b016113eb565b92505060a06114a08a828b016113eb565b91505092959891949750929550565b6020820160008201516114c560008501826110a1565b50505050565b60006020820190506114e060008301846114af565b92915050565b6000819050919050565b600061150b61150661150184610f3f565b6114e6565b610f3f565b9050919050565b600061151d826114f0565b9050919050565b600061152f82611512565b9050919050565b61153f81611524565b82525050565b600060208201905061155a6000830184611536565b92915050565b60008151905061156f81610faf565b92915050565b60006020828403121561158b5761158a610fa5565b5b600061159984828501611560565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106115e2576115e16115a2565b5b50565b60008190506115f3826115d1565b919050565b6000611603826115e5565b9050919050565b611613816115f8565b82525050565b600060408201905061162e6000830185610f71565b61163b602083018461160a565b9392505050565b6000815190506116518161139e565b92915050565b60006020828403121561166d5761166c610fa5565b5b600061167b84828501611642565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116d282611689565b810181811067ffffffffffffffff821117156116f1576116f061169a565b5b80604052505050565b6000611704610f9b565b905061171082826116c9565b919050565b60006020828403121561172b5761172a611684565b5b61173560206116fa565b9050600061174584828501611642565b60008301525092915050565b61175a816110db565b811461176557600080fd5b50565b60008151905061177781611751565b92915050565b6000610200828403121561179457611793611684565b5b61179f6102006116fa565b905060006117af84828501611715565b60008301525060206117c384828501611642565b60208301525060406117d784828501611642565b60408301525060606117eb84828501611642565b60608301525060806117ff84828501611642565b60808301525060a061181384828501611642565b60a08301525060c061182784828501611642565b60c08301525060e061183b84828501611642565b60e08301525061010061185084828501611642565b6101008301525061012061186684828501611642565b6101208301525061014061187c84828501611560565b6101408301525061016061189284828501611560565b610160830152506101806118a884828501611560565b610180830152506101a06118be84828501611560565b6101a0830152506101c06118d484828501611768565b6101c0830152506101e06118ea84828501611768565b6101e08301525092915050565b6000610200828403121561190e5761190d610fa5565b5b600061191c8482850161177d565b91505092915050565b61192e816112cc565b811461193957600080fd5b50565b60008151905061194b81611925565b92915050565b60008060006060848603121561196a57611969610fa5565b5b60006119788682870161193c565b93505060206119898682870161193c565b925050604061199a8682870161193c565b9150509250925092565b7f4d7573742062652070726f787920746172676574000000000000000000000000600082015250565b60006119da601483610ec2565b91506119e5826119a4565b602082019050919050565b60006020820190508181036000830152611a09816119cd565b9050919050565b600060208284031215611a2657611a25610fa5565b5b6000611a3484828501611715565b9150509291505056fea2646970667358221220c5b2460e77a4765a0c3ac508ebd9bf469e0c3a0499fc00306b7b63724ca270e764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimOwnership()": {
        "details": "Allows the pendingOwner address to finalize the transfer."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to set the pendingOwner address.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6863,
        "contract": "contracts/component/liquiditymanager/LiquidityManagerProxy.sol:LiquidityManagerProxy",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6865,
        "contract": "contracts/component/liquiditymanager/LiquidityManagerProxy.sol:LiquidityManagerProxy",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6970,
        "contract": "contracts/component/liquiditymanager/LiquidityManagerProxy.sol:LiquidityManagerProxy",
        "label": "target",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Proxyable)7180"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Proxyable)7180": {
        "encoding": "inplace",
        "label": "contract Proxyable",
        "numberOfBytes": "20"
      }
    }
  }
}