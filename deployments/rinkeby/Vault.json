{
  "address": "0x3986dce0aB374AeBc161F80eb7851334B1cCEA5A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cutFacet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_loupeFacet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ownershipFacet",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facetAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "facetAddresses_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "facetFunctionSelectors_",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "facets_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AssetInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedDeployCreditEscrow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedDeployMarginEscrow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserveBalance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientFund",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAssetAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRedeemed",
          "type": "uint256"
        }
      ],
      "name": "InvalidTotalPaidAndRedeemed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "availableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftPrice",
          "type": "uint256"
        }
      ],
      "name": "InvalidWithdrawal",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "initCreditLine",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "ret",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc721Addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "transferNFT",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_erc721Addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "creditEscrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "getActualSecurityDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "getCurrentMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getSubvaultOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subvault",
          "type": "address"
        }
      ],
      "name": "getSubvaultStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc721Asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "custodian",
              "type": "address"
            }
          ],
          "internalType": "struct CustodyData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc721Asset",
          "type": "address"
        }
      ],
      "name": "getTokensOwned",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc721Addr",
          "type": "address"
        }
      ],
      "name": "getTotalNFTNumbers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isValidERC721",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "marginEscrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "marginRequirement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "name": "totalWithdrawableMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "withdrawableMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "callExternal",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FailedDeploySubvaultBeacon",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subvault",
          "type": "address"
        }
      ],
      "name": "InvalidSubvaultAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "InvalidTransfer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnAuthorised",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subvault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "callSubVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "createSubvault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dst",
          "type": "address"
        }
      ],
      "name": "onERC721Transferred",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subvault",
          "type": "address"
        }
      ],
      "name": "pauseSubvault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subvault",
          "type": "address"
        }
      ],
      "name": "unpauseSubvault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subvault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "updateSubvaultOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "InvalidDeposit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultNotInitialised",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositMargin",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeemMargin",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "slash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "pullToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refundETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermitAllowed",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermitAllowedIfNecessary",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermitIfNecessary",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountMinimum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sweepToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountMinimum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrapWETH9",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapWETH9",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf9a575aeffff8b7477e2180276134bf6dce7b570dc2aea4c2b80e8ba992b85e",
  "receipt": {
    "to": null,
    "from": "0x7bB17c9401110D05ec39894334cC9d7721E90688",
    "contractAddress": "0x3986dce0aB374AeBc161F80eb7851334B1cCEA5A",
    "transactionIndex": 12,
    "gasUsed": "1603203",
    "logsBloom": "0x
    "blockHash": "0x9c79991decab1f8e835582bb10d78edf0e7fcb27c0c8243722fd17ceecb95a3e",
    "transactionHash": "0xcf9a575aeffff8b7477e2180276134bf6dce7b570dc2aea4c2b80e8ba992b85e",
    "logs": [],
    "blockNumber": 11085699,
    "cumulativeGasUsed": "3630277",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "27c64b6a42a340338e0c33daf46094a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cutFacet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_loupeFacet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ownershipFacet\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/shared/diamond/VersionedDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n* \\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport {LibDiamond} from \\\"./libraries/LibDiamond.sol\\\";\\nimport {DiamondCutFacet} from \\\"./facets/DiamondCutFacet.sol\\\";\\nimport {DiamondLoupeFacet} from \\\"./facets/DiamondLoupeFacet.sol\\\";\\nimport {OwnershipFacet} from \\\"./facets/OwnershipFacet.sol\\\";\\nimport {VaultStorageV1} from \\\"../../vault/libraries/LibVaultStorage.sol\\\";\\nimport {DiamondVersionFacet} from \\\"../../voyage/facets/DiamondVersionFacet.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract VersionedDiamond is Initializable {\\n    // more arguments are added to this struct\\n    // this avoids stack too deep errors\\n    struct DiamondArgs {\\n        address owner;\\n    }\\n\\n    function _initialize(\\n        address _owner,\\n        address _cutFacet,\\n        address _loupeFacet,\\n        address _ownershipFacet\\n    ) internal {\\n        LibDiamond.setContractOwner(_owner);\\n        LibDiamond.addDiamondFunctions(_cutFacet, _loupeFacet, _ownershipFacet);\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamond.DiamondStorage storage ds;\\n        VaultStorageV1 storage vs;\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x6c82bb719465c3fd82703f33c5d789c56b4fcfa2ae4f8aba89f9edf2a45947c0\",\"license\":\"MIT\"},\"contracts/shared/diamond/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0x1ad930b2fb7a485ea9dc992bffe25b7f9ed400accf7eb19e06d0761457b7228d\",\"license\":\"MIT\"},\"contracts/shared/diamond/facets/DiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../libraries/LibDiamond.sol\\\";\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently by tools.\\n    //\\n    // struct Facet {\\n    //     address facetAddress;\\n    //     bytes4[] functionSelectors;\\n    // }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external view override returns (Facet[] memory facets_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        uint256 numFacets = ds.facetAddresses.length;\\n        facets_ = new Facet[](numFacets);\\n        for (uint256 i; i < numFacets; i++) {\\n            address facetAddress_ = ds.facetAddresses[i];\\n            facets_[i].facetAddress = facetAddress_;\\n            facets_[i].functionSelectors = ds\\n                .facetFunctionSelectors[facetAddress_]\\n                .functionSelectors;\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors provided by a facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        override\\n        returns (bytes4[] memory facetFunctionSelectors_)\\n    {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetFunctionSelectors_ = ds\\n            .facetFunctionSelectors[_facet]\\n            .functionSelectors;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        override\\n        returns (address[] memory facetAddresses_)\\n    {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddresses_ = ds.facetAddresses;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        override\\n        returns (address facetAddress_)\\n    {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddress_ = ds\\n            .selectorToFacetAndPosition[_functionSelector]\\n            .facetAddress;\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        return ds.supportedInterfaces[_interfaceId];\\n    }\\n}\\n\",\"keccak256\":\"0xe953a9649d44d77ee07bde1f3d6a1614e9414f8f51913896a70d56ef7b5d7805\",\"license\":\"MIT\"},\"contracts/shared/diamond/facets/OwnershipFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries/LibDiamond.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\ncontract OwnershipFacet is IERC173 {\\n    function transferOwnership(address _newOwner) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.setContractOwner(_newOwner);\\n    }\\n\\n    function owner() external view override returns (address owner_) {\\n        owner_ = LibDiamond.contractOwner();\\n    }\\n}\\n\",\"keccak256\":\"0xa2363e3589146ca3521952c370c388519b214ddcbdfe5ea30035c945bf7fe646\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x70cec56344b453ec59bcecd3541f711b4f439b5b7e35cc10306b2e82eaa399da\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x5b20558ac0a152f84527227fa50db6f113dd2241992cb8aa9b1a7dbd193c277f\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79ecd45ef37ffd464dd3a612cd046e1b3ec6aed5efd767141c651e539bdee988\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x6fae3084e63b6d8cca55d964865dc45e0c2abf2d0eb8fcd9a3fe7428441bf06a\",\"license\":\"MIT\"},\"contracts/shared/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IERC173} from \\\"../interfaces/IERC173.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    /// @notice Adds default diamond facets\\n    /// @dev This is always called in the Diamond constructor.\\n    /// @param _diamondCutFacet - address of DiamondCutFacet\\n    /// @param _diamondLoupeFacet - address of the DiamondLoupeFacet\\n    /// @param _ownershipFacet - address of the OwnershipFacet\\n    function addDiamondFunctions(\\n        address _diamondCutFacet,\\n        address _diamondLoupeFacet,\\n        address _ownershipFacet\\n    ) internal {\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](3);\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondCutFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        functionSelectors = new bytes4[](5);\\n        functionSelectors[0] = IDiamondLoupe.facets.selector;\\n        functionSelectors[1] = IDiamondLoupe.facetFunctionSelectors.selector;\\n        functionSelectors[2] = IDiamondLoupe.facetAddresses.selector;\\n        functionSelectors[3] = IDiamondLoupe.facetAddress.selector;\\n        functionSelectors[4] = IERC165.supportsInterface.selector;\\n        cut[1] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondLoupeFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        functionSelectors = new bytes4[](2);\\n        functionSelectors[0] = IERC173.transferOwnership.selector;\\n        functionSelectors[1] = IERC173.owner.selector;\\n        cut[2] = IDiamondCut.FacetCut({\\n            facetAddress: _ownershipFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        diamondCut(cut, address(0), \\\"\\\");\\n    }\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // uint16 selectorCount = uint16(diamondStorage().selectors.length);\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(oldFacetAddress, selector);\\n            // add function\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function removeFunction(address _facetAddress, bytes4 _selector) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            ds\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x76c53a3a50ee1b30d116263e1847c80b52f6705f7436d37ba91b0ddcb97657ff\",\"license\":\"MIT\"},\"contracts/shared/facets/PaymentsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {PeripheryPayments} from \\\"../util/PeripheryPayments.sol\\\";\\nimport {Multicall} from \\\"../util/Multicall.sol\\\";\\nimport {SelfPermit} from \\\"../util/SelfPermit.sol\\\";\\nimport {LibAppStorage} from \\\"../../voyage/libraries/LibAppStorage.sol\\\";\\nimport {SafeTransferLib} from \\\"../libraries/SafeTransferLib.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract PaymentsFacet is PeripheryPayments, Multicall, SelfPermit {\\n    using SafeERC20 for IERC20;\\n\\n    function unwrapWETH9(uint256 amountMinimum, address recipient)\\n        public\\n        payable\\n    {\\n        uint256 balanceWETH9 = LibAppStorage.diamondStorage().WETH9.balanceOf(\\n            address(this)\\n        );\\n        require(balanceWETH9 >= amountMinimum, \\\"Insufficient WETH9\\\");\\n\\n        if (balanceWETH9 > 0) {\\n            LibAppStorage.diamondStorage().WETH9.withdraw(balanceWETH9);\\n            SafeTransferLib.safeTransferETH(recipient, balanceWETH9);\\n        }\\n    }\\n\\n    function wrapWETH9() public payable {\\n        if (address(this).balance > 0)\\n            LibAppStorage.diamondStorage().WETH9.deposit{\\n                value: address(this).balance\\n            }(); // wrap everything\\n    }\\n\\n    function sweepToken(\\n        IERC20 token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) public payable {\\n        uint256 balanceToken = token.balanceOf(address(this));\\n        require(balanceToken >= amountMinimum, \\\"Insufficient token\\\");\\n\\n        if (balanceToken > 0) {\\n            token.safeTransfer(recipient, balanceToken);\\n        }\\n    }\\n\\n    function refundETH() external payable {\\n        if (address(this).balance > 0) {\\n            SafeTransferLib.safeTransferETH(msg.sender, address(this).balance);\\n        }\\n    }\\n}\\n\\nabstract contract IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable virtual;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external virtual;\\n}\\n\",\"keccak256\":\"0x20426fcef75bf88895c6b2c37a7a82b7c75718b9243704a1ac3b4623ab061eee\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC20PermitAllowed.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/external/IERC20PermitAllowed.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Interface for permit\\n/// @notice Interface used by DAI/CHAI for permit\\ninterface IERC20PermitAllowed {\\n    /// @notice Approve the spender to spend some tokens via the holder signature\\n    /// @dev This is the permit interface used by DAI and CHAI\\n    /// @param holder The address of the token holder, the token owner\\n    /// @param spender The address of the token spender\\n    /// @param nonce The holder's nonce, increases at each call to permit\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x75199ac09b8a0315f5bb8a4380df57a8443ef496443ab546d017ea6100b699bc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport {IERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\n\\n// https://github.dev/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/b392c249e2c72434c438e0e495af1bacbc6cfd4f/contracts/interfaces/IERC4626Upgradeable.sol#L21\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is\\n    IERC20Upgradeable,\\n    IERC20MetadataUpgradeable,\\n    IERC20PermitUpgradeable\\n{\\n    event Deposit(\\n        address indexed caller,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (IERC20Metadata assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets)\\n        external\\n        view\\n        returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares)\\n        external\\n        view\\n        returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver)\\n        external\\n        view\\n        returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets)\\n        external\\n        view\\n        returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver)\\n        external\\n        returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver)\\n        external\\n        view\\n        returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver)\\n        external\\n        returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner)\\n        external\\n        view\\n        returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets)\\n        external\\n        view\\n        returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares)\\n        external\\n        view\\n        returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x4ac6b252c94f945b2cc258e8f6f37a8e1f55a6a16cb4bb59bf2ce7ae620fa3fd\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IMulticall.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IMulticall.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data)\\n        external\\n        payable\\n        returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x8437eb20058eb64e08677e6ee16f3299c3d080235a99526374c984687762b69b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/interfaces/ISelfPermit.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISelfPermit.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\ninterface ISelfPermit {\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x935d7c033290c44921175dd13c8dddf8e51057492e665c379058d7bf3ca67125\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\nETH OPERATIONS\\n//////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\nERC20 OPERATIONS\\n//////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0x23b872dd00000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0xa9059cbb00000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0x095ea7b300000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x650ece776cbd21442a5b34775dfe0cd8b76f505ef5e072b198c3e35709b791d7\",\"license\":\"AGPL-3.0-only\"},\"contracts/shared/util/Multicall.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/base/Multicall.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMulticall.sol\\\";\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall {\\n    /// @inheritdoc IMulticall\\n    function multicall(bytes[] calldata data)\\n        public\\n        payable\\n        override\\n        returns (bytes[] memory results)\\n    {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ea37766655ad050a0beca38b517a425be1f52bc165985891edcfcb46e0e7c77\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/util/PeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title Depositor\\n/// @author Voyage Finance\\n/// @notice Forwards calls to ERC-4626 compliant Vaults, but with the actual depositor appended to the encoded call data.\\n/// @dev This does not work if the receiving contract does not implement ERC-4626!\\nabstract contract PeripheryPayments {\\n    using SafeERC20 for IERC20;\\n\\n    function pullToken(\\n        IERC20 token,\\n        uint256 amount,\\n        address from,\\n        address recipient\\n    ) public payable {\\n        token.safeTransferFrom(from, recipient, amount);\\n    }\\n\\n    function approve(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) public payable {\\n        token.safeApprove(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6693bca3a626f4c685bb1c8d9a5812a248c45232e601f9fe1fac80bfd4379a1c\",\"license\":\"AGPL-3.0-only\"},\"contracts/shared/util/SelfPermit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.9;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISelfPermit.sol\\\";\\nimport \\\"../interfaces/IERC20PermitAllowed.sol\\\";\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\\n/// that requires an approval in a single transaction.\\nabstract contract SelfPermit is ISelfPermit {\\n    /// @inheritdoc ISelfPermit\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20Permit(token).permit(\\n            msg.sender,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable override {\\n        if (IERC20(token).allowance(msg.sender, address(this)) < value)\\n            selfPermit(token, value, deadline, v, r, s);\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20PermitAllowed(token).permit(\\n            msg.sender,\\n            address(this),\\n            nonce,\\n            expiry,\\n            true,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable override {\\n        if (\\n            IERC20(token).allowance(msg.sender, address(this)) <\\n            type(uint256).max\\n        ) selfPermitAllowed(token, nonce, expiry, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x456e000cc02654d5e0df6b67960aa8a9c92b4f960ffa5d852e021ece7995bf20\",\"license\":\"AGPL-3.0-only\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {VersionedDiamond} from \\\"../shared/diamond/VersionedDiamond.sol\\\";\\nimport {LibVaultStorage} from \\\"./libraries/LibVaultStorage.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IVault} from \\\"./interfaces/IVault.sol\\\";\\n\\ncontract Vault is VersionedDiamond, IVault {\\n    function initialize(\\n        address _owner,\\n        address _user,\\n        address _cutFacet,\\n        address _loupeFacet,\\n        address _ownershipFacet\\n    ) public initializer {\\n        LibVaultStorage.diamondStorage().voyage = _owner;\\n        LibVaultStorage.diamondStorage().user = _user;\\n        _initialize(_owner, _cutFacet, _loupeFacet, _ownershipFacet);\\n    }\\n}\\n\",\"keccak256\":\"0x93e6d7eee38efa61f8a70ae11b72f17b4884e4d2daa6b06602372cdf0d7e7309\",\"license\":\"GPL-3.0\"},\"contracts/vault/interfaces/IMarginEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC4626} from \\\"../../shared/interfaces/IERC4626.sol\\\";\\n\\ninterface IMarginEscrow is IERC4626 {\\n    function initialize(\\n        address _vault,\\n        address _voyage,\\n        address _asset\\n    ) external;\\n\\n    function slash(uint256 _amount, address payable _to)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function withdrawableMargin(address _user) external view returns (uint256);\\n\\n    function totalWithdrawableMargin() external view returns (uint256);\\n\\n    function totalMargin() external view returns (uint256);\\n\\n    function transferUnderlyingTo(address _target, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x31bc66e7d250aa688923892be4e36f816261914f10586304cd1df59c8faf3670\",\"license\":\"MIT\"},\"contracts/vault/interfaces/IVault.sol\":{\"content\":\"interface IVault {\\n    function initialize(\\n        address _owner,\\n        address _user,\\n        address _cutFacet,\\n        address _loupeFacet,\\n        address _ownershipFacet\\n    ) external;\\n}\\n\",\"keccak256\":\"0xad50700426e241a0f8cf1cba98f64d22ab7f855ff93b596f49c7fa962b6ff9a9\"},\"contracts/vault/libraries/LibVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {PriorityQueue, Heap} from \\\"./PriorityQueue.sol\\\";\\nimport {IMarginEscrow} from \\\"../interfaces/IMarginEscrow.sol\\\";\\n\\nstruct CustodyData {\\n    // the \\\"owner\\\" of the token -- must be Vault or a Subvault.\\n    address owner;\\n    // the current holder of the token, e.g., battle game.\\n    address custodian;\\n}\\n\\nstruct VaultStorageV1 {\\n    address owner;\\n    address voyage;\\n    address user;\\n    uint256 version;\\n    bytes32 checksum;\\n    // asset (ERC20) => escrow\\n    mapping(address => address) cescrow;\\n    mapping(address => address) escrow;\\n    // erc721 address => heap\\n    mapping(address => Heap) nfts;\\n    /// @dev You must not set element 0xffffffff to true\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // subvault array, for retrieval by DataProviderFacet and client-side enumeration\\n    address[] subvaults;\\n    // mapping of subvault to owner\\n    mapping(address => address) subvaultOwnerIndex;\\n    // mapping of owner to subvault\\n    mapping(address => address) ownerSubvaultIndex;\\n    // mapping of subvault => paused status\\n    mapping(address => bool) subvaultStatusIndex;\\n    mapping(address => uint256[]) tokenSet;\\n    // mapping of erc721 address to mapping of tokenId to custody information\\n    // to save storage space, only store this data if the token is transferred out of the Vault (i.e., to a Subvault or external contract)\\n    mapping(address => mapping(uint256 => CustodyData)) custodyIndex;\\n}\\n\\nlibrary LibVaultStorage {\\n    // Returns the struct from a specified position in contract storage\\n    // ds is short for DiamondStorage\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (VaultStorageV1 storage ds)\\n    {\\n        // Set the position of our struct in contract storage\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n}\\n\\ncontract Storage {\\n    modifier onlyVoyage() {\\n        require(\\n            msg.sender == LibVaultStorage.diamondStorage().voyage,\\n            \\\"Not Voyage\\\"\\n        );\\n        _;\\n    }\\n\\n    function _marginEscrow(address _asset)\\n        internal\\n        view\\n        returns (IMarginEscrow)\\n    {\\n        return IMarginEscrow(LibVaultStorage.diamondStorage().escrow[_asset]);\\n    }\\n}\\n\",\"keccak256\":\"0x65cf72e4e7631132b8360e37a16b6fcec76daddebf80212bb66ce0fbc339bac8\",\"license\":\"GPL-3.0\"},\"contracts/vault/libraries/PriorityQueue.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nstruct Heap {\\n    uint256[] heapList;\\n    uint256 currentSize;\\n}\\n\\nlibrary PriorityQueue {\\n    /**\\n     * @dev Returns the top element of the heap.\\n     * @return The smallest element in the priority queue.\\n     */\\n    function getMin(Heap storage heap)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return _splitElement(heap.heapList[1]);\\n    }\\n\\n    /**\\n     * @dev Inserts an element into the priority queue.\\n     * @param _tokenId Token id.\\n     * @param _timestamp Timestamp.\\n     */\\n    function insert(\\n        Heap storage heap,\\n        uint256 _tokenId,\\n        uint256 _timestamp\\n    ) internal {\\n        if (heap.heapList.length == 0) {\\n            heap.heapList.push(0);\\n        }\\n        uint256 element = (_tokenId << 128) | _timestamp;\\n        heap.heapList.push(element);\\n        heap.currentSize = heap.currentSize + 1;\\n        _percUp(heap, heap.currentSize);\\n    }\\n\\n    function del(\\n        Heap storage heap,\\n        uint256 _tokenId,\\n        uint256 _timestamp\\n    ) internal {\\n        uint256 element = (_tokenId << 128) | _timestamp;\\n        uint256 index = 1;\\n        for (uint256 i = 1; i < heap.currentSize + 1; ) {\\n            if (heap.heapList[i] == element) {\\n                index = i;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        if (index == heap.currentSize) {\\n            heap.heapList.pop();\\n            heap.currentSize = heap.currentSize - 1;\\n            return;\\n        }\\n\\n        bool isGreater = heap.heapList[heap.currentSize] > heap.heapList[index];\\n        (heap.heapList[heap.currentSize], heap.heapList[index]) = (\\n            heap.heapList[index],\\n            heap.heapList[heap.currentSize]\\n        );\\n        heap.heapList.pop();\\n        heap.currentSize = heap.currentSize - 1;\\n\\n        if (isGreater) {\\n            _percDown(heap, index);\\n        } else {\\n            _percUp(heap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Deletes the top element of the heap and shifts everything up.\\n     * @return The smallest element in the priorty queue.\\n     */\\n    function delMin(Heap storage heap) internal returns (uint256, uint256) {\\n        uint256 retVal = heap.heapList[1];\\n        heap.heapList[1] = heap.heapList[heap.currentSize];\\n        delete heap.heapList[heap.currentSize];\\n        heap.currentSize = heap.currentSize - 1;\\n        _percDown(heap, 1);\\n        //heap.heapList.length = heap.heapList.length.sub(1);\\n        return _splitElement(retVal);\\n    }\\n\\n    /**\\n     * @dev Bubbles the element at some index up.\\n     */\\n    function _percUp(Heap storage heap, uint256 _index) internal {\\n        uint256 index = _index;\\n        uint256 j = index;\\n        uint256 newVal = heap.heapList[index];\\n        while (newVal < heap.heapList[index / 2]) {\\n            heap.heapList[index] = heap.heapList[index / 2];\\n            index = index / 2;\\n        }\\n        if (index != j) heap.heapList[index] = newVal;\\n    }\\n\\n    /**\\n     * @dev Determines the minimum child of a given node in the tree.\\n     * @param _index Index of the node in the tree.\\n     * @return The smallest child node.\\n     */\\n    function _minChild(Heap storage heap, uint256 _index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_index * 2 + 1 > heap.currentSize) {\\n            return _index * 2;\\n        } else {\\n            if (heap.heapList[_index * 2] < heap.heapList[_index * 2 + 1]) {\\n                return _index * 2;\\n            } else {\\n                return _index * 2 + 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Bubbles the element at some index down.\\n     */\\n    function _percDown(Heap storage heap, uint256 _index) internal {\\n        uint256 index = _index;\\n        uint256 j = index;\\n        uint256 newVal = heap.heapList[index];\\n        uint256 mc = _minChild(heap, index);\\n        while (mc <= heap.currentSize && newVal > heap.heapList[mc]) {\\n            heap.heapList[index] = heap.heapList[mc];\\n            index = mc;\\n            mc = _minChild(heap, index);\\n        }\\n        if (index != j) heap.heapList[index] = newVal;\\n    }\\n\\n    /**\\n     * @dev Split an element into its priority and value.\\n     * @param _element Element to decode.\\n     * @return A tuple containing the token id and timestamp.\\n     */\\n    function _splitElement(uint256 _element)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 tokenId = _element >> 128;\\n        uint256 timestamp = uint256(uint128(_element));\\n        return (tokenId, timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xd98368a254970ededd6afe187783f89c69e4b3adcb18cc462c41b6fefaaedd7f\",\"license\":\"GPL-3.0\"},\"contracts/voyage/auth/DSAuth.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// lifted from: https://github.com/dapphub/ds-auth/blob/a51e7caa1f03eeffed66d67f3b38605e0f1f881d/src/auth.sol\\n\\npragma solidity ^0.8.9;\\n\\ninterface DSAuthority {\\n    function canCall(\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) external view returns (bool);\\n}\\n\\ncontract DSAuthEvents {\\n    event LogSetAuthority(address indexed authority);\\n    event LogSetOwner(address indexed owner);\\n}\\n\\ncontract DSAuth is DSAuthEvents {\\n    DSAuthority public authority;\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit LogSetOwner(msg.sender);\\n    }\\n\\n    function setOwner(address owner_) public auth {\\n        owner = owner_;\\n        emit LogSetOwner(owner);\\n    }\\n\\n    function setAuthority(DSAuthority authority_) public auth {\\n        authority = authority_;\\n        emit LogSetAuthority(address(authority));\\n    }\\n\\n    modifier auth() {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"ds-auth-unauthorized\\\");\\n        _;\\n    }\\n\\n    function isAuthorized(address src, bytes4 sig)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else if (authority == DSAuthority(address(0))) {\\n            return false;\\n        } else {\\n            return authority.canCall(src, address(this), sig);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb069264548df428fc3c0489dd970632c1a0b85a8a26bbf7a5b0c01f00d88b75\",\"license\":\"GNU-3\"},\"contracts/voyage/auth/DSGuard.sol\":{\"content\":\"// guard.sol -- simple whitelist implementation of DSAuthority\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// lifted from: https://github.com/dapphub/ds-guard/blob/af05632249f98bf3942b9482c5bf69e8bd45284e/src/guard.sol\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./DSAuth.sol\\\";\\n\\ncontract DSGuardEvents {\\n    event LogPermit(\\n        bytes32 indexed src,\\n        bytes32 indexed dst,\\n        bytes32 indexed sig\\n    );\\n\\n    event LogForbid(\\n        bytes32 indexed src,\\n        bytes32 indexed dst,\\n        bytes32 indexed sig\\n    );\\n}\\n\\ncontract DSGuard is DSAuth, DSAuthority, DSGuardEvents {\\n    bytes32 public constant ANY = bytes32(type(uint256).max);\\n\\n    mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => bool))) acl;\\n\\n    function canCall(\\n        address src_,\\n        address dst_,\\n        bytes4 sig\\n    ) public view returns (bool) {\\n        bytes32 src = bytes32(bytes20(src_));\\n        bytes32 dst = bytes32(bytes20(dst_));\\n\\n        return\\n            acl[src][dst][sig] ||\\n            acl[src][dst][ANY] ||\\n            acl[src][ANY][sig] ||\\n            acl[src][ANY][ANY] ||\\n            acl[ANY][dst][sig] ||\\n            acl[ANY][dst][ANY] ||\\n            acl[ANY][ANY][sig] ||\\n            acl[ANY][ANY][ANY];\\n    }\\n\\n    function permit(\\n        bytes32 src,\\n        bytes32 dst,\\n        bytes32 sig\\n    ) public auth {\\n        acl[src][dst][sig] = true;\\n        emit LogPermit(src, dst, sig);\\n    }\\n\\n    function forbid(\\n        bytes32 src,\\n        bytes32 dst,\\n        bytes32 sig\\n    ) public auth {\\n        acl[src][dst][sig] = false;\\n        emit LogForbid(src, dst, sig);\\n    }\\n\\n    function permit(\\n        address src,\\n        address dst,\\n        bytes32 sig\\n    ) public {\\n        permit(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\\n    }\\n\\n    function forbid(\\n        address src,\\n        address dst,\\n        bytes32 sig\\n    ) public {\\n        forbid(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\\n    }\\n}\\n\\ncontract DSGuardFactory {\\n    mapping(address => bool) public isGuard;\\n\\n    function newGuard() public returns (DSGuard guard) {\\n        guard = new DSGuard();\\n        guard.setOwner(msg.sender);\\n        isGuard[address(guard)] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x1c08eb21a713823b838ceed6275d138a6e62fd425094d3d089980697cd94264a\"},\"contracts/voyage/auth/DSRoles.sol\":{\"content\":\"// roles.sol - roled based authentication\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// forked from: https://github.com/dapphub/ds-roles/blob/53d56949c0f98c9b5909df9c0d95025b67f3bb75/src/roles.sol\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./DSAuth.sol\\\";\\n\\ncontract DSRoles is DSAuth, DSAuthority {\\n    mapping(address => bool) _root_users;\\n    mapping(address => bytes32) _user_roles;\\n    mapping(address => mapping(bytes4 => bytes32)) _capability_roles;\\n    mapping(address => mapping(bytes4 => bool)) _public_capabilities;\\n\\n    function getUserRoles(address who) public view returns (bytes32) {\\n        return _user_roles[who];\\n    }\\n\\n    function getCapabilityRoles(address code, bytes4 sig)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _capability_roles[code][sig];\\n    }\\n\\n    function isUserRoot(address who) public view returns (bool) {\\n        return _root_users[who];\\n    }\\n\\n    function isCapabilityPublic(address code, bytes4 sig)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _public_capabilities[code][sig];\\n    }\\n\\n    function hasUserRole(address who, uint8 role) public view returns (bool) {\\n        bytes32 roles = getUserRoles(who);\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        return bytes32(0) != roles & shifted;\\n    }\\n\\n    function canCall(\\n        address caller,\\n        address code,\\n        bytes4 sig\\n    ) public view returns (bool) {\\n        if (isUserRoot(caller) || isCapabilityPublic(code, sig)) {\\n            return true;\\n        } else {\\n            bytes32 has_roles = getUserRoles(caller);\\n            bytes32 needs_one_of = getCapabilityRoles(code, sig);\\n            return bytes32(0) != has_roles & needs_one_of;\\n        }\\n    }\\n\\n    function BITNOT(bytes32 input) internal pure returns (bytes32 output) {\\n        return (input ^ bytes32(type(uint256).max));\\n    }\\n\\n    function setRootUser(address who, bool enabled) public auth {\\n        _root_users[who] = enabled;\\n    }\\n\\n    function setUserRole(\\n        address who,\\n        uint8 role,\\n        bool enabled\\n    ) public auth {\\n        bytes32 last_roles = _user_roles[who];\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        if (enabled) {\\n            _user_roles[who] = last_roles | shifted;\\n        } else {\\n            _user_roles[who] = last_roles & BITNOT(shifted);\\n        }\\n    }\\n\\n    function setPublicCapability(\\n        address code,\\n        bytes4 sig,\\n        bool enabled\\n    ) public auth {\\n        _public_capabilities[code][sig] = enabled;\\n    }\\n\\n    function setRoleCapability(\\n        uint8 role,\\n        address code,\\n        bytes4 sig,\\n        bool enabled\\n    ) public auth {\\n        bytes32 last_roles = _capability_roles[code][sig];\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        if (enabled) {\\n            _capability_roles[code][sig] = last_roles | shifted;\\n        } else {\\n            _capability_roles[code][sig] = last_roles & BITNOT(shifted);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x854b2fe5dcb2ab5277a1a1c3a2f97367c4c00f8076f746a88cfbde1eb43b2f15\"},\"contracts/voyage/facets/DiamondVersionFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Snapshot} from \\\"../interfaces/IDiamondVersionFacet.sol\\\";\\nimport {AppStorage, Storage, LibAppStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\nimport {IDiamondLoupe} from \\\"../../shared/diamond/interfaces/IDiamondLoupe.sol\\\";\\nimport {IDiamondCut} from \\\"../../shared/diamond/interfaces/IDiamondCut.sol\\\";\\nimport {DiamondCutFacet} from \\\"../../shared/diamond/facets/DiamondCutFacet.sol\\\";\\n\\ncontract DiamondVersionFacet is Storage {\\n    // increments `version` and stores snapshot in _snapshotMap\\n    // these must be computed offchain, and called by protocol admin (including init args encoding)\\n    function registerUpgrade(\\n        address init,\\n        bytes memory initArgs,\\n        IDiamondLoupe.Facet[] memory facets\\n    ) public authorised {\\n        LibAppStorage.diamondStorage().currentVersion += 1;\\n        uint256 version = LibAppStorage.diamondStorage().currentVersion;\\n        LibAppStorage.diamondStorage().snapshotMap[version].init = init;\\n        LibAppStorage.diamondStorage().snapshotMap[version].initArgs = initArgs;\\n        for (uint256 i = 0; i < facets.length; ) {\\n            LibAppStorage.diamondStorage().snapshotMap[version].facets.push(\\n                facets[i]\\n            );\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function getUpgrade(address _vault)\\n        public\\n        returns (IDiamondCut.FacetCut[] memory)\\n    {\\n        IDiamondCut.FacetCut[] storage facetCuts = s.upgradeParam.facetCuts[\\n            msg.sender\\n        ];\\n        Snapshot memory snapshot = s.snapshotMap[s.currentVersion];\\n        IDiamondLoupe loupe = IDiamondLoupe(_vault);\\n        IDiamondLoupe.Facet[] memory currentFacets = loupe.facets();\\n\\n        mapping(bytes4 => address) storage existingSelectorFacetMap = s\\n            .upgradeParam\\n            .existingSelectorFacetMap[msg.sender];\\n        bytes4[] storage existingSelectors = s.upgradeParam.existingSelectors[\\n            msg.sender\\n        ];\\n\\n        mapping(bytes4 => bool) storage newSelectorSet = s\\n            .upgradeParam\\n            .newSelectorSet[msg.sender];\\n        bytes4[] storage newSelectors = s.upgradeParam.newSelectors[msg.sender];\\n\\n        for (uint256 i = 0; i < currentFacets.length; ) {\\n            IDiamondLoupe.Facet memory facet = currentFacets[i];\\n            for (uint256 j = 0; j < facet.functionSelectors.length; ) {\\n                bytes4 selector = facet.functionSelectors[j];\\n                newSelectors.push(selector);\\n                existingSelectorFacetMap[selector] = facet.facetAddress;\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // at this point, we have to compute which facets to add/replace/delete\\n        // the logic is identical to the deployment script in voyager_001.ts\\n        // first, compute the selectors to add or replace\\n        for (uint256 i = 0; i < snapshot.facets.length; ) {\\n            IDiamondLoupe.Facet memory candidateFacet = snapshot.facets[i];\\n            for (uint256 j = 0; j < candidateFacet.functionSelectors.length; ) {\\n                bytes4 selector = candidateFacet.functionSelectors[j];\\n                // add it to newSelectorSet\\n                newSelectorSet[selector] = true;\\n                address currentHostFacetAddress = existingSelectorFacetMap[\\n                    selector\\n                ];\\n                if (currentHostFacetAddress != address(0)) {\\n                    if (\\n                        currentHostFacetAddress != candidateFacet.facetAddress\\n                    ) {\\n                        s.upgradeParam.selectorsReplaced[i].push(selector);\\n                    }\\n                } else {\\n                    s.upgradeParam.selectorsAdded[i].push(selector);\\n                }\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            if (s.upgradeParam.selectorsAdded[i].length > 0) {\\n                IDiamondCut.FacetCut memory facetCut;\\n                facetCut.functionSelectors = s.upgradeParam.selectorsAdded[i];\\n                facetCut.facetAddress = candidateFacet.facetAddress;\\n                facetCut.action = IDiamondCut.FacetCutAction.Add;\\n\\n                facetCuts[s.upgradeParam.facetCutSize[msg.sender]] = facetCut;\\n                s.upgradeParam.facetCutSize[msg.sender]++;\\n\\n                // clean storage right away\\n                delete s.upgradeParam.selectorsAdded[i];\\n            }\\n\\n            if (s.upgradeParam.selectorsReplaced[i].length > 0) {\\n                IDiamondCut.FacetCut memory facetCut;\\n                facetCut.functionSelectors = s.upgradeParam.selectorsReplaced[\\n                    i\\n                ];\\n                facetCut.facetAddress = candidateFacet.facetAddress;\\n                facetCut.action = IDiamondCut.FacetCutAction.Replace;\\n\\n                facetCuts[s.upgradeParam.facetCutSize[msg.sender]] = facetCut;\\n                s.upgradeParam.facetCutSize[msg.sender]++;\\n\\n                // clean storage right away\\n                delete s.upgradeParam.selectorsReplaced[i];\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // now just get the XOR of existing and new selectors to find the removed set\\n        for (uint256 i = 0; i < existingSelectors.length; ) {\\n            if (!newSelectorSet[existingSelectors[i]]) {\\n                s.upgradeParam.selectorsRemoved[i].push(existingSelectors[i]);\\n            }\\n\\n            if (s.upgradeParam.selectorsRemoved[i].length > 0) {\\n                IDiamondCut.FacetCut memory facetCut;\\n                facetCut.functionSelectors = s.upgradeParam.selectorsRemoved[i];\\n                facetCut.facetAddress = address(0);\\n                facetCut.action = IDiamondCut.FacetCutAction.Remove;\\n\\n                facetCuts[s.upgradeParam.facetCutSize[msg.sender]] = facetCut;\\n                s.upgradeParam.facetCutSize[msg.sender]++;\\n\\n                // clean storage right away\\n                delete s.upgradeParam.selectorsRemoved[i];\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        IDiamondCut.FacetCut[] memory ret = new IDiamondCut.FacetCut[](\\n            s.upgradeParam.facetCutSize[msg.sender]\\n        );\\n        for (uint256 i = 0; i < s.upgradeParam.facetCutSize[msg.sender]; ) {\\n            ret[i] = facetCuts[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        LibAppStorage.cleanUpgradeParam();\\n\\n        return ret;\\n    }\\n\\n    function currentVersion() public view returns (uint256, bytes32) {\\n        uint256 version = LibAppStorage.diamondStorage().currentVersion;\\n        Snapshot memory snapshot = LibAppStorage.diamondStorage().snapshotMap[\\n            version\\n        ];\\n        return (version, computeSnapshotChecksum(snapshot));\\n    }\\n\\n    function isUpToDate(uint256 _version) public view returns (bool) {\\n        return _version == LibAppStorage.diamondStorage().currentVersion;\\n    }\\n}\\n\",\"keccak256\":\"0x0b698d4398ee534118e46cec71e4bf43045a79f9a3d8ab57eca70668446aa503\",\"license\":\"MIT\"},\"contracts/voyage/interfaces/IDiamondVersionFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IDiamondLoupe} from \\\"../../shared/diamond/interfaces/IDiamondLoupe.sol\\\";\\n\\nstruct Snapshot {\\n    IDiamondLoupe.Facet[] facets;\\n    address init; // address of InitDiamondVx\\n    bytes initArgs; // abi encoded args to pass to InitDiamondVX\\n}\\n\\ninterface IDiamondVersionFacet {\\n    // clone should create a fresh Vault with the facets recorded in `Snapshot` of current version\\n    function clone() external returns (address);\\n\\n    // increments `version` and stores snapshot in _snapshotMap\\n    // these must be computed offchain, and called by protocol admin (including init args encoding)\\n    function registerUpgrade(Snapshot memory _snapshot) external;\\n\\n    // return version number and snapshot hash\\n    function currentVersion() external view returns (uint256, bytes32);\\n\\n    function isUpToDate(uint256 _version) external view returns (bool);\\n\\n    // returns the current snapshot\\n    function getSnapshot() external view returns (Snapshot memory);\\n}\\n\",\"keccak256\":\"0x5c117b65f8ef55b62392d0afde91cf0711832ea41e00719d9fb48a3b608189cc\",\"license\":\"MIT\"},\"contracts/voyage/interfaces/IVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IVaultFactory {\\n    function createVault(\\n        address owner,\\n        address voyage,\\n        uint256 version,\\n        bytes32 checksum,\\n        bytes32 salt\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xf63dca9d9d7b27ab560a723d559df3339d7cfcc30cc3f9e6dd46a22009cef7a4\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DSRoles} from \\\"../auth/DSRoles.sol\\\";\\nimport {DSGuard} from \\\"../auth/DSGuard.sol\\\";\\nimport {LibSecurity} from \\\"./LibSecurity.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {Snapshot} from \\\"../interfaces/IDiamondVersionFacet.sol\\\";\\nimport {IVaultFactory} from \\\"../interfaces/IVaultFactory.sol\\\";\\nimport {IDiamondCut} from \\\"../../shared/diamond/interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../../shared/diamond/interfaces/IDiamondLoupe.sol\\\";\\nimport {DiamondCutFacet} from \\\"../../shared/diamond/facets/DiamondCutFacet.sol\\\";\\nimport {IWETH9} from \\\"../../shared/facets/PaymentsFacet.sol\\\";\\n\\nenum Tranche {\\n    JUNIOR,\\n    SENIOR\\n}\\n\\nstruct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    uint256 currentBorrowRate;\\n    //the decimals of the reserve asset\\n    uint256 decimals;\\n    address interestRateStrategyAddress;\\n    address juniorDepositTokenAddress;\\n    address seniorDepositTokenAddress;\\n    uint40 juniorLastUpdateTimestamp;\\n    uint40 seniorLastUpdateTimestamp;\\n    address nftAddress;\\n    address priceOracle;\\n    bool initialized;\\n}\\n\\nstruct ReserveConfigurationMap {\\n    //bit 0-15: liquidation bonus (uint16)\\n    //bit 16-23: decimals (uint8)\\n    //bit 24: reserve is active\\n    //bit 25: reserve is frozen\\n    //bit 26: borrowing is enabled\\n    //bit 27: reserved\\n    //bit 28-63: min margin (uint36)\\n    //bit 64-99: max margin (uint36)\\n    //bit 100-115: margin requirement (uint16)\\n    //bit 116-131: income ratio (uint16)\\n    //bit 132-139: instalment interval (uint8)\\n    //bit 140-155: loan term (uint16)\\n    //bit 156-163: repayment grace period (uint8)\\n    //bit 164-255: unused\\n    uint256 data;\\n}\\n\\nstruct PMT {\\n    uint256 principal;\\n    uint256 interest;\\n    uint256 pmt;\\n}\\n\\nstruct RepaymentData {\\n    uint256 principal;\\n    uint256 interest;\\n    // principal + interest\\n    uint256 total;\\n    uint40 paidAt;\\n    bool isLiquidated;\\n}\\n\\nstruct Loan {\\n    uint256 principal;\\n    uint256 interest;\\n    // the total intended length of the loan in seconds - e.g., 90 days\\n    uint256 term;\\n    // the repayment interval - e.g., 30 days\\n    uint256 epoch;\\n    // number of instalments, term / epoch\\n    uint256 nper;\\n    // the amount to be repaid per instalment (principal + interest)\\n    PMT pmt;\\n    // the borrow rate of this loan\\n    uint256 apr;\\n    uint256 borrowAt;\\n    // next due data\\n    uint256 nextPaymentDue;\\n    // principal paid\\n    uint256 totalPrincipalPaid;\\n    // interest paid\\n    uint256 totalInterestPaid;\\n    RepaymentData[] repayments;\\n    // size pf repayments\\n    uint256 paidTimes;\\n}\\n\\nstruct LoanList {\\n    uint256 head;\\n    uint256 tail;\\n}\\n\\nstruct BorrowData {\\n    uint256 paidLoanNumber;\\n    // next draw down number\\n    uint256 nextLoanNumber;\\n    uint256 totalPrincipal;\\n    uint256 totalInterest;\\n    uint256 mapSize;\\n    mapping(uint256 => Loan) loans;\\n    uint256 totalPaid;\\n    uint256 totalRedeemed;\\n}\\n\\nstruct BorrowState {\\n    uint256 totalDebt;\\n    uint256 totalInterest;\\n    uint256 avgBorrowRate;\\n}\\n\\nstruct VaultConfig {\\n    uint256 minMargin;\\n    uint256 maxMargin;\\n    uint256 marginRequirement;\\n    bool overrideGlobal;\\n}\\n\\nstruct ProtocolFee {\\n    address treasuryAddress;\\n    uint256 cutRatio; // express in Ray\\n}\\n\\nstruct VaultData {\\n    uint256 totalDebt;\\n    LoanList loanList;\\n    uint256 totalMargin;\\n    uint256 withdrawableSecurityDeposit;\\n    uint256 creditLimit;\\n    uint256 spendableBalance;\\n    uint256 gav;\\n    uint256 ltv;\\n    uint256 healthFactor;\\n}\\n\\nstruct Authorisation {\\n    DSRoles rbac;\\n    DSGuard acl;\\n}\\n\\nstruct NFTInfo {\\n    uint256 price;\\n    uint256 timestamp;\\n}\\n\\nstruct ERC721AssetInfo {\\n    address marketplace;\\n    address erc20Addr;\\n}\\n\\nstruct UpgradeParam {\\n    mapping(address => mapping(bytes4 => address)) existingSelectorFacetMap;\\n    mapping(address => bytes4[]) existingSelectors;\\n    mapping(address => mapping(bytes4 => bool)) newSelectorSet;\\n    mapping(address => bytes4[]) newSelectors;\\n    mapping(address => IDiamondCut.FacetCut[]) facetCuts;\\n    mapping(address => uint256) facetCutSize;\\n    mapping(uint256 => bytes4[]) selectorsAdded;\\n    mapping(uint256 => bytes4[]) selectorsReplaced;\\n    mapping(uint256 => bytes4[]) selectorsRemoved;\\n}\\n\\nstruct DiamondFacet {\\n    address diamondCutFacet;\\n    address diamondLoupeFacet;\\n    address ownershipFacet;\\n}\\n\\nstruct AppStorage {\\n    /* -------------------------------- plumbing -------------------------------- */\\n    mapping(bytes32 => address) _addresses;\\n    /* -------------------------------- liquidity ------------------------------- */\\n    UpgradeableBeacon seniorDepositTokenBeacon;\\n    UpgradeableBeacon juniorDepositTokenBeacon;\\n    mapping(address => ReserveData) _reserves;\\n    // List of reserves as a map (reserveId => reserve)\\n    mapping(uint256 => address) _reserveList;\\n    uint16 _reservesCount;\\n    IWETH9 WETH9;\\n    /* ---------------------------------- debt ---------------------------------- */\\n    mapping(address => mapping(address => BorrowData)) _borrowData;\\n    mapping(address => BorrowState) _borrowState;\\n    bool _paused;\\n    /* ---------------------------------- vault --------------------------------- */\\n    UpgradeableBeacon marginEscrowBeacon;\\n    UpgradeableBeacon creditEscrowBeacon;\\n    UpgradeableBeacon subVaultBeacon;\\n    UpgradeableBeacon vaultBeacon;\\n    DiamondFacet diamondFacet;\\n    IVaultFactory vaultFactory;\\n    address[] vaults;\\n    // mapping of vault owner to vault instance address\\n    mapping(address => address) vaultMap;\\n    // mapping of underlying asset to vault configuration\\n    mapping(address => mapping(address => VaultConfig)) vaultConfigMap;\\n    // mapping of marketplace to erc721 address\\n    // for validate onNFTReceived\\n    mapping(address => address) marketPlaceToAsset;\\n    mapping(address => ERC721AssetInfo) erc721AssetInfo;\\n    // erc721 address => token id => nft info\\n    mapping(address => mapping(uint256 => NFTInfo)) nftInfo;\\n    uint256 currentVersion;\\n    mapping(uint256 => Snapshot) snapshotMap;\\n    /* ---------------------------------- security --------------------------------- */\\n    Authorisation auth;\\n    /* --------------------------------- protocol fee ------------------------------ */\\n    ProtocolFee protocolFee;\\n    /* ---------------------------------- helper --------------------------------- */\\n    // mapping of sender address to helper maps, need to clear after computing\\n    UpgradeParam upgradeParam;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function cleanUpgradeParam() internal {\\n        UpgradeParam storage s = diamondStorage().upgradeParam;\\n        for (uint256 i = 0; i < s.existingSelectors[msg.sender].length; ) {\\n            delete s.existingSelectorFacetMap[msg.sender][\\n                s.existingSelectors[msg.sender][i]\\n            ];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        delete s.existingSelectors[msg.sender];\\n\\n        for (uint256 i = 0; i < s.newSelectors[msg.sender].length; ) {\\n            delete s.newSelectorSet[msg.sender][s.newSelectors[msg.sender][i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        delete s.newSelectors[msg.sender];\\n\\n        delete s.facetCuts[msg.sender];\\n        delete s.facetCutSize[msg.sender];\\n    }\\n}\\n\\ncontract Storage is Context {\\n    AppStorage internal s;\\n\\n    modifier whenPaused() {\\n        require(s._paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!s._paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier authorised() {\\n        require(auth(), \\\"call is not authorised\\\");\\n        _;\\n    }\\n\\n    function auth() internal view returns (bool) {\\n        return LibSecurity.isAuthorisedInbound(s.auth, msg.sender, msg.sig);\\n    }\\n\\n    function computeSnapshotChecksum(Snapshot memory snapshot)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        bytes memory data;\\n        for (uint256 i = 0; i < snapshot.facets.length; ) {\\n            IDiamondLoupe.Facet memory facet = snapshot.facets[i];\\n            data = bytes.concat(data, abi.encodePacked(facet.facetAddress));\\n            for (uint256 j = 0; j < facet.functionSelectors.length; j++) {\\n                data = bytes.concat(data, facet.functionSelectors[j]);\\n            }\\n            bytes32 facetCodeHash;\\n            address facetAddress = facet.facetAddress;\\n            assembly {\\n                facetCodeHash := extcodehash(facetAddress)\\n            }\\n            data = bytes.concat(data, facetCodeHash);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return keccak256(data);\\n    }\\n\\n    function diamondCut(address vault) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 currentVersion = s.currentVersion;\\n        Snapshot memory snapshot = s.snapshotMap[currentVersion];\\n        bytes32 checksum = computeSnapshotChecksum(snapshot);\\n        IDiamondCut.FacetCut[] memory facetCuts = new IDiamondCut.FacetCut[](\\n            snapshot.facets.length\\n        );\\n        for (uint256 i = 0; i < snapshot.facets.length; ) {\\n            address facetAddr = snapshot.facets[i].facetAddress;\\n            bytes4[] memory selectors = snapshot.facets[i].functionSelectors;\\n            facetCuts[i].facetAddress = facetAddr;\\n            facetCuts[i].functionSelectors = selectors;\\n            facetCuts[i].action = IDiamondCut.FacetCutAction.Add;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        DiamondCutFacet(vault).diamondCut(\\n            facetCuts,\\n            snapshot.init,\\n            snapshot.initArgs\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4ca64fc43afeeb298cf24b0cf81305f78c6b20ca9e2aac442986337671058645\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibSecurity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {LibAppStorage, AppStorage, Authorisation} from \\\"./LibAppStorage.sol\\\";\\n\\nlibrary LibSecurity {\\n    function isAuthorised(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        return\\n            auth.rbac.canCall(src, dst, selector) ||\\n            auth.acl.canCall(src, dst, selector);\\n    }\\n\\n    function isAuthorisedInbound(\\n        Authorisation storage auth,\\n        address src,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        // s.security.acl/rbac is an instance ds-roles and implements DSAuthority interface\\n        return\\n            auth.rbac.canCall(src, address(this), selector) ||\\n            auth.acl.canCall(src, address(this), selector);\\n    }\\n\\n    function isAuthorisedOutbound(\\n        Authorisation storage auth,\\n        address dst,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        // s.security.acl/rbac is an instance ds-guard and implements DSAuthority interface\\n        return\\n            auth.rbac.canCall(msg.sender, dst, selector) ||\\n            auth.acl.canCall(msg.sender, dst, selector);\\n    }\\n\\n    // role can be a enum, but cast to uint8 before calling grantRole\\n    function grantRole(\\n        Authorisation storage auth,\\n        address user,\\n        uint8 role,\\n        bool enabled\\n    ) internal {\\n        // grant role\\n        auth.rbac.setUserRole(user, role, enabled);\\n    }\\n\\n    function grantRolePermission(\\n        Authorisation storage auth,\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) internal {\\n        // give a role a permission\\n        auth.rbac.setRoleCapability(role, target, sig, true);\\n    }\\n\\n    function revokeRolePermission(\\n        Authorisation storage auth,\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) internal {\\n        // revoke a role permission\\n        auth.rbac.setRoleCapability(role, target, sig, false);\\n    }\\n\\n    function grantPermissions(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4[] memory sig\\n    ) internal {\\n        for (uint256 i = 0; i < sig.length; i++) {\\n            grantPermission(auth, src, dst, sig[i]);\\n        }\\n    }\\n\\n    function grantPermission(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) internal {\\n        // allow src to call dst.sig\\n        auth.acl.permit(src, dst, sig);\\n    }\\n\\n    function revokePermission(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) internal {\\n        auth.acl.forbid(src, dst, sig);\\n    }\\n}\\n\",\"keccak256\":\"0x4ca4a6b133cc63ed12705db3fb8c6d166fc394ca9be53743c6857502077fd029\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611c20806100206000396000f3fe6080604052600436106100225760003560e01c80631459457a146100e857610029565b3661002957005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6020819052604082205490919082906001600160a01b0316806100c45760405162461bcd60e51b815260206004820181905260248201527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f7420657869737460448201526064015b60405180910390fd5b3660008037600080366000845af43d6000803e8080156100e3573d6000f35b3d6000fd5b3480156100f457600080fd5b506101086101033660046118c4565b61010a565b005b600061011660016101c5565b9050801561012e576000805461ff0019166101001790555b600180546001600160a01b0380891673ffffffffffffffffffffffffffffffffffffffff199283161790925560028054928816929091169190911790556101778685858561031c565b80156101bd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b60008054610100900460ff1615610262578160ff1660011480156101e85750303b155b61025a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016100bb565b506000919050565b60005460ff8084169116106102df5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016100bb565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b919050565b61032584610336565b6103308383836103d8565b50505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b038481169182179093556040517fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c939092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60408051600380825260808201909252600091816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816103f05750506040805160018082528183019092529192506000919060208083019080368337019050509050631f931c1c60e01b8160008151811061045f5761045f611929565b6001600160e01b031990921660209283029190910182015260408051606081019091526001600160a01b03871681529081016000815260200182815250826000815181106104af576104af611929565b602090810291909101015260408051600580825260c0820190925290816020016020820280368337019050509050637a0ed62760e01b816000815181106104f8576104f8611929565b6001600160e01b03199092166020928302919091019091015280517fadfca15e00000000000000000000000000000000000000000000000000000000908290600190811061054857610548611929565b6001600160e01b03199092166020928302919091019091015280517f52ef6b2c00000000000000000000000000000000000000000000000000000000908290600290811061059857610598611929565b6001600160e01b03199092166020928302919091019091015280517fcdffacc60000000000000000000000000000000000000000000000000000000090829060039081106105e8576105e8611929565b6001600160e01b03199092166020928302919091019091015280517f01ffc9a700000000000000000000000000000000000000000000000000000000908290600490811061063857610638611929565b6001600160e01b031990921660209283029190910182015260408051606081019091526001600160a01b038616815290810160008152602001828152508260018151811061068857610688611929565b6020908102919091010152604080516002808252606082019092529081602001602082028036833701905050905063f2fde38b60e01b816000815181106106d1576106d1611929565b6001600160e01b03199092166020928302919091019091015280517f8da5cb5b00000000000000000000000000000000000000000000000000000000908290600190811061072157610721611929565b6001600160e01b031990921660209283029190910182015260408051606081019091526001600160a01b038516815290810160008152602001828152508260028151811061077157610771611929565b60200260200101819052506107978260006040518060200160405280600081525061079e565b5050505050565b60005b835181101561097d5760008482815181106107be576107be611929565b6020026020010151602001519050600060028111156107df576107df61193f565b8160028111156107f1576107f161193f565b14156108405761083b85838151811061080c5761080c611929565b60200260200101516000015186848151811061082a5761082a611929565b6020026020010151604001516109c8565b61096a565b60018160028111156108545761085461193f565b141561089e5761083b85838151811061086f5761086f611929565b60200260200101516000015186848151811061088d5761088d611929565b602002602001015160400151610d11565b60028160028111156108b2576108b261193f565b14156108fc5761083b8583815181106108cd576108cd611929565b6020026020010151600001518684815181106108eb576108eb611929565b60200260200101516040015161108b565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560448201527f74416374696f6e0000000000000000000000000000000000000000000000000060648201526084016100bb565b50806109758161196b565b9150506107a1565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738383836040516109b1939291906119fc565b60405180910390a16109c38282611211565b505050565b6000815111610a3f5760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f2063757400000000000000000000000000000000000000000060648201526084016100bb565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b038316610adc5760405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201527f652061646472657373283029000000000000000000000000000000000000000060648201526084016100bb565b6001600160a01b038316600090815260018201602052604090205461ffff8116610b8b57610b2284604051806060016040528060248152602001611bc760249139611435565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff909616959095179094558454908101855593815291909120909101805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60005b8351811015610797576000848281518110610bab57610bab611929565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b03168015610c515760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c726561647920657869737473000000000000000000000060648201526084016100bb565b6001600160a01b03871660008181526001878101602090815260408084208054938401815584528184206008840401805463ffffffff60079095166004026101000a948502191660e089901c94909402939093179092556001600160e01b031986168352889052902080547fffffffffffffffffffff0000000000000000000000000000000000000000000016909117600160a01b61ffff87160217905583610cf981611b19565b94505050508080610d099061196b565b915050610b8e565b6000815111610d885760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f2063757400000000000000000000000000000000000000000060648201526084016100bb565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b038316610e255760405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201527f652061646472657373283029000000000000000000000000000000000000000060648201526084016100bb565b6001600160a01b038316600090815260018201602052604090205461ffff8116610ed457610e6b84604051806060016040528060248152602001611bc760249139611435565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff909616959095179094558454908101855593815291909120909101805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60005b8351811015610797576000848281518110610ef457610ef4611929565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b03908116908716811415610fa05760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e000000000000000060648201526084016100bb565b610faa8183611456565b6001600160e01b0319821660008181526020878152604080832080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8b16021781556001600160a01b038c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c949094029390931790925593909252879052815473ffffffffffffffffffffffffffffffffffffffff19161790558361107381611b19565b945050505080806110839061196b565b915050610ed7565b60008151116111025760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f2063757400000000000000000000000000000000000000000060648201526084016100bb565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b038316156111a05760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d75737420626520616464726573732830290000000000000000000060648201526084016100bb565b60005b82518110156103305760008382815181106111c0576111c0611929565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b03166111fc8183611456565b505080806112099061196b565b9150506111a3565b6001600160a01b038216611298578051156112945760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527f3029206275745f63616c6c64617461206973206e6f7420656d7074790000000060648201526084016100bb565b5050565b600081511161130f5760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f74206164647265737328302900000060648201526084016100bb565b6001600160a01b03821630146113415761134182604051806060016040528060288152602001611b9f60289139611435565b600080836001600160a01b03168360405161135c9190611b3b565b600060405180830381855af49150503d8060008114611397576040519150601f19603f3d011682016040523d82523d6000602084013e61139c565b606091505b509150915081610330578051156113c7578060405162461bcd60e51b81526004016100bb9190611b57565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e20726560448201527f766572746564000000000000000000000000000000000000000000000000000060648201526084016100bb565b813b81816103305760405162461bcd60e51b81526004016100bb9190611b57565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b0383166114f35760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e277420657869737400000000000000000060648201526084016100bb565b6001600160a01b0383163014156115725760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201527f7461626c652066756e6374696f6e00000000000000000000000000000000000060648201526084016100bb565b6001600160e01b03198216600090815260208281526040808320546001600160a01b0387168452600180860190935290832054600160a01b90910461ffff1692916115bc91611b71565b90508082146116c2576001600160a01b038516600090815260018401602052604081208054839081106115f1576115f1611929565b600091825260208083206008830401546001600160a01b038a168452600188019091526040909220805460079092166004026101000a90920460e01b92508291908590811061164257611642611929565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528490526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8516021790555b6001600160a01b038516600090815260018401602052604090208054806116eb576116eb611b88565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319861682528490526040902080547fffffffffffffffffffff000000000000000000000000000000000000000000001690558061079757600283015460009061176f90600190611b71565b6001600160a01b038716600090815260018087016020526040909120015490915061ffff1680821461183b5760008560020183815481106117b2576117b2611929565b6000918252602090912001546002870180546001600160a01b0390921692508291849081106117e3576117e3611929565b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0394851617905592909116815260018781019092526040902001805461ffff191661ffff83161790555b8460020180548061184e5761184e611b88565b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b03891682526001878101909152604090912001805461ffff1916905550505050505050565b80356001600160a01b038116811461031757600080fd5b600080600080600060a086880312156118dc57600080fd5b6118e5866118ad565b94506118f3602087016118ad565b9350611901604087016118ad565b925061190f606087016118ad565b915061191d608087016118ad565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561197f5761197f611955565b5060010190565b60005b838110156119a1578181015183820152602001611989565b838111156103305750506000910152565b600081518084526119ca816020860160208601611986565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b84811015611ae9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808a850301865281518885016001600160a01b0382511686528482015160038110611a8857634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015611ad45783516001600160e01b0319168252928601926001929092019190860190611aaa565b50978501979550505090820190600101611a25565b50506001600160a01b038a16908801528681036040880152611b0b81896119b2565b9a9950505050505050505050565b600061ffff80831681811415611b3157611b31611955565b6001019392505050565b60008251611b4d818460208701611986565b9190910192915050565b602081526000611b6a60208301846119b2565b9392505050565b600082821015611b8357611b83611955565b500390565b634e487b7160e01b600052603160045260246000fdfe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a2646970667358221220f725f40f8195143a1417d5c8869ac502e3f1935c21734805c08ea86ff530c98864736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100225760003560e01c80631459457a146100e857610029565b3661002957005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6020819052604082205490919082906001600160a01b0316806100c45760405162461bcd60e51b815260206004820181905260248201527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f7420657869737460448201526064015b60405180910390fd5b3660008037600080366000845af43d6000803e8080156100e3573d6000f35b3d6000fd5b3480156100f457600080fd5b506101086101033660046118c4565b61010a565b005b600061011660016101c5565b9050801561012e576000805461ff0019166101001790555b600180546001600160a01b0380891673ffffffffffffffffffffffffffffffffffffffff199283161790925560028054928816929091169190911790556101778685858561031c565b80156101bd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b60008054610100900460ff1615610262578160ff1660011480156101e85750303b155b61025a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016100bb565b506000919050565b60005460ff8084169116106102df5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016100bb565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b919050565b61032584610336565b6103308383836103d8565b50505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b038481169182179093556040517fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c939092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60408051600380825260808201909252600091816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816103f05750506040805160018082528183019092529192506000919060208083019080368337019050509050631f931c1c60e01b8160008151811061045f5761045f611929565b6001600160e01b031990921660209283029190910182015260408051606081019091526001600160a01b03871681529081016000815260200182815250826000815181106104af576104af611929565b602090810291909101015260408051600580825260c0820190925290816020016020820280368337019050509050637a0ed62760e01b816000815181106104f8576104f8611929565b6001600160e01b03199092166020928302919091019091015280517fadfca15e00000000000000000000000000000000000000000000000000000000908290600190811061054857610548611929565b6001600160e01b03199092166020928302919091019091015280517f52ef6b2c00000000000000000000000000000000000000000000000000000000908290600290811061059857610598611929565b6001600160e01b03199092166020928302919091019091015280517fcdffacc60000000000000000000000000000000000000000000000000000000090829060039081106105e8576105e8611929565b6001600160e01b03199092166020928302919091019091015280517f01ffc9a700000000000000000000000000000000000000000000000000000000908290600490811061063857610638611929565b6001600160e01b031990921660209283029190910182015260408051606081019091526001600160a01b038616815290810160008152602001828152508260018151811061068857610688611929565b6020908102919091010152604080516002808252606082019092529081602001602082028036833701905050905063f2fde38b60e01b816000815181106106d1576106d1611929565b6001600160e01b03199092166020928302919091019091015280517f8da5cb5b00000000000000000000000000000000000000000000000000000000908290600190811061072157610721611929565b6001600160e01b031990921660209283029190910182015260408051606081019091526001600160a01b038516815290810160008152602001828152508260028151811061077157610771611929565b60200260200101819052506107978260006040518060200160405280600081525061079e565b5050505050565b60005b835181101561097d5760008482815181106107be576107be611929565b6020026020010151602001519050600060028111156107df576107df61193f565b8160028111156107f1576107f161193f565b14156108405761083b85838151811061080c5761080c611929565b60200260200101516000015186848151811061082a5761082a611929565b6020026020010151604001516109c8565b61096a565b60018160028111156108545761085461193f565b141561089e5761083b85838151811061086f5761086f611929565b60200260200101516000015186848151811061088d5761088d611929565b602002602001015160400151610d11565b60028160028111156108b2576108b261193f565b14156108fc5761083b8583815181106108cd576108cd611929565b6020026020010151600001518684815181106108eb576108eb611929565b60200260200101516040015161108b565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560448201527f74416374696f6e0000000000000000000000000000000000000000000000000060648201526084016100bb565b50806109758161196b565b9150506107a1565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738383836040516109b1939291906119fc565b60405180910390a16109c38282611211565b505050565b6000815111610a3f5760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f2063757400000000000000000000000000000000000000000060648201526084016100bb565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b038316610adc5760405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201527f652061646472657373283029000000000000000000000000000000000000000060648201526084016100bb565b6001600160a01b038316600090815260018201602052604090205461ffff8116610b8b57610b2284604051806060016040528060248152602001611bc760249139611435565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff909616959095179094558454908101855593815291909120909101805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60005b8351811015610797576000848281518110610bab57610bab611929565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b03168015610c515760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c726561647920657869737473000000000000000000000060648201526084016100bb565b6001600160a01b03871660008181526001878101602090815260408084208054938401815584528184206008840401805463ffffffff60079095166004026101000a948502191660e089901c94909402939093179092556001600160e01b031986168352889052902080547fffffffffffffffffffff0000000000000000000000000000000000000000000016909117600160a01b61ffff87160217905583610cf981611b19565b94505050508080610d099061196b565b915050610b8e565b6000815111610d885760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f2063757400000000000000000000000000000000000000000060648201526084016100bb565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b038316610e255760405162461bcd60e51b815260206004820152602c60248201527f4c69624469616d6f6e644375743a204164642066616365742063616e2774206260448201527f652061646472657373283029000000000000000000000000000000000000000060648201526084016100bb565b6001600160a01b038316600090815260018201602052604090205461ffff8116610ed457610e6b84604051806060016040528060248152602001611bc760249139611435565b6002820180546001600160a01b038616600081815260018087016020908152604083208201805461ffff191661ffff909616959095179094558454908101855593815291909120909101805473ffffffffffffffffffffffffffffffffffffffff191690911790555b60005b8351811015610797576000848281518110610ef457610ef4611929565b6020908102919091018101516001600160e01b031981166000908152918690526040909120549091506001600160a01b03908116908716811415610fa05760405162461bcd60e51b815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e000000000000000060648201526084016100bb565b610faa8183611456565b6001600160e01b0319821660008181526020878152604080832080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8b16021781556001600160a01b038c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c949094029390931790925593909252879052815473ffffffffffffffffffffffffffffffffffffffff19161790558361107381611b19565b945050505080806110839061196b565b915050610ed7565b60008151116111025760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f2063757400000000000000000000000000000000000000000060648201526084016100bb565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b038316156111a05760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d75737420626520616464726573732830290000000000000000000060648201526084016100bb565b60005b82518110156103305760008382815181106111c0576111c0611929565b6020908102919091018101516001600160e01b031981166000908152918590526040909120549091506001600160a01b03166111fc8183611456565b505080806112099061196b565b9150506111a3565b6001600160a01b038216611298578051156112945760405162461bcd60e51b815260206004820152603c60248201527f4c69624469616d6f6e644375743a205f696e697420697320616464726573732860448201527f3029206275745f63616c6c64617461206973206e6f7420656d7074790000000060648201526084016100bb565b5050565b600081511161130f5760405162461bcd60e51b815260206004820152603d60248201527f4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d707460448201527f7920627574205f696e6974206973206e6f74206164647265737328302900000060648201526084016100bb565b6001600160a01b03821630146113415761134182604051806060016040528060288152602001611b9f60289139611435565b600080836001600160a01b03168360405161135c9190611b3b565b600060405180830381855af49150503d8060008114611397576040519150601f19603f3d011682016040523d82523d6000602084013e61139c565b606091505b509150915081610330578051156113c7578060405162461bcd60e51b81526004016100bb9190611b57565b60405162461bcd60e51b815260206004820152602660248201527f4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e20726560448201527f766572746564000000000000000000000000000000000000000000000000000060648201526084016100bb565b813b81816103305760405162461bcd60e51b81526004016100bb9190611b57565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6001600160a01b0383166114f35760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e277420657869737400000000000000000060648201526084016100bb565b6001600160a01b0383163014156115725760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201527f7461626c652066756e6374696f6e00000000000000000000000000000000000060648201526084016100bb565b6001600160e01b03198216600090815260208281526040808320546001600160a01b0387168452600180860190935290832054600160a01b90910461ffff1692916115bc91611b71565b90508082146116c2576001600160a01b038516600090815260018401602052604081208054839081106115f1576115f1611929565b600091825260208083206008830401546001600160a01b038a168452600188019091526040909220805460079092166004026101000a90920460e01b92508291908590811061164257611642611929565b600091825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528490526040902080547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff8516021790555b6001600160a01b038516600090815260018401602052604090208054806116eb576116eb611b88565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b0319861682528490526040902080547fffffffffffffffffffff000000000000000000000000000000000000000000001690558061079757600283015460009061176f90600190611b71565b6001600160a01b038716600090815260018087016020526040909120015490915061ffff1680821461183b5760008560020183815481106117b2576117b2611929565b6000918252602090912001546002870180546001600160a01b0390921692508291849081106117e3576117e3611929565b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0394851617905592909116815260018781019092526040902001805461ffff191661ffff83161790555b8460020180548061184e5761184e611b88565b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b03891682526001878101909152604090912001805461ffff1916905550505050505050565b80356001600160a01b038116811461031757600080fd5b600080600080600060a086880312156118dc57600080fd5b6118e5866118ad565b94506118f3602087016118ad565b9350611901604087016118ad565b925061190f606087016118ad565b915061191d608087016118ad565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561197f5761197f611955565b5060010190565b60005b838110156119a1578181015183820152602001611989565b838111156103305750506000910152565b600081518084526119ca816020860160208601611986565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b84811015611ae9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808a850301865281518885016001600160a01b0382511686528482015160038110611a8857634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b80831015611ad45783516001600160e01b0319168252928601926001929092019190860190611aaa565b50978501979550505090820190600101611a25565b50506001600160a01b038a16908801528681036040880152611b0b81896119b2565b9a9950505050505050505050565b600061ffff80831681811415611b3157611b31611955565b6001019392505050565b60008251611b4d818460208701611986565b9190910192915050565b602081526000611b6a60208301846119b2565b9392505050565b600082821015611b8357611b83611955565b500390565b634e487b7160e01b600052603160045260246000fdfe4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465a2646970667358221220f725f40f8195143a1417d5c8869ac502e3f1935c21734805c08ea86ff530c98864736f6c63430008090033",
  "facets": [
    {
      "facetAddress": "0x113385A1e06Dd9c03e6831B1DD26431AAf22A563",
      "functionSelectors": [
        "0x33defb69",
        "0x150b7a02",
        "0x69e9cae1",
        "0x770d782d",
        "0xbff863ec",
        "0x74ee6b62"
      ]
    },
    {
      "facetAddress": "0xc5D46a59155E1cd945c42f6Be4E22446E58EFD09",
      "functionSelectors": [
        "0x07c6a7a1",
        "0x798d2e88",
        "0x41204d88",
        "0x22770dcd",
        "0x5e772441",
        "0xf1c71beb",
        "0xd0048764",
        "0x2ffc918e",
        "0xc85d3c4c",
        "0x1626ba7e",
        "0xf3c058e8",
        "0x15250bb7",
        "0x1ff517ff",
        "0xb94f21c7",
        "0xf9e4745b"
      ]
    },
    {
      "facetAddress": "0x86D49f2E1c190fA4F402b4C7DB686F4eEfd8caa8",
      "functionSelectors": [
        "0x64629f2c"
      ]
    },
    {
      "facetAddress": "0x428f743e74194fD7E8360323e334Fe265e54285b",
      "functionSelectors": [
        "0x11617f45",
        "0xa38e95eb",
        "0xd2c5cf70",
        "0xcdb3ae82",
        "0xd64fec8e",
        "0xbff9fd55"
      ]
    },
    {
      "facetAddress": "0x09Db929742ac3f1ec74400606df7D8Fc018088A5",
      "functionSelectors": [
        "0x564a6c98",
        "0x0261d8a0",
        "0xe74f8239"
      ]
    },
    {
      "facetAddress": "0x4d1053C55982e7903F8b208999B0D7f3b90b97dc",
      "functionSelectors": [
        "0xe1f21c67",
        "0xac9650d8",
        "0xd26aaa3e",
        "0x12210e8a",
        "0xf3995c67",
        "0x4659a494",
        "0xa4a78f0c",
        "0xc2e3140a",
        "0xdf2ab5bb",
        "0x49404b7c",
        "0x3f50fd1f"
      ]
    }
  ],
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}