{
  "address": "0x68665c0228E65c36E647709E78973E8e278d9cC6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "domainValue",
          "type": "bytes"
        }
      ],
      "name": "DomainRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "typeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "typeStr",
          "type": "string"
        }
      ],
      "name": "RequestTypeRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_TYPE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GENERIC_PARAMS",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct IForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "requestTypeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "suffixData",
          "type": "bytes"
        }
      ],
      "name": "_getEncoded",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "domains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct IForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "requestTypeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "suffixData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "ret",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        }
      ],
      "name": "registerDomainSeparator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "typeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "typeSuffix",
          "type": "string"
        }
      ],
      "name": "registerRequestType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "typeHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct IForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "requestTypeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "suffixData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfcd5f81cee69449a241148f16d4fc64a49f0202a7c79b445edfc48efb7a1225f",
  "receipt": {
    "to": null,
    "from": "0x7bB17c9401110D05ec39894334cC9d7721E90688",
    "contractAddress": "0x68665c0228E65c36E647709E78973E8e278d9cC6",
    "transactionIndex": 15,
    "gasUsed": "1234719",
    "logsBloom": "0x
    "blockHash": "0xdfeadc713d0648dac5ca14fead40f6c5d3e2f726287b3e2f68d91610c78e01e3",
    "transactionHash": "0xfcd5f81cee69449a241148f16d4fc64a49f0202a7c79b445edfc48efb7a1225f",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 11372261,
        "transactionHash": "0xfcd5f81cee69449a241148f16d4fc64a49f0202a7c79b445edfc48efb7a1225f",
        "address": "0x68665c0228E65c36E647709E78973E8e278d9cC6",
        "topics": [
          "0x64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb202",
          "0x2510fc5e187085770200b027d9f2cc4b930768f3b2bd81daafb71ffeb53d21c4"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000006d466f72776172645265717565737428616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c2900000000000000000000000000000000000000",
        "logIndex": 28,
        "blockHash": "0xdfeadc713d0648dac5ca14fead40f6c5d3e2f726287b3e2f68d91610c78e01e3"
      }
    ],
    "blockNumber": 11372261,
    "cumulativeGasUsed": "2311298",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "808eb555f3462e9f060c1dc4b4af58db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"domainValue\",\"type\":\"bytes\"}],\"name\":\"DomainRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"typeStr\",\"type\":\"string\"}],\"name\":\"RequestTypeRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GENERIC_PARAMS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"requestTypeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"suffixData\",\"type\":\"bytes\"}],\"name\":\"_getEncoded\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestTypeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"suffixData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"registerDomainSeparator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"typeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"typeSuffix\",\"type\":\"string\"}],\"name\":\"registerRequestType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"typeHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestTypeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"suffixData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"registerDomainSeparator(string,string)\":{\"params\":{\"name\":\"the domain's display name\",\"version\":\"the domain/protocol version\"}},\"registerRequestType(string,string)\":{\"params\":{\"typeName\":\"- the name of the request type.\",\"typeSuffix\":\"- any extra data after the generic params.  (must add at least one param. The generic ForwardRequest type is always registered by the constructor)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"registerDomainSeparator(string,string)\":{\"notice\":\"Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value.\"},\"registerRequestType(string,string)\":{\"notice\":\"Register a new Request typehash.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/MockForwarder.sol\":\"MockForwarder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/forwarder/Forwarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./IForwarder.sol\\\";\\n\\ncontract Forwarder is IForwarder {\\n    using ECDSA for bytes32;\\n\\n    string public constant GENERIC_PARAMS = \\\"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntil\\\";\\n\\n    string public constant EIP712_DOMAIN_TYPE = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n\\n    mapping(bytes32 => bool) public typeHashes;\\n    mapping(bytes32 => bool) public domains;\\n\\n    // Nonces of senders, used to prevent replay attacks\\n    mapping(address => uint256) private nonces;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    function getNonce(address from)\\n    public view override\\n    returns (uint256) {\\n        return nonces[from];\\n    }\\n\\n    constructor() {\\n\\n        string memory requestType = string(abi.encodePacked(\\\"ForwardRequest(\\\", GENERIC_PARAMS, \\\")\\\"));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function verify(\\n        ForwardRequest calldata req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig)\\n    external override view {\\n\\n        _verifyNonce(req);\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n    }\\n\\n    function execute(\\n        ForwardRequest calldata req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig\\n    )\\n    external payable\\n    override\\n    returns (bool success, bytes memory ret) {\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n        _verifyAndUpdateNonce(req);\\n\\n        require(req.validUntil == 0 || req.validUntil > block.number, \\\"FWD: request expired\\\");\\n\\n        uint gasForTransfer = 0;\\n        if ( req.value != 0 ) {\\n            gasForTransfer = 40000; //buffer in case we need to move eth after the transaction.\\n        }\\n        bytes memory callData = abi.encodePacked(req.data, req.from);\\n        require(gasleft()*63/64 >= req.gas + gasForTransfer, \\\"FWD: insufficient gas\\\");\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (success,ret) = req.to.call{gas : req.gas, value : req.value}(callData);\\n        if ( req.value != 0 && address(this).balance>0 ) {\\n            // can't fail: req.from signed (off-chain) the request, so it must be an EOA...\\n            payable(req.from).transfer(address(this).balance);\\n        }\\n\\n        return (success,ret);\\n    }\\n\\n\\n    function _verifyNonce(ForwardRequest calldata req) internal view {\\n        require(nonces[req.from] == req.nonce, \\\"FWD: nonce mismatch\\\");\\n    }\\n\\n    function _verifyAndUpdateNonce(ForwardRequest calldata req) internal {\\n        require(nonces[req.from]++ == req.nonce, \\\"FWD: nonce mismatch\\\");\\n    }\\n\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external override {\\n\\n        for (uint i = 0; i < bytes(typeName).length; i++) {\\n            bytes1 c = bytes(typeName)[i];\\n            require(c != \\\"(\\\" && c != \\\")\\\", \\\"FWD: invalid typename\\\");\\n        }\\n\\n        string memory requestType = string(abi.encodePacked(typeName, \\\"(\\\", GENERIC_PARAMS, \\\",\\\", typeSuffix));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    function registerDomainSeparator(string calldata name, string calldata version) external override {\\n        uint256 chainId;\\n        /* solhint-disable-next-line no-inline-assembly */\\n        assembly { chainId := chainid() }\\n\\n        bytes memory domainValue = abi.encode(\\n            keccak256(bytes(EIP712_DOMAIN_TYPE)),\\n            keccak256(bytes(name)),\\n            keccak256(bytes(version)),\\n            chainId,\\n            address(this));\\n\\n        bytes32 domainHash = keccak256(domainValue);\\n\\n        domains[domainHash] = true;\\n        emit DomainRegistered(domainHash, domainValue);\\n    }\\n\\n    function registerRequestTypeInternal(string memory requestType) internal {\\n\\n        bytes32 requestTypehash = keccak256(bytes(requestType));\\n        typeHashes[requestTypehash] = true;\\n        emit RequestTypeRegistered(requestTypehash, requestType);\\n    }\\n\\n    function _verifySig(\\n        ForwardRequest calldata req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig)\\n    internal\\n    view\\n    {\\n        require(domains[domainSeparator], \\\"FWD: unregistered domain sep.\\\");\\n        require(typeHashes[requestTypeHash], \\\"FWD: unregistered typehash\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\", domainSeparator,\\n                keccak256(_getEncoded(req, requestTypeHash, suffixData))\\n            ));\\n        require(digest.recover(sig) == req.from, \\\"FWD: signature mismatch\\\");\\n    }\\n\\n    function _getEncoded(\\n        ForwardRequest calldata req,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData\\n    )\\n    public\\n    pure\\n    returns (\\n        bytes memory\\n    ) {\\n        // we use encodePacked since we append suffixData as-is, not as dynamic param.\\n        // still, we must make sure all first params are encoded as abi.encode()\\n        // would encode them - as 256-bit-wide params.\\n        return abi.encodePacked(\\n            requestTypeHash,\\n            uint256(uint160(req.from)),\\n            uint256(uint160(req.to)),\\n            req.value,\\n            req.gas,\\n            req.nonce,\\n            keccak256(req.data),\\n            req.validUntil,\\n            suffixData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf2702540380e0827b1b5926be806df8d698bb16f5c3c8e48b284249be65eb1dd\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/forwarder/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IForwarder {\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n        uint256 validUntil;\\n    }\\n\\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\\n\\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\\n\\n    function getNonce(address from)\\n    external view\\n    returns(uint256);\\n\\n    /**\\n     * verify the transaction would execute.\\n     * validate the signature and the nonce of the request.\\n     * revert if either signature or nonce are incorrect.\\n     * also revert if domainSeparator or requestTypeHash are not registered.\\n     */\\n    function verify(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * execute a transaction\\n     * @param forwardRequest - all transaction parameters\\n     * @param domainSeparator - domain used when signing this request\\n     * @param requestTypeHash - request type used when signing this request.\\n     * @param suffixData - the extension data used when signing this request.\\n     * @param signature - signature to validate.\\n     *\\n     * the transaction is verified, and then executed.\\n     * the success and ret of \\\"call\\\" are returned.\\n     * This method would revert only verification errors. target errors\\n     * are reported using the returned \\\"success\\\" and ret string\\n     */\\n    function execute(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    )\\n    external payable\\n    returns (bool success, bytes memory ret);\\n\\n    /**\\n     * Register a new Request typehash.\\n     * @param typeName - the name of the request type.\\n     * @param typeSuffix - any extra data after the generic params.\\n     *  (must add at least one param. The generic ForwardRequest type is always registered by the constructor)\\n     */\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\\n\\n    /**\\n     * Register a new domain separator.\\n     * The domain separator must have the following fields: name,version,chainId, verifyingContract.\\n     * the chainId is the current network's chainId, and the verifyingContract is this forwarder.\\n     * This method is given the domain name and version to create and register the domain separator value.\\n     * @param name the domain's display name\\n     * @param version the domain/protocol version\\n     */\\n    function registerDomainSeparator(string calldata name, string calldata version) external;\\n}\\n\",\"keccak256\":\"0xca05fe8ee1d0bbdd9edd83f16b8481fa67704f0ed5a42d5c0f76c8a3a47d73f4\",\"license\":\"GPL-3.0-only\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481\",\"license\":\"MIT\"},\"contracts/mock/MockForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\nimport {Forwarder} from \\\"@opengsn/contracts/src/forwarder/Forwarder.sol\\\";\\n\\ncontract MockForwarder is Forwarder {}\\n\",\"keccak256\":\"0xd68303379778c7e94763194036f54b8232b0e127485538b84248e3eece880f7a\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060006040518060800160405280605d815260200162001660605d9139604051602001620000409190620000fb565b60408051601f1981840301815291905290506200005d8162000064565b5062000174565b8051602080830191909120600081815291829052604091829020805460ff19166001179055905181907f64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb20290620000bc9085906200013f565b60405180910390a25050565b60005b83811015620000e5578181015183820152602001620000cb565b83811115620000f5576000848401525b50505050565b6e08cdee4eec2e4c8a4cae2eacae6e85608b1b8152600082516200012781600f850160208701620000c8565b602960f81b600f939091019283015250601001919050565b602081526000825180602084015262000160816040850160208701620000c8565b601f01601f19169190910160400192915050565b6114dc80620001846000396000f3fe6080604052600436106100b55760003560e01c8063c3f28abd11610069578063d9210be51161004e578063d9210be5146101f7578063e024dc7f14610217578063e2b62f2d1461023857600080fd5b8063c3f28abd146101b2578063c722f177146101c757600080fd5b80632d0335ab1161009a5780632d0335ab1461012c5780639c7b459214610170578063ad9f99c71461019257600080fd5b8063066a310c146100c157806321fe98df146100ec57600080fd5b366100bc57005b600080fd5b3480156100cd57600080fd5b506100d6610258565b6040516100e39190610f57565b60405180910390f35b3480156100f857600080fd5b5061011c610107366004610f71565b60006020819052908152604090205460ff1681565b60405190151581526020016100e3565b34801561013857600080fd5b50610162610147366004610f8a565b6001600160a01b031660009081526002602052604090205490565b6040519081526020016100e3565b34801561017c57600080fd5b5061019061018b366004610ff5565b610274565b005b34801561019e57600080fd5b506101906101ad366004611079565b61036b565b3480156101be57600080fd5b506100d661038c565b3480156101d357600080fd5b5061011c6101e2366004610f71565b60016020526000908152604090205460ff1681565b34801561020357600080fd5b50610190610212366004610ff5565b6103a8565b61022a610225366004611079565b61051b565b6040516100e3929190611121565b34801561024457600080fd5b506100d6610253366004611144565b610743565b6040518060800160405280605d81526020016113f8605d913981565b60004690506000604051806080016040528060528152602001611455605291398051906020012086866040516102ab92919061119b565b604051809103902085856040516102c392919061119b565b6040805191829003822060208301949094528101919091526060810191909152608081018390523060a082015260c00160408051601f198184030181528282528051602080830191909120600081815260019283905293909320805460ff1916909117905592509081907f4bc68689cbe89a4a6333a3ab0a70093874da3e5bfb71e93102027f3f073687d89061035a908590610f57565b60405180910390a250505050505050565b610374876107dd565b61038387878787878787610864565b50505050505050565b6040518060800160405280605281526020016114556052913981565b60005b838110156104c65760008585838181106103c7576103c76111ab565b909101357fff00000000000000000000000000000000000000000000000000000000000000169150507f2800000000000000000000000000000000000000000000000000000000000000811480159061046257507f29000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821614155b6104b35760405162461bcd60e51b815260206004820152601560248201527f4657443a20696e76616c696420747970656e616d65000000000000000000000060448201526064015b60405180910390fd5b50806104be816111d7565b9150506103ab565b50600084846040518060800160405280605d81526020016113f8605d913985856040516020016104fa9594939291906111f2565b604051602081830303815290604052905061051481610a47565b5050505050565b6000606061052e89898989898989610864565b61053789610aa9565b60c0890135158061054b5750438960c00135115b6105975760405162461bcd60e51b815260206004820152601460248201527f4657443a2072657175657374206578706972656400000000000000000000000060448201526064016104aa565b600060408a0135156105a85750619c405b60006105b760a08c018c61127c565b6105c460208e018e610f8a565b6040516020016105d6939291906112e1565b60408051601f1981840301815291905290506105f68260608d013561131a565b60405a61060490603f611332565b61060e9190611351565b101561065c5760405162461bcd60e51b815260206004820152601560248201527f4657443a20696e73756666696369656e7420676173000000000000000000000060448201526064016104aa565b61066c60408c0160208d01610f8a565b6001600160a01b03168b606001358c604001358360405161068d9190611373565b600060405180830381858888f193505050503d80600081146106cb576040519150601f19603f3d011682016040523d82523d6000602084013e6106d0565b606091505b50909450925060408b0135158015906106e95750600047115b15610735576106fb60208c018c610f8a565b6001600160a01b03166108fc479081150290604051600060405180830381858888f19350505050158015610733573d6000803e3d6000fd5b505b505097509795505050505050565b6060836107536020870187610f8a565b6001600160a01b031661076c6040880160208901610f8a565b6001600160a01b03166040880135606089013560808a013561079160a08c018c61127c565b60405161079f92919061119b565b6040519081900381206107c49796959493929160c08e0135908c908c9060200161138f565b6040516020818303038152906040529050949350505050565b6080810135600260006107f36020850185610f8a565b6001600160a01b03166001600160a01b0316815260200190815260200160002054146108615760405162461bcd60e51b815260206004820152601360248201527f4657443a206e6f6e6365206d69736d617463680000000000000000000000000060448201526064016104aa565b50565b60008681526001602052604090205460ff166108c25760405162461bcd60e51b815260206004820152601d60248201527f4657443a20756e7265676973746572656420646f6d61696e207365702e00000060448201526064016104aa565b60008581526020819052604090205460ff166109205760405162461bcd60e51b815260206004820152601a60248201527f4657443a20756e7265676973746572656420747970656861736800000000000060448201526064016104aa565b60008661092f89888888610743565b80516020918201206040516109769392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60408051601f198184030181529190528051602091820120915061099c90890189610f8a565b6001600160a01b03166109e784848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508693925050610b379050565b6001600160a01b031614610a3d5760405162461bcd60e51b815260206004820152601760248201527f4657443a207369676e6174757265206d69736d6174636800000000000000000060448201526064016104aa565b5050505050505050565b8051602080830191909120600081815291829052604091829020805460ff19166001179055905181907f64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb20290610a9d908590610f57565b60405180910390a25050565b608081013560026000610abf6020850185610f8a565b6001600160a01b0316815260208101919091526040016000908120805491610ae6836111d7565b91905055146108615760405162461bcd60e51b815260206004820152601360248201527f4657443a206e6f6e6365206d69736d617463680000000000000000000000000060448201526064016104aa565b6000806000610b468585610b5b565b91509150610b5381610bcb565b509392505050565b600080825160411415610b925760208301516040840151606085015160001a610b8687828585610dbc565b94509450505050610bc4565b825160401415610bbc5760208301516040840151610bb1868383610ea9565b935093505050610bc4565b506000905060025b9250929050565b6000816004811115610bdf57610bdf6113e1565b1415610be85750565b6001816004811115610bfc57610bfc6113e1565b1415610c4a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104aa565b6002816004811115610c5e57610c5e6113e1565b1415610cac5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104aa565b6003816004811115610cc057610cc06113e1565b1415610d345760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104aa565b6004816004811115610d4857610d486113e1565b14156108615760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104aa565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610df35750600090506003610ea0565b8460ff16601b14158015610e0b57508460ff16601c14155b15610e1c5750600090506004610ea0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610e70573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e9957600060019250925050610ea0565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681610edf60ff86901c601b61131a565b9050610eed87828885610dbc565b935093505050935093915050565b60005b83811015610f16578181015183820152602001610efe565b83811115610f25576000848401525b50505050565b60008151808452610f43816020860160208601610efb565b601f01601f19169290920160200192915050565b602081526000610f6a6020830184610f2b565b9392505050565b600060208284031215610f8357600080fd5b5035919050565b600060208284031215610f9c57600080fd5b81356001600160a01b0381168114610f6a57600080fd5b60008083601f840112610fc557600080fd5b50813567ffffffffffffffff811115610fdd57600080fd5b602083019150836020828501011115610bc457600080fd5b6000806000806040858703121561100b57600080fd5b843567ffffffffffffffff8082111561102357600080fd5b61102f88838901610fb3565b9096509450602087013591508082111561104857600080fd5b5061105587828801610fb3565b95989497509550505050565b600060e0828403121561107357600080fd5b50919050565b600080600080600080600060a0888a03121561109457600080fd5b873567ffffffffffffffff808211156110ac57600080fd5b6110b88b838c01611061565b985060208a0135975060408a0135965060608a01359150808211156110dc57600080fd5b6110e88b838c01610fb3565b909650945060808a013591508082111561110157600080fd5b5061110e8a828b01610fb3565b989b979a50959850939692959293505050565b821515815260406020820152600061113c6040830184610f2b565b949350505050565b6000806000806060858703121561115a57600080fd5b843567ffffffffffffffff8082111561117257600080fd5b61117e88838901611061565b955060208701359450604087013591508082111561104857600080fd5b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156111eb576111eb6111c1565b5060010190565b848682376000858201600081527f280000000000000000000000000000000000000000000000000000000000000081528551611235816001840160208a01610efb565b7f2c00000000000000000000000000000000000000000000000000000000000000600192909101918201528385600283013760009301600201928352509095945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126112b157600080fd5b83018035915067ffffffffffffffff8211156112cc57600080fd5b602001915036819003821315610bc457600080fd5b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b6000821982111561132d5761132d6111c1565b500190565b600081600019048311821515161561134c5761134c6111c1565b500290565b60008261136e57634e487b7160e01b600052601260045260246000fd5b500490565b60008251611385818460208701610efb565b9190910192915050565b8a81528960208201528860408201528760608201528660808201528560a08201528460c08201528360e082015260006101008385828501376000929093019092019081529a9950505050505050505050565b634e487b7160e01b600052602160045260246000fdfe616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a26469706673582212204041f00c159526362d83408c8bb2ed27c7789bc754586811b360bc25b2a7731464736f6c63430008090033616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c",
  "deployedBytecode": "0x6080604052600436106100b55760003560e01c8063c3f28abd11610069578063d9210be51161004e578063d9210be5146101f7578063e024dc7f14610217578063e2b62f2d1461023857600080fd5b8063c3f28abd146101b2578063c722f177146101c757600080fd5b80632d0335ab1161009a5780632d0335ab1461012c5780639c7b459214610170578063ad9f99c71461019257600080fd5b8063066a310c146100c157806321fe98df146100ec57600080fd5b366100bc57005b600080fd5b3480156100cd57600080fd5b506100d6610258565b6040516100e39190610f57565b60405180910390f35b3480156100f857600080fd5b5061011c610107366004610f71565b60006020819052908152604090205460ff1681565b60405190151581526020016100e3565b34801561013857600080fd5b50610162610147366004610f8a565b6001600160a01b031660009081526002602052604090205490565b6040519081526020016100e3565b34801561017c57600080fd5b5061019061018b366004610ff5565b610274565b005b34801561019e57600080fd5b506101906101ad366004611079565b61036b565b3480156101be57600080fd5b506100d661038c565b3480156101d357600080fd5b5061011c6101e2366004610f71565b60016020526000908152604090205460ff1681565b34801561020357600080fd5b50610190610212366004610ff5565b6103a8565b61022a610225366004611079565b61051b565b6040516100e3929190611121565b34801561024457600080fd5b506100d6610253366004611144565b610743565b6040518060800160405280605d81526020016113f8605d913981565b60004690506000604051806080016040528060528152602001611455605291398051906020012086866040516102ab92919061119b565b604051809103902085856040516102c392919061119b565b6040805191829003822060208301949094528101919091526060810191909152608081018390523060a082015260c00160408051601f198184030181528282528051602080830191909120600081815260019283905293909320805460ff1916909117905592509081907f4bc68689cbe89a4a6333a3ab0a70093874da3e5bfb71e93102027f3f073687d89061035a908590610f57565b60405180910390a250505050505050565b610374876107dd565b61038387878787878787610864565b50505050505050565b6040518060800160405280605281526020016114556052913981565b60005b838110156104c65760008585838181106103c7576103c76111ab565b909101357fff00000000000000000000000000000000000000000000000000000000000000169150507f2800000000000000000000000000000000000000000000000000000000000000811480159061046257507f29000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821614155b6104b35760405162461bcd60e51b815260206004820152601560248201527f4657443a20696e76616c696420747970656e616d65000000000000000000000060448201526064015b60405180910390fd5b50806104be816111d7565b9150506103ab565b50600084846040518060800160405280605d81526020016113f8605d913985856040516020016104fa9594939291906111f2565b604051602081830303815290604052905061051481610a47565b5050505050565b6000606061052e89898989898989610864565b61053789610aa9565b60c0890135158061054b5750438960c00135115b6105975760405162461bcd60e51b815260206004820152601460248201527f4657443a2072657175657374206578706972656400000000000000000000000060448201526064016104aa565b600060408a0135156105a85750619c405b60006105b760a08c018c61127c565b6105c460208e018e610f8a565b6040516020016105d6939291906112e1565b60408051601f1981840301815291905290506105f68260608d013561131a565b60405a61060490603f611332565b61060e9190611351565b101561065c5760405162461bcd60e51b815260206004820152601560248201527f4657443a20696e73756666696369656e7420676173000000000000000000000060448201526064016104aa565b61066c60408c0160208d01610f8a565b6001600160a01b03168b606001358c604001358360405161068d9190611373565b600060405180830381858888f193505050503d80600081146106cb576040519150601f19603f3d011682016040523d82523d6000602084013e6106d0565b606091505b50909450925060408b0135158015906106e95750600047115b15610735576106fb60208c018c610f8a565b6001600160a01b03166108fc479081150290604051600060405180830381858888f19350505050158015610733573d6000803e3d6000fd5b505b505097509795505050505050565b6060836107536020870187610f8a565b6001600160a01b031661076c6040880160208901610f8a565b6001600160a01b03166040880135606089013560808a013561079160a08c018c61127c565b60405161079f92919061119b565b6040519081900381206107c49796959493929160c08e0135908c908c9060200161138f565b6040516020818303038152906040529050949350505050565b6080810135600260006107f36020850185610f8a565b6001600160a01b03166001600160a01b0316815260200190815260200160002054146108615760405162461bcd60e51b815260206004820152601360248201527f4657443a206e6f6e6365206d69736d617463680000000000000000000000000060448201526064016104aa565b50565b60008681526001602052604090205460ff166108c25760405162461bcd60e51b815260206004820152601d60248201527f4657443a20756e7265676973746572656420646f6d61696e207365702e00000060448201526064016104aa565b60008581526020819052604090205460ff166109205760405162461bcd60e51b815260206004820152601a60248201527f4657443a20756e7265676973746572656420747970656861736800000000000060448201526064016104aa565b60008661092f89888888610743565b80516020918201206040516109769392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60408051601f198184030181529190528051602091820120915061099c90890189610f8a565b6001600160a01b03166109e784848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508693925050610b379050565b6001600160a01b031614610a3d5760405162461bcd60e51b815260206004820152601760248201527f4657443a207369676e6174757265206d69736d6174636800000000000000000060448201526064016104aa565b5050505050505050565b8051602080830191909120600081815291829052604091829020805460ff19166001179055905181907f64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb20290610a9d908590610f57565b60405180910390a25050565b608081013560026000610abf6020850185610f8a565b6001600160a01b0316815260208101919091526040016000908120805491610ae6836111d7565b91905055146108615760405162461bcd60e51b815260206004820152601360248201527f4657443a206e6f6e6365206d69736d617463680000000000000000000000000060448201526064016104aa565b6000806000610b468585610b5b565b91509150610b5381610bcb565b509392505050565b600080825160411415610b925760208301516040840151606085015160001a610b8687828585610dbc565b94509450505050610bc4565b825160401415610bbc5760208301516040840151610bb1868383610ea9565b935093505050610bc4565b506000905060025b9250929050565b6000816004811115610bdf57610bdf6113e1565b1415610be85750565b6001816004811115610bfc57610bfc6113e1565b1415610c4a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104aa565b6002816004811115610c5e57610c5e6113e1565b1415610cac5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104aa565b6003816004811115610cc057610cc06113e1565b1415610d345760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104aa565b6004816004811115610d4857610d486113e1565b14156108615760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104aa565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610df35750600090506003610ea0565b8460ff16601b14158015610e0b57508460ff16601c14155b15610e1c5750600090506004610ea0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610e70573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e9957600060019250925050610ea0565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681610edf60ff86901c601b61131a565b9050610eed87828885610dbc565b935093505050935093915050565b60005b83811015610f16578181015183820152602001610efe565b83811115610f25576000848401525b50505050565b60008151808452610f43816020860160208601610efb565b601f01601f19169290920160200192915050565b602081526000610f6a6020830184610f2b565b9392505050565b600060208284031215610f8357600080fd5b5035919050565b600060208284031215610f9c57600080fd5b81356001600160a01b0381168114610f6a57600080fd5b60008083601f840112610fc557600080fd5b50813567ffffffffffffffff811115610fdd57600080fd5b602083019150836020828501011115610bc457600080fd5b6000806000806040858703121561100b57600080fd5b843567ffffffffffffffff8082111561102357600080fd5b61102f88838901610fb3565b9096509450602087013591508082111561104857600080fd5b5061105587828801610fb3565b95989497509550505050565b600060e0828403121561107357600080fd5b50919050565b600080600080600080600060a0888a03121561109457600080fd5b873567ffffffffffffffff808211156110ac57600080fd5b6110b88b838c01611061565b985060208a0135975060408a0135965060608a01359150808211156110dc57600080fd5b6110e88b838c01610fb3565b909650945060808a013591508082111561110157600080fd5b5061110e8a828b01610fb3565b989b979a50959850939692959293505050565b821515815260406020820152600061113c6040830184610f2b565b949350505050565b6000806000806060858703121561115a57600080fd5b843567ffffffffffffffff8082111561117257600080fd5b61117e88838901611061565b955060208701359450604087013591508082111561104857600080fd5b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156111eb576111eb6111c1565b5060010190565b848682376000858201600081527f280000000000000000000000000000000000000000000000000000000000000081528551611235816001840160208a01610efb565b7f2c00000000000000000000000000000000000000000000000000000000000000600192909101918201528385600283013760009301600201928352509095945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126112b157600080fd5b83018035915067ffffffffffffffff8211156112cc57600080fd5b602001915036819003821315610bc457600080fd5b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b6000821982111561132d5761132d6111c1565b500190565b600081600019048311821515161561134c5761134c6111c1565b500290565b60008261136e57634e487b7160e01b600052601260045260246000fd5b500490565b60008251611385818460208701610efb565b9190910192915050565b8a81528960208201528860408201528760608201528660808201528560a08201528460c08201528360e082015260006101008385828501376000929093019092019081529a9950505050505050505050565b634e487b7160e01b600052602160045260246000fdfe616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a26469706673582212204041f00c159526362d83408c8bb2ed27c7789bc754586811b360bc25b2a7731464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "registerDomainSeparator(string,string)": {
        "params": {
          "name": "the domain's display name",
          "version": "the domain/protocol version"
        }
      },
      "registerRequestType(string,string)": {
        "params": {
          "typeName": "- the name of the request type.",
          "typeSuffix": "- any extra data after the generic params.  (must add at least one param. The generic ForwardRequest type is always registered by the constructor)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "registerDomainSeparator(string,string)": {
        "notice": "Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value."
      },
      "registerRequestType(string,string)": {
        "notice": "Register a new Request typehash."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1604,
        "contract": "contracts/mock/MockForwarder.sol:MockForwarder",
        "label": "typeHashes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1608,
        "contract": "contracts/mock/MockForwarder.sol:MockForwarder",
        "label": "domains",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1612,
        "contract": "contracts/mock/MockForwarder.sol:MockForwarder",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}