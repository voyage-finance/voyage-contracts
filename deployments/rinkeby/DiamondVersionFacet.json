{
  "address": "0x7e5D93403664D43Db23e549c4Aeef5ef5490abdC",
  "abi": [
    {
      "inputs": [],
      "name": "currentVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "getUpgrade",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "name": "isUpToDate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "initArgs",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "facets",
          "type": "tuple[]"
        }
      ],
      "name": "registerUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe19dad5288d880bd4d99e3b62353401caf671b001d2821c638c1a2ab9bfd760f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7bB17c9401110D05ec39894334cC9d7721E90688",
    "contractAddress": null,
    "transactionIndex": 15,
    "gasUsed": "1723981",
    "logsBloom": "0x
    "blockHash": "0xba173926a7d680a85327695cf138601e56a344d81b4a766ee8bf0ac999c2bd30",
    "transactionHash": "0xe19dad5288d880bd4d99e3b62353401caf671b001d2821c638c1a2ab9bfd760f",
    "logs": [],
    "blockNumber": 11061125,
    "cumulativeGasUsed": "6029324",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "64736b687302d4e0a12a155efce9fbfe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"currentVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getUpgrade\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"isUpToDate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initArgs\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets\",\"type\":\"tuple[]\"}],\"name\":\"registerUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voyage/facets/DiamondVersionFacet.sol\":\"DiamondVersionFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/shared/diamond/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0x1ad930b2fb7a485ea9dc992bffe25b7f9ed400accf7eb19e06d0761457b7228d\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x70cec56344b453ec59bcecd3541f711b4f439b5b7e35cc10306b2e82eaa399da\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x5b20558ac0a152f84527227fa50db6f113dd2241992cb8aa9b1a7dbd193c277f\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79ecd45ef37ffd464dd3a612cd046e1b3ec6aed5efd767141c651e539bdee988\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x6fae3084e63b6d8cca55d964865dc45e0c2abf2d0eb8fcd9a3fe7428441bf06a\",\"license\":\"MIT\"},\"contracts/shared/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IERC173} from \\\"../interfaces/IERC173.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    /// @notice Adds default diamond facets\\n    /// @dev This is always called in the Diamond constructor.\\n    /// @param _diamondCutFacet - address of DiamondCutFacet\\n    /// @param _diamondLoupeFacet - address of the DiamondLoupeFacet\\n    /// @param _ownershipFacet - address of the OwnershipFacet\\n    function addDiamondFunctions(\\n        address _diamondCutFacet,\\n        address _diamondLoupeFacet,\\n        address _ownershipFacet\\n    ) internal {\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](3);\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondCutFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        functionSelectors = new bytes4[](5);\\n        functionSelectors[0] = IDiamondLoupe.facets.selector;\\n        functionSelectors[1] = IDiamondLoupe.facetFunctionSelectors.selector;\\n        functionSelectors[2] = IDiamondLoupe.facetAddresses.selector;\\n        functionSelectors[3] = IDiamondLoupe.facetAddress.selector;\\n        functionSelectors[4] = IERC165.supportsInterface.selector;\\n        cut[1] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondLoupeFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        functionSelectors = new bytes4[](2);\\n        functionSelectors[0] = IERC173.transferOwnership.selector;\\n        functionSelectors[1] = IERC173.owner.selector;\\n        cut[2] = IDiamondCut.FacetCut({\\n            facetAddress: _ownershipFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        diamondCut(cut, address(0), \\\"\\\");\\n    }\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // uint16 selectorCount = uint16(diamondStorage().selectors.length);\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(oldFacetAddress, selector);\\n            // add function\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function removeFunction(address _facetAddress, bytes4 _selector) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            ds\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x76c53a3a50ee1b30d116263e1847c80b52f6705f7436d37ba91b0ddcb97657ff\",\"license\":\"MIT\"},\"contracts/shared/facets/PaymentsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {PeripheryPayments} from \\\"../util/PeripheryPayments.sol\\\";\\nimport {Multicall} from \\\"../util/Multicall.sol\\\";\\nimport {SelfPermit} from \\\"../util/SelfPermit.sol\\\";\\nimport {LibAppStorage} from \\\"../../voyage/libraries/LibAppStorage.sol\\\";\\nimport {SafeTransferLib} from \\\"../libraries/SafeTransferLib.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract PaymentsFacet is PeripheryPayments, Multicall, SelfPermit {\\n    using SafeERC20 for IERC20;\\n\\n    function unwrapWETH9(uint256 amountMinimum, address recipient)\\n        public\\n        payable\\n    {\\n        uint256 balanceWETH9 = LibAppStorage.diamondStorage().WETH9.balanceOf(\\n            address(this)\\n        );\\n        require(balanceWETH9 >= amountMinimum, \\\"Insufficient WETH9\\\");\\n\\n        if (balanceWETH9 > 0) {\\n            LibAppStorage.diamondStorage().WETH9.withdraw(balanceWETH9);\\n            SafeTransferLib.safeTransferETH(recipient, balanceWETH9);\\n        }\\n    }\\n\\n    function wrapWETH9() public payable {\\n        if (address(this).balance > 0)\\n            LibAppStorage.diamondStorage().WETH9.deposit{\\n                value: address(this).balance\\n            }(); // wrap everything\\n    }\\n\\n    function sweepToken(\\n        IERC20 token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) public payable {\\n        uint256 balanceToken = token.balanceOf(address(this));\\n        require(balanceToken >= amountMinimum, \\\"Insufficient token\\\");\\n\\n        if (balanceToken > 0) {\\n            token.safeTransfer(recipient, balanceToken);\\n        }\\n    }\\n\\n    function refundETH() external payable {\\n        if (address(this).balance > 0) {\\n            SafeTransferLib.safeTransferETH(msg.sender, address(this).balance);\\n        }\\n    }\\n}\\n\\nabstract contract IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable virtual;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external virtual;\\n}\\n\",\"keccak256\":\"0x20426fcef75bf88895c6b2c37a7a82b7c75718b9243704a1ac3b4623ab061eee\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC20PermitAllowed.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/external/IERC20PermitAllowed.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Interface for permit\\n/// @notice Interface used by DAI/CHAI for permit\\ninterface IERC20PermitAllowed {\\n    /// @notice Approve the spender to spend some tokens via the holder signature\\n    /// @dev This is the permit interface used by DAI and CHAI\\n    /// @param holder The address of the token holder, the token owner\\n    /// @param spender The address of the token spender\\n    /// @param nonce The holder's nonce, increases at each call to permit\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x75199ac09b8a0315f5bb8a4380df57a8443ef496443ab546d017ea6100b699bc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/interfaces/IMulticall.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IMulticall.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data)\\n        external\\n        payable\\n        returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x8437eb20058eb64e08677e6ee16f3299c3d080235a99526374c984687762b69b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/interfaces/ISelfPermit.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISelfPermit.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\ninterface ISelfPermit {\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x935d7c033290c44921175dd13c8dddf8e51057492e665c379058d7bf3ca67125\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\nETH OPERATIONS\\n//////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\nERC20 OPERATIONS\\n//////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0x23b872dd00000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0xa9059cbb00000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0x095ea7b300000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x650ece776cbd21442a5b34775dfe0cd8b76f505ef5e072b198c3e35709b791d7\",\"license\":\"AGPL-3.0-only\"},\"contracts/shared/util/Multicall.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/base/Multicall.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMulticall.sol\\\";\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall {\\n    /// @inheritdoc IMulticall\\n    function multicall(bytes[] calldata data)\\n        public\\n        payable\\n        override\\n        returns (bytes[] memory results)\\n    {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ea37766655ad050a0beca38b517a425be1f52bc165985891edcfcb46e0e7c77\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/util/PeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title Depositor\\n/// @author Voyage Finance\\n/// @notice Forwards calls to ERC-4626 compliant Vaults, but with the actual depositor appended to the encoded call data.\\n/// @dev This does not work if the receiving contract does not implement ERC-4626!\\nabstract contract PeripheryPayments {\\n    using SafeERC20 for IERC20;\\n\\n    function pullToken(\\n        IERC20 token,\\n        uint256 amount,\\n        address from,\\n        address recipient\\n    ) public payable {\\n        token.safeTransferFrom(from, recipient, amount);\\n    }\\n\\n    function approve(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) public payable {\\n        token.safeApprove(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6693bca3a626f4c685bb1c8d9a5812a248c45232e601f9fe1fac80bfd4379a1c\",\"license\":\"AGPL-3.0-only\"},\"contracts/shared/util/SelfPermit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.9;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISelfPermit.sol\\\";\\nimport \\\"../interfaces/IERC20PermitAllowed.sol\\\";\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\\n/// that requires an approval in a single transaction.\\nabstract contract SelfPermit is ISelfPermit {\\n    /// @inheritdoc ISelfPermit\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20Permit(token).permit(\\n            msg.sender,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable override {\\n        if (IERC20(token).allowance(msg.sender, address(this)) < value)\\n            selfPermit(token, value, deadline, v, r, s);\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20PermitAllowed(token).permit(\\n            msg.sender,\\n            address(this),\\n            nonce,\\n            expiry,\\n            true,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable override {\\n        if (\\n            IERC20(token).allowance(msg.sender, address(this)) <\\n            type(uint256).max\\n        ) selfPermitAllowed(token, nonce, expiry, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x456e000cc02654d5e0df6b67960aa8a9c92b4f960ffa5d852e021ece7995bf20\",\"license\":\"AGPL-3.0-only\"},\"contracts/voyage/auth/DSAuth.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// lifted from: https://github.com/dapphub/ds-auth/blob/a51e7caa1f03eeffed66d67f3b38605e0f1f881d/src/auth.sol\\n\\npragma solidity ^0.8.9;\\n\\ninterface DSAuthority {\\n    function canCall(\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) external view returns (bool);\\n}\\n\\ncontract DSAuthEvents {\\n    event LogSetAuthority(address indexed authority);\\n    event LogSetOwner(address indexed owner);\\n}\\n\\ncontract DSAuth is DSAuthEvents {\\n    DSAuthority public authority;\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit LogSetOwner(msg.sender);\\n    }\\n\\n    function setOwner(address owner_) public auth {\\n        owner = owner_;\\n        emit LogSetOwner(owner);\\n    }\\n\\n    function setAuthority(DSAuthority authority_) public auth {\\n        authority = authority_;\\n        emit LogSetAuthority(address(authority));\\n    }\\n\\n    modifier auth() {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"ds-auth-unauthorized\\\");\\n        _;\\n    }\\n\\n    function isAuthorized(address src, bytes4 sig)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else if (authority == DSAuthority(address(0))) {\\n            return false;\\n        } else {\\n            return authority.canCall(src, address(this), sig);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb069264548df428fc3c0489dd970632c1a0b85a8a26bbf7a5b0c01f00d88b75\",\"license\":\"GNU-3\"},\"contracts/voyage/auth/DSGuard.sol\":{\"content\":\"// guard.sol -- simple whitelist implementation of DSAuthority\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// lifted from: https://github.com/dapphub/ds-guard/blob/af05632249f98bf3942b9482c5bf69e8bd45284e/src/guard.sol\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./DSAuth.sol\\\";\\n\\ncontract DSGuardEvents {\\n    event LogPermit(\\n        bytes32 indexed src,\\n        bytes32 indexed dst,\\n        bytes32 indexed sig\\n    );\\n\\n    event LogForbid(\\n        bytes32 indexed src,\\n        bytes32 indexed dst,\\n        bytes32 indexed sig\\n    );\\n}\\n\\ncontract DSGuard is DSAuth, DSAuthority, DSGuardEvents {\\n    bytes32 public constant ANY = bytes32(type(uint256).max);\\n\\n    mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => bool))) acl;\\n\\n    function canCall(\\n        address src_,\\n        address dst_,\\n        bytes4 sig\\n    ) public view returns (bool) {\\n        bytes32 src = bytes32(bytes20(src_));\\n        bytes32 dst = bytes32(bytes20(dst_));\\n\\n        return\\n            acl[src][dst][sig] ||\\n            acl[src][dst][ANY] ||\\n            acl[src][ANY][sig] ||\\n            acl[src][ANY][ANY] ||\\n            acl[ANY][dst][sig] ||\\n            acl[ANY][dst][ANY] ||\\n            acl[ANY][ANY][sig] ||\\n            acl[ANY][ANY][ANY];\\n    }\\n\\n    function permit(\\n        bytes32 src,\\n        bytes32 dst,\\n        bytes32 sig\\n    ) public auth {\\n        acl[src][dst][sig] = true;\\n        emit LogPermit(src, dst, sig);\\n    }\\n\\n    function forbid(\\n        bytes32 src,\\n        bytes32 dst,\\n        bytes32 sig\\n    ) public auth {\\n        acl[src][dst][sig] = false;\\n        emit LogForbid(src, dst, sig);\\n    }\\n\\n    function permit(\\n        address src,\\n        address dst,\\n        bytes32 sig\\n    ) public {\\n        permit(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\\n    }\\n\\n    function forbid(\\n        address src,\\n        address dst,\\n        bytes32 sig\\n    ) public {\\n        forbid(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\\n    }\\n}\\n\\ncontract DSGuardFactory {\\n    mapping(address => bool) public isGuard;\\n\\n    function newGuard() public returns (DSGuard guard) {\\n        guard = new DSGuard();\\n        guard.setOwner(msg.sender);\\n        isGuard[address(guard)] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x1c08eb21a713823b838ceed6275d138a6e62fd425094d3d089980697cd94264a\"},\"contracts/voyage/auth/DSRoles.sol\":{\"content\":\"// roles.sol - roled based authentication\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// forked from: https://github.com/dapphub/ds-roles/blob/53d56949c0f98c9b5909df9c0d95025b67f3bb75/src/roles.sol\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./DSAuth.sol\\\";\\n\\ncontract DSRoles is DSAuth, DSAuthority {\\n    mapping(address => bool) _root_users;\\n    mapping(address => bytes32) _user_roles;\\n    mapping(address => mapping(bytes4 => bytes32)) _capability_roles;\\n    mapping(address => mapping(bytes4 => bool)) _public_capabilities;\\n\\n    function getUserRoles(address who) public view returns (bytes32) {\\n        return _user_roles[who];\\n    }\\n\\n    function getCapabilityRoles(address code, bytes4 sig)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _capability_roles[code][sig];\\n    }\\n\\n    function isUserRoot(address who) public view returns (bool) {\\n        return _root_users[who];\\n    }\\n\\n    function isCapabilityPublic(address code, bytes4 sig)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _public_capabilities[code][sig];\\n    }\\n\\n    function hasUserRole(address who, uint8 role) public view returns (bool) {\\n        bytes32 roles = getUserRoles(who);\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        return bytes32(0) != roles & shifted;\\n    }\\n\\n    function canCall(\\n        address caller,\\n        address code,\\n        bytes4 sig\\n    ) public view returns (bool) {\\n        if (isUserRoot(caller) || isCapabilityPublic(code, sig)) {\\n            return true;\\n        } else {\\n            bytes32 has_roles = getUserRoles(caller);\\n            bytes32 needs_one_of = getCapabilityRoles(code, sig);\\n            return bytes32(0) != has_roles & needs_one_of;\\n        }\\n    }\\n\\n    function BITNOT(bytes32 input) internal pure returns (bytes32 output) {\\n        return (input ^ bytes32(type(uint256).max));\\n    }\\n\\n    function setRootUser(address who, bool enabled) public auth {\\n        _root_users[who] = enabled;\\n    }\\n\\n    function setUserRole(\\n        address who,\\n        uint8 role,\\n        bool enabled\\n    ) public auth {\\n        bytes32 last_roles = _user_roles[who];\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        if (enabled) {\\n            _user_roles[who] = last_roles | shifted;\\n        } else {\\n            _user_roles[who] = last_roles & BITNOT(shifted);\\n        }\\n    }\\n\\n    function setPublicCapability(\\n        address code,\\n        bytes4 sig,\\n        bool enabled\\n    ) public auth {\\n        _public_capabilities[code][sig] = enabled;\\n    }\\n\\n    function setRoleCapability(\\n        uint8 role,\\n        address code,\\n        bytes4 sig,\\n        bool enabled\\n    ) public auth {\\n        bytes32 last_roles = _capability_roles[code][sig];\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        if (enabled) {\\n            _capability_roles[code][sig] = last_roles | shifted;\\n        } else {\\n            _capability_roles[code][sig] = last_roles & BITNOT(shifted);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x854b2fe5dcb2ab5277a1a1c3a2f97367c4c00f8076f746a88cfbde1eb43b2f15\"},\"contracts/voyage/facets/DiamondVersionFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Snapshot} from \\\"../interfaces/IDiamondVersionFacet.sol\\\";\\nimport {AppStorage, Storage, LibAppStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\nimport {IDiamondLoupe} from \\\"../../shared/diamond/interfaces/IDiamondLoupe.sol\\\";\\nimport {IDiamondCut} from \\\"../../shared/diamond/interfaces/IDiamondCut.sol\\\";\\nimport {DiamondCutFacet} from \\\"../../shared/diamond/facets/DiamondCutFacet.sol\\\";\\n\\ncontract DiamondVersionFacet is Storage {\\n    // increments `version` and stores snapshot in _snapshotMap\\n    // these must be computed offchain, and called by protocol admin (including init args encoding)\\n    function registerUpgrade(\\n        address init,\\n        bytes memory initArgs,\\n        IDiamondLoupe.Facet[] memory facets\\n    ) public authorised {\\n        LibAppStorage.diamondStorage().currentVersion += 1;\\n        uint256 version = LibAppStorage.diamondStorage().currentVersion;\\n        LibAppStorage.diamondStorage().snapshotMap[version].init = init;\\n        LibAppStorage.diamondStorage().snapshotMap[version].initArgs = initArgs;\\n        for (uint256 i = 0; i < facets.length; ) {\\n            LibAppStorage.diamondStorage().snapshotMap[version].facets.push(\\n                facets[i]\\n            );\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function getUpgrade(address _vault)\\n        public\\n        returns (IDiamondCut.FacetCut[] memory)\\n    {\\n        IDiamondCut.FacetCut[] storage facetCuts = s.upgradeParam.facetCuts[\\n            msg.sender\\n        ];\\n        Snapshot memory snapshot = s.snapshotMap[s.currentVersion];\\n        IDiamondLoupe loupe = IDiamondLoupe(_vault);\\n        IDiamondLoupe.Facet[] memory currentFacets = loupe.facets();\\n\\n        mapping(bytes4 => address) storage existingSelectorFacetMap = s\\n            .upgradeParam\\n            .existingSelectorFacetMap[msg.sender];\\n        bytes4[] storage existingSelectors = s.upgradeParam.existingSelectors[\\n            msg.sender\\n        ];\\n\\n        mapping(bytes4 => bool) storage newSelectorSet = s\\n            .upgradeParam\\n            .newSelectorSet[msg.sender];\\n        bytes4[] storage newSelectors = s.upgradeParam.newSelectors[msg.sender];\\n\\n        for (uint256 i = 0; i < currentFacets.length; ) {\\n            IDiamondLoupe.Facet memory facet = currentFacets[i];\\n            for (uint256 j = 0; j < facet.functionSelectors.length; ) {\\n                bytes4 selector = facet.functionSelectors[j];\\n                newSelectors.push(selector);\\n                existingSelectorFacetMap[selector] = facet.facetAddress;\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // at this point, we have to compute which facets to add/replace/delete\\n        // the logic is identical to the deployment script in voyager_001.ts\\n        // first, compute the selectors to add or replace\\n        for (uint256 i = 0; i < snapshot.facets.length; ) {\\n            IDiamondLoupe.Facet memory candidateFacet = snapshot.facets[i];\\n            for (uint256 j = 0; j < candidateFacet.functionSelectors.length; ) {\\n                bytes4 selector = candidateFacet.functionSelectors[j];\\n                // add it to newSelectorSet\\n                newSelectorSet[selector] = true;\\n                address currentHostFacetAddress = existingSelectorFacetMap[\\n                    selector\\n                ];\\n                if (currentHostFacetAddress != address(0)) {\\n                    if (\\n                        currentHostFacetAddress != candidateFacet.facetAddress\\n                    ) {\\n                        s.upgradeParam.selectorsReplaced[i].push(selector);\\n                    }\\n                } else {\\n                    s.upgradeParam.selectorsAdded[i].push(selector);\\n                }\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            if (s.upgradeParam.selectorsAdded[i].length > 0) {\\n                IDiamondCut.FacetCut memory facetCut;\\n                facetCut.functionSelectors = s.upgradeParam.selectorsAdded[i];\\n                facetCut.facetAddress = candidateFacet.facetAddress;\\n                facetCut.action = IDiamondCut.FacetCutAction.Add;\\n\\n                facetCuts[s.upgradeParam.facetCutSize[msg.sender]] = facetCut;\\n                s.upgradeParam.facetCutSize[msg.sender]++;\\n\\n                // clean storage right away\\n                delete s.upgradeParam.selectorsAdded[i];\\n            }\\n\\n            if (s.upgradeParam.selectorsReplaced[i].length > 0) {\\n                IDiamondCut.FacetCut memory facetCut;\\n                facetCut.functionSelectors = s.upgradeParam.selectorsReplaced[\\n                    i\\n                ];\\n                facetCut.facetAddress = candidateFacet.facetAddress;\\n                facetCut.action = IDiamondCut.FacetCutAction.Replace;\\n\\n                facetCuts[s.upgradeParam.facetCutSize[msg.sender]] = facetCut;\\n                s.upgradeParam.facetCutSize[msg.sender]++;\\n\\n                // clean storage right away\\n                delete s.upgradeParam.selectorsReplaced[i];\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // now just get the XOR of existing and new selectors to find the removed set\\n        for (uint256 i = 0; i < existingSelectors.length; ) {\\n            if (!newSelectorSet[existingSelectors[i]]) {\\n                s.upgradeParam.selectorsRemoved[i].push(existingSelectors[i]);\\n            }\\n\\n            if (s.upgradeParam.selectorsRemoved[i].length > 0) {\\n                IDiamondCut.FacetCut memory facetCut;\\n                facetCut.functionSelectors = s.upgradeParam.selectorsRemoved[i];\\n                facetCut.facetAddress = address(0);\\n                facetCut.action = IDiamondCut.FacetCutAction.Remove;\\n\\n                facetCuts[s.upgradeParam.facetCutSize[msg.sender]] = facetCut;\\n                s.upgradeParam.facetCutSize[msg.sender]++;\\n\\n                // clean storage right away\\n                delete s.upgradeParam.selectorsRemoved[i];\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        IDiamondCut.FacetCut[] memory ret = new IDiamondCut.FacetCut[](\\n            s.upgradeParam.facetCutSize[msg.sender]\\n        );\\n        for (uint256 i = 0; i < s.upgradeParam.facetCutSize[msg.sender]; ) {\\n            ret[i] = facetCuts[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        LibAppStorage.cleanUpgradeParam();\\n\\n        return ret;\\n    }\\n\\n    function currentVersion() public view returns (uint256, bytes32) {\\n        uint256 version = LibAppStorage.diamondStorage().currentVersion;\\n        Snapshot memory snapshot = LibAppStorage.diamondStorage().snapshotMap[\\n            version\\n        ];\\n        return (version, computeSnapshotChecksum(snapshot));\\n    }\\n\\n    function isUpToDate(uint256 _version) public view returns (bool) {\\n        return _version == LibAppStorage.diamondStorage().currentVersion;\\n    }\\n}\\n\",\"keccak256\":\"0x0b698d4398ee534118e46cec71e4bf43045a79f9a3d8ab57eca70668446aa503\",\"license\":\"MIT\"},\"contracts/voyage/interfaces/IDiamondVersionFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IDiamondLoupe} from \\\"../../shared/diamond/interfaces/IDiamondLoupe.sol\\\";\\n\\nstruct Snapshot {\\n    IDiamondLoupe.Facet[] facets;\\n    address init; // address of InitDiamondVx\\n    bytes initArgs; // abi encoded args to pass to InitDiamondVX\\n}\\n\\ninterface IDiamondVersionFacet {\\n    // clone should create a fresh Vault with the facets recorded in `Snapshot` of current version\\n    function clone() external returns (address);\\n\\n    // increments `version` and stores snapshot in _snapshotMap\\n    // these must be computed offchain, and called by protocol admin (including init args encoding)\\n    function registerUpgrade(Snapshot memory _snapshot) external;\\n\\n    // return version number and snapshot hash\\n    function currentVersion() external view returns (uint256, bytes32);\\n\\n    function isUpToDate(uint256 _version) external view returns (bool);\\n\\n    // returns the current snapshot\\n    function getSnapshot() external view returns (Snapshot memory);\\n}\\n\",\"keccak256\":\"0x5c117b65f8ef55b62392d0afde91cf0711832ea41e00719d9fb48a3b608189cc\",\"license\":\"MIT\"},\"contracts/voyage/interfaces/IVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IVaultFactory {\\n    function createVault(\\n        address owner,\\n        address voyage,\\n        uint256 version,\\n        bytes32 checksum,\\n        bytes32 salt\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xf63dca9d9d7b27ab560a723d559df3339d7cfcc30cc3f9e6dd46a22009cef7a4\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DSRoles} from \\\"../auth/DSRoles.sol\\\";\\nimport {DSGuard} from \\\"../auth/DSGuard.sol\\\";\\nimport {LibSecurity} from \\\"./LibSecurity.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {Snapshot} from \\\"../interfaces/IDiamondVersionFacet.sol\\\";\\nimport {IVaultFactory} from \\\"../interfaces/IVaultFactory.sol\\\";\\nimport {IDiamondCut} from \\\"../../shared/diamond/interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../../shared/diamond/interfaces/IDiamondLoupe.sol\\\";\\nimport {DiamondCutFacet} from \\\"../../shared/diamond/facets/DiamondCutFacet.sol\\\";\\nimport {IWETH9} from \\\"../../shared/facets/PaymentsFacet.sol\\\";\\n\\nenum Tranche {\\n    JUNIOR,\\n    SENIOR\\n}\\n\\nstruct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    // for calculating overall interested accumulated\\n    // then split it into two indexs base on two allocations\\n    uint256 currentOverallLiquidityRate;\\n    uint256 currentJuniorLiquidityRate;\\n    uint256 currentSeniorLiquidityRate;\\n    uint256 currentBorrowRate;\\n    //the decimals of the reserve asset\\n    uint256 decimals;\\n    address interestRateStrategyAddress;\\n    address juniorDepositTokenAddress;\\n    address seniorDepositTokenAddress;\\n    uint40 juniorLastUpdateTimestamp;\\n    uint40 seniorLastUpdateTimestamp;\\n    address nftAddress;\\n    address priceOracle;\\n    bool initialized;\\n}\\n\\nstruct ReserveConfigurationMap {\\n    //bit 0-15: liquidation bonus (uint16)\\n    //bit 16-23: decimals (uint8)\\n    //bit 24: reserve is active\\n    //bit 25: reserve is frozen\\n    //bit 26: borrowing is enabled\\n    //bit 27: reserved\\n    //bit 28-63: min margin (uint36)\\n    //bit 64-99: max margin (uint36)\\n    //bit 100-115: margin requirement (uint16)\\n    //bit 116-131: income ratio (uint16)\\n    //bit 132-139: instalment interval (uint8)\\n    //bit 140-155: loan term (uint16)\\n    //bit 156-163: repayment grace period (uint8)\\n    //bit 164-255: unused\\n    uint256 data;\\n}\\n\\nstruct PMT {\\n    uint256 principal;\\n    uint256 interest;\\n    uint256 pmt;\\n}\\n\\nstruct RepaymentData {\\n    uint256 principal;\\n    uint256 interest;\\n    // principal + interest\\n    uint256 total;\\n    uint40 paidAt;\\n    bool isLiquidated;\\n}\\n\\nstruct Loan {\\n    uint256 principal;\\n    uint256 interest;\\n    // the total intended length of the loan in seconds - e.g., 90 days\\n    uint256 term;\\n    // the repayment interval - e.g., 30 days\\n    uint256 epoch;\\n    // number of instalments, term / epoch\\n    uint256 nper;\\n    // the amount to be repaid per instalment (principal + interest)\\n    PMT pmt;\\n    // the borrow rate of this loan\\n    uint256 apr;\\n    uint256 borrowAt;\\n    // next due data\\n    uint256 nextPaymentDue;\\n    // principal paid\\n    uint256 totalPrincipalPaid;\\n    // interest paid\\n    uint256 totalInterestPaid;\\n    RepaymentData[] repayments;\\n    // size pf repayments\\n    uint256 paidTimes;\\n}\\n\\nstruct LoanList {\\n    uint256 head;\\n    uint256 tail;\\n}\\n\\nstruct BorrowData {\\n    uint256 paidLoanNumber;\\n    // next draw down number\\n    uint256 nextLoanNumber;\\n    uint256 totalPrincipal;\\n    uint256 totalInterest;\\n    uint256 mapSize;\\n    mapping(uint256 => Loan) loans;\\n    uint256 totalPaid;\\n    uint256 totalRedeemed;\\n}\\n\\nstruct BorrowState {\\n    uint256 totalDebt;\\n    uint256 totalInterest;\\n    uint256 avgBorrowRate;\\n}\\n\\nstruct VaultConfig {\\n    uint256 minMargin;\\n    uint256 maxMargin;\\n    uint256 marginRequirement;\\n    bool overrideGlobal;\\n}\\n\\nstruct ProtocolFee {\\n    address treasuryAddress;\\n    uint256 cutRatio; // express in Ray\\n}\\n\\nstruct VaultData {\\n    uint256 totalDebt;\\n    LoanList loanList;\\n    uint256 totalMargin;\\n    uint256 withdrawableSecurityDeposit;\\n    uint256 creditLimit;\\n    uint256 spendableBalance;\\n    uint256 gav;\\n    uint256 ltv;\\n    uint256 healthFactor;\\n}\\n\\nstruct Authorisation {\\n    DSRoles rbac;\\n    DSGuard acl;\\n}\\n\\nstruct NFTInfo {\\n    uint256 price;\\n    uint256 timestamp;\\n}\\n\\nstruct ERC721AssetInfo {\\n    address marketplace;\\n    address erc20Addr;\\n}\\n\\nstruct UpgradeParam {\\n    mapping(address => mapping(bytes4 => address)) existingSelectorFacetMap;\\n    mapping(address => bytes4[]) existingSelectors;\\n    mapping(address => mapping(bytes4 => bool)) newSelectorSet;\\n    mapping(address => bytes4[]) newSelectors;\\n    mapping(address => IDiamondCut.FacetCut[]) facetCuts;\\n    mapping(address => uint256) facetCutSize;\\n    mapping(uint256 => bytes4[]) selectorsAdded;\\n    mapping(uint256 => bytes4[]) selectorsReplaced;\\n    mapping(uint256 => bytes4[]) selectorsRemoved;\\n}\\n\\nstruct DiamondFacet {\\n    address diamondCutFacet;\\n    address diamondLoupeFacet;\\n    address ownershipFacet;\\n}\\n\\nstruct AppStorage {\\n    /* -------------------------------- plumbing -------------------------------- */\\n    mapping(bytes32 => address) _addresses;\\n    /* -------------------------------- liquidity ------------------------------- */\\n    UpgradeableBeacon seniorDepositTokenBeacon;\\n    UpgradeableBeacon juniorDepositTokenBeacon;\\n    mapping(address => ReserveData) _reserves;\\n    // List of reserves as a map (reserveId => reserve)\\n    mapping(uint256 => address) _reserveList;\\n    uint16 _reservesCount;\\n    IWETH9 WETH9;\\n    /* ---------------------------------- debt ---------------------------------- */\\n    mapping(address => mapping(address => BorrowData)) _borrowData;\\n    mapping(address => BorrowState) _borrowState;\\n    bool _paused;\\n    /* ---------------------------------- vault --------------------------------- */\\n    UpgradeableBeacon marginEscrowBeacon;\\n    UpgradeableBeacon creditEscrowBeacon;\\n    UpgradeableBeacon subVaultBeacon;\\n    UpgradeableBeacon vaultBeacon;\\n    DiamondFacet diamondFacet;\\n    IVaultFactory vaultFactory;\\n    address[] vaults;\\n    // mapping of vault owner to vault instance address\\n    mapping(address => address) vaultMap;\\n    // mapping of underlying asset to vault configuration\\n    mapping(address => mapping(address => VaultConfig)) vaultConfigMap;\\n    // mapping of marketplace to erc721 address\\n    // for validate onNFTReceived\\n    mapping(address => address) marketPlaceToAsset;\\n    mapping(address => ERC721AssetInfo) erc721AssetInfo;\\n    // erc721 address => token id => nft info\\n    mapping(address => mapping(uint256 => NFTInfo)) nftInfo;\\n    uint256 currentVersion;\\n    mapping(uint256 => Snapshot) snapshotMap;\\n    /* ---------------------------------- security --------------------------------- */\\n    Authorisation auth;\\n    /* --------------------------------- protocol fee ------------------------------ */\\n    ProtocolFee protocolFee;\\n    /* ---------------------------------- helper --------------------------------- */\\n    // mapping of sender address to helper maps, need to clear after computing\\n    UpgradeParam upgradeParam;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function cleanUpgradeParam() internal {\\n        UpgradeParam storage s = diamondStorage().upgradeParam;\\n        for (uint256 i = 0; i < s.existingSelectors[msg.sender].length; ) {\\n            delete s.existingSelectorFacetMap[msg.sender][\\n                s.existingSelectors[msg.sender][i]\\n            ];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        delete s.existingSelectors[msg.sender];\\n\\n        for (uint256 i = 0; i < s.newSelectors[msg.sender].length; ) {\\n            delete s.newSelectorSet[msg.sender][s.newSelectors[msg.sender][i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        delete s.newSelectors[msg.sender];\\n\\n        delete s.facetCuts[msg.sender];\\n        delete s.facetCutSize[msg.sender];\\n    }\\n}\\n\\ncontract Storage is Context {\\n    AppStorage internal s;\\n\\n    modifier whenPaused() {\\n        require(s._paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!s._paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier authorised() {\\n        require(auth(), \\\"call is not authorised\\\");\\n        _;\\n    }\\n\\n    function auth() internal view returns (bool) {\\n        return LibSecurity.isAuthorisedInbound(s.auth, msg.sender, msg.sig);\\n    }\\n\\n    function computeSnapshotChecksum(Snapshot memory snapshot)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        bytes memory data;\\n        for (uint256 i = 0; i < snapshot.facets.length; ) {\\n            IDiamondLoupe.Facet memory facet = snapshot.facets[i];\\n            data = bytes.concat(data, abi.encodePacked(facet.facetAddress));\\n            for (uint256 j = 0; j < facet.functionSelectors.length; j++) {\\n                data = bytes.concat(data, facet.functionSelectors[j]);\\n            }\\n            bytes32 facetCodeHash;\\n            address facetAddress = facet.facetAddress;\\n            assembly {\\n                facetCodeHash := extcodehash(facetAddress)\\n            }\\n            data = bytes.concat(data, facetCodeHash);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return keccak256(data);\\n    }\\n\\n    function diamondCut(address vault) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 currentVersion = s.currentVersion;\\n        Snapshot memory snapshot = s.snapshotMap[currentVersion];\\n        bytes32 checksum = computeSnapshotChecksum(snapshot);\\n        IDiamondCut.FacetCut[] memory facetCuts = new IDiamondCut.FacetCut[](\\n            snapshot.facets.length\\n        );\\n        for (uint256 i = 0; i < snapshot.facets.length; ) {\\n            address facetAddr = snapshot.facets[i].facetAddress;\\n            bytes4[] memory selectors = snapshot.facets[i].functionSelectors;\\n            facetCuts[i].facetAddress = facetAddr;\\n            facetCuts[i].functionSelectors = selectors;\\n            facetCuts[i].action = IDiamondCut.FacetCutAction.Add;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        DiamondCutFacet(vault).diamondCut(\\n            facetCuts,\\n            snapshot.init,\\n            snapshot.initArgs\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcdf73fe652fdd67b462760604879fb9688962174307671c507173adbe85a4199\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibSecurity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {LibAppStorage, AppStorage, Authorisation} from \\\"./LibAppStorage.sol\\\";\\n\\nlibrary LibSecurity {\\n    function isAuthorised(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        return\\n            auth.rbac.canCall(src, dst, selector) ||\\n            auth.acl.canCall(src, dst, selector);\\n    }\\n\\n    function isAuthorisedInbound(\\n        Authorisation storage auth,\\n        address src,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        // s.security.acl/rbac is an instance ds-roles and implements DSAuthority interface\\n        return\\n            auth.rbac.canCall(src, address(this), selector) ||\\n            auth.acl.canCall(src, address(this), selector);\\n    }\\n\\n    function isAuthorisedOutbound(\\n        Authorisation storage auth,\\n        address dst,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        // s.security.acl/rbac is an instance ds-guard and implements DSAuthority interface\\n        return\\n            auth.rbac.canCall(msg.sender, dst, selector) ||\\n            auth.acl.canCall(msg.sender, dst, selector);\\n    }\\n\\n    // role can be a enum, but cast to uint8 before calling grantRole\\n    function grantRole(\\n        Authorisation storage auth,\\n        address user,\\n        uint8 role,\\n        bool enabled\\n    ) internal {\\n        // grant role\\n        auth.rbac.setUserRole(user, role, enabled);\\n    }\\n\\n    function grantRolePermission(\\n        Authorisation storage auth,\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) internal {\\n        // give a role a permission\\n        auth.rbac.setRoleCapability(role, target, sig, true);\\n    }\\n\\n    function revokeRolePermission(\\n        Authorisation storage auth,\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) internal {\\n        // revoke a role permission\\n        auth.rbac.setRoleCapability(role, target, sig, false);\\n    }\\n\\n    function grantPermissions(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4[] memory sig\\n    ) internal {\\n        for (uint256 i = 0; i < sig.length; i++) {\\n            grantPermission(auth, src, dst, sig[i]);\\n        }\\n    }\\n\\n    function grantPermission(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) internal {\\n        // allow src to call dst.sig\\n        auth.acl.permit(src, dst, sig);\\n    }\\n\\n    function revokePermission(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) internal {\\n        auth.acl.forbid(src, dst, sig);\\n    }\\n}\\n\",\"keccak256\":\"0x4ca4a6b133cc63ed12705db3fb8c6d166fc394ca9be53743c6857502077fd029\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e32806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063092dfb1614610051578063686350d01461007a57806399eefbc31461009f5780639d888e86146100b4575b600080fd5b61006461005f366004611738565b6100d1565b6040516100719190611772565b60405180910390f35b61008f61008836600461186c565b6016541490565b6040519015158152602001610071565b6100b26100ad366004611a70565b610d9c565b005b6100bc610f26565b60408051928352602083019190915201610071565b33600090815260208080526040808320601654845260178352818420825181546080958102820186019094526060818101858152909693959394919384928491879085015b828210156101d85760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156101c057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116101825790505b50505050508152505081526020019060010190610116565b5050509082525060018201546001600160a01b0316602082015260028201805460409092019161020790611b39565b80601f016020809104026020016040519081016040528092919081815260200182805461023390611b39565b80156102805780601f1061025557610100808354040283529160200191610280565b820191906000526020600020905b81548152906001019060200180831161026357829003601f168201915b505050505081525050905060008490506000816001600160a01b0316637a0ed6276040518163ffffffff1660e01b815260040160006040518083038186803b1580156102cb57600080fd5b505afa1580156102df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103079190810190611b74565b336000908152601c60209081526040808320601d8352818420601e8452828520601f9094529184209495509390925b855181101561042657600086828151811061035357610353611ccf565b6020026020010151905060005b81602001515181101561041c5760008260200151828151811061038557610385611ccf565b60209081029190910181015186546001808201895560008981528481206008840401805463ffffffff60079095166004026101000a948502191660e086901c949094029390931790925586516001600160e01b03199093168252928b905260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055919091019050610360565b5050600101610336565b5060005b8751518110156109255760008860000151828151811061044c5761044c611ccf565b6020026020010151905060005b81602001515181101561057f5760008260200151828151811061047e5761047e611ccf565b6020908102919091018101516001600160e01b0319811660009081528883526040808220805460ff19166001179055928b905291909120549091506001600160a01b0316801561052b5783516001600160a01b038281169116146105265760008581526023602090815260408220805460018101825590835291206008820401805463ffffffff60079093166004026101000a928302191660e085901c929092029190911790555b610575565b60008581526022602090815260408220805460018101825590835291206008820401805463ffffffff60079093166004026101000a928302191660e085901c929092029190911790555b5050600101610459565b506000828152602260205260409020541561074e57604080516060808201835260008083526020830152918101919091526000838152602260209081526040918290208054835181840281018401909452808452909183018282801561063157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105f35790505b5050505050604082015281516001600160a01b0316815260006020820181905250336000908152602160205260409020548b5482918d91811061067657610676611ccf565b60009182526020918290208351600292830290910180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff198316811782559385015190939092849274ffffffffffffffffffffffffffffffffffffffffff191690911790600160a01b9084908111156106f1576106f161175c565b021790555060408201518051610711916001840191602090910190611569565b5050336000908152602160205260408120805492509061073083611cfb565b9091555050600083815260226020526040812061074c91611615565b505b6000828152602360205260409020541561091c5760408051606080820183526000808352602083015291810191909152600083815260236020908152604091829020805483518184028101840190945280845290918301828280156107ff57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107c15790505b5050505050604082015281516001600160a01b0316815260016020820181905250336000908152602160205260409020548b5482918d91811061084457610844611ccf565b60009182526020918290208351600292830290910180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff198316811782559385015190939092849274ffffffffffffffffffffffffffffffffffffffffff191690911790600160a01b9084908111156108bf576108bf61175c565b0217905550604082015180516108df916001840191602090910190611569565b505033600090815260216020526040812080549250906108fe83611cfb565b9091555050600083815260236020526040812061091a91611615565b505b5060010161042a565b5060005b8354811015610bd35782600085838154811061094757610947611ccf565b6000918252602080832060088304015460079092166004026101000a90910460e01b6001600160e01b031916835282019290925260400190205460ff16610a0657600081815260246020526040902084548590839081106109aa576109aa611ccf565b60009182526020808320600880840490910154855460018101875595855291909320928404909201805463ffffffff60046007948516810261010090810a90960482169690941690930290930a93840291909302199091161790555b60008181526024602052604090205415610bcb576040805160608082018352600080835260208301529181019190915260008281526024602090815260409182902080548351818402810184019094528084529091830182828015610ab757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610a795790505b505050505060408201526000815260026020820181905250336000908152602160205260409020548a5482918c918110610af357610af3611ccf565b60009182526020918290208351600292830290910180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff198316811782559385015190939092849274ffffffffffffffffffffffffffffffffffffffffff191690911790600160a01b908490811115610b6e57610b6e61175c565b021790555060408201518051610b8e916001840191602090910190611569565b50503360009081526021602052604081208054925090610bad83611cfb565b90915550506000828152602460205260408120610bc991611615565b505b600101610929565b503360009081526021602052604081205467ffffffffffffffff811115610bfc57610bfc611885565b604051908082528060200260200182016040528015610c4957816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081610c1a5790505b50905060005b33600090815260216020526040902054811015610d8557898181548110610c7857610c78611ccf565b60009182526020918290206040805160608101909152600292830290910180546001600160a01b03811683529193909290840191600160a01b900460ff1690811115610cc657610cc661175c565b6002811115610cd757610cd761175c565b815260200160018201805480602002602001604051908101604052809291908181526020018280548015610d5757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610d195790505b505050505081525050828281518110610d7257610d72611ccf565b6020908102919091010152600101610c4f565b50610d8e6110f0565b9a9950505050505050505050565b610da4611294565b610e0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f63616c6c206973206e6f7420617574686f726973656400000000000000000000604482015260640160405180910390fd5b600160006016016000828254610e249190611d34565b9091555050601654600081815260176020908152604090912060018101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0388161790558451610e7b9260029092019186019061163d565b5060005b8251811015610f1f5760008281526017602052604090208351849083908110610eaa57610eaa611ccf565b6020908102919091018101518254600180820185556000948552938390208251600290920201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117815581830151805192949193610f149392850192910190611569565b505050600101610e7f565b5050505050565b601654600081815260176020908152604080832081518154938402810160809081019093526060810184815294958695909486949293928492918491879085015b828210156110295760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561101157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610fd35790505b50505050508152505081526020019060010190610f67565b5050509082525060018201546001600160a01b0316602082015260028201805460409092019161105890611b39565b80601f016020809104026020016040519081016040528092919081815260200182805461108490611b39565b80156110d15780601f106110a6576101008083540402835291602001916110d1565b820191906000526020600020905b8154815290600101906020018083116110b457829003601f168201915b5050505050815250509050816110e6826112b2565b9350935050509091565b601c60005b336000908152600183016020526040902054811015611198573360009081526020838152604080832060018601909252822080549192918490811061113c5761113c611ccf565b6000918252602080832060088304015460079092166004026101000a90910460e01b6001600160e01b03191683528201929092526040019020805473ffffffffffffffffffffffffffffffffffffffff191690556001016110f5565b5033600090815260018201602052604081206111b391611615565b60005b33600090815260038301602052604090205481101561124a57336000908152600283016020908152604080832060038601909252822080549192918490811061120157611201611ccf565b6000918252602080832060088304015460079092166004026101000a90910460e01b6001600160e01b03191683528201929092526040019020805460ff191690556001016111b6565b50336000908152600382016020526040812061126591611615565b336000908152600482016020526040812061127f916116b1565b33600090815260059091016020526040812055565b60006112ad6018336001600160e01b0319843516611401565b905090565b6000606060005b8351518110156113f2576000846000015182815181106112db576112db611ccf565b60200260200101519050828160000151604051602001611326919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b60408051601f19818403018152908290526113449291602001611d87565b604051602081830303815290604052925060005b8160200151518110156113b957838260200151828151811061137c5761137c611ccf565b6020026020010151604051602001611395929190611d9c565b604051602081830303815290604052935080806113b190611cfb565b915050611358565b508051604051813f91906113d39086908490602001611dc1565b60405160208183030381529060405294508360010193505050506112b9565b50805160209091012092915050565b82546040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301523060248301526001600160e01b031984166044830152600092169063b70096139060640160206040518083038186803b15801561147557600080fd5b505afa158015611489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ad9190611dda565b80611561575060018401546040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301523060248301526001600160e01b0319851660448301529091169063b70096139060640160206040518083038186803b15801561152957600080fd5b505afa15801561153d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115619190611dda565b949350505050565b828054828255906000526020600020906007016008900481019282156116055791602002820160005b838211156115d357835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302611592565b80156116035782816101000a81549063ffffffff02191690556004016020816003010492830192600103026115d3565b505b506116119291506116d2565b5090565b50805460008255600701600890049060005260206000209081019061163a91906116d2565b50565b82805461164990611b39565b90600052602060002090601f01602090048101928261166b5760008555611605565b82601f1061168457805160ff1916838001178555611605565b82800160010185558215611605579182015b82811115611605578251825591602001919060010190611696565b508054600082556002029060005260206000209081019061163a91906116e7565b5b8082111561161157600081556001016116d3565b8082111561161157805474ffffffffffffffffffffffffffffffffffffffffff19168155600061171a6001830182611615565b506002016116e7565b6001600160a01b038116811461163a57600080fd5b60006020828403121561174a57600080fd5b813561175581611723565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561185e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0898403018552815160608085016001600160a01b03835116865289830151600381106117fe57634e487b7160e01b600052602160045260246000fd5b868b0152918801518886019190915280519182905288019060808501906000905b808210156118495783516001600160e01b0319168352928a0192918a01916001919091019061181f565b50509588019593505090860190600101611799565b509098975050505050505050565b60006020828403121561187e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156118be576118be611885565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156118ed576118ed611885565b604052919050565b600067ffffffffffffffff82111561190f5761190f611885565b5060051b60200190565b6001600160e01b03198116811461163a57600080fd5b600082601f83011261194057600080fd5b81356020611955611950836118f5565b6118c4565b828152600592831b850182019282820191908785111561197457600080fd5b8387015b85811015611a6357803567ffffffffffffffff808211156119995760008081fd5b818a019150604080601f19848e030112156119b45760008081fd5b6119bc61189b565b888401356119c981611723565b815283820135838111156119dd5760008081fd5b8085019450508c603f8501126119f557600092508283fd5b888401359250611a07611950846118f5565b83815292861b8401820192898101908e851115611a245760008081fd5b948301945b84861015611a4e5785359350611a3e84611919565b838252948a0194908a0190611a29565b828b0152508752505050928401928401611978565b5090979650505050505050565b600080600060608486031215611a8557600080fd5b8335611a9081611723565b925060208481013567ffffffffffffffff80821115611aae57600080fd5b818701915087601f830112611ac257600080fd5b813581811115611ad457611ad4611885565b611ae684601f19601f840116016118c4565b8181528985838601011115611afa57600080fd5b818585018683013760009181019094015291935060408601359180831115611b2157600080fd5b5050611b2f8682870161192f565b9150509250925092565b600181811c90821680611b4d57607f821691505b60208210811415611b6e57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020808385031215611b8757600080fd5b825167ffffffffffffffff80821115611b9f57600080fd5b818501915085601f830112611bb357600080fd5b8151611bc1611950826118f5565b81815260059190911b83018401908481019088831115611be057600080fd5b8585015b83811015611cc257805185811115611bfc5760008081fd5b86016040818c03601f1901811315611c145760008081fd5b611c1c61189b565b89830151611c2981611723565b81528282015188811115611c3d5760008081fd5b8084019350508c603f840112611c535760008081fd5b89830151611c63611950826118f5565b81815260059190911b84018301908b8101908f831115611c835760008081fd5b948401945b82861015611cad5785519450611c9d85611919565b848252948c0194908c0190611c88565b838d0152505085525050918601918601611be4565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d2d57611d2d611ce5565b5060010190565b60008219821115611d4757611d47611ce5565b500190565b6000815160005b81811015611d6d5760208185018101518683015201611d53565b81811115611d7c576000828601525b509290920192915050565b6000611561611d968386611d4c565b84611d4c565b6000611da88285611d4c565b6001600160e01b03199390931683525050600401919050565b6000611dcd8285611d4c565b9283525050602001919050565b600060208284031215611dec57600080fd5b8151801515811461175557600080fdfea2646970667358221220be8f905fdb6a38f0c12c06fe1d9e559890ed3816bd0eb778ba63de8ead22586964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063092dfb1614610051578063686350d01461007a57806399eefbc31461009f5780639d888e86146100b4575b600080fd5b61006461005f366004611738565b6100d1565b6040516100719190611772565b60405180910390f35b61008f61008836600461186c565b6016541490565b6040519015158152602001610071565b6100b26100ad366004611a70565b610d9c565b005b6100bc610f26565b60408051928352602083019190915201610071565b33600090815260208080526040808320601654845260178352818420825181546080958102820186019094526060818101858152909693959394919384928491879085015b828210156101d85760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156101c057602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116101825790505b50505050508152505081526020019060010190610116565b5050509082525060018201546001600160a01b0316602082015260028201805460409092019161020790611b39565b80601f016020809104026020016040519081016040528092919081815260200182805461023390611b39565b80156102805780601f1061025557610100808354040283529160200191610280565b820191906000526020600020905b81548152906001019060200180831161026357829003601f168201915b505050505081525050905060008490506000816001600160a01b0316637a0ed6276040518163ffffffff1660e01b815260040160006040518083038186803b1580156102cb57600080fd5b505afa1580156102df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103079190810190611b74565b336000908152601c60209081526040808320601d8352818420601e8452828520601f9094529184209495509390925b855181101561042657600086828151811061035357610353611ccf565b6020026020010151905060005b81602001515181101561041c5760008260200151828151811061038557610385611ccf565b60209081029190910181015186546001808201895560008981528481206008840401805463ffffffff60079095166004026101000a948502191660e086901c949094029390931790925586516001600160e01b03199093168252928b905260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055919091019050610360565b5050600101610336565b5060005b8751518110156109255760008860000151828151811061044c5761044c611ccf565b6020026020010151905060005b81602001515181101561057f5760008260200151828151811061047e5761047e611ccf565b6020908102919091018101516001600160e01b0319811660009081528883526040808220805460ff19166001179055928b905291909120549091506001600160a01b0316801561052b5783516001600160a01b038281169116146105265760008581526023602090815260408220805460018101825590835291206008820401805463ffffffff60079093166004026101000a928302191660e085901c929092029190911790555b610575565b60008581526022602090815260408220805460018101825590835291206008820401805463ffffffff60079093166004026101000a928302191660e085901c929092029190911790555b5050600101610459565b506000828152602260205260409020541561074e57604080516060808201835260008083526020830152918101919091526000838152602260209081526040918290208054835181840281018401909452808452909183018282801561063157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105f35790505b5050505050604082015281516001600160a01b0316815260006020820181905250336000908152602160205260409020548b5482918d91811061067657610676611ccf565b60009182526020918290208351600292830290910180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff198316811782559385015190939092849274ffffffffffffffffffffffffffffffffffffffffff191690911790600160a01b9084908111156106f1576106f161175c565b021790555060408201518051610711916001840191602090910190611569565b5050336000908152602160205260408120805492509061073083611cfb565b9091555050600083815260226020526040812061074c91611615565b505b6000828152602360205260409020541561091c5760408051606080820183526000808352602083015291810191909152600083815260236020908152604091829020805483518184028101840190945280845290918301828280156107ff57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107c15790505b5050505050604082015281516001600160a01b0316815260016020820181905250336000908152602160205260409020548b5482918d91811061084457610844611ccf565b60009182526020918290208351600292830290910180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff198316811782559385015190939092849274ffffffffffffffffffffffffffffffffffffffffff191690911790600160a01b9084908111156108bf576108bf61175c565b0217905550604082015180516108df916001840191602090910190611569565b505033600090815260216020526040812080549250906108fe83611cfb565b9091555050600083815260236020526040812061091a91611615565b505b5060010161042a565b5060005b8354811015610bd35782600085838154811061094757610947611ccf565b6000918252602080832060088304015460079092166004026101000a90910460e01b6001600160e01b031916835282019290925260400190205460ff16610a0657600081815260246020526040902084548590839081106109aa576109aa611ccf565b60009182526020808320600880840490910154855460018101875595855291909320928404909201805463ffffffff60046007948516810261010090810a90960482169690941690930290930a93840291909302199091161790555b60008181526024602052604090205415610bcb576040805160608082018352600080835260208301529181019190915260008281526024602090815260409182902080548351818402810184019094528084529091830182828015610ab757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610a795790505b505050505060408201526000815260026020820181905250336000908152602160205260409020548a5482918c918110610af357610af3611ccf565b60009182526020918290208351600292830290910180546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff198316811782559385015190939092849274ffffffffffffffffffffffffffffffffffffffffff191690911790600160a01b908490811115610b6e57610b6e61175c565b021790555060408201518051610b8e916001840191602090910190611569565b50503360009081526021602052604081208054925090610bad83611cfb565b90915550506000828152602460205260408120610bc991611615565b505b600101610929565b503360009081526021602052604081205467ffffffffffffffff811115610bfc57610bfc611885565b604051908082528060200260200182016040528015610c4957816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081610c1a5790505b50905060005b33600090815260216020526040902054811015610d8557898181548110610c7857610c78611ccf565b60009182526020918290206040805160608101909152600292830290910180546001600160a01b03811683529193909290840191600160a01b900460ff1690811115610cc657610cc661175c565b6002811115610cd757610cd761175c565b815260200160018201805480602002602001604051908101604052809291908181526020018280548015610d5757602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610d195790505b505050505081525050828281518110610d7257610d72611ccf565b6020908102919091010152600101610c4f565b50610d8e6110f0565b9a9950505050505050505050565b610da4611294565b610e0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f63616c6c206973206e6f7420617574686f726973656400000000000000000000604482015260640160405180910390fd5b600160006016016000828254610e249190611d34565b9091555050601654600081815260176020908152604090912060018101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0388161790558451610e7b9260029092019186019061163d565b5060005b8251811015610f1f5760008281526017602052604090208351849083908110610eaa57610eaa611ccf565b6020908102919091018101518254600180820185556000948552938390208251600290920201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117815581830151805192949193610f149392850192910190611569565b505050600101610e7f565b5050505050565b601654600081815260176020908152604080832081518154938402810160809081019093526060810184815294958695909486949293928492918491879085015b828210156110295760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561101157602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411610fd35790505b50505050508152505081526020019060010190610f67565b5050509082525060018201546001600160a01b0316602082015260028201805460409092019161105890611b39565b80601f016020809104026020016040519081016040528092919081815260200182805461108490611b39565b80156110d15780601f106110a6576101008083540402835291602001916110d1565b820191906000526020600020905b8154815290600101906020018083116110b457829003601f168201915b5050505050815250509050816110e6826112b2565b9350935050509091565b601c60005b336000908152600183016020526040902054811015611198573360009081526020838152604080832060018601909252822080549192918490811061113c5761113c611ccf565b6000918252602080832060088304015460079092166004026101000a90910460e01b6001600160e01b03191683528201929092526040019020805473ffffffffffffffffffffffffffffffffffffffff191690556001016110f5565b5033600090815260018201602052604081206111b391611615565b60005b33600090815260038301602052604090205481101561124a57336000908152600283016020908152604080832060038601909252822080549192918490811061120157611201611ccf565b6000918252602080832060088304015460079092166004026101000a90910460e01b6001600160e01b03191683528201929092526040019020805460ff191690556001016111b6565b50336000908152600382016020526040812061126591611615565b336000908152600482016020526040812061127f916116b1565b33600090815260059091016020526040812055565b60006112ad6018336001600160e01b0319843516611401565b905090565b6000606060005b8351518110156113f2576000846000015182815181106112db576112db611ccf565b60200260200101519050828160000151604051602001611326919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b60408051601f19818403018152908290526113449291602001611d87565b604051602081830303815290604052925060005b8160200151518110156113b957838260200151828151811061137c5761137c611ccf565b6020026020010151604051602001611395929190611d9c565b604051602081830303815290604052935080806113b190611cfb565b915050611358565b508051604051813f91906113d39086908490602001611dc1565b60405160208183030381529060405294508360010193505050506112b9565b50805160209091012092915050565b82546040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301523060248301526001600160e01b031984166044830152600092169063b70096139060640160206040518083038186803b15801561147557600080fd5b505afa158015611489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ad9190611dda565b80611561575060018401546040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301523060248301526001600160e01b0319851660448301529091169063b70096139060640160206040518083038186803b15801561152957600080fd5b505afa15801561153d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115619190611dda565b949350505050565b828054828255906000526020600020906007016008900481019282156116055791602002820160005b838211156115d357835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302611592565b80156116035782816101000a81549063ffffffff02191690556004016020816003010492830192600103026115d3565b505b506116119291506116d2565b5090565b50805460008255600701600890049060005260206000209081019061163a91906116d2565b50565b82805461164990611b39565b90600052602060002090601f01602090048101928261166b5760008555611605565b82601f1061168457805160ff1916838001178555611605565b82800160010185558215611605579182015b82811115611605578251825591602001919060010190611696565b508054600082556002029060005260206000209081019061163a91906116e7565b5b8082111561161157600081556001016116d3565b8082111561161157805474ffffffffffffffffffffffffffffffffffffffffff19168155600061171a6001830182611615565b506002016116e7565b6001600160a01b038116811461163a57600080fd5b60006020828403121561174a57600080fd5b813561175581611723565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561185e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0898403018552815160608085016001600160a01b03835116865289830151600381106117fe57634e487b7160e01b600052602160045260246000fd5b868b0152918801518886019190915280519182905288019060808501906000905b808210156118495783516001600160e01b0319168352928a0192918a01916001919091019061181f565b50509588019593505090860190600101611799565b509098975050505050505050565b60006020828403121561187e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156118be576118be611885565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156118ed576118ed611885565b604052919050565b600067ffffffffffffffff82111561190f5761190f611885565b5060051b60200190565b6001600160e01b03198116811461163a57600080fd5b600082601f83011261194057600080fd5b81356020611955611950836118f5565b6118c4565b828152600592831b850182019282820191908785111561197457600080fd5b8387015b85811015611a6357803567ffffffffffffffff808211156119995760008081fd5b818a019150604080601f19848e030112156119b45760008081fd5b6119bc61189b565b888401356119c981611723565b815283820135838111156119dd5760008081fd5b8085019450508c603f8501126119f557600092508283fd5b888401359250611a07611950846118f5565b83815292861b8401820192898101908e851115611a245760008081fd5b948301945b84861015611a4e5785359350611a3e84611919565b838252948a0194908a0190611a29565b828b0152508752505050928401928401611978565b5090979650505050505050565b600080600060608486031215611a8557600080fd5b8335611a9081611723565b925060208481013567ffffffffffffffff80821115611aae57600080fd5b818701915087601f830112611ac257600080fd5b813581811115611ad457611ad4611885565b611ae684601f19601f840116016118c4565b8181528985838601011115611afa57600080fd5b818585018683013760009181019094015291935060408601359180831115611b2157600080fd5b5050611b2f8682870161192f565b9150509250925092565b600181811c90821680611b4d57607f821691505b60208210811415611b6e57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020808385031215611b8757600080fd5b825167ffffffffffffffff80821115611b9f57600080fd5b818501915085601f830112611bb357600080fd5b8151611bc1611950826118f5565b81815260059190911b83018401908481019088831115611be057600080fd5b8585015b83811015611cc257805185811115611bfc5760008081fd5b86016040818c03601f1901811315611c145760008081fd5b611c1c61189b565b89830151611c2981611723565b81528282015188811115611c3d5760008081fd5b8084019350508c603f840112611c535760008081fd5b89830151611c63611950826118f5565b81815260059190911b84018301908b8101908f831115611c835760008081fd5b948401945b82861015611cad5785519450611c9d85611919565b848252948c0194908c0190611c88565b838d0152505085525050918601918601611be4565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d2d57611d2d611ce5565b5060010190565b60008219821115611d4757611d47611ce5565b500190565b6000815160005b81811015611d6d5760208185018101518683015201611d53565b81811115611d7c576000828601525b509290920192915050565b6000611561611d968386611d4c565b84611d4c565b6000611da88285611d4c565b6001600160e01b03199390931683525050600401919050565b6000611dcd8285611d4c565b9283525050602001919050565b600060208284031215611dec57600080fd5b8151801515811461175557600080fdfea2646970667358221220be8f905fdb6a38f0c12c06fe1d9e559890ed3816bd0eb778ba63de8ead22586964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21106,
        "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)20987_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "base": "t_bytes4",
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Facet)7894_storage)dyn_storage": {
        "base": "t_struct(Facet)7894_storage",
        "encoding": "dynamic_array",
        "label": "struct IDiamondLoupe.Facet[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(FacetCut)7862_storage)dyn_storage": {
        "base": "t_struct(FacetCut)7862_storage",
        "encoding": "dynamic_array",
        "label": "struct IDiamondCut.FacetCut[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RepaymentData)20716_storage)dyn_storage": {
        "base": "t_struct(RepaymentData)20716_storage",
        "encoding": "dynamic_array",
        "label": "struct RepaymentData[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(DSGuard)14682": {
        "encoding": "inplace",
        "label": "contract DSGuard",
        "numberOfBytes": "20"
      },
      "t_contract(DSRoles)15071": {
        "encoding": "inplace",
        "label": "contract DSRoles",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultFactory)20638": {
        "encoding": "inplace",
        "label": "contract IVaultFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH9)9162": {
        "encoding": "inplace",
        "label": "contract IWETH9",
        "numberOfBytes": "20"
      },
      "t_contract(UpgradeableBeacon)2867": {
        "encoding": "inplace",
        "label": "contract UpgradeableBeacon",
        "numberOfBytes": "20"
      },
      "t_enum(FacetCutAction)7853": {
        "encoding": "inplace",
        "label": "enum IDiamondCut.FacetCutAction",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_bytes4)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes4[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes4)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(FacetCut)7862_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDiamondCut.FacetCut[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(FacetCut)7862_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(BorrowData)20771_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct BorrowData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(BorrowData)20771_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(VaultConfig)20787_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct VaultConfig))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(VaultConfig)20787_storage)"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTInfo)20824_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NFTInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(NFTInfo)20824_storage)"
      },
      "t_mapping(t_address,t_struct(BorrowData)20771_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BorrowData)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowData)20771_storage"
      },
      "t_mapping(t_address,t_struct(BorrowState)20778_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BorrowState)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowState)20778_storage"
      },
      "t_mapping(t_address,t_struct(ERC721AssetInfo)20829_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721AssetInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ERC721AssetInfo)20829_storage"
      },
      "t_mapping(t_address,t_struct(ReserveData)20695_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ReserveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveData)20695_storage"
      },
      "t_mapping(t_address,t_struct(VaultConfig)20787_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultConfig)20787_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_bytes4)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes4[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes4)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Loan)20746_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)20746_storage"
      },
      "t_mapping(t_uint256,t_struct(NFTInfo)20824_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTInfo)20824_storage"
      },
      "t_mapping(t_uint256,t_struct(Snapshot)20447_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Snapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(Snapshot)20447_storage"
      },
      "t_struct(AppStorage)20987_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 20888,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "_addresses",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 20891,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "seniorDepositTokenBeacon",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(UpgradeableBeacon)2867"
          },
          {
            "astId": 20894,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "juniorDepositTokenBeacon",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(UpgradeableBeacon)2867"
          },
          {
            "astId": 20899,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "_reserves",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(ReserveData)20695_storage)"
          },
          {
            "astId": 20903,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "_reserveList",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 20905,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "_reservesCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint16"
          },
          {
            "astId": 20908,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "WETH9",
            "offset": 2,
            "slot": "5",
            "type": "t_contract(IWETH9)9162"
          },
          {
            "astId": 20915,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "_borrowData",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(BorrowData)20771_storage))"
          },
          {
            "astId": 20920,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "_borrowState",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(BorrowState)20778_storage)"
          },
          {
            "astId": 20922,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "_paused",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 20925,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "marginEscrowBeacon",
            "offset": 1,
            "slot": "8",
            "type": "t_contract(UpgradeableBeacon)2867"
          },
          {
            "astId": 20928,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "creditEscrowBeacon",
            "offset": 0,
            "slot": "9",
            "type": "t_contract(UpgradeableBeacon)2867"
          },
          {
            "astId": 20931,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "subVaultBeacon",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(UpgradeableBeacon)2867"
          },
          {
            "astId": 20934,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "vaultBeacon",
            "offset": 0,
            "slot": "11",
            "type": "t_contract(UpgradeableBeacon)2867"
          },
          {
            "astId": 20937,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "diamondFacet",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(DiamondFacet)20884_storage"
          },
          {
            "astId": 20940,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "vaultFactory",
            "offset": 0,
            "slot": "15",
            "type": "t_contract(IVaultFactory)20638"
          },
          {
            "astId": 20943,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "vaults",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 20947,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "vaultMap",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 20954,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "vaultConfigMap",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(VaultConfig)20787_storage))"
          },
          {
            "astId": 20958,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "marketPlaceToAsset",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 20963,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "erc721AssetInfo",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_struct(ERC721AssetInfo)20829_storage)"
          },
          {
            "astId": 20970,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "nftInfo",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTInfo)20824_storage))"
          },
          {
            "astId": 20972,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "currentVersion",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 20977,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "snapshotMap",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_uint256,t_struct(Snapshot)20447_storage)"
          },
          {
            "astId": 20980,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "auth",
            "offset": 0,
            "slot": "24",
            "type": "t_struct(Authorisation)20819_storage"
          },
          {
            "astId": 20983,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "protocolFee",
            "offset": 0,
            "slot": "26",
            "type": "t_struct(ProtocolFee)20792_storage"
          },
          {
            "astId": 20986,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "upgradeParam",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(UpgradeParam)20877_storage"
          }
        ],
        "numberOfBytes": "1184"
      },
      "t_struct(Authorisation)20819_storage": {
        "encoding": "inplace",
        "label": "struct Authorisation",
        "members": [
          {
            "astId": 20815,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "rbac",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(DSRoles)15071"
          },
          {
            "astId": 20818,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "acl",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(DSGuard)14682"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BorrowData)20771_storage": {
        "encoding": "inplace",
        "label": "struct BorrowData",
        "members": [
          {
            "astId": 20753,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "paidLoanNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20755,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "nextLoanNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20757,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "totalPrincipal",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20759,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "totalInterest",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20761,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "mapSize",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 20766,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "loans",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_struct(Loan)20746_storage)"
          },
          {
            "astId": 20768,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "totalPaid",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 20770,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "totalRedeemed",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(BorrowState)20778_storage": {
        "encoding": "inplace",
        "label": "struct BorrowState",
        "members": [
          {
            "astId": 20773,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "totalDebt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20775,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "totalInterest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20777,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "avgBorrowRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DiamondFacet)20884_storage": {
        "encoding": "inplace",
        "label": "struct DiamondFacet",
        "members": [
          {
            "astId": 20879,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "diamondCutFacet",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20881,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "diamondLoupeFacet",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20883,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "ownershipFacet",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ERC721AssetInfo)20829_storage": {
        "encoding": "inplace",
        "label": "struct ERC721AssetInfo",
        "members": [
          {
            "astId": 20826,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "marketplace",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20828,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "erc20Addr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Facet)7894_storage": {
        "encoding": "inplace",
        "label": "struct IDiamondLoupe.Facet",
        "members": [
          {
            "astId": 7890,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "facetAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7893,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "functionSelectors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes4)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FacetCut)7862_storage": {
        "encoding": "inplace",
        "label": "struct IDiamondCut.FacetCut",
        "members": [
          {
            "astId": 7855,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "facetAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7858,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "action",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(FacetCutAction)7853"
          },
          {
            "astId": 7861,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "functionSelectors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes4)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Loan)20746_storage": {
        "encoding": "inplace",
        "label": "struct Loan",
        "members": [
          {
            "astId": 20718,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20720,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20722,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "term",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20724,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "epoch",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20726,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "nper",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 20729,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "pmt",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(PMT)20705_storage"
          },
          {
            "astId": 20731,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "apr",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 20733,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "borrowAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 20735,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "nextPaymentDue",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 20737,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "totalPrincipalPaid",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 20739,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "totalInterestPaid",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 20743,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "repayments",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_struct(RepaymentData)20716_storage)dyn_storage"
          },
          {
            "astId": 20745,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "paidTimes",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(NFTInfo)20824_storage": {
        "encoding": "inplace",
        "label": "struct NFTInfo",
        "members": [
          {
            "astId": 20821,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20823,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PMT)20705_storage": {
        "encoding": "inplace",
        "label": "struct PMT",
        "members": [
          {
            "astId": 20700,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20702,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20704,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "pmt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProtocolFee)20792_storage": {
        "encoding": "inplace",
        "label": "struct ProtocolFee",
        "members": [
          {
            "astId": 20789,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20791,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "cutRatio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RepaymentData)20716_storage": {
        "encoding": "inplace",
        "label": "struct RepaymentData",
        "members": [
          {
            "astId": 20707,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20709,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20711,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "total",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20713,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "paidAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint40"
          },
          {
            "astId": 20715,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "isLiquidated",
            "offset": 5,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ReserveConfigurationMap)20698_storage": {
        "encoding": "inplace",
        "label": "struct ReserveConfigurationMap",
        "members": [
          {
            "astId": 20697,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ReserveData)20695_storage": {
        "encoding": "inplace",
        "label": "struct ReserveData",
        "members": [
          {
            "astId": 20668,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "configuration",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ReserveConfigurationMap)20698_storage"
          },
          {
            "astId": 20670,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "currentOverallLiquidityRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20672,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "currentJuniorLiquidityRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20674,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "currentSeniorLiquidityRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20676,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "currentBorrowRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 20678,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "decimals",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 20680,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "interestRateStrategyAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 20682,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "juniorDepositTokenAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 20684,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "seniorDepositTokenAddress",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 20686,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "juniorLastUpdateTimestamp",
            "offset": 20,
            "slot": "8",
            "type": "t_uint40"
          },
          {
            "astId": 20688,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "seniorLastUpdateTimestamp",
            "offset": 25,
            "slot": "8",
            "type": "t_uint40"
          },
          {
            "astId": 20690,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "nftAddress",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 20692,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "priceOracle",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 20694,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "initialized",
            "offset": 20,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Snapshot)20447_storage": {
        "encoding": "inplace",
        "label": "struct Snapshot",
        "members": [
          {
            "astId": 20442,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "facets",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Facet)7894_storage)dyn_storage"
          },
          {
            "astId": 20444,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "init",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20446,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "initArgs",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UpgradeParam)20877_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeParam",
        "members": [
          {
            "astId": 20835,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "existingSelectorFacetMap",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_mapping(t_bytes4,t_address))"
          },
          {
            "astId": 20840,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "existingSelectors",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_array(t_bytes4)dyn_storage)"
          },
          {
            "astId": 20846,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "newSelectorSet",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_mapping(t_bytes4,t_bool))"
          },
          {
            "astId": 20851,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "newSelectors",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_array(t_bytes4)dyn_storage)"
          },
          {
            "astId": 20857,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "facetCuts",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_array(t_struct(FacetCut)7862_storage)dyn_storage)"
          },
          {
            "astId": 20861,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "facetCutSize",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20866,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "selectorsAdded",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_array(t_bytes4)dyn_storage)"
          },
          {
            "astId": 20871,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "selectorsReplaced",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_array(t_bytes4)dyn_storage)"
          },
          {
            "astId": 20876,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "selectorsRemoved",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_array(t_bytes4)dyn_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(VaultConfig)20787_storage": {
        "encoding": "inplace",
        "label": "struct VaultConfig",
        "members": [
          {
            "astId": 20780,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "minMargin",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20782,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "maxMargin",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20784,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "marginRequirement",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20786,
            "contract": "contracts/voyage/facets/DiamondVersionFacet.sol:DiamondVersionFacet",
            "label": "overrideGlobal",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}