{
  "address": "0x19BC3629bb1934943741Dd11eb89E3bB3Fb4Be35",
  "abi": [
    {
      "inputs": [],
      "name": "FailedDeployVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCollectionAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCurrencyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVaultImpl",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidWithdrawal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_numVaults",
          "type": "uint256"
        }
      ],
      "name": "VaultCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_impl",
          "type": "address"
        }
      ],
      "name": "VaultImplementationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "VaultMarginCredited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sponsor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "VaultMarginRedeemed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        }
      ],
      "name": "collectionInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes20",
          "name": "_salt",
          "type": "bytes20"
        }
      ],
      "name": "computeCounterfactualAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes20",
          "name": "_salt",
          "type": "bytes20"
        }
      ],
      "name": "createVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getVaultAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_impl",
          "type": "address"
        }
      ],
      "name": "setVaultImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subVaultBeacon",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vaule",
          "type": "uint256"
        }
      ],
      "name": "unwrapVaultETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultBeacon",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "wrapVaultETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xff7fd5fa84a71dc4421462445f86b4ae24ae16730f33f585484fc736b6b1277c",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7bB17c9401110D05ec39894334cC9d7721E90688",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "2080903",
    "logsBloom": "0x
    "blockHash": "0x8bb73ec4eccfc591b9a102fd63f5931b8963d03a118048b899320519b26fdc4c",
    "transactionHash": "0xff7fd5fa84a71dc4421462445f86b4ae24ae16730f33f585484fc736b6b1277c",
    "logs": [],
    "blockNumber": 11377356,
    "cumulativeGasUsed": "2364273",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "4eb6d4af9e40422718c79de92b32f7f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedDeployVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCollectionAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurrencyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVaultImpl\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_numVaults\",\"type\":\"uint256\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"VaultImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"VaultMarginCredited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"VaultMarginRedeemed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"collectionInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes20\",\"name\":\"_salt\",\"type\":\"bytes20\"}],\"name\":\"computeCounterfactualAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes20\",\"name\":\"_salt\",\"type\":\"bytes20\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVaultAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"setVaultImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subVaultBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaule\",\"type\":\"uint256\"}],\"name\":\"unwrapVaultETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"wrapVaultETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voyage/facets/VaultFacet.sol\":\"VaultFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\",\"keccak256\":\"0x85439e74ab467b6a23d45d32bdc9506cbc3760320289afd605f11638c4138e95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/shared/diamond/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0x1ad930b2fb7a485ea9dc992bffe25b7f9ed400accf7eb19e06d0761457b7228d\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x70cec56344b453ec59bcecd3541f711b4f439b5b7e35cc10306b2e82eaa399da\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x5b20558ac0a152f84527227fa50db6f113dd2241992cb8aa9b1a7dbd193c277f\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79ecd45ef37ffd464dd3a612cd046e1b3ec6aed5efd767141c651e539bdee988\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x6fae3084e63b6d8cca55d964865dc45e0c2abf2d0eb8fcd9a3fe7428441bf06a\",\"license\":\"MIT\"},\"contracts/shared/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IERC173} from \\\"../interfaces/IERC173.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    /// @notice Adds default diamond facets\\n    /// @dev This is always called in the Diamond constructor.\\n    /// @param _diamondCutFacet - address of DiamondCutFacet\\n    /// @param _diamondLoupeFacet - address of the DiamondLoupeFacet\\n    /// @param _ownershipFacet - address of the OwnershipFacet\\n    function addDiamondFunctions(\\n        address _diamondCutFacet,\\n        address _diamondLoupeFacet,\\n        address _ownershipFacet\\n    ) internal {\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](3);\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondCutFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        functionSelectors = new bytes4[](5);\\n        functionSelectors[0] = IDiamondLoupe.facets.selector;\\n        functionSelectors[1] = IDiamondLoupe.facetFunctionSelectors.selector;\\n        functionSelectors[2] = IDiamondLoupe.facetAddresses.selector;\\n        functionSelectors[3] = IDiamondLoupe.facetAddress.selector;\\n        functionSelectors[4] = IERC165.supportsInterface.selector;\\n        cut[1] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondLoupeFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        functionSelectors = new bytes4[](2);\\n        functionSelectors[0] = IERC173.transferOwnership.selector;\\n        functionSelectors[1] = IERC173.owner.selector;\\n        cut[2] = IDiamondCut.FacetCut({\\n            facetAddress: _ownershipFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        diamondCut(cut, address(0), \\\"\\\");\\n    }\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // uint16 selectorCount = uint16(diamondStorage().selectors.length);\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(oldFacetAddress, selector);\\n            // add function\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function removeFunction(address _facetAddress, bytes4 _selector) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            ds\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x76c53a3a50ee1b30d116263e1847c80b52f6705f7436d37ba91b0ddcb97657ff\",\"license\":\"MIT\"},\"contracts/shared/facets/PaymentsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {PeripheryPayments} from \\\"../util/PeripheryPayments.sol\\\";\\nimport {Multicall} from \\\"../util/Multicall.sol\\\";\\nimport {SelfPermit} from \\\"../util/SelfPermit.sol\\\";\\nimport {LibAppStorage} from \\\"../../voyage/libraries/LibAppStorage.sol\\\";\\nimport {SafeTransferLib} from \\\"../libraries/SafeTransferLib.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract PaymentsFacet is PeripheryPayments, Multicall, SelfPermit {\\n    using SafeERC20 for IERC20;\\n\\n    function unwrapWETH9(uint256 amountMinimum, address recipient)\\n        public\\n        payable\\n    {\\n        uint256 balanceWETH9 = LibAppStorage.ds().WETH9.balanceOf(\\n            address(this)\\n        );\\n        require(balanceWETH9 >= amountMinimum, \\\"Insufficient WETH9\\\");\\n\\n        if (balanceWETH9 > 0) {\\n            LibAppStorage.ds().WETH9.withdraw(balanceWETH9);\\n            SafeTransferLib.safeTransferETH(recipient, balanceWETH9);\\n        }\\n    }\\n\\n    function wrapWETH9() public payable {\\n        if (address(this).balance > 0)\\n            LibAppStorage.ds().WETH9.deposit{value: address(this).balance}(); // wrap everything\\n    }\\n\\n    function sweepToken(\\n        IERC20 token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) public payable {\\n        uint256 balanceToken = token.balanceOf(address(this));\\n        require(balanceToken >= amountMinimum, \\\"Insufficient token\\\");\\n\\n        if (balanceToken > 0) {\\n            token.safeTransfer(recipient, balanceToken);\\n        }\\n    }\\n\\n    function refundETH() external payable {\\n        if (address(this).balance > 0) {\\n            SafeTransferLib.safeTransferETH(msg.sender, address(this).balance);\\n        }\\n    }\\n}\\n\\nabstract contract IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable virtual;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external virtual;\\n}\\n\",\"keccak256\":\"0x40bcdf10b257d68182a70f2372505f8682f2ff7bf5b247ba24b2f6ee18e67863\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC20PermitAllowed.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/external/IERC20PermitAllowed.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Interface for permit\\n/// @notice Interface used by DAI/CHAI for permit\\ninterface IERC20PermitAllowed {\\n    /// @notice Approve the spender to spend some tokens via the holder signature\\n    /// @dev This is the permit interface used by DAI and CHAI\\n    /// @param holder The address of the token holder, the token owner\\n    /// @param spender The address of the token spender\\n    /// @param nonce The holder's nonce, increases at each call to permit\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x75199ac09b8a0315f5bb8a4380df57a8443ef496443ab546d017ea6100b699bc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/interfaces/IMulticall.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IMulticall.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data)\\n        external\\n        payable\\n        returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x8437eb20058eb64e08677e6ee16f3299c3d080235a99526374c984687762b69b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/interfaces/ISelfPermit.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISelfPermit.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\ninterface ISelfPermit {\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x935d7c033290c44921175dd13c8dddf8e51057492e665c379058d7bf3ca67125\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable virtual;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external virtual;\\n}\\n\",\"keccak256\":\"0xb152cb59ad8329047c5fcfa6d46ca42bcce4a4b5ad2bf58bc1a0aeedff31e509\",\"license\":\"MIT\"},\"contracts/shared/libraries/LogarithmMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/// import from https://github.com/paulrberg/prb-math\\nlibrary LogarithmMath {\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    error PRBMathUD60x18__LogInputTooSmall(uint256);\\n}\\n\",\"keccak256\":\"0x253ab2b6f0731ce0072f9d27c8f5d2c6a9766256dff3ab4438c8b415b90f309c\",\"license\":\"GPL-3.0\"},\"contracts/shared/libraries/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a4336b20a181683c7e4754615409aea63f6b44a806b2d3d59b7aea4cc5cda57\",\"license\":\"GPL-3.0\"},\"contracts/shared/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\nETH OPERATIONS\\n//////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\nERC20 OPERATIONS\\n//////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0x23b872dd00000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0xa9059cbb00000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0x095ea7b300000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x650ece776cbd21442a5b34775dfe0cd8b76f505ef5e072b198c3e35709b791d7\",\"license\":\"AGPL-3.0-only\"},\"contracts/shared/libraries/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (halfWAD + a * b) / WAD;\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return (halfB + a * WAD) / b;\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (halfRAY + a * b) / RAY;\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return (halfB + a * RAY) / b;\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return (halfRatio + a) / WAD_RAY_RATIO;\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a * WAD_RAY_RATIO;\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa58dbc7c0c21dc1bcaf58a6ae989fdf097a8c0ed7c66bd88cc3a29c1a21d1830\"},\"contracts/shared/util/Multicall.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/base/Multicall.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMulticall.sol\\\";\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall {\\n    /// @inheritdoc IMulticall\\n    function multicall(bytes[] calldata data)\\n        public\\n        payable\\n        override\\n        returns (bytes[] memory results)\\n    {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ea37766655ad050a0beca38b517a425be1f52bc165985891edcfcb46e0e7c77\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/util/PeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title Depositor\\n/// @author Voyage Finance\\n/// @notice Forwards calls to ERC-4626 compliant Vaults, but with the actual depositor appended to the encoded call data.\\n/// @dev This does not work if the receiving contract does not implement ERC-4626!\\nabstract contract PeripheryPayments {\\n    using SafeERC20 for IERC20;\\n\\n    function pullToken(\\n        IERC20 token,\\n        uint256 amount,\\n        address from,\\n        address recipient\\n    ) public payable {\\n        token.safeTransferFrom(from, recipient, amount);\\n    }\\n\\n    function approve(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) public payable {\\n        token.safeApprove(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6693bca3a626f4c685bb1c8d9a5812a248c45232e601f9fe1fac80bfd4379a1c\",\"license\":\"AGPL-3.0-only\"},\"contracts/shared/util/SelfPermit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.9;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISelfPermit.sol\\\";\\nimport \\\"../interfaces/IERC20PermitAllowed.sol\\\";\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\\n/// that requires an approval in a single transaction.\\nabstract contract SelfPermit is ISelfPermit {\\n    /// @inheritdoc ISelfPermit\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20Permit(token).permit(\\n            msg.sender,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable override {\\n        if (IERC20(token).allowance(msg.sender, address(this)) < value)\\n            selfPermit(token, value, deadline, v, r, s);\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20PermitAllowed(token).permit(\\n            msg.sender,\\n            address(this),\\n            nonce,\\n            expiry,\\n            true,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable override {\\n        if (\\n            IERC20(token).allowance(msg.sender, address(this)) <\\n            type(uint256).max\\n        ) selfPermitAllowed(token, nonce, expiry, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x456e000cc02654d5e0df6b67960aa8a9c92b4f960ffa5d852e021ece7995bf20\",\"license\":\"AGPL-3.0-only\"},\"contracts/vault/SubVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IVault} from \\\"./Vault.sol\\\";\\n\\ninterface ISubvault {\\n    function initialize(address _parent, address _owner) external;\\n\\n    function updateOwner(address _newOwner) external;\\n\\n    function execute(address target, bytes calldata data)\\n        external\\n        returns (bytes memory);\\n}\\n\\ncontract SubVault is Initializable, ISubvault, IERC721Receiver {\\n    struct SubVaultStorageV1 {\\n        address owner;\\n        address parent;\\n    }\\n\\n    event Execute(address _vault, address _target, bytes _data);\\n\\n    // only `parent` should be able to call\\n    modifier authorised() {\\n        require(msg.sender == diamondStorage().parent, \\\"SubVault: only parent\\\");\\n        _;\\n    }\\n\\n    function initialize(address _owner, address _parent) external initializer {\\n        diamondStorage().owner = _owner;\\n        diamondStorage().parent = _parent;\\n    }\\n\\n    function execute(address target, bytes calldata data)\\n        external\\n        authorised\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory ret) = target.call(data);\\n        require(success);\\n        emit Execute(address(this), target, data);\\n        return ret;\\n    }\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4 ret) {\\n        if (\\n            !IVault(diamondStorage().parent).collectionInitialized(msg.sender)\\n        ) {\\n            revert InvalidSenderAddress();\\n        }\\n        IVault(diamondStorage().parent).onERC721Transferred(\\n            msg.sender,\\n            tokenId,\\n            from,\\n            address(this)\\n        );\\n    }\\n\\n    function updateOwner(address _newOwner) external authorised {\\n        diamondStorage().owner = _newOwner;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return diamondStorage().owner;\\n    }\\n\\n    /************************************** Internal Functions **************************************/\\n\\n    // Returns the struct from a specified position in contract storage\\n    // ds is short for DiamondStorage\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (SubVaultStorageV1 storage ds)\\n    {\\n        // Specifies a random position in contract storage\\n        // This can be done with a keccak256 hash of a unique string as is\\n        // done here or other schemes can be used such as this:\\n        // bytes32 storagePosition = keccak256(abi.encodePacked(ERC1155.interfaceId, ERC1155.name, address(this)));\\n        bytes32 storagePosition = keccak256(\\n            \\\"finance.voyage.subvault.v1.storage\\\"\\n        );\\n        // Set the position of our struct in contract storage\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n}\\n\\n/* --------------------------------- errors -------------------------------- */\\nerror InvalidSenderAddress();\\n\",\"keccak256\":\"0x5b787655b7f8b106b0efe0d992137cc7c18600724443ef70ab50cafe565ba6a7\",\"license\":\"GPL-3.0\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {VaultFacet} from \\\"../voyage/facets/VaultFacet.sol\\\";\\nimport {SecurityFacet} from \\\"../voyage/facets/SecurityFacet.sol\\\";\\nimport {IWETH9} from \\\"../shared/interfaces/IWETH9.sol\\\";\\nimport {ISubvault} from \\\"./SubVault.sol\\\";\\n\\nstruct VaultStorageV1 {\\n    address voyage;\\n    address user;\\n    address paymaster;\\n    address weth;\\n    // subvault array, for retrieval by DataProviderFacet and client-side enumeration\\n    address[] subvaults;\\n    // mapping of subvault to owner\\n    mapping(address => address) subvaultOwnerIndex;\\n    // mapping of owner to subvault\\n    mapping(address => address) ownerSubvaultIndex;\\n    // mapping of subvault => paused status\\n    mapping(address => bool) subvaultStatusIndex;\\n    mapping(address => uint256[]) tokenSet;\\n    // mapping of erc721 address to mapping of tokenId to custody information\\n    // to save storage space, only store this data if the token is transferred out of the Vault (i.e., to a Subvault or external contract)\\n    mapping(address => mapping(uint256 => CustodyData)) custodyIndex;\\n}\\n\\nstruct CustodyData {\\n    // the \\\"owner\\\" of the token -- must be Vault or a Subvault.\\n    address owner;\\n    // the current holder of the token, e.g., battle game.\\n    address custodian;\\n}\\n\\nlibrary LibVaultStorage {\\n    // Returns the struct from a specified position in contract storage\\n    // ds is short for DiamondStorage\\n    function ds() internal pure returns (VaultStorageV1 storage ds) {\\n        // Set the position of our struct in contract storage\\n        bytes32 storagePosition = keccak256(\\\"diamond.storage.vault.voyage\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n}\\n\\ninterface IVault {\\n    event GasRefunded(\\n        address _paymaster,\\n        address _dst,\\n        uint256 _amount,\\n        uint256 _shortfall,\\n        bytes _result\\n    );\\n\\n    event Execute(address _vault, address _target, bytes _data);\\n\\n    function initialize(\\n        address _voyage,\\n        address _user,\\n        address _paymaster,\\n        address _weth\\n    ) external;\\n\\n    function execute(bytes calldata _data, uint256 _value) external payable;\\n\\n    function refundGas(uint256 _amount, address _dst) external;\\n\\n    function onERC721Transferred(\\n        address _collection,\\n        uint256 _tokenId,\\n        address _src,\\n        address _dst\\n    ) external;\\n\\n    function collectionInitialized(address _collection)\\n        external\\n        view\\n        returns (bool);\\n}\\n\\ncontract Vault is Initializable, IERC1271, IVault {\\n    bytes internal constant EMPTY_BYTES = \\\"\\\";\\n\\n    modifier onlyPaymaster() {\\n        require(_isPaymaster(msg.sender), \\\"Only paymaster allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthorised() {\\n        SecurityFacet sf = SecurityFacet(LibVaultStorage.ds().voyage);\\n        require(\\n            sf.isAuthorised(msg.sender, address(this), msg.sig),\\n            \\\"unauthorised\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(\\n        address _voyage,\\n        address _user,\\n        address _paymaster,\\n        address _weth\\n    ) public initializer {\\n        LibVaultStorage.ds().voyage = _voyage;\\n        LibVaultStorage.ds().user = _user;\\n        LibVaultStorage.ds().paymaster = _paymaster;\\n        LibVaultStorage.ds().weth = _weth;\\n        IERC20(_weth).approve(_voyage, type(uint256).max);\\n    }\\n\\n    function execute(bytes calldata _data, uint256 _value)\\n        external\\n        payable\\n        onlyAuthorised\\n    {\\n        (address target, bytes memory data) = abi.decode(\\n            _data,\\n            (address, bytes)\\n        );\\n        (bool success, bytes memory ret) = target.call{value: _value}(data);\\n        if (!success) {\\n            revert ExternalCallFailed(bytesToHex(ret));\\n        }\\n        emit Execute(address(this), target, data);\\n    }\\n\\n    function refundGas(uint256 _amount, address _dst) external onlyPaymaster {\\n        uint256 amountRefundable = _amount;\\n        uint256 ethBal = address(this).balance;\\n        // we need to unwrap some WETH in this case.\\n        if (ethBal < _amount) {\\n            IWETH9 weth9 = IWETH9(LibVaultStorage.ds().weth);\\n            uint256 balanceWETH9 = weth9.balanceOf(address(this));\\n            uint256 toUnwrap = _amount - ethBal;\\n            // this should not happen, but if it does, we should take what we can instead of reverting\\n            if (toUnwrap > balanceWETH9) {\\n                weth9.withdraw(balanceWETH9);\\n                amountRefundable = amountRefundable - toUnwrap - balanceWETH9;\\n            } else {\\n                weth9.withdraw(toUnwrap);\\n            }\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory result) = _dst.call{\\n            value: amountRefundable\\n        }(EMPTY_BYTES);\\n        if (!success) {\\n            revert GasRefundFailed(_dst);\\n        }\\n        emit GasRefunded(\\n            LibVaultStorage.ds().paymaster,\\n            _dst,\\n            amountRefundable,\\n            _amount - amountRefundable,\\n            result\\n        );\\n    }\\n\\n    /// @notice Approves Voyage to manage WETH for the Vault\\n    /// @dev Anyone may call this function\\n    function approveVoyage() public {\\n        VaultStorageV1 storage ds = LibVaultStorage.ds();\\n        IERC20(ds.weth).approve(ds.voyage, type(uint256).max);\\n    }\\n\\n    function callSubVault(\\n        address _subvault,\\n        address _target,\\n        bytes calldata _data\\n    ) external onlyAuthorised {\\n        SecurityFacet sf = SecurityFacet(LibVaultStorage.ds().voyage);\\n        if (\\n            !sf.isAuthorised(\\n                msg.sender,\\n                _subvault,\\n                ISubvault(address(0)).execute.selector\\n            )\\n        ) {\\n            revert UnAuthorised();\\n        }\\n\\n        ISubvault(_subvault).execute(_target, _data);\\n    }\\n\\n    function collectionInitialized(address _collection)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        VaultFacet vf = VaultFacet(LibVaultStorage.ds().voyage);\\n        return vf.collectionInitialized(_collection);\\n    }\\n\\n    /// @notice Update subvault's owner\\n    /// @param _subvault The address of the subvaault\\n    /// @param _newOwner The address of the new owner\\n    function updateSubvaultOwner(address _subvault, address _newOwner)\\n        external\\n        onlyAuthorised\\n    {\\n        address oldOwner = LibVaultStorage.ds().subvaultOwnerIndex[_subvault];\\n        if (oldOwner == address(0)) {\\n            revert InvalidSubvaultAddress(_subvault);\\n        }\\n        ISubvault(_subvault).updateOwner(_newOwner);\\n        LibVaultStorage.ds().subvaultOwnerIndex[_subvault] = _newOwner;\\n        LibVaultStorage.ds().ownerSubvaultIndex[_newOwner] = _subvault;\\n        delete LibVaultStorage.ds().ownerSubvaultIndex[oldOwner];\\n    }\\n\\n    /// @notice Pause sub vault\\n    /// @param _subvault The address of the subvault\\n    function pauseSubvault(address _subvault) external {\\n        if (LibVaultStorage.ds().subvaultOwnerIndex[_subvault] == address(0)) {\\n            revert InvalidSubvaultAddress(_subvault);\\n        }\\n        LibVaultStorage.ds().subvaultStatusIndex[_subvault] = true;\\n    }\\n\\n    /// @notice Uppause the sub vault\\n    /// @param _subvault The address of the subvault\\n    function unpauseSubvault(address _subvault) external {\\n        if (LibVaultStorage.ds().subvaultOwnerIndex[_subvault] == address(0)) {\\n            revert InvalidSubvaultAddress(_subvault);\\n        }\\n        LibVaultStorage.ds().subvaultStatusIndex[_subvault] = false;\\n    }\\n\\n    function onERC721Transferred(\\n        address _collection,\\n        uint256 _tokenId,\\n        address _src,\\n        address _dst\\n    ) external {\\n        if (\\n            msg.sender != address(this) &&\\n            LibVaultStorage.ds().subvaultOwnerIndex[msg.sender] == address(0)\\n        ) {\\n            revert InvalidTransfer(\\\"invalid sender\\\");\\n        }\\n        if (\\n            LibVaultStorage.ds().custodyIndex[_collection][_tokenId].owner !=\\n            address(0)\\n        ) {\\n            revert InvalidTransfer(\\\"invalid token id\\\");\\n        }\\n        LibVaultStorage.ds().custodyIndex[_collection][_tokenId].owner = _src;\\n        LibVaultStorage.ds().tokenSet[_collection].push(_tokenId);\\n    }\\n\\n    /// @notice Called by erc721 contract or sub vaults\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4 ret) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @notice Should return whether the signature provided is valid for the provided data\\n    /// @param hash      Hash of the data to be signed\\n    /// @param signature Signature byte array associated with _data\\n    function isValidSignature(bytes32 hash, bytes memory signature)\\n        external\\n        view\\n        returns (bytes4 magicValue)\\n    {\\n        address sender = recoverSigner(hash, signature);\\n        if (LibVaultStorage.ds().user == sender) {\\n            return 0x1626ba7e;\\n        }\\n        return 0xffffffff;\\n    }\\n\\n    /// @notice Recover the signer of hash, assuming it's an EOA account\\n    /// @dev Only for EthSign signatures\\n    /// @param _hash       Hash of message that was signed\\n    /// @param _signature  Signature encoded as (bytes32 r, bytes32 s, uint8 v)\\n    function recoverSigner(bytes32 _hash, bytes memory _signature)\\n        internal\\n        pure\\n        returns (address signer)\\n    {\\n        require(\\n            _signature.length == 65,\\n            \\\"SignatureValidator#recoverSigner: invalid signature length\\\"\\n        );\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(_signature, 32))\\n            s := mload(add(_signature, 64))\\n            v := byte(0, mload(add(_signature, 96)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        //\\n        // Source OpenZeppelin\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol\\n\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            revert(\\n                \\\"SignatureValidator#recoverSigner: invalid signature 's' value\\\"\\n            );\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\n                \\\"SignatureValidator#recoverSigner: invalid signature 'v' value\\\"\\n            );\\n        }\\n\\n        // Recover ECDSA signer\\n        signer = ecrecover(_hash, v, r, s);\\n\\n        // Prevent signer from being 0x0\\n        require(\\n            signer != address(0x0),\\n            \\\"SignatureValidator#recoverSigner: INVALID_SIGNER\\\"\\n        );\\n\\n        return signer;\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice Get sub vault address of a specific user\\n    /// @param _owner The address of the user\\n    function getSubvaultOf(address _owner) public view returns (address) {\\n        return LibVaultStorage.ds().ownerSubvaultIndex[_owner];\\n    }\\n\\n    /// @notice Get sub vault's address\\n    /// @param _subvault The address of the subvault\\n    function getSubvaultStatus(address _subvault) public view returns (bool) {\\n        return LibVaultStorage.ds().subvaultStatusIndex[_subvault];\\n    }\\n\\n    /// @notice Get token status\\n    /// @param _collection The address of the ERC721 contract\\n    /// @param _tokenId Token id\\n    function getTokenStatus(address _collection, uint256 _tokenId)\\n        public\\n        view\\n        returns (CustodyData memory)\\n    {\\n        return LibVaultStorage.ds().custodyIndex[_collection][_tokenId];\\n    }\\n\\n    /// @notice Get token list owned by this vault\\n    /// @param _collection The address of the ERC721 contract\\n    function getTokensOwned(address _collection)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return LibVaultStorage.ds().tokenSet[_collection];\\n    }\\n\\n    function _isPaymaster(address _src) internal view returns (bool) {\\n        return _src == LibVaultStorage.ds().paymaster;\\n    }\\n\\n    function bytesToHex(bytes memory buffer)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(buffer.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < buffer.length; i++) {\\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n    error GasRefundFailed(address _paymaster);\\n    error ExternalCallFailed(string);\\n    error UnAuthorised();\\n    error InvalidSubvaultAddress(address subvault);\\n    error InvalidTransfer(string reason);\\n}\\n\",\"keccak256\":\"0x17743641b7071428ea6e1291d4f0c7e38690c3006c8b68b39e640fc324dd1eeb\",\"license\":\"GPL-3.0\"},\"contracts/voyage/auth/DSAuth.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// lifted from: https://github.com/dapphub/ds-auth/blob/a51e7caa1f03eeffed66d67f3b38605e0f1f881d/src/auth.sol\\n\\npragma solidity ^0.8.9;\\n\\ninterface DSAuthority {\\n    function canCall(\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) external view returns (bool);\\n}\\n\\ncontract DSAuthEvents {\\n    event LogSetAuthority(address indexed authority);\\n    event LogSetOwner(address indexed owner);\\n}\\n\\ncontract DSAuth is DSAuthEvents {\\n    DSAuthority public authority;\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit LogSetOwner(msg.sender);\\n    }\\n\\n    function setOwner(address owner_) public auth {\\n        owner = owner_;\\n        emit LogSetOwner(owner);\\n    }\\n\\n    function setAuthority(DSAuthority authority_) public auth {\\n        authority = authority_;\\n        emit LogSetAuthority(address(authority));\\n    }\\n\\n    modifier auth() {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"ds-auth-unauthorized\\\");\\n        _;\\n    }\\n\\n    function isAuthorized(address src, bytes4 sig)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else if (authority == DSAuthority(address(0))) {\\n            return false;\\n        } else {\\n            return authority.canCall(src, address(this), sig);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb069264548df428fc3c0489dd970632c1a0b85a8a26bbf7a5b0c01f00d88b75\",\"license\":\"GNU-3\"},\"contracts/voyage/auth/DSGuard.sol\":{\"content\":\"// guard.sol -- simple whitelist implementation of DSAuthority\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// lifted from: https://github.com/dapphub/ds-guard/blob/af05632249f98bf3942b9482c5bf69e8bd45284e/src/guard.sol\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./DSAuth.sol\\\";\\n\\ncontract DSGuardEvents {\\n    event LogPermit(\\n        bytes32 indexed src,\\n        bytes32 indexed dst,\\n        bytes32 indexed sig\\n    );\\n\\n    event LogForbid(\\n        bytes32 indexed src,\\n        bytes32 indexed dst,\\n        bytes32 indexed sig\\n    );\\n}\\n\\ncontract DSGuard is DSAuth, DSAuthority, DSGuardEvents {\\n    bytes32 public constant ANY = bytes32(type(uint256).max);\\n\\n    mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => bool))) acl;\\n\\n    function canCall(\\n        address src_,\\n        address dst_,\\n        bytes4 sig\\n    ) public view returns (bool) {\\n        bytes32 src = bytes32(bytes20(src_));\\n        bytes32 dst = bytes32(bytes20(dst_));\\n\\n        return\\n            acl[src][dst][sig] ||\\n            acl[src][dst][ANY] ||\\n            acl[src][ANY][sig] ||\\n            acl[src][ANY][ANY] ||\\n            acl[ANY][dst][sig] ||\\n            acl[ANY][dst][ANY] ||\\n            acl[ANY][ANY][sig] ||\\n            acl[ANY][ANY][ANY];\\n    }\\n\\n    function permit(\\n        bytes32 src,\\n        bytes32 dst,\\n        bytes32 sig\\n    ) public auth {\\n        acl[src][dst][sig] = true;\\n        emit LogPermit(src, dst, sig);\\n    }\\n\\n    function forbid(\\n        bytes32 src,\\n        bytes32 dst,\\n        bytes32 sig\\n    ) public auth {\\n        acl[src][dst][sig] = false;\\n        emit LogForbid(src, dst, sig);\\n    }\\n\\n    function permit(\\n        address src,\\n        address dst,\\n        bytes32 sig\\n    ) public {\\n        permit(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\\n    }\\n\\n    function forbid(\\n        address src,\\n        address dst,\\n        bytes32 sig\\n    ) public {\\n        forbid(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\\n    }\\n}\\n\\ncontract DSGuardFactory {\\n    mapping(address => bool) public isGuard;\\n\\n    function newGuard() public returns (DSGuard guard) {\\n        guard = new DSGuard();\\n        guard.setOwner(msg.sender);\\n        isGuard[address(guard)] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x1c08eb21a713823b838ceed6275d138a6e62fd425094d3d089980697cd94264a\"},\"contracts/voyage/auth/DSRoles.sol\":{\"content\":\"// roles.sol - roled based authentication\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// forked from: https://github.com/dapphub/ds-roles/blob/53d56949c0f98c9b5909df9c0d95025b67f3bb75/src/roles.sol\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./DSAuth.sol\\\";\\n\\ncontract DSRoles is DSAuth, DSAuthority {\\n    mapping(address => bool) _root_users;\\n    mapping(address => bytes32) _user_roles;\\n    mapping(address => mapping(bytes4 => bytes32)) _capability_roles;\\n    mapping(address => mapping(bytes4 => bool)) _public_capabilities;\\n\\n    function getUserRoles(address who) public view returns (bytes32) {\\n        return _user_roles[who];\\n    }\\n\\n    function getCapabilityRoles(address code, bytes4 sig)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _capability_roles[code][sig];\\n    }\\n\\n    function isUserRoot(address who) public view returns (bool) {\\n        return _root_users[who];\\n    }\\n\\n    function isCapabilityPublic(address code, bytes4 sig)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _public_capabilities[code][sig];\\n    }\\n\\n    function hasUserRole(address who, uint8 role) public view returns (bool) {\\n        bytes32 roles = getUserRoles(who);\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        return bytes32(0) != roles & shifted;\\n    }\\n\\n    function canCall(\\n        address caller,\\n        address code,\\n        bytes4 sig\\n    ) public view returns (bool) {\\n        if (isUserRoot(caller) || isCapabilityPublic(code, sig)) {\\n            return true;\\n        } else {\\n            bytes32 has_roles = getUserRoles(caller);\\n            bytes32 needs_one_of = getCapabilityRoles(code, sig);\\n            return bytes32(0) != has_roles & needs_one_of;\\n        }\\n    }\\n\\n    function BITNOT(bytes32 input) internal pure returns (bytes32 output) {\\n        return (input ^ bytes32(type(uint256).max));\\n    }\\n\\n    function setRootUser(address who, bool enabled) public auth {\\n        _root_users[who] = enabled;\\n    }\\n\\n    function setUserRole(\\n        address who,\\n        uint8 role,\\n        bool enabled\\n    ) public auth {\\n        bytes32 last_roles = _user_roles[who];\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        if (enabled) {\\n            _user_roles[who] = last_roles | shifted;\\n        } else {\\n            _user_roles[who] = last_roles & BITNOT(shifted);\\n        }\\n    }\\n\\n    function setPublicCapability(\\n        address code,\\n        bytes4 sig,\\n        bool enabled\\n    ) public auth {\\n        _public_capabilities[code][sig] = enabled;\\n    }\\n\\n    function setRoleCapability(\\n        uint8 role,\\n        address code,\\n        bytes4 sig,\\n        bool enabled\\n    ) public auth {\\n        bytes32 last_roles = _capability_roles[code][sig];\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        if (enabled) {\\n            _capability_roles[code][sig] = last_roles | shifted;\\n        } else {\\n            _capability_roles[code][sig] = last_roles & BITNOT(shifted);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x854b2fe5dcb2ab5277a1a1c3a2f97367c4c00f8076f746a88cfbde1eb43b2f15\"},\"contracts/voyage/facets/SecurityFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {Storage, Authorisation, LibAppStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\nimport {LibSecurity} from \\\"../libraries/LibSecurity.sol\\\";\\nimport {VaultFacet} from \\\"./VaultFacet.sol\\\";\\n\\ncontract SecurityFacet is Storage {\\n    using LibSecurity for Authorisation;\\n\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    function paused() public view returns (bool) {\\n        return LibAppStorage.ds()._paused;\\n    }\\n\\n    function pause() public authorised {\\n        LibAppStorage.ds()._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    function unpause() public authorised {\\n        LibAppStorage.ds()._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    function grantRole(\\n        address user,\\n        uint8 role,\\n        bool enabled\\n    ) public authorised {\\n        LibSecurity.grantRole(LibAppStorage.ds().auth, user, role, enabled);\\n    }\\n\\n    function grantRolePermission(\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) public authorised {\\n        LibSecurity.grantRolePermission(\\n            LibAppStorage.ds().auth,\\n            role,\\n            target,\\n            sig\\n        );\\n    }\\n\\n    function revokeRolePermission(\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) public authorised {\\n        LibSecurity.revokeRolePermission(\\n            LibAppStorage.ds().auth,\\n            role,\\n            target,\\n            sig\\n        );\\n    }\\n\\n    function grantPermission(\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) public authorised {\\n        LibSecurity.grantPermission(LibAppStorage.ds().auth, src, dst, sig);\\n    }\\n\\n    function revokePermission(\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) public authorised {\\n        LibSecurity.revokePermission(LibAppStorage.ds().auth, src, dst, sig);\\n    }\\n\\n    function isAuthorisedInbound(address src, bytes4 sig)\\n        public\\n        returns (bool)\\n    {\\n        return\\n            LibSecurity.isAuthorisedInbound(LibAppStorage.ds().auth, src, sig);\\n    }\\n\\n    function isAuthorisedOutbound(address dst, bytes4 sig)\\n        public\\n        returns (bool)\\n    {\\n        return\\n            LibSecurity.isAuthorisedOutbound(LibAppStorage.ds().auth, dst, sig);\\n    }\\n\\n    function isAuthorised(\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) public returns (bool) {\\n        return LibSecurity.isAuthorised(LibAppStorage.ds().auth, src, dst, sig);\\n    }\\n\\n    function isTrustedForwarder(address _forwarder) public view returns (bool) {\\n        return LibSecurity.isTrustedForwarder(_forwarder);\\n    }\\n}\\n\",\"keccak256\":\"0x707a24ea7a51b505658e786810804d26d3d75d2945c7e195a6cb2f27a9e04b3a\",\"license\":\"GPL-3.0\"},\"contracts/voyage/facets/VaultFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {BeaconProxy} from \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {LibAppStorage, AppStorage, Storage, NFTInfo, DiamondFacet, ReserveConfigurationMap} from \\\"../libraries/LibAppStorage.sol\\\";\\nimport {LibVault} from \\\"../libraries/LibVault.sol\\\";\\nimport {LibSecurity} from \\\"../libraries/LibSecurity.sol\\\";\\nimport {LibReserveConfiguration} from \\\"../libraries/LibReserveConfiguration.sol\\\";\\nimport {IVault} from \\\"../../vault/Vault.sol\\\";\\nimport {IDiamondCut} from \\\"../../shared/diamond/interfaces/IDiamondCut.sol\\\";\\nimport {DiamondCutFacet} from \\\"../../shared/diamond/facets/DiamondCutFacet.sol\\\";\\nimport {IWETH9} from \\\"../../shared/interfaces/IWETH9.sol\\\";\\n\\ncontract VaultFacet is Storage, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using LibReserveConfiguration for ReserveConfigurationMap;\\n    /* --------------------------------- events --------------------------------- */\\n    event VaultCreated(address _vault, address _owner, uint256 _numVaults);\\n    event VaultMarginCredited(\\n        address indexed _vault,\\n        address indexed _asset,\\n        address _sponsor,\\n        uint256 _amount\\n    );\\n    event VaultMarginRedeemed(\\n        address indexed _vault,\\n        address indexed _asset,\\n        address _sponsor,\\n        uint256 _amount\\n    );\\n    event VaultImplementationUpdated(address _impl);\\n\\n    /* ----------------------------- admin interface ---------------------------- */\\n    function createVault(address _user, bytes20 _salt) external authorised {\\n        bytes memory data = getEncodedVaultInitData(_user);\\n        bytes32 newsalt = newSalt(_salt, _user);\\n        address vaultBeaconProxy;\\n        bytes memory initCode = abi.encodePacked(\\n            type(BeaconProxy).creationCode,\\n            abi.encode(vaultBeacon(), data)\\n        );\\n        assembly {\\n            vaultBeaconProxy := create2(\\n                0,\\n                add(initCode, 0x20),\\n                mload(initCode),\\n                newsalt\\n            )\\n        }\\n        if (vaultBeaconProxy == address(0)) {\\n            revert FailedDeployVault();\\n        }\\n        uint256 numVaults = LibVault.recordVault(_user, vaultBeaconProxy);\\n        emit VaultCreated(vaultBeaconProxy, _user, numVaults);\\n    }\\n\\n    /* ---------------------- vault configuration interface --------------------- */\\n    function getVaultImpl() external view returns (address) {\\n        return LibVault.getVaultImpl();\\n    }\\n\\n    function setVaultImpl(address _impl) external authorised {\\n        if (_impl == address(0) || !Address.isContract(_impl)) {\\n            revert InvalidVaultImpl();\\n        }\\n        LibVault.setVaultImpl(_impl);\\n        emit VaultImplementationUpdated(_impl);\\n    }\\n\\n    /* ---------------------- user interface --------------------- */\\n    function withdrawNFT(\\n        address _vault,\\n        address _collection,\\n        uint256 _tokenId\\n    ) public onlyVaultOwner(_vault, _msgSender()) nonReentrant {\\n        checkContractAddr(_collection);\\n        if (LibAppStorage.ds().nftIndex[_collection][_tokenId].isCollateral) {\\n            revert InvalidWithdrawal();\\n        }\\n        delete LibAppStorage.ds().nftIndex[_collection][_tokenId];\\n        bytes4 selector = IERC721(_collection).transferFrom.selector;\\n        bytes memory param = abi.encode(_vault, _msgSender(), _tokenId);\\n        bytes memory data = abi.encodePacked(selector, param);\\n        bytes memory encodedData = abi.encode(_collection, data);\\n        IVault(_vault).execute(encodedData, 0);\\n    }\\n\\n    function transferCurrency(\\n        address _vault,\\n        address _currency,\\n        address _to,\\n        uint256 _amount\\n    ) public onlyVaultOwner(_vault, _msgSender()) nonReentrant {\\n        checkContractAddr(_currency);\\n        // to prevent currency being a collection address\\n        if (LibAppStorage.ds()._reserveData[_currency].currency != address(0)) {\\n            revert InvalidCurrencyAddress();\\n        }\\n        bytes4 selector = IERC20(_currency).transferFrom.selector;\\n        bytes memory param = abi.encode(_vault, _to, _amount);\\n        bytes memory data = abi.encodePacked(selector, param);\\n        bytes memory encodedData = abi.encode(_currency, data);\\n        IVault(_vault).execute(encodedData, 0);\\n    }\\n\\n    function wrapVaultETH(address _vault, uint256 _value)\\n        public\\n        onlyVaultOwner(_vault, _msgSender())\\n        nonReentrant\\n    {\\n        bytes4 selector = IWETH9(address(0)).deposit.selector;\\n        bytes memory data = abi.encodePacked(selector);\\n        bytes memory encodedData = abi.encode(LibAppStorage.ds().WETH9, data);\\n        IVault(_vault).execute(encodedData, _value);\\n    }\\n\\n    function unwrapVaultETH(address _vault, uint256 _vaule)\\n        public\\n        onlyVaultOwner(_vault, _msgSender())\\n        nonReentrant\\n    {\\n        bytes4 selector = IWETH9(address(0)).withdraw.selector;\\n        bytes memory param = abi.encode(_vaule);\\n        bytes memory data = abi.encodePacked(selector, param);\\n        bytes memory encodedData = abi.encode(LibAppStorage.ds().WETH9, data);\\n        IVault(_vault).execute(encodedData, 0);\\n    }\\n\\n    /* ---------------------- view functions --------------------- */\\n    function computeCounterfactualAddress(address _user, bytes20 _salt)\\n        external\\n        view\\n        returns (address)\\n    {\\n        bytes memory data = getEncodedVaultInitData(_user);\\n        bytes memory initCode = abi.encodePacked(\\n            type(BeaconProxy).creationCode,\\n            abi.encode(vaultBeacon(), data)\\n        );\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0xff),\\n                address(this),\\n                newSalt(_salt, _user),\\n                keccak256(initCode)\\n            )\\n        );\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    function collectionInitialized(address _collection)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return LibAppStorage.ds()._reserveData[_collection].initialized;\\n    }\\n\\n    function newSalt(bytes20 _salt, address _owner)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(keccak256(abi.encodePacked(_owner)), _salt)\\n            );\\n    }\\n\\n    function vaultBeacon() public view returns (address) {\\n        return LibVault.vaultBeacon();\\n    }\\n\\n    function subVaultBeacon() public view returns (address) {\\n        return LibVault.subVaultBeacon();\\n    }\\n\\n    function getVaultAddr(address _user) public view returns (address) {\\n        return LibVault.getVaultAddress(_user);\\n    }\\n\\n    function getEncodedVaultInitData(address _user)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        bytes memory data = abi.encodeWithSelector(\\n            IVault(address(0)).initialize.selector,\\n            address(this),\\n            _user,\\n            LibAppStorage.ds().paymaster,\\n            LibAppStorage.ds().WETH9\\n        );\\n        return data;\\n    }\\n\\n    function checkContractAddr(address _collection) internal view {\\n        if (!Address.isContract(_collection)) {\\n            revert InvalidCollectionAddress();\\n        }\\n    }\\n}\\n\\n/* --------------------------------- errors -------------------------------- */\\nerror InvalidVaultImpl();\\nerror InvalidCollectionAddress();\\nerror InvalidCurrencyAddress();\\nerror FailedDeployVault();\\nerror InvalidWithdrawal();\\n\",\"keccak256\":\"0x20066f707f74d0c966070144423a5a4e263e4e866c2301ed40e7f94bf9919527\",\"license\":\"GPL-3.0\"},\"contracts/voyage/interfaces/IVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IVaultFactory {\\n    function createVault(\\n        address owner,\\n        address voyage,\\n        uint256 version,\\n        bytes32 checksum,\\n        bytes32 salt\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xf63dca9d9d7b27ab560a723d559df3339d7cfcc30cc3f9e6dd46a22009cef7a4\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {DSRoles} from \\\"../auth/DSRoles.sol\\\";\\nimport {DSGuard} from \\\"../auth/DSGuard.sol\\\";\\nimport {LibSecurity} from \\\"./LibSecurity.sol\\\";\\nimport {IVaultFactory} from \\\"../interfaces/IVaultFactory.sol\\\";\\nimport {LibVault} from \\\"./LibVault.sol\\\";\\nimport {IDiamondCut} from \\\"../../shared/diamond/interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../../shared/diamond/interfaces/IDiamondLoupe.sol\\\";\\nimport {DiamondCutFacet} from \\\"../../shared/diamond/facets/DiamondCutFacet.sol\\\";\\nimport {IWETH9} from \\\"../../shared/facets/PaymentsFacet.sol\\\";\\n\\nenum Tranche {\\n    JUNIOR,\\n    SENIOR\\n}\\n\\nstruct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    uint256 currentBorrowRate;\\n    //the decimals of the reserve asset\\n    uint256 decimals;\\n    address interestRateStrategyAddress;\\n    address juniorDepositTokenAddress;\\n    address seniorDepositTokenAddress;\\n    uint40 juniorLastUpdateTimestamp;\\n    uint40 seniorLastUpdateTimestamp;\\n    address currency;\\n    UpgradeableBeacon priceOracle;\\n    bool initialized;\\n}\\n\\nstruct ReserveConfigurationMap {\\n    //bit 0-15: liquidation bonus (uint16)\\n    //bit 16-23: decimals (uint8)\\n    //bit 24: reserve is active\\n    //bit 25: reserve is frozen\\n    //bit 26: borrowing is enabled\\n    //bit 27: reserved\\n    //bit 28-63: min margin (uint36)\\n    //bit 64-99: max margin (uint36)\\n    //bit 100-115: margin requirement (uint16)\\n    //bit 116-131: income ratio (uint16)\\n    //bit 132-139: instalment interval (uint8)\\n    //bit 140-155: loan term (uint16)\\n    //bit 156-163: repayment grace period (uint8)\\n    //bit 164-255: unused\\n    uint256 data;\\n}\\n\\nstruct PMT {\\n    uint256 principal;\\n    uint256 interest;\\n    uint256 fee;\\n    uint256 pmt;\\n}\\n\\nstruct RepaymentData {\\n    uint256 principal;\\n    uint256 interest;\\n    // principal + interest\\n    uint256 total;\\n    uint40 paidAt;\\n    bool isLiquidated;\\n}\\n\\nstruct Loan {\\n    uint256 principal;\\n    uint256 interest;\\n    uint256 protocolFee;\\n    // the total intended length of the loan in seconds - e.g., 90 days\\n    uint40 term;\\n    // the repayment interval - e.g., 30 days\\n    uint40 epoch;\\n    // number of instalments, term / epoch\\n    uint40 nper;\\n    // cache of reserve data\\n    uint256 incomeRatio;\\n    uint256 takeRatio;\\n    // the amount to be repaid per instalment (principal + interest)\\n    PMT pmt;\\n    // the borrow rate of this loan\\n    uint256 apr;\\n    uint40 borrowAt;\\n    // next due data\\n    uint40 nextPaymentDue;\\n    // principal paid\\n    uint256 totalPrincipalPaid;\\n    // interest paid\\n    uint256 totalInterestPaid;\\n    RepaymentData[] repayments;\\n    // size of repayments\\n    uint40 paidTimes;\\n    uint256[] collateral;\\n}\\n\\nstruct LoanList {\\n    uint40 head;\\n    uint40 tail;\\n}\\n\\nstruct BorrowData {\\n    uint40 paidLoanNumber;\\n    // next draw down number\\n    uint40 nextLoanNumber;\\n    uint256 totalPrincipal;\\n    uint256 totalInterest;\\n    uint256 totalFee;\\n    uint256 mapSize;\\n    mapping(uint256 => Loan) loans;\\n}\\n\\nstruct RepayRecord {\\n    uint256 repaidTimes;\\n    uint256 defaultTimes;\\n}\\n\\nstruct BorrowState {\\n    uint256 totalDebt;\\n    uint256 totalInterest;\\n    uint256 totalSeniorInterest;\\n    uint256 totalJuniorInterest;\\n    uint256 avgBorrowRate;\\n    mapping(address => RepayRecord) repayRecord;\\n}\\n\\nstruct ProtocolFee {\\n    address treasuryAddress;\\n    uint40 takeRate; // express in Ray\\n}\\n\\nstruct Authorisation {\\n    DSRoles rbac;\\n    DSGuard acl;\\n}\\n\\nstruct NFTInfo {\\n    bool isCollateral; // this determines whether the NFT can be transferred out of the Vault.\\n    address collection;\\n    uint256 tokenId;\\n    address currency; // record what currency was used to pay\\n    uint256 price; // price in ETH\\n}\\n\\nstruct ERC721AssetInfo {\\n    address marketplace;\\n    address erc20Addr;\\n}\\n\\nstruct UpgradeParam {\\n    mapping(address => mapping(bytes4 => address)) existingSelectorFacetMap;\\n    mapping(address => bytes4[]) existingSelectors;\\n    mapping(address => mapping(bytes4 => bool)) newSelectorSet;\\n    mapping(address => bytes4[]) newSelectors;\\n    mapping(address => IDiamondCut.FacetCut[]) facetCuts;\\n    mapping(address => uint256) facetCutSize;\\n    mapping(uint256 => bytes4[]) selectorsAdded;\\n    mapping(uint256 => bytes4[]) selectorsReplaced;\\n    mapping(uint256 => bytes4[]) selectorsRemoved;\\n}\\n\\nstruct DiamondFacet {\\n    address diamondCutFacet;\\n    address diamondLoupeFacet;\\n    address ownershipFacet;\\n}\\n\\nstruct MarketPlaceData {\\n    address adapterAddr;\\n}\\n\\nstruct AppStorage {\\n    /* -------------------------------- plumbing -------------------------------- */\\n    mapping(bytes32 => address) _addresses;\\n    /* -------------------------------- liquidity ------------------------------- */\\n    UpgradeableBeacon seniorDepositTokenBeacon;\\n    UpgradeableBeacon juniorDepositTokenBeacon;\\n    // mapping of collection address to reserve data\\n    mapping(address => ReserveData) _reserveData;\\n    // List of reserves as a map (reserveId => reserve)\\n    mapping(uint256 => address) _reserveList;\\n    uint16 _reservesCount;\\n    IWETH9 WETH9;\\n    /* ---------------------------------- debt ---------------------------------- */\\n    // collection => currency => vault => data\\n    mapping(address => mapping(address => mapping(address => BorrowData))) _borrowData;\\n    mapping(address => mapping(address => BorrowState)) _borrowState;\\n    bool _paused;\\n    /* ---------------------------------- vault --------------------------------- */\\n    UpgradeableBeacon subVaultBeacon;\\n    UpgradeableBeacon vaultBeacon;\\n    DiamondFacet diamondFacet;\\n    IVaultFactory vaultFactory;\\n    address[] vaults;\\n    // mapping of vault owner to vault instance address\\n    mapping(address => address) vaultMap;\\n    // marketplace address => marketplace type\\n    mapping(address => MarketPlaceData) marketPlaceData;\\n    // collection => tokenId => info\\n    mapping(address => mapping(uint256 => NFTInfo)) nftIndex;\\n    /* ---------------------------------- security --------------------------------- */\\n    Authorisation auth;\\n    address trustedForwarder; // GSN IERC2771 receiver\\n    address paymaster; // VoyagePaymaster address\\n    /* --------------------------------- protocol fee ------------------------------ */\\n    ProtocolFee protocolFee;\\n    /* ---------------------------------- helper --------------------------------- */\\n    // mapping of sender address to helper maps, need to clear after computing\\n    UpgradeParam upgradeParam;\\n}\\n\\nlibrary LibAppStorage {\\n    function ds() internal pure returns (AppStorage storage ds) {\\n        bytes32 storagePosition = keccak256(\\\"diamond.storage.voyage\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n\\n    function cleanUpgradeParam() internal {\\n        UpgradeParam storage s = ds().upgradeParam;\\n        for (uint256 i = 0; i < s.existingSelectors[msg.sender].length; ) {\\n            delete s.existingSelectorFacetMap[msg.sender][\\n                s.existingSelectors[msg.sender][i]\\n            ];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        delete s.existingSelectors[msg.sender];\\n\\n        for (uint256 i = 0; i < s.newSelectors[msg.sender].length; ) {\\n            delete s.newSelectorSet[msg.sender][s.newSelectors[msg.sender][i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        delete s.newSelectors[msg.sender];\\n\\n        delete s.facetCuts[msg.sender];\\n        delete s.facetCutSize[msg.sender];\\n    }\\n}\\n\\ncontract Storage {\\n    modifier whenPaused() {\\n        require(LibAppStorage.ds()._paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!LibAppStorage.ds()._paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier authorised() {\\n        require(auth(), \\\"call is not authorised\\\");\\n        _;\\n    }\\n\\n    modifier onlyVaultOwner(address _vault, address _sender) {\\n        checkVaultAddr(_vault, _sender);\\n        _;\\n    }\\n\\n    function auth() internal view returns (bool) {\\n        return\\n            LibSecurity.isAuthorisedInbound(\\n                LibAppStorage.ds().auth,\\n                _msgSender(),\\n                msg.sig\\n            );\\n    }\\n\\n    function checkVaultAddr(address _vault, address _sender) internal view {\\n        if (!Address.isContract(_vault)) {\\n            revert(\\\"InvalidVaultAddress\\\");\\n        }\\n        if (LibVault.getVaultAddress(_sender) != _vault) {\\n            revert(\\\"InvalidVaultCall\\\");\\n        }\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal view virtual returns (address ret) {\\n        if (\\n            msg.data.length >= 20 && LibSecurity.isTrustedForwarder(msg.sender)\\n        ) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal view virtual returns (bytes calldata ret) {\\n        if (\\n            msg.data.length >= 20 && LibSecurity.isTrustedForwarder(msg.sender)\\n        ) {\\n            return msg.data[0:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3900afc077847504a8d98e592b55e05b27b0719aab05ca38aaa238df55398c14\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {ReserveData, ReserveConfigurationMap, AppStorage, LibAppStorage} from \\\"./LibAppStorage.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Voyage\\n * @notice Implements the bitmap logic to handle the reserve configuration, inspired by Aave\\n **/\\nlibrary LibReserveConfiguration {\\n    uint256 constant internal LIQUIDATION_BONUS_MASK =       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 constant internal DECIMAL_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFF; // prettier-ignore\\n    uint256 constant internal ACTIVE_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFF; // prettier-ignore\\n    uint256 constant internal FROZEN_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFF; // prettier-ignore\\n    uint256 constant internal BORROWING_ENABLE_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFF; // prettier-ignore\\n    uint256 constant internal INCOME_RATIO_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant internal LOAN_INTERVAL_MASK =           0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant internal LOAN_TERM_MASK =               0xFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant internal GRACE_PERIOD_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant internal OPTIMAL_LIQUIDITY_RATIO_MASK = 0xFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant internal MAX_TWAP_STALENESS_MASK      = 0xFFFFFFFFF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n    uint256 internal constant DECIMAL_MASK_BIT_POSITION = 16;\\n    uint256 internal constant ACTIVE_MASK_BIT_POSITION = 24;\\n    uint256 internal constant FROZEN_MASK_BIT_POSITION = 25;\\n    uint256 internal constant BORROWING_ENABLE_MASK_POSITION = 26;\\n    /// @dev bit 27 reserved\\n    uint256 internal constant INCOME_RATIO_MASK_BIT_POSITION = 116;\\n    uint256 internal constant LOAN_INTERVAL_MASK_BIT_POSITION = 132;\\n    uint256 internal constant LOAN_TERM_MASK_BIT_POSITION = 140;\\n    uint256 internal constant GRACE_PERIOD_MASK_BIT_POSITION = 156;\\n    uint256 internal constant OPTIMAL_LIQUIDITY_RATIO_MASK_BIT_POSITION = 164;\\n    uint256 internal constant MAX_TWAP_STALENESS_MASK_BIT_POSITION = 180;\\n\\n    uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535; // percentage\\n    uint256 internal constant MAX_VALID_DECIMALS = 255;\\n    uint256 internal constant MAX_VALID_INCOME_RATIO = 10000; // percentage, max 100%/10000 bps\\n    uint256 internal constant MAX_VALID_LOAN_INTERVAL = 255; // days\\n    uint256 internal constant MAX_VALID_LOAN_TERM = 65535; // days\\n    uint256 internal constant MAX_VALID_GRACE_PERIOD = 255; // days\\n    uint256 internal constant MAX_VALID_OPTIMAL_RATIO = type(uint32).max; // percentage\\n    uint256 internal constant MAX_VALID_TWAP_STALENESS = type(uint40).max;\\n\\n    error InvalidLiquidationBonus();\\n    error InvalidDecimals();\\n    error InvalidIncomeRatio();\\n    error InvalidLoanInterval();\\n    error InvalidLoanTerm();\\n    error InvalidGracePeriod();\\n    error InvalidOptimalRatio();\\n    error InvalidMaxTwapStaleness();\\n\\n    event LiquidationConfigurationUpdated(\\n        address indexed _asset,\\n        uint256 _liquidationBonus\\n    );\\n\\n    /* --------------------------- receiver functions --------------------------- */\\n\\n    /**\\n     * Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flags representing active, frozen, borrowing enabled\\n     **/\\n    function getFlags(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_ENABLE_MASK) != 0\\n        );\\n    }\\n\\n    function setLiquidationBonus(\\n        ReserveConfigurationMap memory self,\\n        uint256 liquidationBonus\\n    ) internal pure {\\n        if (liquidationBonus > MAX_VALID_LIQUIDATION_BONUS) {\\n            revert InvalidLiquidationBonus();\\n        }\\n        self.data = (self.data & LIQUIDATION_BONUS_MASK) | liquidationBonus;\\n    }\\n\\n    function getLiquidationBonus(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return self.data & ~LIQUIDATION_BONUS_MASK;\\n    }\\n\\n    function setDecimals(ReserveConfigurationMap memory self, uint256 _decimals)\\n        internal\\n        pure\\n    {\\n        if (_decimals > MAX_VALID_DECIMALS) {\\n            revert InvalidDecimals();\\n        }\\n        self.data =\\n            (self.data & DECIMAL_MASK) |\\n            (_decimals << DECIMAL_MASK_BIT_POSITION);\\n    }\\n\\n    function getDecimals(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (self.data & ~DECIMAL_MASK) >> DECIMAL_MASK_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     **/\\n    function setActive(ReserveConfigurationMap memory self, bool active)\\n        internal\\n        pure\\n    {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << ACTIVE_MASK_BIT_POSITION);\\n    }\\n\\n    function getActive(ReserveConfigurationMap storage self)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n\\n    function setIncomeRatio(ReserveConfigurationMap memory self, uint256 ratio)\\n        internal\\n        pure\\n    {\\n        if (ratio > MAX_VALID_INCOME_RATIO) {\\n            revert InvalidIncomeRatio();\\n        }\\n\\n        self.data =\\n            (self.data & INCOME_RATIO_MASK) |\\n            (ratio << INCOME_RATIO_MASK_BIT_POSITION);\\n    }\\n\\n    function getIncomeRatio(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            (self.data & ~INCOME_RATIO_MASK) >> INCOME_RATIO_MASK_BIT_POSITION;\\n    }\\n\\n    function setOptimalLiquidityRatio(\\n        ReserveConfigurationMap memory self,\\n        uint256 ratio\\n    ) internal pure {\\n        if (ratio > MAX_VALID_OPTIMAL_RATIO) {\\n            revert InvalidOptimalRatio();\\n        }\\n\\n        self.data =\\n            (self.data & OPTIMAL_LIQUIDITY_RATIO_MASK) |\\n            (ratio << OPTIMAL_LIQUIDITY_RATIO_MASK_BIT_POSITION);\\n    }\\n\\n    function getOptimalLiquidityRatio(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            (self.data & ~OPTIMAL_LIQUIDITY_RATIO_MASK) >>\\n            OPTIMAL_LIQUIDITY_RATIO_MASK_BIT_POSITION;\\n    }\\n\\n    function setLoanInterval(\\n        ReserveConfigurationMap memory self,\\n        uint256 interval\\n    ) internal pure {\\n        if (interval > MAX_VALID_LOAN_INTERVAL) {\\n            revert InvalidLoanInterval();\\n        }\\n        self.data =\\n            (self.data & LOAN_INTERVAL_MASK) |\\n            (interval << LOAN_INTERVAL_MASK_BIT_POSITION);\\n    }\\n\\n    function setLoanTerm(ReserveConfigurationMap memory self, uint256 term)\\n        internal\\n        pure\\n    {\\n        if (term > MAX_VALID_LOAN_TERM) {\\n            revert InvalidLoanTerm();\\n        }\\n        self.data =\\n            (self.data & LOAN_TERM_MASK) |\\n            (term << LOAN_TERM_MASK_BIT_POSITION);\\n    }\\n\\n    function setMaxTwapStaleness(\\n        ReserveConfigurationMap memory self,\\n        uint256 maxTwapStaleness\\n    ) internal pure {\\n        if (maxTwapStaleness > MAX_VALID_TWAP_STALENESS) {\\n            revert InvalidMaxTwapStaleness();\\n        }\\n        self.data =\\n            (self.data & MAX_TWAP_STALENESS_MASK) |\\n            (maxTwapStaleness << MAX_TWAP_STALENESS_MASK_BIT_POSITION);\\n    }\\n\\n    function getMaxTwapStaleness(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            (self.data & ~MAX_TWAP_STALENESS_MASK) >>\\n            MAX_TWAP_STALENESS_MASK_BIT_POSITION;\\n    }\\n\\n    function setGracePeriod(\\n        ReserveConfigurationMap memory self,\\n        uint256 numDays\\n    ) internal pure {\\n        if (numDays > MAX_VALID_GRACE_PERIOD) {\\n            revert InvalidGracePeriod();\\n        }\\n        self.data =\\n            (self.data & GRACE_PERIOD_MASK) |\\n            (numDays << GRACE_PERIOD_MASK_BIT_POSITION);\\n    }\\n\\n    function getBorrowParams(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint40, uint40)\\n    {\\n        uint256 localData = self.data;\\n        return (\\n            uint40(\\n                (localData & ~LOAN_INTERVAL_MASK) >>\\n                    LOAN_INTERVAL_MASK_BIT_POSITION\\n            ),\\n            uint40((localData & ~LOAN_TERM_MASK) >> LOAN_TERM_MASK_BIT_POSITION)\\n        );\\n    }\\n\\n    function getLiquidationParams(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 localData = self.data;\\n        return (\\n            (localData & ~LIQUIDATION_BONUS_MASK),\\n            (localData & ~GRACE_PERIOD_MASK) >> GRACE_PERIOD_MASK_BIT_POSITION\\n        );\\n    }\\n\\n    function getConfiguration(address _collection)\\n        internal\\n        view\\n        returns (ReserveConfigurationMap memory)\\n    {\\n        AppStorage storage s = LibAppStorage.ds();\\n        return s._reserveData[_collection].configuration;\\n    }\\n\\n    function saveConfiguration(\\n        address _collection,\\n        ReserveConfigurationMap memory _conf\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.ds();\\n        s._reserveData[_collection].configuration = _conf;\\n    }\\n}\\n\",\"keccak256\":\"0x041af6290038bfb8dcfe8c6cee24d444ac2db81dc2668dad4f5681261ea05d4d\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibSecurity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {LibAppStorage, AppStorage, Authorisation} from \\\"./LibAppStorage.sol\\\";\\n\\nlibrary LibSecurity {\\n    function isAuthorised(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        return\\n            auth.rbac.canCall(src, dst, selector) ||\\n            auth.acl.canCall(src, dst, selector);\\n    }\\n\\n    function isAuthorisedInbound(\\n        Authorisation storage auth,\\n        address src,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        // s.security.acl/rbac is an instance ds-roles and implements DSAuthority interface\\n        return\\n            auth.rbac.canCall(src, address(this), selector) ||\\n            auth.acl.canCall(src, address(this), selector);\\n    }\\n\\n    function isAuthorisedOutbound(\\n        Authorisation storage auth,\\n        address dst,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        // s.security.acl/rbac is an instance ds-guard and implements DSAuthority interface\\n        return\\n            auth.rbac.canCall(msg.sender, dst, selector) ||\\n            auth.acl.canCall(msg.sender, dst, selector);\\n    }\\n\\n    // role can be a enum, but cast to uint8 before calling grantRole\\n    function grantRole(\\n        Authorisation storage auth,\\n        address user,\\n        uint8 role,\\n        bool enabled\\n    ) internal {\\n        // grant role\\n        auth.rbac.setUserRole(user, role, enabled);\\n    }\\n\\n    function grantRolePermission(\\n        Authorisation storage auth,\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) internal {\\n        // give a role a permission\\n        auth.rbac.setRoleCapability(role, target, sig, true);\\n    }\\n\\n    function revokeRolePermission(\\n        Authorisation storage auth,\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) internal {\\n        // revoke a role permission\\n        auth.rbac.setRoleCapability(role, target, sig, false);\\n    }\\n\\n    function grantPermissions(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4[] memory sig\\n    ) internal {\\n        for (uint256 i = 0; i < sig.length; i++) {\\n            grantPermission(auth, src, dst, sig[i]);\\n        }\\n    }\\n\\n    function grantPermission(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) internal {\\n        // allow src to call dst.sig\\n        auth.acl.permit(src, dst, sig);\\n    }\\n\\n    function revokePermission(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) internal {\\n        auth.acl.forbid(src, dst, sig);\\n    }\\n\\n    function getTrustedForwarder() internal view returns (address) {\\n        return LibAppStorage.ds().trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address _forwarder)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return LibAppStorage.ds().trustedForwarder == _forwarder;\\n    }\\n}\\n\",\"keccak256\":\"0x03ecaece2b9d62e0180ae33e4f6dcec14ba391f8e59e081782168648444d4e0e\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {BeaconProxy} from \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {LibAppStorage, AppStorage, RepayRecord, BorrowData, NFTInfo, DiamondFacet, ReserveConfigurationMap} from \\\"./LibAppStorage.sol\\\";\\nimport {LibReserveConfiguration} from \\\"./LibReserveConfiguration.sol\\\";\\nimport {WadRayMath} from \\\"../../shared/libraries/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../../shared/libraries/PercentageMath.sol\\\";\\nimport {LogarithmMath} from \\\"../../shared/libraries/LogarithmMath.sol\\\";\\n\\nlibrary LibVault {\\n    using WadRayMath for uint256;\\n    using PercentageMath for uint256;\\n    using LibReserveConfiguration for ReserveConfigurationMap;\\n\\n    function recordVault(address _owner, address _vault)\\n        internal\\n        returns (uint256)\\n    {\\n        AppStorage storage s = LibAppStorage.ds();\\n        require(s.vaultMap[_owner] == address(0), \\\"one vault per owner\\\");\\n        s.vaults.push(_vault);\\n        LibAppStorage.ds().vaultMap[_owner] = _vault;\\n        return (s.vaults.length);\\n    }\\n\\n    function setVaultImpl(address _impl) internal {\\n        LibAppStorage.ds().vaultBeacon.upgradeTo(_impl);\\n    }\\n\\n    /* ----------------------------- view functions ----------------------------- */\\n    function vaultBeacon() internal view returns (address) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        return address(s.vaultBeacon);\\n    }\\n\\n    function getVaultImpl() internal view returns (address) {\\n        return LibAppStorage.ds().vaultBeacon.implementation();\\n    }\\n\\n    function subVaultBeacon() internal view returns (address) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        return address(s.subVaultBeacon);\\n    }\\n\\n    function getVaultAddress(address _owner) internal view returns (address) {\\n        return LibAppStorage.ds().vaultMap[_owner];\\n    }\\n\\n    function getVaultDebt(\\n        address _collection,\\n        address _currency,\\n        address _vault\\n    ) internal view returns (uint256, uint256) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        BorrowData storage borrowData = s._borrowData[_collection][_currency][\\n            _vault\\n        ];\\n        return (borrowData.totalPrincipal, borrowData.totalInterest);\\n    }\\n\\n    function getDiamondFacets() internal view returns (DiamondFacet memory) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        return s.diamondFacet;\\n    }\\n\\n    /**\\n     * @dev Get credit limit for a specific reserve\\n     * @param _vault vault address\\n     * @return _collection collection address\\n     **/\\n    function getCreditLimit(\\n        address _vault,\\n        address _collection,\\n        address _currency,\\n        uint256 _fv\\n    ) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        RepayRecord memory repayRecord = s\\n        ._borrowState[_collection][_currency].repayRecord[_vault];\\n        uint256 rep;\\n        if (repayRecord.repaidTimes > repayRecord.defaultTimes) {\\n            rep = repayRecord.repaidTimes - repayRecord.defaultTimes;\\n        }\\n        uint256 scaledRep = (rep + 1) * 1e18;\\n        uint256 multiplier = LogarithmMath.log2(scaledRep) + 1;\\n        return _fv * multiplier;\\n    }\\n\\n    function slashRep(\\n        address _vault,\\n        address _collection,\\n        address _currency\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.ds();\\n        s\\n        ._borrowState[_collection][_currency]\\n            .repayRecord[_vault]\\n            .defaultTimes += 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa7028ced4013f21771be1e430d54b3f2e25155276d28e1fe8e1b3a01a7ee993e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6543,
        "contract": "contracts/voyage/facets/VaultFacet.sol:VaultFacet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}