{
  "address": "0xC2b3F4C84f3cFEd28148875Da98bE6C4D28c5534",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "extractAssetInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetInfo",
          "name": "assetInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "validate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf562c2e7ddd8e94d59b48658462f818b25cbad98983b15473121c70e190024e3",
  "receipt": {
    "to": null,
    "from": "0x7bB17c9401110D05ec39894334cC9d7721E90688",
    "contractAddress": "0xC2b3F4C84f3cFEd28148875Da98bE6C4D28c5534",
    "transactionIndex": 9,
    "gasUsed": "610247",
    "logsBloom": "0x
    "blockHash": "0xb20a0d485ece152ae52314654b7fa92126a0fbf5dce58c896913d193452b1025",
    "transactionHash": "0xf562c2e7ddd8e94d59b48658462f818b25cbad98983b15473121c70e190024e3",
    "logs": [],
    "blockNumber": 11291918,
    "cumulativeGasUsed": "2023520",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x119f926bE2c7cee50927c14139367057442b7068"
  ],
  "numDeployments": 2,
  "solcInputHash": "41a06cd71375a3553501e1e8085a4a59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"extractAssetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetInfo\",\"name\":\"assetInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voyage/adapter/SeaportAdapter.sol\":\"SeaportAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/voyage/adapter/SeaportAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {IMarketPlaceAdapter, AssetInfo} from \\\"../interfaces/IMarketPlaceAdapter.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nuint256 constant BasicOrder_basicOrderType_cdPtr = 0x124;\\n\\n// prettier-ignore\\nenum BasicOrderRouteType {\\n    // 0: provide Ether (or other native token) to receive offered ERC721 item.\\n    ETH_TO_ERC721,\\n\\n    // 1: provide Ether (or other native token) to receive offered ERC1155 item.\\n    ETH_TO_ERC1155,\\n\\n    // 2: provide ERC20 item to receive offered ERC721 item.\\n    ERC20_TO_ERC721,\\n\\n    // 3: provide ERC20 item to receive offered ERC1155 item.\\n    ERC20_TO_ERC1155,\\n\\n    // 4: provide ERC721 item to receive offered ERC20 item.\\n    ERC721_TO_ERC20,\\n\\n    // 5: provide ERC1155 item to receive offered ERC20 item.\\n    ERC1155_TO_ERC20\\n}\\n\\n// prettier-ignore\\nenum OrderType {\\n    // 0: no partial fills, anyone can execute\\n    FULL_OPEN,\\n\\n    // 1: partial fills supported, anyone can execute\\n    PARTIAL_OPEN,\\n\\n    // 2: no partial fills, only offerer or zone can execute\\n    FULL_RESTRICTED,\\n\\n    // 3: partial fills supported, only offerer or zone can execute\\n    PARTIAL_RESTRICTED\\n}\\n\\n// prettier-ignore\\nenum ItemType {\\n    // 0: ETH on mainnet, MATIC on polygon, etc.\\n    NATIVE,\\n\\n    // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\\n    ERC20,\\n\\n    // 2: ERC721 items\\n    ERC721,\\n\\n    // 3: ERC1155 items\\n    ERC1155,\\n\\n    // 4: ERC721 items where a number of tokenIds are supported\\n    ERC721_WITH_CRITERIA,\\n\\n    // 5: ERC1155 items where a number of ids are supported\\n    ERC1155_WITH_CRITERIA\\n}\\n\\nenum BasicOrderType {\\n    // 0: no partial fills, anyone can execute\\n    ETH_TO_ERC721_FULL_OPEN,\\n    // 1: partial fills supported, anyone can execute\\n    ETH_TO_ERC721_PARTIAL_OPEN,\\n    // 2: no partial fills, only offerer or zone can execute\\n    ETH_TO_ERC721_FULL_RESTRICTED,\\n    // 3: partial fills supported, only offerer or zone can execute\\n    ETH_TO_ERC721_PARTIAL_RESTRICTED,\\n    // 4: no partial fills, anyone can execute\\n    ETH_TO_ERC1155_FULL_OPEN,\\n    // 5: partial fills supported, anyone can execute\\n    ETH_TO_ERC1155_PARTIAL_OPEN,\\n    // 6: no partial fills, only offerer or zone can execute\\n    ETH_TO_ERC1155_FULL_RESTRICTED,\\n    // 7: partial fills supported, only offerer or zone can execute\\n    ETH_TO_ERC1155_PARTIAL_RESTRICTED,\\n    // 8: no partial fills, anyone can execute\\n    ERC20_TO_ERC721_FULL_OPEN,\\n    // 9: partial fills supported, anyone can execute\\n    ERC20_TO_ERC721_PARTIAL_OPEN,\\n    // 10: no partial fills, only offerer or zone can execute\\n    ERC20_TO_ERC721_FULL_RESTRICTED,\\n    // 11: partial fills supported, only offerer or zone can execute\\n    ERC20_TO_ERC721_PARTIAL_RESTRICTED,\\n    // 12: no partial fills, anyone can execute\\n    ERC20_TO_ERC1155_FULL_OPEN,\\n    // 13: partial fills supported, anyone can execute\\n    ERC20_TO_ERC1155_PARTIAL_OPEN,\\n    // 14: no partial fills, only offerer or zone can execute\\n    ERC20_TO_ERC1155_FULL_RESTRICTED,\\n    // 15: partial fills supported, only offerer or zone can execute\\n    ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\\n    // 16: no partial fills, anyone can execute\\n    ERC721_TO_ERC20_FULL_OPEN,\\n    // 17: partial fills supported, anyone can execute\\n    ERC721_TO_ERC20_PARTIAL_OPEN,\\n    // 18: no partial fills, only offerer or zone can execute\\n    ERC721_TO_ERC20_FULL_RESTRICTED,\\n    // 19: partial fills supported, only offerer or zone can execute\\n    ERC721_TO_ERC20_PARTIAL_RESTRICTED,\\n    // 20: no partial fills, anyone can execute\\n    ERC1155_TO_ERC20_FULL_OPEN,\\n    // 21: partial fills supported, anyone can execute\\n    ERC1155_TO_ERC20_PARTIAL_OPEN,\\n    // 22: no partial fills, only offerer or zone can execute\\n    ERC1155_TO_ERC20_FULL_RESTRICTED,\\n    // 23: partial fills supported, only offerer or zone can execute\\n    ERC1155_TO_ERC20_PARTIAL_RESTRICTED\\n}\\n\\n/**\\n * @dev Basic orders can supply any number of additional recipients, with the\\n *      implied assumption that they are supplied from the offered ETH (or other\\n *      native token) or ERC20 token for the order.\\n */\\nstruct AdditionalRecipient {\\n    uint256 amount;\\n    address payable recipient;\\n}\\n\\n/**\\n * @dev For basic orders involving ETH / native / ERC20 <=> ERC721 / ERC1155\\n *      matching, a group of six functions may be called that only requires a\\n *      subset of the usual order arguments. Note the use of a \\\"basicOrderType\\\"\\n *      enum; this represents both the usual order type as well as the \\\"route\\\"\\n *      of the basic order (a simple derivation function for the basic order\\n *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\\n */\\nstruct BasicOrderParameters {\\n    // calldata offset\\n    address considerationToken; // 0x24\\n    uint256 considerationIdentifier; // 0x44\\n    uint256 considerationAmount; // 0x64\\n    address payable offerer; // 0x84\\n    address zone; // 0xa4\\n    address offerToken; // 0xc4\\n    uint256 offerIdentifier; // 0xe4\\n    uint256 offerAmount; // 0x104\\n    BasicOrderType basicOrderType; // 0x124\\n    uint256 startTime; // 0x144\\n    uint256 endTime; // 0x164\\n    bytes32 zoneHash; // 0x184\\n    uint256 salt; // 0x1a4\\n    bytes32 offererConduitKey; // 0x1c4\\n    bytes32 fulfillerConduitKey; // 0x1e4\\n    uint256 totalOriginalAdditionalRecipients; // 0x204\\n    AdditionalRecipient[] additionalRecipients; // 0x224\\n    bytes signature; // 0x244\\n    // Total length, excluding dynamic array data: 0x264 (580)\\n}\\n\\nstruct PurchaseParam {\\n    address vault;\\n    address seaport;\\n    bytes4 selector;\\n    bytes basicOrderParameters;\\n}\\n\\ninterface ConsiderationInterface {\\n    /**\\n     * @notice Fulfill an order offering an ERC721 token by supplying Ether (or\\n     *         the native token for the given chain) as consideration for the\\n     *         order. An arbitrary number of \\\"additional recipients\\\" may also be\\n     *         supplied which will each receive native tokens from the fulfiller\\n     *         as consideration.\\n     *\\n     * @param parameters Additional information on the fulfilled order. Note\\n     *                   that the offerer must first approve this contract (or\\n     *                   their preferred conduit if indicated by the order) for\\n     *                   their offered ERC721 token to be transferred.\\n     *\\n     * @return fulfilled A boolean indicating whether the order has been\\n     *                   successfully fulfilled.\\n     */\\n    function fulfillBasicOrder(BasicOrderParameters calldata parameters)\\n        external\\n        payable\\n        returns (bool fulfilled);\\n}\\n\\ncontract SeaportAdapter is IMarketPlaceAdapter {\\n    address public weth;\\n\\n    constructor(address _weth) {\\n        weth = _weth;\\n    }\\n\\n    function extractAssetInfo(bytes calldata _data)\\n        external\\n        pure\\n        returns (AssetInfo memory assetInfo)\\n    {\\n        PurchaseParam memory param = _decode(_data);\\n        BasicOrderParameters memory basicOrderParameters = abi.decode(\\n            param.basicOrderParameters,\\n            (BasicOrderParameters)\\n        );\\n        assetInfo.assetPrice = basicOrderParameters.considerationAmount;\\n        assetInfo.tokenId = basicOrderParameters.considerationIdentifier;\\n        return assetInfo;\\n    }\\n\\n    function validate(bytes calldata _data) external pure returns (bool) {\\n        return _validate(_data);\\n    }\\n\\n    function execute(bytes calldata _data)\\n        external\\n        pure\\n        returns (bytes memory)\\n    {\\n        if (!_validate(_data)) {\\n            revert(\\\"invalid data\\\");\\n        }\\n\\n        PurchaseParam memory param = _decode(_data);\\n\\n        return abi.encodePacked(param.selector, param.basicOrderParameters);\\n    }\\n\\n    function _decode(bytes calldata _data)\\n        internal\\n        pure\\n        returns (PurchaseParam memory)\\n    {\\n        PurchaseParam memory param;\\n        (\\n            param.vault,\\n            param.seaport,\\n            param.selector,\\n            param.basicOrderParameters\\n        ) = abi.decode(_data, (address, address, bytes4, bytes));\\n        return param;\\n    }\\n\\n    function _validate(bytes calldata _data) private pure returns (bool) {\\n        PurchaseParam memory param = _decode(_data);\\n\\n        // bytes4(keccak256(fulfillBasicOrder()))\\n        // 0xfb0f3ee1\\n        if (\\n            param.selector !=\\n            ConsiderationInterface(address(0)).fulfillBasicOrder.selector\\n        ) {\\n            return false;\\n        }\\n\\n        BasicOrderParameters memory basicOrderParameters = abi.decode(\\n            param.basicOrderParameters,\\n            (BasicOrderParameters)\\n        );\\n        BasicOrderType basicOrderType = basicOrderParameters.basicOrderType;\\n\\n        BasicOrderRouteType route;\\n\\n        // Utilize assembly to extract the basic order route.\\n        assembly {\\n            // Divide basicOrderType by four to derive the route.\\n            route := shr(2, basicOrderType)\\n        }\\n\\n        if (route != BasicOrderRouteType.ETH_TO_ERC721) {\\n            return false;\\n        }\\n\\n        if (basicOrderParameters.offerAmount != 1) {\\n            return false;\\n        }\\n\\n        if (basicOrderParameters.considerationToken != address(0)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x848ebda0a7accd8314ec0a68b63fe751550cebe7b245e6051129c6de333dc5f1\",\"license\":\"GPL-3.0\"},\"contracts/voyage/interfaces/IMarketPlaceAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nstruct AssetInfo {\\n    uint256 tokenId;\\n    uint256 assetPrice;\\n}\\n\\ninterface IMarketPlaceAdapter {\\n    function extractAssetInfo(bytes calldata _data)\\n        external\\n        pure\\n        returns (AssetInfo memory);\\n\\n    function validate(bytes calldata _data) external view returns (bool);\\n\\n    function execute(bytes calldata _data) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x02dbc2e2ea68e0b2f3db8a69314e436551aae2e947720d4a764162e70d515090\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a43380380610a4383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6109b0806100936000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780630cfe386f1461007a5780633fc8cef3146100a8578063c16e50ef146100ed575b600080fd5b61006461005f3660046103db565b610110565b604051610071919061047d565b60405180910390f35b61008d6100883660046103db565b6101c8565b60408051825181526020928301519281019290925201610071565b6000546100c89073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6101006100fb3660046103db565b61021e565b6040519015158152602001610071565b606061011c8383610231565b610186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c696420646174610000000000000000000000000000000000000000604482015260640160405180910390fd5b60006101928484610336565b9050806040015181606001516040516020016101af9291906104b0565b6040516020818303038152906040529150505b92915050565b604080518082019091526000808252602082015260006101e88484610336565b9050600081606001518060200190518101906102049190610710565b604081015160208086019190915201518352505092915050565b600061022a8383610231565b9392505050565b60008061023e8484610336565b60408101519091507fffffffff00000000000000000000000000000000000000000000000000000000167ffb0f3ee100000000000000000000000000000000000000000000000000000000146102985760009150506101c2565b600081606001518060200190518101906102b29190610710565b610100810151909150600281901c60008160058111156102d4576102d4610873565b146102e65760009450505050506101c2565b8260e001516001146102ff5760009450505050506101c2565b825173ffffffffffffffffffffffffffffffffffffffff16156103295760009450505050506101c2565b5060019695505050505050565b60408051608081018252600080825260208201819052918101919091526060808201526040805160808101825260008082526020820181905291810191909152606080820152610388838501856108a2565b60608501527fffffffff0000000000000000000000000000000000000000000000000000000016604084015273ffffffffffffffffffffffffffffffffffffffff90811660208401521681529392505050565b600080602083850312156103ee57600080fd5b823567ffffffffffffffff8082111561040657600080fd5b818501915085601f83011261041a57600080fd5b81358181111561042957600080fd5b86602082850101111561043b57600080fd5b60209290920196919550909350505050565b60005b83811015610468578181015183820152602001610450565b83811115610477576000848401525b50505050565b602081526000825180602084015261049c81604085016020870161044d565b601f01601f19169190910160400192915050565b7fffffffff0000000000000000000000000000000000000000000000000000000083168152600082516104ea81600485016020870161044d565b919091016004019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561054a5761054a6104f8565b60405290565b604051610240810167ffffffffffffffff8111828210171561054a5761054a6104f8565b604051601f8201601f1916810167ffffffffffffffff8111828210171561059d5761059d6104f8565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff811681146105c757600080fd5b50565b80516105d5816105a5565b919050565b8051601881106105d557600080fd5b600082601f8301126105fa57600080fd5b8151602067ffffffffffffffff821115610616576106166104f8565b610624818360051b01610574565b82815260069290921b8401810191818101908684111561064357600080fd5b8286015b8481101561068b57604081890312156106605760008081fd5b610668610527565b8151815284820151610679816105a5565b81860152835291830191604001610647565b509695505050505050565b600067ffffffffffffffff8211156106b0576106b06104f8565b50601f01601f191660200190565b600082601f8301126106cf57600080fd5b81516106e26106dd82610696565b610574565b8181528460208386010111156106f757600080fd5b61070882602083016020870161044d565b949350505050565b60006020828403121561072257600080fd5b815167ffffffffffffffff8082111561073a57600080fd5b90830190610240828603121561074f57600080fd5b610757610550565b610760836105ca565b81526020830151602082015260408301516040820152610782606084016105ca565b6060820152610793608084016105ca565b60808201526107a460a084016105ca565b60a082015260c083015160c082015260e083015160e08201526101006107cb8185016105da565b9082015261012083810151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e08084015190820152610200808401518381111561083057600080fd5b61083c888287016105e9565b828401525050610220808401518381111561085657600080fd5b610862888287016106be565b918301919091525095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080600080608085870312156108b857600080fd5b84356108c3816105a5565b935060208501356108d3816105a5565b925060408501357fffffffff000000000000000000000000000000000000000000000000000000008116811461090857600080fd5b9150606085013567ffffffffffffffff81111561092457600080fd5b8501601f8101871361093557600080fd5b80356109436106dd82610696565b81815288602083850101111561095857600080fd5b816020840160208301376000602083830101528093505050509295919450925056fea2646970667358221220fddf6c29f3091abb79a455679d3aedb1aabe21e9b89d30dfc21abe49018bb47964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780630cfe386f1461007a5780633fc8cef3146100a8578063c16e50ef146100ed575b600080fd5b61006461005f3660046103db565b610110565b604051610071919061047d565b60405180910390f35b61008d6100883660046103db565b6101c8565b60408051825181526020928301519281019290925201610071565b6000546100c89073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6101006100fb3660046103db565b61021e565b6040519015158152602001610071565b606061011c8383610231565b610186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c696420646174610000000000000000000000000000000000000000604482015260640160405180910390fd5b60006101928484610336565b9050806040015181606001516040516020016101af9291906104b0565b6040516020818303038152906040529150505b92915050565b604080518082019091526000808252602082015260006101e88484610336565b9050600081606001518060200190518101906102049190610710565b604081015160208086019190915201518352505092915050565b600061022a8383610231565b9392505050565b60008061023e8484610336565b60408101519091507fffffffff00000000000000000000000000000000000000000000000000000000167ffb0f3ee100000000000000000000000000000000000000000000000000000000146102985760009150506101c2565b600081606001518060200190518101906102b29190610710565b610100810151909150600281901c60008160058111156102d4576102d4610873565b146102e65760009450505050506101c2565b8260e001516001146102ff5760009450505050506101c2565b825173ffffffffffffffffffffffffffffffffffffffff16156103295760009450505050506101c2565b5060019695505050505050565b60408051608081018252600080825260208201819052918101919091526060808201526040805160808101825260008082526020820181905291810191909152606080820152610388838501856108a2565b60608501527fffffffff0000000000000000000000000000000000000000000000000000000016604084015273ffffffffffffffffffffffffffffffffffffffff90811660208401521681529392505050565b600080602083850312156103ee57600080fd5b823567ffffffffffffffff8082111561040657600080fd5b818501915085601f83011261041a57600080fd5b81358181111561042957600080fd5b86602082850101111561043b57600080fd5b60209290920196919550909350505050565b60005b83811015610468578181015183820152602001610450565b83811115610477576000848401525b50505050565b602081526000825180602084015261049c81604085016020870161044d565b601f01601f19169190910160400192915050565b7fffffffff0000000000000000000000000000000000000000000000000000000083168152600082516104ea81600485016020870161044d565b919091016004019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561054a5761054a6104f8565b60405290565b604051610240810167ffffffffffffffff8111828210171561054a5761054a6104f8565b604051601f8201601f1916810167ffffffffffffffff8111828210171561059d5761059d6104f8565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff811681146105c757600080fd5b50565b80516105d5816105a5565b919050565b8051601881106105d557600080fd5b600082601f8301126105fa57600080fd5b8151602067ffffffffffffffff821115610616576106166104f8565b610624818360051b01610574565b82815260069290921b8401810191818101908684111561064357600080fd5b8286015b8481101561068b57604081890312156106605760008081fd5b610668610527565b8151815284820151610679816105a5565b81860152835291830191604001610647565b509695505050505050565b600067ffffffffffffffff8211156106b0576106b06104f8565b50601f01601f191660200190565b600082601f8301126106cf57600080fd5b81516106e26106dd82610696565b610574565b8181528460208386010111156106f757600080fd5b61070882602083016020870161044d565b949350505050565b60006020828403121561072257600080fd5b815167ffffffffffffffff8082111561073a57600080fd5b90830190610240828603121561074f57600080fd5b610757610550565b610760836105ca565b81526020830151602082015260408301516040820152610782606084016105ca565b6060820152610793608084016105ca565b60808201526107a460a084016105ca565b60a082015260c083015160c082015260e083015160e08201526101006107cb8185016105da565b9082015261012083810151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e08084015190820152610200808401518381111561083057600080fd5b61083c888287016105e9565b828401525050610220808401518381111561085657600080fd5b610862888287016106be565b918301919091525095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080600080608085870312156108b857600080fd5b84356108c3816105a5565b935060208501356108d3816105a5565b925060408501357fffffffff000000000000000000000000000000000000000000000000000000008116811461090857600080fd5b9150606085013567ffffffffffffffff81111561092457600080fd5b8501601f8101871361093557600080fd5b80356109436106dd82610696565b81815288602083850101111561095857600080fd5b816020840160208301376000602083830101528093505050509295919450925056fea2646970667358221220fddf6c29f3091abb79a455679d3aedb1aabe21e9b89d30dfc21abe49018bb47964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14600,
        "contract": "contracts/voyage/adapter/SeaportAdapter.sol:SeaportAdapter",
        "label": "weth",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}