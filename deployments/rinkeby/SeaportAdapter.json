{
  "address": "0xC29A4229F6CA99ea3e5c74FA1c3bFa014F98f710",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "extractAssetInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetInfo",
          "name": "assetInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "validate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf8d8dee9e47d073e38d25eba534593a1d679fcaf6ef43a4b0f299af1b996afb",
  "receipt": {
    "to": null,
    "from": "0x7bB17c9401110D05ec39894334cC9d7721E90688",
    "contractAddress": "0xC29A4229F6CA99ea3e5c74FA1c3bFa014F98f710",
    "transactionIndex": 10,
    "gasUsed": "719201",
    "logsBloom": "0x
    "blockHash": "0x63d237bacda5dffcdd397cf914199bfacedf5f944e6f8cdd564def1997dc50ab",
    "transactionHash": "0xdf8d8dee9e47d073e38d25eba534593a1d679fcaf6ef43a4b0f299af1b996afb",
    "logs": [],
    "blockNumber": 11365779,
    "cumulativeGasUsed": "6583926",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x120d73c059FAfde55D6d9d66E2Ed90C59da465B0"
  ],
  "numDeployments": 2,
  "solcInputHash": "af2d9e0cb8cd05060d1920900a29b11c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"extractAssetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetInfo\",\"name\":\"assetInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voyage/adapter/SeaportAdapter.sol\":\"SeaportAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/voyage/adapter/SeaportAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {IMarketPlaceAdapter, AssetInfo} from \\\"../interfaces/IMarketPlaceAdapter.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nuint256 constant BasicOrder_basicOrderType_cdPtr = 0x124;\\n\\n// prettier-ignore\\nenum BasicOrderRouteType {\\n    // 0: provide Ether (or other native token) to receive offered ERC721 item.\\n    ETH_TO_ERC721,\\n\\n    // 1: provide Ether (or other native token) to receive offered ERC1155 item.\\n    ETH_TO_ERC1155,\\n\\n    // 2: provide ERC20 item to receive offered ERC721 item.\\n    ERC20_TO_ERC721,\\n\\n    // 3: provide ERC20 item to receive offered ERC1155 item.\\n    ERC20_TO_ERC1155,\\n\\n    // 4: provide ERC721 item to receive offered ERC20 item.\\n    ERC721_TO_ERC20,\\n\\n    // 5: provide ERC1155 item to receive offered ERC20 item.\\n    ERC1155_TO_ERC20\\n}\\n\\n// prettier-ignore\\nenum OrderType {\\n    // 0: no partial fills, anyone can execute\\n    FULL_OPEN,\\n\\n    // 1: partial fills supported, anyone can execute\\n    PARTIAL_OPEN,\\n\\n    // 2: no partial fills, only offerer or zone can execute\\n    FULL_RESTRICTED,\\n\\n    // 3: partial fills supported, only offerer or zone can execute\\n    PARTIAL_RESTRICTED\\n}\\n\\n// prettier-ignore\\nenum ItemType {\\n    // 0: ETH on mainnet, MATIC on polygon, etc.\\n    NATIVE,\\n\\n    // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\\n    ERC20,\\n\\n    // 2: ERC721 items\\n    ERC721,\\n\\n    // 3: ERC1155 items\\n    ERC1155,\\n\\n    // 4: ERC721 items where a number of tokenIds are supported\\n    ERC721_WITH_CRITERIA,\\n\\n    // 5: ERC1155 items where a number of ids are supported\\n    ERC1155_WITH_CRITERIA\\n}\\n\\nenum BasicOrderType {\\n    // 0: no partial fills, anyone can execute\\n    ETH_TO_ERC721_FULL_OPEN,\\n    // 1: partial fills supported, anyone can execute\\n    ETH_TO_ERC721_PARTIAL_OPEN,\\n    // 2: no partial fills, only offerer or zone can execute\\n    ETH_TO_ERC721_FULL_RESTRICTED,\\n    // 3: partial fills supported, only offerer or zone can execute\\n    ETH_TO_ERC721_PARTIAL_RESTRICTED,\\n    // 4: no partial fills, anyone can execute\\n    ETH_TO_ERC1155_FULL_OPEN,\\n    // 5: partial fills supported, anyone can execute\\n    ETH_TO_ERC1155_PARTIAL_OPEN,\\n    // 6: no partial fills, only offerer or zone can execute\\n    ETH_TO_ERC1155_FULL_RESTRICTED,\\n    // 7: partial fills supported, only offerer or zone can execute\\n    ETH_TO_ERC1155_PARTIAL_RESTRICTED,\\n    // 8: no partial fills, anyone can execute\\n    ERC20_TO_ERC721_FULL_OPEN,\\n    // 9: partial fills supported, anyone can execute\\n    ERC20_TO_ERC721_PARTIAL_OPEN,\\n    // 10: no partial fills, only offerer or zone can execute\\n    ERC20_TO_ERC721_FULL_RESTRICTED,\\n    // 11: partial fills supported, only offerer or zone can execute\\n    ERC20_TO_ERC721_PARTIAL_RESTRICTED,\\n    // 12: no partial fills, anyone can execute\\n    ERC20_TO_ERC1155_FULL_OPEN,\\n    // 13: partial fills supported, anyone can execute\\n    ERC20_TO_ERC1155_PARTIAL_OPEN,\\n    // 14: no partial fills, only offerer or zone can execute\\n    ERC20_TO_ERC1155_FULL_RESTRICTED,\\n    // 15: partial fills supported, only offerer or zone can execute\\n    ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\\n    // 16: no partial fills, anyone can execute\\n    ERC721_TO_ERC20_FULL_OPEN,\\n    // 17: partial fills supported, anyone can execute\\n    ERC721_TO_ERC20_PARTIAL_OPEN,\\n    // 18: no partial fills, only offerer or zone can execute\\n    ERC721_TO_ERC20_FULL_RESTRICTED,\\n    // 19: partial fills supported, only offerer or zone can execute\\n    ERC721_TO_ERC20_PARTIAL_RESTRICTED,\\n    // 20: no partial fills, anyone can execute\\n    ERC1155_TO_ERC20_FULL_OPEN,\\n    // 21: partial fills supported, anyone can execute\\n    ERC1155_TO_ERC20_PARTIAL_OPEN,\\n    // 22: no partial fills, only offerer or zone can execute\\n    ERC1155_TO_ERC20_FULL_RESTRICTED,\\n    // 23: partial fills supported, only offerer or zone can execute\\n    ERC1155_TO_ERC20_PARTIAL_RESTRICTED\\n}\\n\\n/**\\n * @dev Basic orders can supply any number of additional recipients, with the\\n *      implied assumption that they are supplied from the offered ETH (or other\\n *      native token) or ERC20 token for the order.\\n */\\nstruct AdditionalRecipient {\\n    uint256 amount;\\n    address payable recipient;\\n}\\n\\n/**\\n * @dev For basic orders involving ETH / native / ERC20 <=> ERC721 / ERC1155\\n *      matching, a group of six functions may be called that only requires a\\n *      subset of the usual order arguments. Note the use of a \\\"basicOrderType\\\"\\n *      enum; this represents both the usual order type as well as the \\\"route\\\"\\n *      of the basic order (a simple derivation function for the basic order\\n *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\\n */\\nstruct BasicOrderParameters {\\n    // calldata offset\\n    address considerationToken; // 0x24\\n    uint256 considerationIdentifier; // 0x44\\n    uint256 considerationAmount; // 0x64\\n    address payable offerer; // 0x84\\n    address zone; // 0xa4\\n    address offerToken; // 0xc4\\n    uint256 offerIdentifier; // 0xe4\\n    uint256 offerAmount; // 0x104\\n    BasicOrderType basicOrderType; // 0x124\\n    uint256 startTime; // 0x144\\n    uint256 endTime; // 0x164\\n    bytes32 zoneHash; // 0x184\\n    uint256 salt; // 0x1a4\\n    bytes32 offererConduitKey; // 0x1c4\\n    bytes32 fulfillerConduitKey; // 0x1e4\\n    uint256 totalOriginalAdditionalRecipients; // 0x204\\n    AdditionalRecipient[] additionalRecipients; // 0x224\\n    bytes signature; // 0x244\\n    // Total length, excluding dynamic array data: 0x264 (580)\\n}\\n\\nstruct PurchaseParam {\\n    address vault;\\n    address seaport;\\n    bytes4 selector;\\n    bytes basicOrderParameters;\\n}\\n\\ninterface ConsiderationInterface {\\n    /**\\n     * @notice Fulfill an order offering an ERC721 token by supplying Ether (or\\n     *         the native token for the given chain) as consideration for the\\n     *         order. An arbitrary number of \\\"additional recipients\\\" may also be\\n     *         supplied which will each receive native tokens from the fulfiller\\n     *         as consideration.\\n     *\\n     * @param parameters Additional information on the fulfilled order. Note\\n     *                   that the offerer must first approve this contract (or\\n     *                   their preferred conduit if indicated by the order) for\\n     *                   their offered ERC721 token to be transferred.\\n     *\\n     * @return fulfilled A boolean indicating whether the order has been\\n     *                   successfully fulfilled.\\n     */\\n    function fulfillBasicOrder(BasicOrderParameters calldata parameters)\\n        external\\n        payable\\n        returns (bool fulfilled);\\n}\\n\\ncontract SeaportAdapter is IMarketPlaceAdapter {\\n    address public weth;\\n\\n    constructor(address _weth) {\\n        weth = _weth;\\n    }\\n\\n    function extractAssetInfo(bytes calldata _data)\\n        external\\n        pure\\n        returns (AssetInfo memory assetInfo)\\n    {\\n        (, BasicOrderParameters memory order) = _decode(_data);\\n        assetInfo.tokenId = order.offerIdentifier;\\n        assetInfo.assetPrice = order.considerationAmount;\\n        // Iterate over each additional recipient.\\n        for (uint256 i = 0; i < order.additionalRecipients.length; ) {\\n            assetInfo.assetPrice += order.additionalRecipients[i].amount;\\n\\n            // Skip overflow check as for loop is indexed starting at zero.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function validate(bytes calldata _data) external pure returns (bool) {\\n        return _validate(_data);\\n    }\\n\\n    function execute(bytes calldata _data)\\n        external\\n        pure\\n        returns (bytes memory)\\n    {\\n        if (!_validate(_data)) {\\n            revert(\\\"invalid data\\\");\\n        }\\n\\n        (bytes4 selector, BasicOrderParameters memory order) = _decode(_data);\\n\\n        return abi.encodePacked(selector, abi.encode(order));\\n    }\\n\\n    function _decode(bytes calldata _data)\\n        internal\\n        pure\\n        returns (bytes4 selector, BasicOrderParameters memory order)\\n    {\\n        selector = bytes4(_data[:4]);\\n        order = abi.decode(_data[4:], (BasicOrderParameters));\\n    }\\n\\n    function _validate(bytes calldata _data) private pure returns (bool) {\\n        (bytes4 selector, BasicOrderParameters memory order) = _decode(_data);\\n\\n        // bytes4(keccak256(fulfillBasicOrder()))\\n        // 0xfb0f3ee1\\n        if (\\n            selector !=\\n            ConsiderationInterface(address(0)).fulfillBasicOrder.selector\\n        ) {\\n            return false;\\n        }\\n\\n        BasicOrderType basicOrderType = order.basicOrderType;\\n\\n        BasicOrderRouteType route;\\n\\n        // Utilize assembly to extract the basic order route.\\n        assembly {\\n            // Divide basicOrderType by four to derive the route.\\n            route := shr(2, basicOrderType)\\n        }\\n\\n        if (route != BasicOrderRouteType.ETH_TO_ERC721) {\\n            return false;\\n        }\\n\\n        if (order.offerAmount != 1) {\\n            return false;\\n        }\\n\\n        if (order.considerationToken != address(0)) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xcdc3b257657982a8b6a1a4ae61e23d88617298d913d2627dc7fa41444dc7b0e1\",\"license\":\"GPL-3.0\"},\"contracts/voyage/interfaces/IMarketPlaceAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nstruct AssetInfo {\\n    uint256 tokenId;\\n    uint256 assetPrice;\\n}\\n\\ninterface IMarketPlaceAdapter {\\n    function extractAssetInfo(bytes calldata _data)\\n        external\\n        pure\\n        returns (AssetInfo memory);\\n\\n    function validate(bytes calldata _data) external view returns (bool);\\n\\n    function execute(bytes calldata _data) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x02dbc2e2ea68e0b2f3db8a69314e436551aae2e947720d4a764162e70d515090\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c37380380610c3783398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610ba4806100936000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780630cfe386f1461007a5780633fc8cef3146100a8578063c16e50ef146100ed575b600080fd5b61006461005f366004610435565b610110565b6040516100719190610503565b60405180910390f35b61008d610088366004610435565b6101e1565b60408051825181526020928301519281019290925201610071565b6000546100c89073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6101006100fb366004610435565b61026e565b6040519015158152602001610071565b606061011c8383610281565b610186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c696420646174610000000000000000000000000000000000000000604482015260640160405180910390fd5b600080610193858561036a565b9150915081816040516020016101a991906105aa565b60408051601f19818403018152908290526101c79291602001610722565b604051602081830303815290604052925050505b92915050565b60408051808201909152600080825260208201526000610201848461036a565b60c08101518452604081015160208501529150600090505b8161020001515181101561026657816102000151818151811061023e5761023e61076a565b6020026020010151600001518360200181815161025b9190610780565b905250600101610219565b505092915050565b600061027a8383610281565b9392505050565b6000806000610290858561036a565b90925090507fffffffff0000000000000000000000000000000000000000000000000000000082167ffb0f3ee100000000000000000000000000000000000000000000000000000000146102e9576000925050506101db565b610100810151600281901c600081600581111561030857610308610516565b1461031a5760009450505050506101db565b8260e001516001146103335760009450505050506101db565b825173ffffffffffffffffffffffffffffffffffffffff161561035d5760009450505050506101db565b5060019695505050505050565b604080516102408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201839052610100820183905261012082018390526101408201839052610160820183905261018082018390526101a082018390526101c082018390526101e0820183905261020082018190526102208201526104076004600085876107a6565b610410916107d0565b915061041f83600481876107a6565b81019061042c9190610a0b565b90509250929050565b6000806020838503121561044857600080fd5b823567ffffffffffffffff8082111561046057600080fd5b818501915085601f83011261047457600080fd5b81358181111561048357600080fd5b86602082850101111561049557600080fd5b60209290920196919550909350505050565b60005b838110156104c25781810151838201526020016104aa565b838111156104d1576000848401525b50505050565b600081518084526104ef8160208601602086016104a7565b601f01601f19169290920160200192915050565b60208152600061027a60208301846104d7565b634e487b7160e01b600052602160045260246000fd5b6018811061054a57634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b8381101561059f5781518051885283015173ffffffffffffffffffffffffffffffffffffffff168388015260409096019590820190600101610562565b509495945050505050565b602081526105d160208201835173ffffffffffffffffffffffffffffffffffffffff169052565b60208201516040820152604082015160608201526000606083015161060e608084018273ffffffffffffffffffffffffffffffffffffffff169052565b50608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015160e083015260e08301516101008181850152808501519150506101206106808185018361052c565b8401516101408481019190915284015161016080850191909152840151610180808501919091528401516101a0808501919091528401516101c0808501919091528401516101e08085019190915284015161020080850191909152840151610240610220808601829052919250906106fc61026086018461054e565b90860151858203601f19018387015290925061071883826104d7565b9695505050505050565b7fffffffff00000000000000000000000000000000000000000000000000000000831681526000825161075c8160048501602087016104a7565b919091016004019392505050565b634e487b7160e01b600052603260045260246000fd5b600082198211156107a157634e487b7160e01b600052601160045260246000fd5b500190565b600080858511156107b657600080fd5b838611156107c357600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156102665760049490940360031b84901b1690921692915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561084f5761084f610816565b60405290565b604051610240810167ffffffffffffffff8111828210171561084f5761084f610816565b604051601f8201601f1916810167ffffffffffffffff811182821017156108a2576108a2610816565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff811681146108cc57600080fd5b50565b80356108da816108aa565b919050565b8035601881106108da57600080fd5b600082601f8301126108ff57600080fd5b8135602067ffffffffffffffff82111561091b5761091b610816565b610929818360051b01610879565b82815260069290921b8401810191818101908684111561094857600080fd5b8286015b8481101561099057604081890312156109655760008081fd5b61096d61082c565b813581528482013561097e816108aa565b8186015283529183019160400161094c565b509695505050505050565b600082601f8301126109ac57600080fd5b813567ffffffffffffffff8111156109c6576109c6610816565b6109d96020601f19601f84011601610879565b8181528460208386010111156109ee57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610a1d57600080fd5b813567ffffffffffffffff80821115610a3557600080fd5b908301906102408286031215610a4a57600080fd5b610a52610855565b610a5b836108cf565b81526020830135602082015260408301356040820152610a7d606084016108cf565b6060820152610a8e608084016108cf565b6080820152610a9f60a084016108cf565b60a082015260c083013560c082015260e083013560e0820152610100610ac68185016108df565b9082015261012083810135908201526101408084013590820152610160808401359082015261018080840135908201526101a080840135908201526101c080840135908201526101e080840135908201526102008084013583811115610b2b57600080fd5b610b37888287016108ee565b8284015250506102208084013583811115610b5157600080fd5b610b5d8882870161099b565b91830191909152509594505050505056fea2646970667358221220b06a27bd3cce95985d2db46248355e6a30f79f98375815ecc362a0ee2ee5683a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780630cfe386f1461007a5780633fc8cef3146100a8578063c16e50ef146100ed575b600080fd5b61006461005f366004610435565b610110565b6040516100719190610503565b60405180910390f35b61008d610088366004610435565b6101e1565b60408051825181526020928301519281019290925201610071565b6000546100c89073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6101006100fb366004610435565b61026e565b6040519015158152602001610071565b606061011c8383610281565b610186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c696420646174610000000000000000000000000000000000000000604482015260640160405180910390fd5b600080610193858561036a565b9150915081816040516020016101a991906105aa565b60408051601f19818403018152908290526101c79291602001610722565b604051602081830303815290604052925050505b92915050565b60408051808201909152600080825260208201526000610201848461036a565b60c08101518452604081015160208501529150600090505b8161020001515181101561026657816102000151818151811061023e5761023e61076a565b6020026020010151600001518360200181815161025b9190610780565b905250600101610219565b505092915050565b600061027a8383610281565b9392505050565b6000806000610290858561036a565b90925090507fffffffff0000000000000000000000000000000000000000000000000000000082167ffb0f3ee100000000000000000000000000000000000000000000000000000000146102e9576000925050506101db565b610100810151600281901c600081600581111561030857610308610516565b1461031a5760009450505050506101db565b8260e001516001146103335760009450505050506101db565b825173ffffffffffffffffffffffffffffffffffffffff161561035d5760009450505050506101db565b5060019695505050505050565b604080516102408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201839052610100820183905261012082018390526101408201839052610160820183905261018082018390526101a082018390526101c082018390526101e0820183905261020082018190526102208201526104076004600085876107a6565b610410916107d0565b915061041f83600481876107a6565b81019061042c9190610a0b565b90509250929050565b6000806020838503121561044857600080fd5b823567ffffffffffffffff8082111561046057600080fd5b818501915085601f83011261047457600080fd5b81358181111561048357600080fd5b86602082850101111561049557600080fd5b60209290920196919550909350505050565b60005b838110156104c25781810151838201526020016104aa565b838111156104d1576000848401525b50505050565b600081518084526104ef8160208601602086016104a7565b601f01601f19169290920160200192915050565b60208152600061027a60208301846104d7565b634e487b7160e01b600052602160045260246000fd5b6018811061054a57634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b8381101561059f5781518051885283015173ffffffffffffffffffffffffffffffffffffffff168388015260409096019590820190600101610562565b509495945050505050565b602081526105d160208201835173ffffffffffffffffffffffffffffffffffffffff169052565b60208201516040820152604082015160608201526000606083015161060e608084018273ffffffffffffffffffffffffffffffffffffffff169052565b50608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015160e083015260e08301516101008181850152808501519150506101206106808185018361052c565b8401516101408481019190915284015161016080850191909152840151610180808501919091528401516101a0808501919091528401516101c0808501919091528401516101e08085019190915284015161020080850191909152840151610240610220808601829052919250906106fc61026086018461054e565b90860151858203601f19018387015290925061071883826104d7565b9695505050505050565b7fffffffff00000000000000000000000000000000000000000000000000000000831681526000825161075c8160048501602087016104a7565b919091016004019392505050565b634e487b7160e01b600052603260045260246000fd5b600082198211156107a157634e487b7160e01b600052601160045260246000fd5b500190565b600080858511156107b657600080fd5b838611156107c357600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156102665760049490940360031b84901b1690921692915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561084f5761084f610816565b60405290565b604051610240810167ffffffffffffffff8111828210171561084f5761084f610816565b604051601f8201601f1916810167ffffffffffffffff811182821017156108a2576108a2610816565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff811681146108cc57600080fd5b50565b80356108da816108aa565b919050565b8035601881106108da57600080fd5b600082601f8301126108ff57600080fd5b8135602067ffffffffffffffff82111561091b5761091b610816565b610929818360051b01610879565b82815260069290921b8401810191818101908684111561094857600080fd5b8286015b8481101561099057604081890312156109655760008081fd5b61096d61082c565b813581528482013561097e816108aa565b8186015283529183019160400161094c565b509695505050505050565b600082601f8301126109ac57600080fd5b813567ffffffffffffffff8111156109c6576109c6610816565b6109d96020601f19601f84011601610879565b8181528460208386010111156109ee57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610a1d57600080fd5b813567ffffffffffffffff80821115610a3557600080fd5b908301906102408286031215610a4a57600080fd5b610a52610855565b610a5b836108cf565b81526020830135602082015260408301356040820152610a7d606084016108cf565b6060820152610a8e608084016108cf565b6080820152610a9f60a084016108cf565b60a082015260c083013560c082015260e083013560e0820152610100610ac68185016108df565b9082015261012083810135908201526101408084013590820152610160808401359082015261018080840135908201526101a080840135908201526101c080840135908201526101e080840135908201526102008084013583811115610b2b57600080fd5b610b37888287016108ee565b8284015250506102208084013583811115610b5157600080fd5b610b5d8882870161099b565b91830191909152509594505050505056fea2646970667358221220b06a27bd3cce95985d2db46248355e6a30f79f98375815ecc362a0ee2ee5683a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16193,
        "contract": "contracts/voyage/adapter/SeaportAdapter.sol:SeaportAdapter",
        "label": "weth",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}