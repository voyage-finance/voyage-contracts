{
  "address": "0xCf865BCA39521D4B57ae9629138d1FF24852C9F2",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidOperator",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "getTwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_priceAverage",
          "type": "uint256"
        }
      ],
      "name": "updateTwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1b5f82f7b186003d0b4685e0314cd1adb7fce3d0fb59343323fec21b7509a9d",
  "receipt": {
    "to": null,
    "from": "0x7bB17c9401110D05ec39894334cC9d7721E90688",
    "contractAddress": "0xCf865BCA39521D4B57ae9629138d1FF24852C9F2",
    "transactionIndex": 10,
    "gasUsed": "323970",
    "logsBloom": "0x
    "blockHash": "0x8be301bc55c80a848b326f1ca12422f1595e0246e56460d02ecbb7eca4527533",
    "transactionHash": "0xc1b5f82f7b186003d0b4685e0314cd1adb7fce3d0fb59343323fec21b7509a9d",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 11292530,
        "transactionHash": "0xc1b5f82f7b186003d0b4685e0314cd1adb7fce3d0fb59343323fec21b7509a9d",
        "address": "0xCf865BCA39521D4B57ae9629138d1FF24852C9F2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007bb17c9401110d05ec39894334cc9d7721e90688"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x8be301bc55c80a848b326f1ca12422f1595e0246e56460d02ecbb7eca4527533"
      }
    ],
    "blockNumber": 11292530,
    "cumulativeGasUsed": "1182975",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "61a98dd47a56fbe64984f78de53b81aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidOperator\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"getTwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_priceAverage\",\"type\":\"uint256\"}],\"name\":\"updateTwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voyage/infra/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/shared/libraries/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (halfWAD + a * b) / WAD;\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return (halfB + a * WAD) / b;\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (halfRAY + a * b) / RAY;\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return (halfB + a * RAY) / b;\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return (halfRatio + a) / WAD_RAY_RATIO;\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a * WAD_RAY_RATIO;\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa58dbc7c0c21dc1bcaf58a6ae989fdf097a8c0ed7c66bd88cc3a29c1a21d1830\"},\"contracts/voyage/infra/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {WadRayMath} from \\\"../../shared/libraries/WadRayMath.sol\\\";\\nimport {IPriceOracle} from \\\"../interfaces/IPriceOracle.sol\\\";\\n\\ncontract PriceOracle is IPriceOracle, Ownable {\\n    mapping(address => bool) _operators;\\n\\n    modifier auth() {\\n        if (!_operators[msg.sender] && msg.sender != owner()) {\\n            revert InvalidOperator();\\n        }\\n        _;\\n    }\\n\\n    using WadRayMath for uint256;\\n\\n    struct AveragePrice {\\n        uint256 blockTimestamp;\\n        uint256 priceAverage;\\n    }\\n\\n    mapping(address => AveragePrice) prices;\\n\\n    function getTwap(address _currency)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            prices[_currency].priceAverage,\\n            prices[_currency].blockTimestamp\\n        );\\n    }\\n\\n    function updateTwap(address _currency, uint256 _priceAverage)\\n        external\\n        auth\\n    {\\n        prices[_currency].priceAverage = _priceAverage;\\n        prices[_currency].blockTimestamp = block.timestamp;\\n    }\\n\\n    function setOperator(address _operator, bool enabled) external onlyOwner {\\n        if (enabled) {\\n            _operators[_operator] = true;\\n        } else {\\n            delete _operators[_operator];\\n        }\\n    }\\n}\\n\\nerror InvalidOperator();\\n\",\"keccak256\":\"0x7b66ce3418ad319cded531438c610667546bd6d761ee3d0d748724952f7a4e5e\",\"license\":\"GPL-3.0\"},\"contracts/voyage/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IPriceOracle {\\n    function getTwap(address _asset) external view returns (uint256, uint256);\\n\\n    function updateTwap(address _asset, uint256 _priceAverage) external;\\n}\\n\",\"keccak256\":\"0x661ab66a9f15aaa2177bfcf52a626293315a2caf216e703531368494d1974d87\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104788061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100de5780639eb38b34146100f9578063f2fde38b1461010c57600080fd5b80633d47d22714610077578063558a7297146100c1578063715018a6146100d6575b600080fd5b6100a76100853660046103ba565b6001600160a01b03166000908152600260205260409020600181015490549091565b604080519283526020830191909152015b60405180910390f35b6100d46100cf3660046103dc565b61011f565b005b6100d4610177565b6000546040516001600160a01b0390911681526020016100b8565b6100d4610107366004610418565b61018b565b6100d461011a3660046103ba565b610213565b6101276102c2565b801561015557506001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b506001600160a01b03166000908152600160205260409020805460ff19169055565b61017f6102c2565b6101896000610336565b565b3360009081526001602052604090205460ff161580156101b657506000546001600160a01b03163314155b156101ed576040517fccea9e6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0390911660009081526002602052604090206001810191909155429055565b61021b6102c2565b6001600160a01b0381166102b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102bf81610336565b50565b6000546001600160a01b03163314610189576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ad565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146103b557600080fd5b919050565b6000602082840312156103cc57600080fd5b6103d58261039e565b9392505050565b600080604083850312156103ef57600080fd5b6103f88361039e565b91506020830135801515811461040d57600080fd5b809150509250929050565b6000806040838503121561042b57600080fd5b6104348361039e565b94602093909301359350505056fea26469706673582212200908a00e7c9ef256d5dfbbd75895f53124b25831ef4b4af33adc63a6aced706664736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100de5780639eb38b34146100f9578063f2fde38b1461010c57600080fd5b80633d47d22714610077578063558a7297146100c1578063715018a6146100d6575b600080fd5b6100a76100853660046103ba565b6001600160a01b03166000908152600260205260409020600181015490549091565b604080519283526020830191909152015b60405180910390f35b6100d46100cf3660046103dc565b61011f565b005b6100d4610177565b6000546040516001600160a01b0390911681526020016100b8565b6100d4610107366004610418565b61018b565b6100d461011a3660046103ba565b610213565b6101276102c2565b801561015557506001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b506001600160a01b03166000908152600160205260409020805460ff19169055565b61017f6102c2565b6101896000610336565b565b3360009081526001602052604090205460ff161580156101b657506000546001600160a01b03163314155b156101ed576040517fccea9e6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0390911660009081526002602052604090206001810191909155429055565b61021b6102c2565b6001600160a01b0381166102b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102bf81610336565b50565b6000546001600160a01b03163314610189576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ad565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146103b557600080fd5b919050565b6000602082840312156103cc57600080fd5b6103d58261039e565b9392505050565b600080604083850312156103ef57600080fd5b6103f88361039e565b91506020830135801515811461040d57600080fd5b809150509250929050565b6000806040838503121561042b57600080fd5b6104348361039e565b94602093909301359350505056fea26469706673582212200908a00e7c9ef256d5dfbbd75895f53124b25831ef4b4af33adc63a6aced706664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3637,
        "contract": "contracts/voyage/infra/PriceOracle.sol:PriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19705,
        "contract": "contracts/voyage/infra/PriceOracle.sol:PriceOracle",
        "label": "_operators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19738,
        "contract": "contracts/voyage/infra/PriceOracle.sol:PriceOracle",
        "label": "prices",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AveragePrice)19733_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AveragePrice)19733_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PriceOracle.AveragePrice)",
        "numberOfBytes": "32",
        "value": "t_struct(AveragePrice)19733_storage"
      },
      "t_struct(AveragePrice)19733_storage": {
        "encoding": "inplace",
        "label": "struct PriceOracle.AveragePrice",
        "members": [
          {
            "astId": 19730,
            "contract": "contracts/voyage/infra/PriceOracle.sol:PriceOracle",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19732,
            "contract": "contracts/voyage/infra/PriceOracle.sol:PriceOracle",
            "label": "priceAverage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}