{
  "address": "0x9b4ECE6623a59a8ee04164227bAa6593E6bee815",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "initOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "marginEscrowImpl",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creditEscrowImpl",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "seniorDepositTokenImpl",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "juniorDepositTokenImpl",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vaultFactory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "diamondCutFacet",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "diamondLoupeFacet",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ownershipFacet",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "weth9",
              "type": "address"
            }
          ],
          "internalType": "struct InitDiamond.Args",
          "name": "_args",
          "type": "tuple"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x183e2a16236b66d315e7d02ba650647ea3f15bb0513c7282355bcd8004ee409c",
  "receipt": {
    "to": null,
    "from": "0x7bB17c9401110D05ec39894334cC9d7721E90688",
    "contractAddress": "0x9b4ECE6623a59a8ee04164227bAa6593E6bee815",
    "transactionIndex": 7,
    "gasUsed": "2124141",
    "logsBloom": "0x
    "blockHash": "0x7d8a6cc8bc692461f9163adee77ebc63153ed9e9702378b6104616c7fbb59159",
    "transactionHash": "0x183e2a16236b66d315e7d02ba650647ea3f15bb0513c7282355bcd8004ee409c",
    "logs": [],
    "blockNumber": 11061132,
    "cumulativeGasUsed": "7699968",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "64736b687302d4e0a12a155efce9fbfe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"initOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marginEscrowImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creditEscrowImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seniorDepositTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"juniorDepositTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"diamondCutFacet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"diamondLoupeFacet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownershipFacet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth9\",\"type\":\"address\"}],\"internalType\":\"struct InitDiamond.Args\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voyage/InitDiamond.sol\":\"InitDiamond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/shared/diamond/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0x1ad930b2fb7a485ea9dc992bffe25b7f9ed400accf7eb19e06d0761457b7228d\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x70cec56344b453ec59bcecd3541f711b4f439b5b7e35cc10306b2e82eaa399da\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x5b20558ac0a152f84527227fa50db6f113dd2241992cb8aa9b1a7dbd193c277f\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79ecd45ef37ffd464dd3a612cd046e1b3ec6aed5efd767141c651e539bdee988\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x6fae3084e63b6d8cca55d964865dc45e0c2abf2d0eb8fcd9a3fe7428441bf06a\",\"license\":\"MIT\"},\"contracts/shared/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IERC173} from \\\"../interfaces/IERC173.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    /// @notice Adds default diamond facets\\n    /// @dev This is always called in the Diamond constructor.\\n    /// @param _diamondCutFacet - address of DiamondCutFacet\\n    /// @param _diamondLoupeFacet - address of the DiamondLoupeFacet\\n    /// @param _ownershipFacet - address of the OwnershipFacet\\n    function addDiamondFunctions(\\n        address _diamondCutFacet,\\n        address _diamondLoupeFacet,\\n        address _ownershipFacet\\n    ) internal {\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](3);\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondCutFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        functionSelectors = new bytes4[](5);\\n        functionSelectors[0] = IDiamondLoupe.facets.selector;\\n        functionSelectors[1] = IDiamondLoupe.facetFunctionSelectors.selector;\\n        functionSelectors[2] = IDiamondLoupe.facetAddresses.selector;\\n        functionSelectors[3] = IDiamondLoupe.facetAddress.selector;\\n        functionSelectors[4] = IERC165.supportsInterface.selector;\\n        cut[1] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondLoupeFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        functionSelectors = new bytes4[](2);\\n        functionSelectors[0] = IERC173.transferOwnership.selector;\\n        functionSelectors[1] = IERC173.owner.selector;\\n        cut[2] = IDiamondCut.FacetCut({\\n            facetAddress: _ownershipFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        diamondCut(cut, address(0), \\\"\\\");\\n    }\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // uint16 selectorCount = uint16(diamondStorage().selectors.length);\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(oldFacetAddress, selector);\\n            // add function\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function removeFunction(address _facetAddress, bytes4 _selector) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            ds\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x76c53a3a50ee1b30d116263e1847c80b52f6705f7436d37ba91b0ddcb97657ff\",\"license\":\"MIT\"},\"contracts/shared/facets/PaymentsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {PeripheryPayments} from \\\"../util/PeripheryPayments.sol\\\";\\nimport {Multicall} from \\\"../util/Multicall.sol\\\";\\nimport {SelfPermit} from \\\"../util/SelfPermit.sol\\\";\\nimport {LibAppStorage} from \\\"../../voyage/libraries/LibAppStorage.sol\\\";\\nimport {SafeTransferLib} from \\\"../libraries/SafeTransferLib.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract PaymentsFacet is PeripheryPayments, Multicall, SelfPermit {\\n    using SafeERC20 for IERC20;\\n\\n    function unwrapWETH9(uint256 amountMinimum, address recipient)\\n        public\\n        payable\\n    {\\n        uint256 balanceWETH9 = LibAppStorage.diamondStorage().WETH9.balanceOf(\\n            address(this)\\n        );\\n        require(balanceWETH9 >= amountMinimum, \\\"Insufficient WETH9\\\");\\n\\n        if (balanceWETH9 > 0) {\\n            LibAppStorage.diamondStorage().WETH9.withdraw(balanceWETH9);\\n            SafeTransferLib.safeTransferETH(recipient, balanceWETH9);\\n        }\\n    }\\n\\n    function wrapWETH9() public payable {\\n        if (address(this).balance > 0)\\n            LibAppStorage.diamondStorage().WETH9.deposit{\\n                value: address(this).balance\\n            }(); // wrap everything\\n    }\\n\\n    function sweepToken(\\n        IERC20 token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) public payable {\\n        uint256 balanceToken = token.balanceOf(address(this));\\n        require(balanceToken >= amountMinimum, \\\"Insufficient token\\\");\\n\\n        if (balanceToken > 0) {\\n            token.safeTransfer(recipient, balanceToken);\\n        }\\n    }\\n\\n    function refundETH() external payable {\\n        if (address(this).balance > 0) {\\n            SafeTransferLib.safeTransferETH(msg.sender, address(this).balance);\\n        }\\n    }\\n}\\n\\nabstract contract IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable virtual;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external virtual;\\n}\\n\",\"keccak256\":\"0x20426fcef75bf88895c6b2c37a7a82b7c75718b9243704a1ac3b4623ab061eee\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC20PermitAllowed.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/external/IERC20PermitAllowed.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Interface for permit\\n/// @notice Interface used by DAI/CHAI for permit\\ninterface IERC20PermitAllowed {\\n    /// @notice Approve the spender to spend some tokens via the holder signature\\n    /// @dev This is the permit interface used by DAI and CHAI\\n    /// @param holder The address of the token holder, the token owner\\n    /// @param spender The address of the token spender\\n    /// @param nonce The holder's nonce, increases at each call to permit\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x75199ac09b8a0315f5bb8a4380df57a8443ef496443ab546d017ea6100b699bc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/interfaces/IMulticall.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IMulticall.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data)\\n        external\\n        payable\\n        returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x8437eb20058eb64e08677e6ee16f3299c3d080235a99526374c984687762b69b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/interfaces/ISelfPermit.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISelfPermit.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\ninterface ISelfPermit {\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x935d7c033290c44921175dd13c8dddf8e51057492e665c379058d7bf3ca67125\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\nETH OPERATIONS\\n//////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\nERC20 OPERATIONS\\n//////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0x23b872dd00000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0xa9059cbb00000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0x095ea7b300000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x650ece776cbd21442a5b34775dfe0cd8b76f505ef5e072b198c3e35709b791d7\",\"license\":\"AGPL-3.0-only\"},\"contracts/shared/util/Multicall.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/base/Multicall.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMulticall.sol\\\";\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall {\\n    /// @inheritdoc IMulticall\\n    function multicall(bytes[] calldata data)\\n        public\\n        payable\\n        override\\n        returns (bytes[] memory results)\\n    {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ea37766655ad050a0beca38b517a425be1f52bc165985891edcfcb46e0e7c77\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/util/PeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title Depositor\\n/// @author Voyage Finance\\n/// @notice Forwards calls to ERC-4626 compliant Vaults, but with the actual depositor appended to the encoded call data.\\n/// @dev This does not work if the receiving contract does not implement ERC-4626!\\nabstract contract PeripheryPayments {\\n    using SafeERC20 for IERC20;\\n\\n    function pullToken(\\n        IERC20 token,\\n        uint256 amount,\\n        address from,\\n        address recipient\\n    ) public payable {\\n        token.safeTransferFrom(from, recipient, amount);\\n    }\\n\\n    function approve(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) public payable {\\n        token.safeApprove(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6693bca3a626f4c685bb1c8d9a5812a248c45232e601f9fe1fac80bfd4379a1c\",\"license\":\"AGPL-3.0-only\"},\"contracts/shared/util/SelfPermit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.9;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISelfPermit.sol\\\";\\nimport \\\"../interfaces/IERC20PermitAllowed.sol\\\";\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\\n/// that requires an approval in a single transaction.\\nabstract contract SelfPermit is ISelfPermit {\\n    /// @inheritdoc ISelfPermit\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20Permit(token).permit(\\n            msg.sender,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable override {\\n        if (IERC20(token).allowance(msg.sender, address(this)) < value)\\n            selfPermit(token, value, deadline, v, r, s);\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20PermitAllowed(token).permit(\\n            msg.sender,\\n            address(this),\\n            nonce,\\n            expiry,\\n            true,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable override {\\n        if (\\n            IERC20(token).allowance(msg.sender, address(this)) <\\n            type(uint256).max\\n        ) selfPermitAllowed(token, nonce, expiry, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x456e000cc02654d5e0df6b67960aa8a9c92b4f960ffa5d852e021ece7995bf20\",\"license\":\"AGPL-3.0-only\"},\"contracts/voyage/InitDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {AppStorage} from \\\"./libraries/LibAppStorage.sol\\\";\\nimport {LibDiamond} from \\\"../shared/diamond/libraries/LibDiamond.sol\\\";\\nimport {IDiamondLoupe} from \\\"../shared/diamond/interfaces/IDiamondLoupe.sol\\\";\\nimport {IDiamondCut} from \\\"../shared/diamond/interfaces/IDiamondCut.sol\\\";\\nimport {IERC173} from \\\"../shared/diamond/interfaces/IERC173.sol\\\";\\nimport {IERC165} from \\\"../shared/diamond/interfaces/IERC165.sol\\\";\\nimport {IWETH9} from \\\"../shared/facets/PaymentsFacet.sol\\\";\\nimport {DSRoles} from \\\"../voyage/auth/DSRoles.sol\\\";\\nimport {DSGuard} from \\\"../voyage/auth/DSGuard.sol\\\";\\nimport {IVaultFactory} from \\\"./interfaces/IVaultFactory.sol\\\";\\n\\ncontract InitDiamond {\\n    AppStorage internal s;\\n\\n    struct Args {\\n        address initOwner;\\n        address marginEscrowImpl;\\n        address creditEscrowImpl;\\n        address seniorDepositTokenImpl;\\n        address juniorDepositTokenImpl;\\n        address vaultFactory;\\n        address diamondCutFacet;\\n        address diamondLoupeFacet;\\n        address ownershipFacet;\\n        address weth9;\\n    }\\n\\n    function init(Args memory _args) external {\\n        // initialise diamond level stuff\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\n\\n        // initialise app storage stuff\\n        s.WETH9 = IWETH9(_args.weth9);\\n        s._paused = false;\\n        if (address(s.auth.rbac) == address(0)) {\\n            s.auth.rbac = new DSRoles();\\n        }\\n        if (address(s.auth.acl) == address(0)) {\\n            s.auth.acl = new DSGuard();\\n            s.auth.rbac.setRootUser(_args.initOwner, true);\\n            bytes32 ANY = bytes32(type(uint256).max);\\n            s.auth.acl.permit(bytes32(bytes20(_args.initOwner)), ANY, ANY);\\n        }\\n\\n        if (address(s.marginEscrowBeacon) == address(0)) {\\n            s.marginEscrowBeacon = new UpgradeableBeacon(\\n                _args.marginEscrowImpl\\n            );\\n        }\\n\\n        if (address(s.creditEscrowBeacon) == address(0)) {\\n            s.creditEscrowBeacon = new UpgradeableBeacon(\\n                _args.creditEscrowImpl\\n            );\\n        }\\n\\n        if (address(s.seniorDepositTokenBeacon) == address(0)) {\\n            s.seniorDepositTokenBeacon = new UpgradeableBeacon(\\n                _args.seniorDepositTokenImpl\\n            );\\n        }\\n\\n        if (address(s.juniorDepositTokenBeacon) == address(0)) {\\n            s.juniorDepositTokenBeacon = new UpgradeableBeacon(\\n                _args.juniorDepositTokenImpl\\n            );\\n        }\\n\\n        if (address(s.vaultFactory) == address(0)) {\\n            s.vaultFactory = IVaultFactory(_args.vaultFactory);\\n        }\\n\\n        if (s.diamondFacet.diamondCutFacet == address(0)) {\\n            s.diamondFacet.diamondCutFacet = _args.diamondCutFacet;\\n        }\\n\\n        if (s.diamondFacet.diamondLoupeFacet == address(0)) {\\n            s.diamondFacet.diamondLoupeFacet = _args.diamondLoupeFacet;\\n        }\\n\\n        if (s.diamondFacet.ownershipFacet == address(0)) {\\n            s.diamondFacet.ownershipFacet = _args.ownershipFacet;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xee640f49b54e5da1822bd83677de2278fc8bcf419096db9a392608feb501fd14\",\"license\":\"GPL-3.0\"},\"contracts/voyage/auth/DSAuth.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// lifted from: https://github.com/dapphub/ds-auth/blob/a51e7caa1f03eeffed66d67f3b38605e0f1f881d/src/auth.sol\\n\\npragma solidity ^0.8.9;\\n\\ninterface DSAuthority {\\n    function canCall(\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) external view returns (bool);\\n}\\n\\ncontract DSAuthEvents {\\n    event LogSetAuthority(address indexed authority);\\n    event LogSetOwner(address indexed owner);\\n}\\n\\ncontract DSAuth is DSAuthEvents {\\n    DSAuthority public authority;\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit LogSetOwner(msg.sender);\\n    }\\n\\n    function setOwner(address owner_) public auth {\\n        owner = owner_;\\n        emit LogSetOwner(owner);\\n    }\\n\\n    function setAuthority(DSAuthority authority_) public auth {\\n        authority = authority_;\\n        emit LogSetAuthority(address(authority));\\n    }\\n\\n    modifier auth() {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"ds-auth-unauthorized\\\");\\n        _;\\n    }\\n\\n    function isAuthorized(address src, bytes4 sig)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else if (authority == DSAuthority(address(0))) {\\n            return false;\\n        } else {\\n            return authority.canCall(src, address(this), sig);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb069264548df428fc3c0489dd970632c1a0b85a8a26bbf7a5b0c01f00d88b75\",\"license\":\"GNU-3\"},\"contracts/voyage/auth/DSGuard.sol\":{\"content\":\"// guard.sol -- simple whitelist implementation of DSAuthority\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// lifted from: https://github.com/dapphub/ds-guard/blob/af05632249f98bf3942b9482c5bf69e8bd45284e/src/guard.sol\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./DSAuth.sol\\\";\\n\\ncontract DSGuardEvents {\\n    event LogPermit(\\n        bytes32 indexed src,\\n        bytes32 indexed dst,\\n        bytes32 indexed sig\\n    );\\n\\n    event LogForbid(\\n        bytes32 indexed src,\\n        bytes32 indexed dst,\\n        bytes32 indexed sig\\n    );\\n}\\n\\ncontract DSGuard is DSAuth, DSAuthority, DSGuardEvents {\\n    bytes32 public constant ANY = bytes32(type(uint256).max);\\n\\n    mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => bool))) acl;\\n\\n    function canCall(\\n        address src_,\\n        address dst_,\\n        bytes4 sig\\n    ) public view returns (bool) {\\n        bytes32 src = bytes32(bytes20(src_));\\n        bytes32 dst = bytes32(bytes20(dst_));\\n\\n        return\\n            acl[src][dst][sig] ||\\n            acl[src][dst][ANY] ||\\n            acl[src][ANY][sig] ||\\n            acl[src][ANY][ANY] ||\\n            acl[ANY][dst][sig] ||\\n            acl[ANY][dst][ANY] ||\\n            acl[ANY][ANY][sig] ||\\n            acl[ANY][ANY][ANY];\\n    }\\n\\n    function permit(\\n        bytes32 src,\\n        bytes32 dst,\\n        bytes32 sig\\n    ) public auth {\\n        acl[src][dst][sig] = true;\\n        emit LogPermit(src, dst, sig);\\n    }\\n\\n    function forbid(\\n        bytes32 src,\\n        bytes32 dst,\\n        bytes32 sig\\n    ) public auth {\\n        acl[src][dst][sig] = false;\\n        emit LogForbid(src, dst, sig);\\n    }\\n\\n    function permit(\\n        address src,\\n        address dst,\\n        bytes32 sig\\n    ) public {\\n        permit(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\\n    }\\n\\n    function forbid(\\n        address src,\\n        address dst,\\n        bytes32 sig\\n    ) public {\\n        forbid(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\\n    }\\n}\\n\\ncontract DSGuardFactory {\\n    mapping(address => bool) public isGuard;\\n\\n    function newGuard() public returns (DSGuard guard) {\\n        guard = new DSGuard();\\n        guard.setOwner(msg.sender);\\n        isGuard[address(guard)] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x1c08eb21a713823b838ceed6275d138a6e62fd425094d3d089980697cd94264a\"},\"contracts/voyage/auth/DSRoles.sol\":{\"content\":\"// roles.sol - roled based authentication\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// forked from: https://github.com/dapphub/ds-roles/blob/53d56949c0f98c9b5909df9c0d95025b67f3bb75/src/roles.sol\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./DSAuth.sol\\\";\\n\\ncontract DSRoles is DSAuth, DSAuthority {\\n    mapping(address => bool) _root_users;\\n    mapping(address => bytes32) _user_roles;\\n    mapping(address => mapping(bytes4 => bytes32)) _capability_roles;\\n    mapping(address => mapping(bytes4 => bool)) _public_capabilities;\\n\\n    function getUserRoles(address who) public view returns (bytes32) {\\n        return _user_roles[who];\\n    }\\n\\n    function getCapabilityRoles(address code, bytes4 sig)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _capability_roles[code][sig];\\n    }\\n\\n    function isUserRoot(address who) public view returns (bool) {\\n        return _root_users[who];\\n    }\\n\\n    function isCapabilityPublic(address code, bytes4 sig)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _public_capabilities[code][sig];\\n    }\\n\\n    function hasUserRole(address who, uint8 role) public view returns (bool) {\\n        bytes32 roles = getUserRoles(who);\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        return bytes32(0) != roles & shifted;\\n    }\\n\\n    function canCall(\\n        address caller,\\n        address code,\\n        bytes4 sig\\n    ) public view returns (bool) {\\n        if (isUserRoot(caller) || isCapabilityPublic(code, sig)) {\\n            return true;\\n        } else {\\n            bytes32 has_roles = getUserRoles(caller);\\n            bytes32 needs_one_of = getCapabilityRoles(code, sig);\\n            return bytes32(0) != has_roles & needs_one_of;\\n        }\\n    }\\n\\n    function BITNOT(bytes32 input) internal pure returns (bytes32 output) {\\n        return (input ^ bytes32(type(uint256).max));\\n    }\\n\\n    function setRootUser(address who, bool enabled) public auth {\\n        _root_users[who] = enabled;\\n    }\\n\\n    function setUserRole(\\n        address who,\\n        uint8 role,\\n        bool enabled\\n    ) public auth {\\n        bytes32 last_roles = _user_roles[who];\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        if (enabled) {\\n            _user_roles[who] = last_roles | shifted;\\n        } else {\\n            _user_roles[who] = last_roles & BITNOT(shifted);\\n        }\\n    }\\n\\n    function setPublicCapability(\\n        address code,\\n        bytes4 sig,\\n        bool enabled\\n    ) public auth {\\n        _public_capabilities[code][sig] = enabled;\\n    }\\n\\n    function setRoleCapability(\\n        uint8 role,\\n        address code,\\n        bytes4 sig,\\n        bool enabled\\n    ) public auth {\\n        bytes32 last_roles = _capability_roles[code][sig];\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        if (enabled) {\\n            _capability_roles[code][sig] = last_roles | shifted;\\n        } else {\\n            _capability_roles[code][sig] = last_roles & BITNOT(shifted);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x854b2fe5dcb2ab5277a1a1c3a2f97367c4c00f8076f746a88cfbde1eb43b2f15\"},\"contracts/voyage/interfaces/IDiamondVersionFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IDiamondLoupe} from \\\"../../shared/diamond/interfaces/IDiamondLoupe.sol\\\";\\n\\nstruct Snapshot {\\n    IDiamondLoupe.Facet[] facets;\\n    address init; // address of InitDiamondVx\\n    bytes initArgs; // abi encoded args to pass to InitDiamondVX\\n}\\n\\ninterface IDiamondVersionFacet {\\n    // clone should create a fresh Vault with the facets recorded in `Snapshot` of current version\\n    function clone() external returns (address);\\n\\n    // increments `version` and stores snapshot in _snapshotMap\\n    // these must be computed offchain, and called by protocol admin (including init args encoding)\\n    function registerUpgrade(Snapshot memory _snapshot) external;\\n\\n    // return version number and snapshot hash\\n    function currentVersion() external view returns (uint256, bytes32);\\n\\n    function isUpToDate(uint256 _version) external view returns (bool);\\n\\n    // returns the current snapshot\\n    function getSnapshot() external view returns (Snapshot memory);\\n}\\n\",\"keccak256\":\"0x5c117b65f8ef55b62392d0afde91cf0711832ea41e00719d9fb48a3b608189cc\",\"license\":\"MIT\"},\"contracts/voyage/interfaces/IVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IVaultFactory {\\n    function createVault(\\n        address owner,\\n        address voyage,\\n        uint256 version,\\n        bytes32 checksum,\\n        bytes32 salt\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xf63dca9d9d7b27ab560a723d559df3339d7cfcc30cc3f9e6dd46a22009cef7a4\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DSRoles} from \\\"../auth/DSRoles.sol\\\";\\nimport {DSGuard} from \\\"../auth/DSGuard.sol\\\";\\nimport {LibSecurity} from \\\"./LibSecurity.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {Snapshot} from \\\"../interfaces/IDiamondVersionFacet.sol\\\";\\nimport {IVaultFactory} from \\\"../interfaces/IVaultFactory.sol\\\";\\nimport {IDiamondCut} from \\\"../../shared/diamond/interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../../shared/diamond/interfaces/IDiamondLoupe.sol\\\";\\nimport {DiamondCutFacet} from \\\"../../shared/diamond/facets/DiamondCutFacet.sol\\\";\\nimport {IWETH9} from \\\"../../shared/facets/PaymentsFacet.sol\\\";\\n\\nenum Tranche {\\n    JUNIOR,\\n    SENIOR\\n}\\n\\nstruct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    // for calculating overall interested accumulated\\n    // then split it into two indexs base on two allocations\\n    uint256 currentOverallLiquidityRate;\\n    uint256 currentJuniorLiquidityRate;\\n    uint256 currentSeniorLiquidityRate;\\n    uint256 currentBorrowRate;\\n    //the decimals of the reserve asset\\n    uint256 decimals;\\n    address interestRateStrategyAddress;\\n    address juniorDepositTokenAddress;\\n    address seniorDepositTokenAddress;\\n    uint40 juniorLastUpdateTimestamp;\\n    uint40 seniorLastUpdateTimestamp;\\n    address nftAddress;\\n    address priceOracle;\\n    bool initialized;\\n}\\n\\nstruct ReserveConfigurationMap {\\n    //bit 0-15: liquidation bonus (uint16)\\n    //bit 16-23: decimals (uint8)\\n    //bit 24: reserve is active\\n    //bit 25: reserve is frozen\\n    //bit 26: borrowing is enabled\\n    //bit 27: reserved\\n    //bit 28-63: min margin (uint36)\\n    //bit 64-99: max margin (uint36)\\n    //bit 100-115: margin requirement (uint16)\\n    //bit 116-131: income ratio (uint16)\\n    //bit 132-139: instalment interval (uint8)\\n    //bit 140-155: loan term (uint16)\\n    //bit 156-163: repayment grace period (uint8)\\n    //bit 164-255: unused\\n    uint256 data;\\n}\\n\\nstruct PMT {\\n    uint256 principal;\\n    uint256 interest;\\n    uint256 pmt;\\n}\\n\\nstruct RepaymentData {\\n    uint256 principal;\\n    uint256 interest;\\n    // principal + interest\\n    uint256 total;\\n    uint40 paidAt;\\n    bool isLiquidated;\\n}\\n\\nstruct Loan {\\n    uint256 principal;\\n    uint256 interest;\\n    // the total intended length of the loan in seconds - e.g., 90 days\\n    uint256 term;\\n    // the repayment interval - e.g., 30 days\\n    uint256 epoch;\\n    // number of instalments, term / epoch\\n    uint256 nper;\\n    // the amount to be repaid per instalment (principal + interest)\\n    PMT pmt;\\n    // the borrow rate of this loan\\n    uint256 apr;\\n    uint256 borrowAt;\\n    // next due data\\n    uint256 nextPaymentDue;\\n    // principal paid\\n    uint256 totalPrincipalPaid;\\n    // interest paid\\n    uint256 totalInterestPaid;\\n    RepaymentData[] repayments;\\n    // size pf repayments\\n    uint256 paidTimes;\\n}\\n\\nstruct LoanList {\\n    uint256 head;\\n    uint256 tail;\\n}\\n\\nstruct BorrowData {\\n    uint256 paidLoanNumber;\\n    // next draw down number\\n    uint256 nextLoanNumber;\\n    uint256 totalPrincipal;\\n    uint256 totalInterest;\\n    uint256 mapSize;\\n    mapping(uint256 => Loan) loans;\\n    uint256 totalPaid;\\n    uint256 totalRedeemed;\\n}\\n\\nstruct BorrowState {\\n    uint256 totalDebt;\\n    uint256 totalInterest;\\n    uint256 avgBorrowRate;\\n}\\n\\nstruct VaultConfig {\\n    uint256 minMargin;\\n    uint256 maxMargin;\\n    uint256 marginRequirement;\\n    bool overrideGlobal;\\n}\\n\\nstruct ProtocolFee {\\n    address treasuryAddress;\\n    uint256 cutRatio; // express in Ray\\n}\\n\\nstruct VaultData {\\n    uint256 totalDebt;\\n    LoanList loanList;\\n    uint256 totalMargin;\\n    uint256 withdrawableSecurityDeposit;\\n    uint256 creditLimit;\\n    uint256 spendableBalance;\\n    uint256 gav;\\n    uint256 ltv;\\n    uint256 healthFactor;\\n}\\n\\nstruct Authorisation {\\n    DSRoles rbac;\\n    DSGuard acl;\\n}\\n\\nstruct NFTInfo {\\n    uint256 price;\\n    uint256 timestamp;\\n}\\n\\nstruct ERC721AssetInfo {\\n    address marketplace;\\n    address erc20Addr;\\n}\\n\\nstruct UpgradeParam {\\n    mapping(address => mapping(bytes4 => address)) existingSelectorFacetMap;\\n    mapping(address => bytes4[]) existingSelectors;\\n    mapping(address => mapping(bytes4 => bool)) newSelectorSet;\\n    mapping(address => bytes4[]) newSelectors;\\n    mapping(address => IDiamondCut.FacetCut[]) facetCuts;\\n    mapping(address => uint256) facetCutSize;\\n    mapping(uint256 => bytes4[]) selectorsAdded;\\n    mapping(uint256 => bytes4[]) selectorsReplaced;\\n    mapping(uint256 => bytes4[]) selectorsRemoved;\\n}\\n\\nstruct DiamondFacet {\\n    address diamondCutFacet;\\n    address diamondLoupeFacet;\\n    address ownershipFacet;\\n}\\n\\nstruct AppStorage {\\n    /* -------------------------------- plumbing -------------------------------- */\\n    mapping(bytes32 => address) _addresses;\\n    /* -------------------------------- liquidity ------------------------------- */\\n    UpgradeableBeacon seniorDepositTokenBeacon;\\n    UpgradeableBeacon juniorDepositTokenBeacon;\\n    mapping(address => ReserveData) _reserves;\\n    // List of reserves as a map (reserveId => reserve)\\n    mapping(uint256 => address) _reserveList;\\n    uint16 _reservesCount;\\n    IWETH9 WETH9;\\n    /* ---------------------------------- debt ---------------------------------- */\\n    mapping(address => mapping(address => BorrowData)) _borrowData;\\n    mapping(address => BorrowState) _borrowState;\\n    bool _paused;\\n    /* ---------------------------------- vault --------------------------------- */\\n    UpgradeableBeacon marginEscrowBeacon;\\n    UpgradeableBeacon creditEscrowBeacon;\\n    UpgradeableBeacon subVaultBeacon;\\n    UpgradeableBeacon vaultBeacon;\\n    DiamondFacet diamondFacet;\\n    IVaultFactory vaultFactory;\\n    address[] vaults;\\n    // mapping of vault owner to vault instance address\\n    mapping(address => address) vaultMap;\\n    // mapping of underlying asset to vault configuration\\n    mapping(address => mapping(address => VaultConfig)) vaultConfigMap;\\n    // mapping of marketplace to erc721 address\\n    // for validate onNFTReceived\\n    mapping(address => address) marketPlaceToAsset;\\n    mapping(address => ERC721AssetInfo) erc721AssetInfo;\\n    // erc721 address => token id => nft info\\n    mapping(address => mapping(uint256 => NFTInfo)) nftInfo;\\n    uint256 currentVersion;\\n    mapping(uint256 => Snapshot) snapshotMap;\\n    /* ---------------------------------- security --------------------------------- */\\n    Authorisation auth;\\n    /* --------------------------------- protocol fee ------------------------------ */\\n    ProtocolFee protocolFee;\\n    /* ---------------------------------- helper --------------------------------- */\\n    // mapping of sender address to helper maps, need to clear after computing\\n    UpgradeParam upgradeParam;\\n}\\n\\nlibrary LibAppStorage {\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function cleanUpgradeParam() internal {\\n        UpgradeParam storage s = diamondStorage().upgradeParam;\\n        for (uint256 i = 0; i < s.existingSelectors[msg.sender].length; ) {\\n            delete s.existingSelectorFacetMap[msg.sender][\\n                s.existingSelectors[msg.sender][i]\\n            ];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        delete s.existingSelectors[msg.sender];\\n\\n        for (uint256 i = 0; i < s.newSelectors[msg.sender].length; ) {\\n            delete s.newSelectorSet[msg.sender][s.newSelectors[msg.sender][i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        delete s.newSelectors[msg.sender];\\n\\n        delete s.facetCuts[msg.sender];\\n        delete s.facetCutSize[msg.sender];\\n    }\\n}\\n\\ncontract Storage is Context {\\n    AppStorage internal s;\\n\\n    modifier whenPaused() {\\n        require(s._paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!s._paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier authorised() {\\n        require(auth(), \\\"call is not authorised\\\");\\n        _;\\n    }\\n\\n    function auth() internal view returns (bool) {\\n        return LibSecurity.isAuthorisedInbound(s.auth, msg.sender, msg.sig);\\n    }\\n\\n    function computeSnapshotChecksum(Snapshot memory snapshot)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        bytes memory data;\\n        for (uint256 i = 0; i < snapshot.facets.length; ) {\\n            IDiamondLoupe.Facet memory facet = snapshot.facets[i];\\n            data = bytes.concat(data, abi.encodePacked(facet.facetAddress));\\n            for (uint256 j = 0; j < facet.functionSelectors.length; j++) {\\n                data = bytes.concat(data, facet.functionSelectors[j]);\\n            }\\n            bytes32 facetCodeHash;\\n            address facetAddress = facet.facetAddress;\\n            assembly {\\n                facetCodeHash := extcodehash(facetAddress)\\n            }\\n            data = bytes.concat(data, facetCodeHash);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return keccak256(data);\\n    }\\n\\n    function diamondCut(address vault) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256 currentVersion = s.currentVersion;\\n        Snapshot memory snapshot = s.snapshotMap[currentVersion];\\n        bytes32 checksum = computeSnapshotChecksum(snapshot);\\n        IDiamondCut.FacetCut[] memory facetCuts = new IDiamondCut.FacetCut[](\\n            snapshot.facets.length\\n        );\\n        for (uint256 i = 0; i < snapshot.facets.length; ) {\\n            address facetAddr = snapshot.facets[i].facetAddress;\\n            bytes4[] memory selectors = snapshot.facets[i].functionSelectors;\\n            facetCuts[i].facetAddress = facetAddr;\\n            facetCuts[i].functionSelectors = selectors;\\n            facetCuts[i].action = IDiamondCut.FacetCutAction.Add;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        DiamondCutFacet(vault).diamondCut(\\n            facetCuts,\\n            snapshot.init,\\n            snapshot.initArgs\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcdf73fe652fdd67b462760604879fb9688962174307671c507173adbe85a4199\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibSecurity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {LibAppStorage, AppStorage, Authorisation} from \\\"./LibAppStorage.sol\\\";\\n\\nlibrary LibSecurity {\\n    function isAuthorised(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        return\\n            auth.rbac.canCall(src, dst, selector) ||\\n            auth.acl.canCall(src, dst, selector);\\n    }\\n\\n    function isAuthorisedInbound(\\n        Authorisation storage auth,\\n        address src,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        // s.security.acl/rbac is an instance ds-roles and implements DSAuthority interface\\n        return\\n            auth.rbac.canCall(src, address(this), selector) ||\\n            auth.acl.canCall(src, address(this), selector);\\n    }\\n\\n    function isAuthorisedOutbound(\\n        Authorisation storage auth,\\n        address dst,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        // s.security.acl/rbac is an instance ds-guard and implements DSAuthority interface\\n        return\\n            auth.rbac.canCall(msg.sender, dst, selector) ||\\n            auth.acl.canCall(msg.sender, dst, selector);\\n    }\\n\\n    // role can be a enum, but cast to uint8 before calling grantRole\\n    function grantRole(\\n        Authorisation storage auth,\\n        address user,\\n        uint8 role,\\n        bool enabled\\n    ) internal {\\n        // grant role\\n        auth.rbac.setUserRole(user, role, enabled);\\n    }\\n\\n    function grantRolePermission(\\n        Authorisation storage auth,\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) internal {\\n        // give a role a permission\\n        auth.rbac.setRoleCapability(role, target, sig, true);\\n    }\\n\\n    function revokeRolePermission(\\n        Authorisation storage auth,\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) internal {\\n        // revoke a role permission\\n        auth.rbac.setRoleCapability(role, target, sig, false);\\n    }\\n\\n    function grantPermissions(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4[] memory sig\\n    ) internal {\\n        for (uint256 i = 0; i < sig.length; i++) {\\n            grantPermission(auth, src, dst, sig[i]);\\n        }\\n    }\\n\\n    function grantPermission(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) internal {\\n        // allow src to call dst.sig\\n        auth.acl.permit(src, dst, sig);\\n    }\\n\\n    function revokePermission(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) internal {\\n        auth.acl.forbid(src, dst, sig);\\n    }\\n}\\n\",\"keccak256\":\"0x4ca4a6b133cc63ed12705db3fb8c6d166fc394ca9be53743c6857502077fd029\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612597806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c724363b14610030575b600080fd5b61004361003e366004610774565b610045565b005b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020527f699d9daa71b280d05a152715774afa0a81a312594b2d731d6b0b2552b7d6f69f805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091821681179092557ff97e938d8af42f52387bb74b8b526fda8f184cc2aa534340a8d75a88fbecc77580548216831790557f65d510a5d8f7ef134ec444f7f34ee808c8eeb5177cdfd16be0c40fe1ab43369580548216831790557f7f5828d0000000000000000000000000000000000000000000000000000000006000527f5622121b47b8cd0120c4efe45dd5483242f54a3d49bd7679be565d47694918c380548216909217909155610120820151600580547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b0393841602179055600880549092169091556018547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9116610222576040516101d7906106e0565b604051809103906000f0801580156101f3573d6000803e3d6000fd5b506018805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555b6019546001600160a01b03166103cd5760405161023e906106ed565b604051809103906000f08015801561025a573d6000803e3d6000fd5b506019805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392831617905560185483516040517fd381ba7c00000000000000000000000000000000000000000000000000000000815290831660048201526001602482015291169063d381ba7c90604401600060405180830381600087803b1580156102e457600080fd5b505af11580156102f8573d6000803e3d6000fd5b505060195484516040517ff0217ce500000000000000000000000000000000000000000000000000000000815260609190911b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660048201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602482018190526044820181905293506001600160a01b03909116915063f0217ce590606401600060405180830381600087803b1580156103b357600080fd5b505af11580156103c7573d6000803e3d6000fd5b50505050505b60085461010090046001600160a01b031661045f5781602001516040516103f3906106fa565b6001600160a01b039091168152602001604051809103906000f08015801561041f573d6000803e3d6000fd5b50600880546001600160a01b0392909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff9092169190911790555b6009546001600160a01b03166104db578160400151604051610480906106fa565b6001600160a01b039091168152602001604051809103906000f0801580156104ac573d6000803e3d6000fd5b506009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555b6001546001600160a01b03166105575781606001516040516104fc906106fa565b6001600160a01b039091168152602001604051809103906000f080158015610528573d6000803e3d6000fd5b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555b6002546001600160a01b03166105d3578160800151604051610578906106fa565b6001600160a01b039091168152602001604051809103906000f0801580156105a4573d6000803e3d6000fd5b506002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555b600f546001600160a01b03166106155760a0820151600f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790555b600c546001600160a01b03166106575760c0820151600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790555b600d546001600160a01b03166106995760e0820151600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790555b600e546001600160a01b03166106dc57610100820151600e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790555b5050565b610d488061083d83390190565b6109fc8061158583390190565b6105e180611f8183390190565b604051610140810167ffffffffffffffff81118282101715610752577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b80356001600160a01b038116811461076f57600080fd5b919050565b6000610140828403121561078757600080fd5b61078f610707565b61079883610758565b81526107a660208401610758565b60208201526107b760408401610758565b60408201526107c860608401610758565b60608201526107d960808401610758565b60808201526107ea60a08401610758565b60a08201526107fb60c08401610758565b60c082015261080c60e08401610758565b60e082015261010061081f818501610758565b90820152610120610831848201610758565b90820152939250505056fe608060405234801561001057600080fd5b50600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a2610cea8061005e6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063bf7e214f11610066578063bf7e214f14610232578063c6b0263e14610245578063d381ba7c14610258578063fbf807731461026b57600080fd5b80638da5cb5b146101e1578063a078f7371461020c578063b70096131461021f57600080fd5b80632f47571f116100c85780632f47571f1461015357806367aff484146101a85780637a9e5e4b146101bb5780637d40583d146101ce57600080fd5b806306a36aee146100ef57806313af40351461012b57806327538e9014610140575b600080fd5b6101186100fd36600461096f565b6001600160a01b031660009081526003602052604090205490565b6040519081526020015b60405180910390f35b61013e61013936600461096f565b610297565b005b61011861014e3660046109a9565b610360565b6101986101613660046109a9565b6001600160a01b03821660009081526005602090815260408083206001600160e01b03198516845290915290205460ff1692915050565b6040519015158152602001610122565b61013e6101b63660046109fd565b610395565b61013e6101c936600461096f565b610472565b61013e6101dc366004610a46565b610534565b6001546101f4906001600160a01b031681565b6040516001600160a01b039091168152602001610122565b61019861021a366004610a9e565b610651565b61019861022d366004610aca565b610688565b6000546101f4906001600160a01b031681565b61013e610253366004610b11565b610723565b61013e610266366004610b3f565b6107c6565b61019861027936600461096f565b6001600160a01b031660009081526002602052604090205460ff1690565b6102ad336000356001600160e01b031916610853565b6102fe5760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b6001600160a01b03821660009081526004602090815260408083206001600160e01b0319851684529091529020545b92915050565b6103ab336000356001600160e01b031916610853565b6103f75760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016102f5565b6001600160a01b0383166000908152600360205260408120549061041f60ff85166002610c8b565b90508215610449576001600160a01b0385166000908152600360205260409020828217905561046b565b6001600160a01b03851660009081526003602052604090206000198218831690555b5050505050565b610488336000356001600160e01b031916610853565b6104d45760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016102f5565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b61054a336000356001600160e01b031916610853565b6105965760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016102f5565b6001600160a01b03831660009081526004602090815260408083206001600160e01b031986168452909152812054906105d360ff87166002610c8b565b90508215610612576001600160a01b03851660009081526004602090815260408083206001600160e01b03198816845290915290208282179055610649565b6001600160a01b03851660009081526004602090815260408083206001600160e01b03198816845290915290206000198218831690555b505050505050565b6001600160a01b038216600090815260036020526040812054600061067a60ff85166002610c8b565b919091161515949350505050565b6001600160a01b03831660009081526002602052604081205460ff16806106dc57506001600160a01b03831660009081526005602090815260408083206001600160e01b03198616845290915290205460ff165b156106e95750600161071c565b6001600160a01b0384166000908152600360205260408120549061070d8585610360565b919091161515915061071c9050565b9392505050565b610739336000356001600160e01b031916610853565b6107855760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016102f5565b6001600160a01b0390921660009081526005602090815260408083206001600160e01b0319909416835292905220805491151560ff19909216919091179055565b6107dc336000356001600160e01b031916610853565b6108285760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016102f5565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b60006001600160a01b03831630141561086e5750600161038f565b6001546001600160a01b038481169116141561088c5750600161038f565b6000546001600160a01b03166108a45750600061038f565b6000546040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301523060248301526001600160e01b0319851660448301529091169063b70096139060640160206040518083038186803b15801561091857600080fd5b505afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190610c97565b905061038f565b6001600160a01b038116811461096c57600080fd5b50565b60006020828403121561098157600080fd5b813561071c81610957565b80356001600160e01b0319811681146109a457600080fd5b919050565b600080604083850312156109bc57600080fd5b82356109c781610957565b91506109d56020840161098c565b90509250929050565b803560ff811681146109a457600080fd5b801515811461096c57600080fd5b600080600060608486031215610a1257600080fd5b8335610a1d81610957565b9250610a2b602085016109de565b91506040840135610a3b816109ef565b809150509250925092565b60008060008060808587031215610a5c57600080fd5b610a65856109de565b93506020850135610a7581610957565b9250610a836040860161098c565b91506060850135610a93816109ef565b939692955090935050565b60008060408385031215610ab157600080fd5b8235610abc81610957565b91506109d5602084016109de565b600080600060608486031215610adf57600080fd5b8335610aea81610957565b92506020840135610afa81610957565b9150610b086040850161098c565b90509250925092565b600080600060608486031215610b2657600080fd5b8335610b3181610957565b9250610a2b6020850161098c565b60008060408385031215610b5257600080fd5b8235610b5d81610957565b91506020830135610b6d816109ef565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b80851115610be2578160001904821115610bc857610bc8610b78565b80851615610bd557918102915b93841c9390800290610bac565b509250929050565b600082610bf95750600161038f565b81610c065750600061038f565b8160018114610c1c5760028114610c2657610c42565b600191505061038f565b60ff841115610c3757610c37610b78565b50506001821b61038f565b5060208310610133831016604e8410600b8410161715610c65575081810a61038f565b610c6f8383610ba7565b8060001904821115610c8357610c83610b78565b029392505050565b600061071c8383610bea565b600060208284031215610ca957600080fd5b815161071c816109ef56fea2646970667358221220f49fe75c358cd770b5e904179aa563ad0117475693ed30e85d9c471cae90b23a64736f6c63430008090033608060405234801561001057600080fd5b50600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a261099e8061005e6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063a8542f6611610076578063bf7e214f1161005b578063bf7e214f1461017b578063cbeea68c1461018e578063f0217ce5146101a157600080fd5b8063a8542f6614610141578063b70096131461015857600080fd5b806379d88d87116100a757806379d88d87146100eb5780637a9e5e4b146100fe5780638da5cb5b1461011157600080fd5b806313af4035146100c35780632bc3217d146100d8575b600080fd5b6100d66100d136600461085d565b6101b4565b005b6100d66100e6366004610881565b61027d565b6100d66100f93660046108c2565b6102b1565b6100d661010c36600461085d565b61036c565b600154610124906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014a60001981565b604051908152602001610138565b61016b6101663660046108ee565b61042e565b6040519015158152602001610138565b600054610124906001600160a01b031681565b6100d661019c366004610881565b610656565b6100d66101af3660046108c2565b610681565b6101ca336000356001600160e01b03191661073f565b61021b5760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b6102ac8360601b6bffffffffffffffffffffffff19168360601b6bffffffffffffffffffffffff1916836102b1565b505050565b6102c7336000356001600160e01b03191661073f565b6103135760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610212565b60008381526002602090815260408083208584528252808320848452909152808220805460ff19169055518291849186917f95ba64c95d85e67ac83a0476c4a62ac2cf8ab2d0407545b8c9d79c3eefa6282991a4505050565b610382336000356001600160e01b03191661073f565b6103ce5760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610212565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b821660008181526002602090815260408083209488901b9095168083529381528482206001600160e01b03198716835290529283205490919060ff16806104be575060008281526002602090815260408083208484528252808320600019845290915290205460ff165b806104f657506000828152600260209081526040808320600019845282528083206001600160e01b03198816845290915290205460ff165b80610521575060008281526002602090815260408083206000198452825280832090915290205460ff165b8061056e575060008181527f38b5b2ceac7637132d27514ffcf440b705287635075af7b8bd5adcaa6a4cc5bb602090815260408083206001600160e01b03198816845290915290205460ff165b806105b3575060008181527f38b5b2ceac7637132d27514ffcf440b705287635075af7b8bd5adcaa6a4cc5bb60209081526040808320600019845290915290205460ff165b806105f657506001600160e01b0319841660009081527f47fa60fbc027ac3984ea309688a33182f4193c478b40ba8d294eb2cd3ddc4d97602052604090205460ff165b8061064c57506000196000527f47fa60fbc027ac3984ea309688a33182f4193c478b40ba8d294eb2cd3ddc4d976020527ff423d1317b37667cd26005728bffa7c8b0499e133951fcf8e814d4fc5f4c98f65460ff165b9695505050505050565b6102ac8360601b6bffffffffffffffffffffffff19168360601b6bffffffffffffffffffffffff1916835b610697336000356001600160e01b03191661073f565b6106e35760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610212565b60008381526002602090815260408083208584528252808320848452909152808220805460ff19166001179055518291849186917f6f50375045128971c5469d343039ba7b8e30a5b190453737b28bda6f7a30677191a4505050565b60006001600160a01b03831630141561075a5750600161083f565b6001546001600160a01b03848116911614156107785750600161083f565b6000546001600160a01b03166107905750600061083f565b6000546040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301523060248301526001600160e01b0319851660448301529091169063b70096139060640160206040518083038186803b15801561080457600080fd5b505afa158015610818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083c9190610946565b90505b92915050565b6001600160a01b038116811461085a57600080fd5b50565b60006020828403121561086f57600080fd5b813561087a81610845565b9392505050565b60008060006060848603121561089657600080fd5b83356108a181610845565b925060208401356108b181610845565b929592945050506040919091013590565b6000806000606084860312156108d757600080fd5b505081359360208301359350604090920135919050565b60008060006060848603121561090357600080fd5b833561090e81610845565b9250602084013561091e81610845565b915060408401356001600160e01b03198116811461093b57600080fd5b809150509250925092565b60006020828403121561095857600080fd5b8151801515811461087a57600080fdfea26469706673582212208473569783ec2b64a608c0911c2a2998ea8de5e3046b943b20df253174b6a7c764736f6c63430008090033608060405234801561001057600080fd5b506040516105e13803806105e183398101604081905261002f91610151565b61003833610047565b61004181610097565b50610181565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100aa8161014260201b6102bd1760201c565b6101205760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000606482015260840160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03163b151590565b60006020828403121561016357600080fd5b81516001600160a01b038116811461017a57600080fd5b9392505050565b610451806101906000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063715018a611610050578063715018a6146100aa5780638da5cb5b146100b2578063f2fde38b146100c357600080fd5b80633659cfe61461006c5780635c60da1b14610081575b600080fd5b61007f61007a3660046103eb565b6100d6565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61007f610175565b6000546001600160a01b031661008e565b61007f6100d13660046103eb565b6101db565b6000546001600160a01b031633146101355760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61013e816102cc565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000546001600160a01b031633146101cf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161012c565b6101d96000610383565b565b6000546001600160a01b031633146102355760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161012c565b6001600160a01b0381166102b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161012c565b6102ba81610383565b50565b6001600160a01b03163b151590565b6001600160a01b0381163b6103495760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000606482015260840161012c565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156103fd57600080fd5b81356001600160a01b038116811461041457600080fd5b939250505056fea2646970667358221220481185d8c4c8cad6fe97c490a4a85a544333370ad7c3c50b99461aa6e74c651f64736f6c63430008090033a264697066735822122034fc7d685292519f1866fafee8b1d1dd7fe17247ed9f42a7ed9c3116e985aacc64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c724363b14610030575b600080fd5b61004361003e366004610774565b610045565b005b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020527f699d9daa71b280d05a152715774afa0a81a312594b2d731d6b0b2552b7d6f69f805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091821681179092557ff97e938d8af42f52387bb74b8b526fda8f184cc2aa534340a8d75a88fbecc77580548216831790557f65d510a5d8f7ef134ec444f7f34ee808c8eeb5177cdfd16be0c40fe1ab43369580548216831790557f7f5828d0000000000000000000000000000000000000000000000000000000006000527f5622121b47b8cd0120c4efe45dd5483242f54a3d49bd7679be565d47694918c380548216909217909155610120820151600580547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b0393841602179055600880549092169091556018547fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9116610222576040516101d7906106e0565b604051809103906000f0801580156101f3573d6000803e3d6000fd5b506018805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555b6019546001600160a01b03166103cd5760405161023e906106ed565b604051809103906000f08015801561025a573d6000803e3d6000fd5b506019805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392831617905560185483516040517fd381ba7c00000000000000000000000000000000000000000000000000000000815290831660048201526001602482015291169063d381ba7c90604401600060405180830381600087803b1580156102e457600080fd5b505af11580156102f8573d6000803e3d6000fd5b505060195484516040517ff0217ce500000000000000000000000000000000000000000000000000000000815260609190911b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660048201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602482018190526044820181905293506001600160a01b03909116915063f0217ce590606401600060405180830381600087803b1580156103b357600080fd5b505af11580156103c7573d6000803e3d6000fd5b50505050505b60085461010090046001600160a01b031661045f5781602001516040516103f3906106fa565b6001600160a01b039091168152602001604051809103906000f08015801561041f573d6000803e3d6000fd5b50600880546001600160a01b0392909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff9092169190911790555b6009546001600160a01b03166104db578160400151604051610480906106fa565b6001600160a01b039091168152602001604051809103906000f0801580156104ac573d6000803e3d6000fd5b506009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555b6001546001600160a01b03166105575781606001516040516104fc906106fa565b6001600160a01b039091168152602001604051809103906000f080158015610528573d6000803e3d6000fd5b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555b6002546001600160a01b03166105d3578160800151604051610578906106fa565b6001600160a01b039091168152602001604051809103906000f0801580156105a4573d6000803e3d6000fd5b506002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555b600f546001600160a01b03166106155760a0820151600f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790555b600c546001600160a01b03166106575760c0820151600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790555b600d546001600160a01b03166106995760e0820151600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790555b600e546001600160a01b03166106dc57610100820151600e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790555b5050565b610d488061083d83390190565b6109fc8061158583390190565b6105e180611f8183390190565b604051610140810167ffffffffffffffff81118282101715610752577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b80356001600160a01b038116811461076f57600080fd5b919050565b6000610140828403121561078757600080fd5b61078f610707565b61079883610758565b81526107a660208401610758565b60208201526107b760408401610758565b60408201526107c860608401610758565b60608201526107d960808401610758565b60808201526107ea60a08401610758565b60a08201526107fb60c08401610758565b60c082015261080c60e08401610758565b60e082015261010061081f818501610758565b90820152610120610831848201610758565b90820152939250505056fe608060405234801561001057600080fd5b50600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a2610cea8061005e6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063bf7e214f11610066578063bf7e214f14610232578063c6b0263e14610245578063d381ba7c14610258578063fbf807731461026b57600080fd5b80638da5cb5b146101e1578063a078f7371461020c578063b70096131461021f57600080fd5b80632f47571f116100c85780632f47571f1461015357806367aff484146101a85780637a9e5e4b146101bb5780637d40583d146101ce57600080fd5b806306a36aee146100ef57806313af40351461012b57806327538e9014610140575b600080fd5b6101186100fd36600461096f565b6001600160a01b031660009081526003602052604090205490565b6040519081526020015b60405180910390f35b61013e61013936600461096f565b610297565b005b61011861014e3660046109a9565b610360565b6101986101613660046109a9565b6001600160a01b03821660009081526005602090815260408083206001600160e01b03198516845290915290205460ff1692915050565b6040519015158152602001610122565b61013e6101b63660046109fd565b610395565b61013e6101c936600461096f565b610472565b61013e6101dc366004610a46565b610534565b6001546101f4906001600160a01b031681565b6040516001600160a01b039091168152602001610122565b61019861021a366004610a9e565b610651565b61019861022d366004610aca565b610688565b6000546101f4906001600160a01b031681565b61013e610253366004610b11565b610723565b61013e610266366004610b3f565b6107c6565b61019861027936600461096f565b6001600160a01b031660009081526002602052604090205460ff1690565b6102ad336000356001600160e01b031916610853565b6102fe5760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b6001600160a01b03821660009081526004602090815260408083206001600160e01b0319851684529091529020545b92915050565b6103ab336000356001600160e01b031916610853565b6103f75760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016102f5565b6001600160a01b0383166000908152600360205260408120549061041f60ff85166002610c8b565b90508215610449576001600160a01b0385166000908152600360205260409020828217905561046b565b6001600160a01b03851660009081526003602052604090206000198218831690555b5050505050565b610488336000356001600160e01b031916610853565b6104d45760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016102f5565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b61054a336000356001600160e01b031916610853565b6105965760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016102f5565b6001600160a01b03831660009081526004602090815260408083206001600160e01b031986168452909152812054906105d360ff87166002610c8b565b90508215610612576001600160a01b03851660009081526004602090815260408083206001600160e01b03198816845290915290208282179055610649565b6001600160a01b03851660009081526004602090815260408083206001600160e01b03198816845290915290206000198218831690555b505050505050565b6001600160a01b038216600090815260036020526040812054600061067a60ff85166002610c8b565b919091161515949350505050565b6001600160a01b03831660009081526002602052604081205460ff16806106dc57506001600160a01b03831660009081526005602090815260408083206001600160e01b03198616845290915290205460ff165b156106e95750600161071c565b6001600160a01b0384166000908152600360205260408120549061070d8585610360565b919091161515915061071c9050565b9392505050565b610739336000356001600160e01b031916610853565b6107855760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016102f5565b6001600160a01b0390921660009081526005602090815260408083206001600160e01b0319909416835292905220805491151560ff19909216919091179055565b6107dc336000356001600160e01b031916610853565b6108285760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064016102f5565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b60006001600160a01b03831630141561086e5750600161038f565b6001546001600160a01b038481169116141561088c5750600161038f565b6000546001600160a01b03166108a45750600061038f565b6000546040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301523060248301526001600160e01b0319851660448301529091169063b70096139060640160206040518083038186803b15801561091857600080fd5b505afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190610c97565b905061038f565b6001600160a01b038116811461096c57600080fd5b50565b60006020828403121561098157600080fd5b813561071c81610957565b80356001600160e01b0319811681146109a457600080fd5b919050565b600080604083850312156109bc57600080fd5b82356109c781610957565b91506109d56020840161098c565b90509250929050565b803560ff811681146109a457600080fd5b801515811461096c57600080fd5b600080600060608486031215610a1257600080fd5b8335610a1d81610957565b9250610a2b602085016109de565b91506040840135610a3b816109ef565b809150509250925092565b60008060008060808587031215610a5c57600080fd5b610a65856109de565b93506020850135610a7581610957565b9250610a836040860161098c565b91506060850135610a93816109ef565b939692955090935050565b60008060408385031215610ab157600080fd5b8235610abc81610957565b91506109d5602084016109de565b600080600060608486031215610adf57600080fd5b8335610aea81610957565b92506020840135610afa81610957565b9150610b086040850161098c565b90509250925092565b600080600060608486031215610b2657600080fd5b8335610b3181610957565b9250610a2b6020850161098c565b60008060408385031215610b5257600080fd5b8235610b5d81610957565b91506020830135610b6d816109ef565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b80851115610be2578160001904821115610bc857610bc8610b78565b80851615610bd557918102915b93841c9390800290610bac565b509250929050565b600082610bf95750600161038f565b81610c065750600061038f565b8160018114610c1c5760028114610c2657610c42565b600191505061038f565b60ff841115610c3757610c37610b78565b50506001821b61038f565b5060208310610133831016604e8410600b8410161715610c65575081810a61038f565b610c6f8383610ba7565b8060001904821115610c8357610c83610b78565b029392505050565b600061071c8383610bea565b600060208284031215610ca957600080fd5b815161071c816109ef56fea2646970667358221220f49fe75c358cd770b5e904179aa563ad0117475693ed30e85d9c471cae90b23a64736f6c63430008090033608060405234801561001057600080fd5b50600180546001600160a01b031916339081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a261099e8061005e6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063a8542f6611610076578063bf7e214f1161005b578063bf7e214f1461017b578063cbeea68c1461018e578063f0217ce5146101a157600080fd5b8063a8542f6614610141578063b70096131461015857600080fd5b806379d88d87116100a757806379d88d87146100eb5780637a9e5e4b146100fe5780638da5cb5b1461011157600080fd5b806313af4035146100c35780632bc3217d146100d8575b600080fd5b6100d66100d136600461085d565b6101b4565b005b6100d66100e6366004610881565b61027d565b6100d66100f93660046108c2565b6102b1565b6100d661010c36600461085d565b61036c565b600154610124906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014a60001981565b604051908152602001610138565b61016b6101663660046108ee565b61042e565b6040519015158152602001610138565b600054610124906001600160a01b031681565b6100d661019c366004610881565b610656565b6100d66101af3660046108c2565b610681565b6101ca336000356001600160e01b03191661073f565b61021b5760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a656400000000000000000000000060448201526064015b60405180910390fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b6102ac8360601b6bffffffffffffffffffffffff19168360601b6bffffffffffffffffffffffff1916836102b1565b505050565b6102c7336000356001600160e01b03191661073f565b6103135760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610212565b60008381526002602090815260408083208584528252808320848452909152808220805460ff19169055518291849186917f95ba64c95d85e67ac83a0476c4a62ac2cf8ab2d0407545b8c9d79c3eefa6282991a4505050565b610382336000356001600160e01b03191661073f565b6103ce5760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610212565b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b821660008181526002602090815260408083209488901b9095168083529381528482206001600160e01b03198716835290529283205490919060ff16806104be575060008281526002602090815260408083208484528252808320600019845290915290205460ff165b806104f657506000828152600260209081526040808320600019845282528083206001600160e01b03198816845290915290205460ff165b80610521575060008281526002602090815260408083206000198452825280832090915290205460ff165b8061056e575060008181527f38b5b2ceac7637132d27514ffcf440b705287635075af7b8bd5adcaa6a4cc5bb602090815260408083206001600160e01b03198816845290915290205460ff165b806105b3575060008181527f38b5b2ceac7637132d27514ffcf440b705287635075af7b8bd5adcaa6a4cc5bb60209081526040808320600019845290915290205460ff165b806105f657506001600160e01b0319841660009081527f47fa60fbc027ac3984ea309688a33182f4193c478b40ba8d294eb2cd3ddc4d97602052604090205460ff165b8061064c57506000196000527f47fa60fbc027ac3984ea309688a33182f4193c478b40ba8d294eb2cd3ddc4d976020527ff423d1317b37667cd26005728bffa7c8b0499e133951fcf8e814d4fc5f4c98f65460ff165b9695505050505050565b6102ac8360601b6bffffffffffffffffffffffff19168360601b6bffffffffffffffffffffffff1916835b610697336000356001600160e01b03191661073f565b6106e35760405162461bcd60e51b815260206004820152601460248201527f64732d617574682d756e617574686f72697a65640000000000000000000000006044820152606401610212565b60008381526002602090815260408083208584528252808320848452909152808220805460ff19166001179055518291849186917f6f50375045128971c5469d343039ba7b8e30a5b190453737b28bda6f7a30677191a4505050565b60006001600160a01b03831630141561075a5750600161083f565b6001546001600160a01b03848116911614156107785750600161083f565b6000546001600160a01b03166107905750600061083f565b6000546040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301523060248301526001600160e01b0319851660448301529091169063b70096139060640160206040518083038186803b15801561080457600080fd5b505afa158015610818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083c9190610946565b90505b92915050565b6001600160a01b038116811461085a57600080fd5b50565b60006020828403121561086f57600080fd5b813561087a81610845565b9392505050565b60008060006060848603121561089657600080fd5b83356108a181610845565b925060208401356108b181610845565b929592945050506040919091013590565b6000806000606084860312156108d757600080fd5b505081359360208301359350604090920135919050565b60008060006060848603121561090357600080fd5b833561090e81610845565b9250602084013561091e81610845565b915060408401356001600160e01b03198116811461093b57600080fd5b809150509250925092565b60006020828403121561095857600080fd5b8151801515811461087a57600080fdfea26469706673582212208473569783ec2b64a608c0911c2a2998ea8de5e3046b943b20df253174b6a7c764736f6c63430008090033608060405234801561001057600080fd5b506040516105e13803806105e183398101604081905261002f91610151565b61003833610047565b61004181610097565b50610181565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100aa8161014260201b6102bd1760201c565b6101205760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000606482015260840160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03163b151590565b60006020828403121561016357600080fd5b81516001600160a01b038116811461017a57600080fd5b9392505050565b610451806101906000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063715018a611610050578063715018a6146100aa5780638da5cb5b146100b2578063f2fde38b146100c357600080fd5b80633659cfe61461006c5780635c60da1b14610081575b600080fd5b61007f61007a3660046103eb565b6100d6565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61007f610175565b6000546001600160a01b031661008e565b61007f6100d13660046103eb565b6101db565b6000546001600160a01b031633146101355760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61013e816102cc565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000546001600160a01b031633146101cf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161012c565b6101d96000610383565b565b6000546001600160a01b031633146102355760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161012c565b6001600160a01b0381166102b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161012c565b6102ba81610383565b50565b6001600160a01b03163b151590565b6001600160a01b0381163b6103495760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000606482015260840161012c565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156103fd57600080fd5b81356001600160a01b038116811461041457600080fd5b939250505056fea2646970667358221220481185d8c4c8cad6fe97c490a4a85a544333370ad7c3c50b99461aa6e74c651f64736f6c63430008090033a264697066735822122034fc7d685292519f1866fafee8b1d1dd7fe17247ed9f42a7ed9c3116e985aacc64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13855,
        "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)20987_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes4)dyn_storage": {
        "base": "t_bytes4",
        "encoding": "dynamic_array",
        "label": "bytes4[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Facet)7894_storage)dyn_storage": {
        "base": "t_struct(Facet)7894_storage",
        "encoding": "dynamic_array",
        "label": "struct IDiamondLoupe.Facet[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(FacetCut)7862_storage)dyn_storage": {
        "base": "t_struct(FacetCut)7862_storage",
        "encoding": "dynamic_array",
        "label": "struct IDiamondCut.FacetCut[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RepaymentData)20716_storage)dyn_storage": {
        "base": "t_struct(RepaymentData)20716_storage",
        "encoding": "dynamic_array",
        "label": "struct RepaymentData[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(DSGuard)14682": {
        "encoding": "inplace",
        "label": "contract DSGuard",
        "numberOfBytes": "20"
      },
      "t_contract(DSRoles)15071": {
        "encoding": "inplace",
        "label": "contract DSRoles",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultFactory)20638": {
        "encoding": "inplace",
        "label": "contract IVaultFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH9)9162": {
        "encoding": "inplace",
        "label": "contract IWETH9",
        "numberOfBytes": "20"
      },
      "t_contract(UpgradeableBeacon)2867": {
        "encoding": "inplace",
        "label": "contract UpgradeableBeacon",
        "numberOfBytes": "20"
      },
      "t_enum(FacetCutAction)7853": {
        "encoding": "inplace",
        "label": "enum IDiamondCut.FacetCutAction",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_bytes4)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes4[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes4)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(FacetCut)7862_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDiamondCut.FacetCut[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(FacetCut)7862_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(BorrowData)20771_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct BorrowData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(BorrowData)20771_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(VaultConfig)20787_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct VaultConfig))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(VaultConfig)20787_storage)"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_bytes4,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes4 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTInfo)20824_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NFTInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(NFTInfo)20824_storage)"
      },
      "t_mapping(t_address,t_struct(BorrowData)20771_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BorrowData)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowData)20771_storage"
      },
      "t_mapping(t_address,t_struct(BorrowState)20778_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BorrowState)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowState)20778_storage"
      },
      "t_mapping(t_address,t_struct(ERC721AssetInfo)20829_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721AssetInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ERC721AssetInfo)20829_storage"
      },
      "t_mapping(t_address,t_struct(ReserveData)20695_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ReserveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveData)20695_storage"
      },
      "t_mapping(t_address,t_struct(VaultConfig)20787_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultConfig)20787_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_bytes4)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes4[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes4)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Loan)20746_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)20746_storage"
      },
      "t_mapping(t_uint256,t_struct(NFTInfo)20824_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTInfo)20824_storage"
      },
      "t_mapping(t_uint256,t_struct(Snapshot)20447_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Snapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(Snapshot)20447_storage"
      },
      "t_struct(AppStorage)20987_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 20888,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "_addresses",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 20891,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "seniorDepositTokenBeacon",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(UpgradeableBeacon)2867"
          },
          {
            "astId": 20894,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "juniorDepositTokenBeacon",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(UpgradeableBeacon)2867"
          },
          {
            "astId": 20899,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "_reserves",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(ReserveData)20695_storage)"
          },
          {
            "astId": 20903,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "_reserveList",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 20905,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "_reservesCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint16"
          },
          {
            "astId": 20908,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "WETH9",
            "offset": 2,
            "slot": "5",
            "type": "t_contract(IWETH9)9162"
          },
          {
            "astId": 20915,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "_borrowData",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(BorrowData)20771_storage))"
          },
          {
            "astId": 20920,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "_borrowState",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(BorrowState)20778_storage)"
          },
          {
            "astId": 20922,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "_paused",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 20925,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "marginEscrowBeacon",
            "offset": 1,
            "slot": "8",
            "type": "t_contract(UpgradeableBeacon)2867"
          },
          {
            "astId": 20928,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "creditEscrowBeacon",
            "offset": 0,
            "slot": "9",
            "type": "t_contract(UpgradeableBeacon)2867"
          },
          {
            "astId": 20931,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "subVaultBeacon",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(UpgradeableBeacon)2867"
          },
          {
            "astId": 20934,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "vaultBeacon",
            "offset": 0,
            "slot": "11",
            "type": "t_contract(UpgradeableBeacon)2867"
          },
          {
            "astId": 20937,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "diamondFacet",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(DiamondFacet)20884_storage"
          },
          {
            "astId": 20940,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "vaultFactory",
            "offset": 0,
            "slot": "15",
            "type": "t_contract(IVaultFactory)20638"
          },
          {
            "astId": 20943,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "vaults",
            "offset": 0,
            "slot": "16",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 20947,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "vaultMap",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 20954,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "vaultConfigMap",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(VaultConfig)20787_storage))"
          },
          {
            "astId": 20958,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "marketPlaceToAsset",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 20963,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "erc721AssetInfo",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_struct(ERC721AssetInfo)20829_storage)"
          },
          {
            "astId": 20970,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "nftInfo",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTInfo)20824_storage))"
          },
          {
            "astId": 20972,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "currentVersion",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 20977,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "snapshotMap",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_uint256,t_struct(Snapshot)20447_storage)"
          },
          {
            "astId": 20980,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "auth",
            "offset": 0,
            "slot": "24",
            "type": "t_struct(Authorisation)20819_storage"
          },
          {
            "astId": 20983,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "protocolFee",
            "offset": 0,
            "slot": "26",
            "type": "t_struct(ProtocolFee)20792_storage"
          },
          {
            "astId": 20986,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "upgradeParam",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(UpgradeParam)20877_storage"
          }
        ],
        "numberOfBytes": "1184"
      },
      "t_struct(Authorisation)20819_storage": {
        "encoding": "inplace",
        "label": "struct Authorisation",
        "members": [
          {
            "astId": 20815,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "rbac",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(DSRoles)15071"
          },
          {
            "astId": 20818,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "acl",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(DSGuard)14682"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BorrowData)20771_storage": {
        "encoding": "inplace",
        "label": "struct BorrowData",
        "members": [
          {
            "astId": 20753,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "paidLoanNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20755,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "nextLoanNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20757,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "totalPrincipal",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20759,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "totalInterest",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20761,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "mapSize",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 20766,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "loans",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_struct(Loan)20746_storage)"
          },
          {
            "astId": 20768,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "totalPaid",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 20770,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "totalRedeemed",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(BorrowState)20778_storage": {
        "encoding": "inplace",
        "label": "struct BorrowState",
        "members": [
          {
            "astId": 20773,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "totalDebt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20775,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "totalInterest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20777,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "avgBorrowRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DiamondFacet)20884_storage": {
        "encoding": "inplace",
        "label": "struct DiamondFacet",
        "members": [
          {
            "astId": 20879,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "diamondCutFacet",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20881,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "diamondLoupeFacet",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20883,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "ownershipFacet",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ERC721AssetInfo)20829_storage": {
        "encoding": "inplace",
        "label": "struct ERC721AssetInfo",
        "members": [
          {
            "astId": 20826,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "marketplace",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20828,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "erc20Addr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Facet)7894_storage": {
        "encoding": "inplace",
        "label": "struct IDiamondLoupe.Facet",
        "members": [
          {
            "astId": 7890,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "facetAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7893,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "functionSelectors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes4)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FacetCut)7862_storage": {
        "encoding": "inplace",
        "label": "struct IDiamondCut.FacetCut",
        "members": [
          {
            "astId": 7855,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "facetAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7858,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "action",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(FacetCutAction)7853"
          },
          {
            "astId": 7861,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "functionSelectors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes4)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Loan)20746_storage": {
        "encoding": "inplace",
        "label": "struct Loan",
        "members": [
          {
            "astId": 20718,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20720,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20722,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "term",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20724,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "epoch",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20726,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "nper",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 20729,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "pmt",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(PMT)20705_storage"
          },
          {
            "astId": 20731,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "apr",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 20733,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "borrowAt",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 20735,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "nextPaymentDue",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 20737,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "totalPrincipalPaid",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 20739,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "totalInterestPaid",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 20743,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "repayments",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_struct(RepaymentData)20716_storage)dyn_storage"
          },
          {
            "astId": 20745,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "paidTimes",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(NFTInfo)20824_storage": {
        "encoding": "inplace",
        "label": "struct NFTInfo",
        "members": [
          {
            "astId": 20821,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20823,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PMT)20705_storage": {
        "encoding": "inplace",
        "label": "struct PMT",
        "members": [
          {
            "astId": 20700,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20702,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20704,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "pmt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProtocolFee)20792_storage": {
        "encoding": "inplace",
        "label": "struct ProtocolFee",
        "members": [
          {
            "astId": 20789,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20791,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "cutRatio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RepaymentData)20716_storage": {
        "encoding": "inplace",
        "label": "struct RepaymentData",
        "members": [
          {
            "astId": 20707,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20709,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "interest",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20711,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "total",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20713,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "paidAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint40"
          },
          {
            "astId": 20715,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "isLiquidated",
            "offset": 5,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ReserveConfigurationMap)20698_storage": {
        "encoding": "inplace",
        "label": "struct ReserveConfigurationMap",
        "members": [
          {
            "astId": 20697,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ReserveData)20695_storage": {
        "encoding": "inplace",
        "label": "struct ReserveData",
        "members": [
          {
            "astId": 20668,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "configuration",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(ReserveConfigurationMap)20698_storage"
          },
          {
            "astId": 20670,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "currentOverallLiquidityRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20672,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "currentJuniorLiquidityRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20674,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "currentSeniorLiquidityRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20676,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "currentBorrowRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 20678,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "decimals",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 20680,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "interestRateStrategyAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 20682,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "juniorDepositTokenAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 20684,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "seniorDepositTokenAddress",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 20686,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "juniorLastUpdateTimestamp",
            "offset": 20,
            "slot": "8",
            "type": "t_uint40"
          },
          {
            "astId": 20688,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "seniorLastUpdateTimestamp",
            "offset": 25,
            "slot": "8",
            "type": "t_uint40"
          },
          {
            "astId": 20690,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "nftAddress",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          },
          {
            "astId": 20692,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "priceOracle",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 20694,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "initialized",
            "offset": 20,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Snapshot)20447_storage": {
        "encoding": "inplace",
        "label": "struct Snapshot",
        "members": [
          {
            "astId": 20442,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "facets",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Facet)7894_storage)dyn_storage"
          },
          {
            "astId": 20444,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "init",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20446,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "initArgs",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UpgradeParam)20877_storage": {
        "encoding": "inplace",
        "label": "struct UpgradeParam",
        "members": [
          {
            "astId": 20835,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "existingSelectorFacetMap",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_mapping(t_bytes4,t_address))"
          },
          {
            "astId": 20840,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "existingSelectors",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_array(t_bytes4)dyn_storage)"
          },
          {
            "astId": 20846,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "newSelectorSet",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_mapping(t_bytes4,t_bool))"
          },
          {
            "astId": 20851,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "newSelectors",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_array(t_bytes4)dyn_storage)"
          },
          {
            "astId": 20857,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "facetCuts",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_array(t_struct(FacetCut)7862_storage)dyn_storage)"
          },
          {
            "astId": 20861,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "facetCutSize",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 20866,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "selectorsAdded",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_array(t_bytes4)dyn_storage)"
          },
          {
            "astId": 20871,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "selectorsReplaced",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_array(t_bytes4)dyn_storage)"
          },
          {
            "astId": 20876,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "selectorsRemoved",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_array(t_bytes4)dyn_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(VaultConfig)20787_storage": {
        "encoding": "inplace",
        "label": "struct VaultConfig",
        "members": [
          {
            "astId": 20780,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "minMargin",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20782,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "maxMargin",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20784,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "marginRequirement",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20786,
            "contract": "contracts/voyage/InitDiamond.sol:InitDiamond",
            "label": "overrideGlobal",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}