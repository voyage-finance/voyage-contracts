{
  "address": "0xCe869C7Dbfd9668AD20EE20BF56A305F028a2d3D",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialize",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Tranche",
          "name": "_tranche",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        }
      ],
      "name": "ReserveActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        }
      ],
      "name": "ReserveInactived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_juniorDepositTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_seniorDepositTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_interestRateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "ReserveInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Tranche",
          "name": "_tranche",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        }
      ],
      "name": "activateReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "enum Tranche",
          "name": "_tranche",
          "type": "uint8"
        }
      ],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        }
      ],
      "name": "deactivateReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "enum Tranche",
          "name": "_tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "getReserveFlags",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        }
      ],
      "name": "getReserveStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "activated",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestRateStrategyAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "initReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "enum Tranche",
          "name": "_tranche",
          "type": "uint8"
        }
      ],
      "name": "unbonding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddr",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "_cutRatio",
          "type": "uint40"
        }
      ],
      "name": "updateProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth9",
          "type": "address"
        }
      ],
      "name": "updateWETH9",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "upgradePriceOracleImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "utilizationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "enum Tranche",
          "name": "_tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "61a98dd47a56fbe64984f78de53b81aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialize\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"ReserveActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"ReserveInactived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_juniorDepositTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seniorDepositTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"ReserveInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"activateReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"enum Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"deactivateReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"enum Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"getReserveFlags\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"getReserveStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"initReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"enum Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"unbonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"_cutRatio\",\"type\":\"uint40\"}],\"name\":\"updateProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth9\",\"type\":\"address\"}],\"name\":\"updateWETH9\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"upgradePriceOracleImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"enum Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voyage/facets/LiquidityFacet.sol\":\"LiquidityFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x564385ebed633694decce3e13d687f3ac7e8eaef64f7a504bfb3f03ad210601f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe8c62ca00ed2d0a4d9b7e3c4bf7d62c821618b2cdb3c844da91a1193986851bf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\",\"keccak256\":\"0x85439e74ab467b6a23d45d32bdc9506cbc3760320289afd605f11638c4138e95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/mixins/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\",\"keccak256\":\"0x91f5761576f1ff3ede392ea1205bb88d6eed520fdafdabb97da5c3518f8ad5c0\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x96ab2a92fbac88a704270b039691afb363c5a1ef1170fb0c955043e4da84b987\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa28a1515702793c6b56b97272f75e05890fd82aa2e7ec47b41d4d56a81023f69\",\"license\":\"AGPL-3.0-only\"},\"contracts/shared/diamond/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0x1ad930b2fb7a485ea9dc992bffe25b7f9ed400accf7eb19e06d0761457b7228d\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x70cec56344b453ec59bcecd3541f711b4f439b5b7e35cc10306b2e82eaa399da\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x5b20558ac0a152f84527227fa50db6f113dd2241992cb8aa9b1a7dbd193c277f\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79ecd45ef37ffd464dd3a612cd046e1b3ec6aed5efd767141c651e539bdee988\",\"license\":\"MIT\"},\"contracts/shared/diamond/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x6fae3084e63b6d8cca55d964865dc45e0c2abf2d0eb8fcd9a3fe7428441bf06a\",\"license\":\"MIT\"},\"contracts/shared/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IERC173} from \\\"../interfaces/IERC173.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    /// @notice Adds default diamond facets\\n    /// @dev This is always called in the Diamond constructor.\\n    /// @param _diamondCutFacet - address of DiamondCutFacet\\n    /// @param _diamondLoupeFacet - address of the DiamondLoupeFacet\\n    /// @param _ownershipFacet - address of the OwnershipFacet\\n    function addDiamondFunctions(\\n        address _diamondCutFacet,\\n        address _diamondLoupeFacet,\\n        address _ownershipFacet\\n    ) internal {\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](3);\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondCutFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        functionSelectors = new bytes4[](5);\\n        functionSelectors[0] = IDiamondLoupe.facets.selector;\\n        functionSelectors[1] = IDiamondLoupe.facetFunctionSelectors.selector;\\n        functionSelectors[2] = IDiamondLoupe.facetAddresses.selector;\\n        functionSelectors[3] = IDiamondLoupe.facetAddress.selector;\\n        functionSelectors[4] = IERC165.supportsInterface.selector;\\n        cut[1] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondLoupeFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        functionSelectors = new bytes4[](2);\\n        functionSelectors[0] = IERC173.transferOwnership.selector;\\n        functionSelectors[1] = IERC173.owner.selector;\\n        cut[2] = IDiamondCut.FacetCut({\\n            facetAddress: _ownershipFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        diamondCut(cut, address(0), \\\"\\\");\\n    }\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // uint16 selectorCount = uint16(diamondStorage().selectors.length);\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint16 selectorPosition = uint16(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            enforceHasContractCode(\\n                _facetAddress,\\n                \\\"LibDiamondCut: New facet has no code\\\"\\n            );\\n            ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition = uint16(ds.facetAddresses.length);\\n            ds.facetAddresses.push(_facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(oldFacetAddress, selector);\\n            // add function\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .functionSelectorPosition = selectorPosition;\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n                selector\\n            );\\n            ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress = _facetAddress;\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function removeFunction(address _facetAddress, bytes4 _selector) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            ds\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x76c53a3a50ee1b30d116263e1847c80b52f6705f7436d37ba91b0ddcb97657ff\",\"license\":\"MIT\"},\"contracts/shared/facets/PaymentsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {PeripheryPayments} from \\\"../util/PeripheryPayments.sol\\\";\\nimport {Multicall} from \\\"../util/Multicall.sol\\\";\\nimport {SelfPermit} from \\\"../util/SelfPermit.sol\\\";\\nimport {LibAppStorage} from \\\"../../voyage/libraries/LibAppStorage.sol\\\";\\nimport {SafeTransferLib} from \\\"../libraries/SafeTransferLib.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract PaymentsFacet is PeripheryPayments, Multicall, SelfPermit {\\n    using SafeERC20 for IERC20;\\n\\n    function unwrapWETH9(uint256 amountMinimum, address recipient)\\n        public\\n        payable\\n    {\\n        uint256 balanceWETH9 = LibAppStorage.ds().WETH9.balanceOf(\\n            address(this)\\n        );\\n        require(balanceWETH9 >= amountMinimum, \\\"Insufficient WETH9\\\");\\n\\n        if (balanceWETH9 > 0) {\\n            LibAppStorage.ds().WETH9.withdraw(balanceWETH9);\\n            SafeTransferLib.safeTransferETH(recipient, balanceWETH9);\\n        }\\n    }\\n\\n    function wrapWETH9() public payable {\\n        if (address(this).balance > 0)\\n            LibAppStorage.ds().WETH9.deposit{value: address(this).balance}(); // wrap everything\\n    }\\n\\n    function sweepToken(\\n        IERC20 token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) public payable {\\n        uint256 balanceToken = token.balanceOf(address(this));\\n        require(balanceToken >= amountMinimum, \\\"Insufficient token\\\");\\n\\n        if (balanceToken > 0) {\\n            token.safeTransfer(recipient, balanceToken);\\n        }\\n    }\\n\\n    function refundETH() external payable {\\n        if (address(this).balance > 0) {\\n            SafeTransferLib.safeTransferETH(msg.sender, address(this).balance);\\n        }\\n    }\\n}\\n\\nabstract contract IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable virtual;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external virtual;\\n}\\n\",\"keccak256\":\"0x40bcdf10b257d68182a70f2372505f8682f2ff7bf5b247ba24b2f6ee18e67863\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IERC20PermitAllowed.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/external/IERC20PermitAllowed.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Interface for permit\\n/// @notice Interface used by DAI/CHAI for permit\\ninterface IERC20PermitAllowed {\\n    /// @notice Approve the spender to spend some tokens via the holder signature\\n    /// @dev This is the permit interface used by DAI and CHAI\\n    /// @param holder The address of the token holder, the token owner\\n    /// @param spender The address of the token spender\\n    /// @param nonce The holder's nonce, increases at each call to permit\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x75199ac09b8a0315f5bb8a4380df57a8443ef496443ab546d017ea6100b699bc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport {IERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\n\\n// https://github.dev/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/b392c249e2c72434c438e0e495af1bacbc6cfd4f/contracts/interfaces/IERC4626Upgradeable.sol#L21\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is\\n    IERC20Upgradeable,\\n    IERC20MetadataUpgradeable,\\n    IERC20PermitUpgradeable\\n{\\n    event Deposit(\\n        address indexed caller,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (IERC20Metadata assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets)\\n        external\\n        view\\n        returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares)\\n        external\\n        view\\n        returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver)\\n        external\\n        view\\n        returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets)\\n        external\\n        view\\n        returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver)\\n        external\\n        returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver)\\n        external\\n        view\\n        returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver)\\n        external\\n        returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner)\\n        external\\n        view\\n        returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets)\\n        external\\n        view\\n        returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares)\\n        external\\n        view\\n        returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x4ac6b252c94f945b2cc258e8f6f37a8e1f55a6a16cb4bb59bf2ce7ae620fa3fd\",\"license\":\"MIT\"},\"contracts/shared/interfaces/IMulticall.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/IMulticall.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data)\\n        external\\n        payable\\n        returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x8437eb20058eb64e08677e6ee16f3299c3d080235a99526374c984687762b69b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/interfaces/ISelfPermit.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISelfPermit.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\ninterface ISelfPermit {\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\\n    /// @param token The address of the token spent\\n    /// @param value The amount that can be spent of token\\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\\n    /// @param token The address of the token spent\\n    /// @param nonce The current nonce of the owner\\n    /// @param expiry The timestamp at which the permit is no longer valid\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x935d7c033290c44921175dd13c8dddf8e51057492e665c379058d7bf3ca67125\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable virtual;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external virtual;\\n}\\n\",\"keccak256\":\"0xb152cb59ad8329047c5fcfa6d46ca42bcce4a4b5ad2bf58bc1a0aeedff31e509\",\"license\":\"MIT\"},\"contracts/shared/libraries/LogarithmMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/// import from https://github.com/paulrberg/prb-math\\nlibrary LogarithmMath {\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    error PRBMathUD60x18__LogInputTooSmall(uint256);\\n}\\n\",\"keccak256\":\"0x253ab2b6f0731ce0072f9d27c8f5d2c6a9766256dff3ab4438c8b415b90f309c\",\"license\":\"GPL-3.0\"},\"contracts/shared/libraries/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a4336b20a181683c7e4754615409aea63f6b44a806b2d3d59b7aea4cc5cda57\",\"license\":\"GPL-3.0\"},\"contracts/shared/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\nETH OPERATIONS\\n//////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\nERC20 OPERATIONS\\n//////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0x23b872dd00000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0xa9059cbb00000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                freeMemoryPointer,\\n                0x095ea7b300000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x650ece776cbd21442a5b34775dfe0cd8b76f505ef5e072b198c3e35709b791d7\",\"license\":\"AGPL-3.0-only\"},\"contracts/shared/libraries/WadRayMath.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\n\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function Ray() public pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (halfWAD + a * b) / WAD;\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return (halfB + a * WAD) / b;\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (halfRAY + a * b) / RAY;\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return (halfB + a * RAY) / b;\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return (halfRatio + a) / WAD_RAY_RATIO;\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a * WAD_RAY_RATIO;\\n    }\\n\\n    // @dev calculates base^exp. The code uses the ModExp precompile\\n    // @return base^exp, in ray\\n    //solium-disable-next-line\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rayMul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rayMul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa58dbc7c0c21dc1bcaf58a6ae989fdf097a8c0ed7c66bd88cc3a29c1a21d1830\"},\"contracts/shared/tokenization/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\nimport {FixedPointMathLib} from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {IERC4626} from \\\"../interfaces/IERC4626.sol\\\";\\n\\nabstract contract ERC4626 is Initializable, ERC20PermitUpgradeable, IERC4626 {\\n    using SafeERC20 for IERC20Metadata;\\n    using FixedPointMathLib for uint256;\\n\\n    IERC20Metadata public asset;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    function __ERC4626_init(IERC20Metadata _asset) internal onlyInitializing {\\n        __ERC4626_init_unchained(_asset);\\n    }\\n\\n    function __ERC4626_init_unchained(IERC20Metadata _asset)\\n        internal\\n        onlyInitializing\\n    {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver)\\n        public\\n        virtual\\n        returns (uint256 shares)\\n    {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver)\\n        public\\n        virtual\\n        returns (uint256 assets)\\n    {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            _spendAllowance(owner, msg.sender, shares);\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            _spendAllowance(owner, msg.sender, shares);\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf(owner));\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\",\"keccak256\":\"0x5f247251c57c1112b9ac73a48570439da0df661c277552b6a8b94d98a84ff28d\",\"license\":\"GPL-3.0\"},\"contracts/shared/util/Multicall.sol\":{\"content\":\"// forked from https://github.com/Uniswap/v3-periphery/blob/main/contracts/base/Multicall.sol\\n\\n// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMulticall.sol\\\";\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall {\\n    /// @inheritdoc IMulticall\\n    function multicall(bytes[] calldata data)\\n        public\\n        payable\\n        override\\n        returns (bytes[] memory results)\\n    {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ea37766655ad050a0beca38b517a425be1f52bc165985891edcfcb46e0e7c77\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/util/PeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title Depositor\\n/// @author Voyage Finance\\n/// @notice Forwards calls to ERC-4626 compliant Vaults, but with the actual depositor appended to the encoded call data.\\n/// @dev This does not work if the receiving contract does not implement ERC-4626!\\nabstract contract PeripheryPayments {\\n    using SafeERC20 for IERC20;\\n\\n    function pullToken(\\n        IERC20 token,\\n        uint256 amount,\\n        address from,\\n        address recipient\\n    ) public payable {\\n        token.safeTransferFrom(from, recipient, amount);\\n    }\\n\\n    function approve(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) public payable {\\n        token.safeApprove(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6693bca3a626f4c685bb1c8d9a5812a248c45232e601f9fe1fac80bfd4379a1c\",\"license\":\"AGPL-3.0-only\"},\"contracts/shared/util/SelfPermit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.9;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ISelfPermit.sol\\\";\\nimport \\\"../interfaces/IERC20PermitAllowed.sol\\\";\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\\n/// that requires an approval in a single transaction.\\nabstract contract SelfPermit is ISelfPermit {\\n    /// @inheritdoc ISelfPermit\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20Permit(token).permit(\\n            msg.sender,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable override {\\n        if (IERC20(token).allowance(msg.sender, address(this)) < value)\\n            selfPermit(token, value, deadline, v, r, s);\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20PermitAllowed(token).permit(\\n            msg.sender,\\n            address(this),\\n            nonce,\\n            expiry,\\n            true,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable override {\\n        if (\\n            IERC20(token).allowance(msg.sender, address(this)) <\\n            type(uint256).max\\n        ) selfPermitAllowed(token, nonce, expiry, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x456e000cc02654d5e0df6b67960aa8a9c92b4f960ffa5d852e021ece7995bf20\",\"license\":\"AGPL-3.0-only\"},\"contracts/vault/SubVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IVault} from \\\"./Vault.sol\\\";\\n\\ninterface ISubvault {\\n    function initialize(address _parent, address _owner) external;\\n\\n    function updateOwner(address _newOwner) external;\\n\\n    function execute(address target, bytes calldata data)\\n        external\\n        returns (bytes memory);\\n}\\n\\ncontract SubVault is Initializable, ISubvault, IERC721Receiver {\\n    struct SubVaultStorageV1 {\\n        address owner;\\n        address parent;\\n    }\\n\\n    event Execute(address _vault, address _target, bytes _data);\\n\\n    // only `parent` should be able to call\\n    modifier authorised() {\\n        require(msg.sender == diamondStorage().parent, \\\"SubVault: only parent\\\");\\n        _;\\n    }\\n\\n    function initialize(address _owner, address _parent) external initializer {\\n        diamondStorage().owner = _owner;\\n        diamondStorage().parent = _parent;\\n    }\\n\\n    function execute(address target, bytes calldata data)\\n        external\\n        authorised\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory ret) = target.call(data);\\n        require(success);\\n        emit Execute(address(this), target, data);\\n        return ret;\\n    }\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4 ret) {\\n        if (\\n            !IVault(diamondStorage().parent).collectionInitialized(msg.sender)\\n        ) {\\n            revert InvalidSenderAddress();\\n        }\\n        IVault(diamondStorage().parent).onERC721Transferred(\\n            msg.sender,\\n            tokenId,\\n            from,\\n            address(this)\\n        );\\n    }\\n\\n    function updateOwner(address _newOwner) external authorised {\\n        diamondStorage().owner = _newOwner;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return diamondStorage().owner;\\n    }\\n\\n    /************************************** Internal Functions **************************************/\\n\\n    // Returns the struct from a specified position in contract storage\\n    // ds is short for DiamondStorage\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (SubVaultStorageV1 storage ds)\\n    {\\n        // Specifies a random position in contract storage\\n        // This can be done with a keccak256 hash of a unique string as is\\n        // done here or other schemes can be used such as this:\\n        // bytes32 storagePosition = keccak256(abi.encodePacked(ERC1155.interfaceId, ERC1155.name, address(this)));\\n        bytes32 storagePosition = keccak256(\\n            \\\"finance.voyage.subvault.v1.storage\\\"\\n        );\\n        // Set the position of our struct in contract storage\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n}\\n\\n/* --------------------------------- errors -------------------------------- */\\nerror InvalidSenderAddress();\\n\",\"keccak256\":\"0x5b787655b7f8b106b0efe0d992137cc7c18600724443ef70ab50cafe565ba6a7\",\"license\":\"GPL-3.0\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport {VaultFacet} from \\\"../voyage/facets/VaultFacet.sol\\\";\\nimport {SecurityFacet} from \\\"../voyage/facets/SecurityFacet.sol\\\";\\nimport {IWETH9} from \\\"../shared/interfaces/IWETH9.sol\\\";\\nimport {ISubvault} from \\\"./SubVault.sol\\\";\\n\\nstruct VaultStorageV1 {\\n    address voyage;\\n    address user;\\n    address paymaster;\\n    address weth;\\n    // subvault array, for retrieval by DataProviderFacet and client-side enumeration\\n    address[] subvaults;\\n    // mapping of subvault to owner\\n    mapping(address => address) subvaultOwnerIndex;\\n    // mapping of owner to subvault\\n    mapping(address => address) ownerSubvaultIndex;\\n    // mapping of subvault => paused status\\n    mapping(address => bool) subvaultStatusIndex;\\n    mapping(address => uint256[]) tokenSet;\\n    // mapping of erc721 address to mapping of tokenId to custody information\\n    // to save storage space, only store this data if the token is transferred out of the Vault (i.e., to a Subvault or external contract)\\n    mapping(address => mapping(uint256 => CustodyData)) custodyIndex;\\n}\\n\\nstruct CustodyData {\\n    // the \\\"owner\\\" of the token -- must be Vault or a Subvault.\\n    address owner;\\n    // the current holder of the token, e.g., battle game.\\n    address custodian;\\n}\\n\\nlibrary LibVaultStorage {\\n    // Returns the struct from a specified position in contract storage\\n    // ds is short for DiamondStorage\\n    function ds() internal pure returns (VaultStorageV1 storage ds) {\\n        // Set the position of our struct in contract storage\\n        bytes32 storagePosition = keccak256(\\\"diamond.storage.vault.voyage\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n}\\n\\ninterface IVault {\\n    event GasRefunded(\\n        address _paymaster,\\n        address _dst,\\n        uint256 _amount,\\n        uint256 _shortfall,\\n        bytes _result\\n    );\\n\\n    event Execute(address _vault, address _target, bytes _data);\\n\\n    function initialize(\\n        address _voyage,\\n        address _user,\\n        address _paymaster,\\n        address _weth\\n    ) external;\\n\\n    function execute(bytes calldata _data) external;\\n\\n    function refundGas(uint256 _amount, address _dst) external;\\n\\n    function onERC721Transferred(\\n        address _collection,\\n        uint256 _tokenId,\\n        address _src,\\n        address _dst\\n    ) external;\\n\\n    function collectionInitialized(address _collection)\\n        external\\n        view\\n        returns (bool);\\n}\\n\\ncontract Vault is Initializable, IERC1271, IVault {\\n    bytes internal constant EMPTY_BYTES = \\\"\\\";\\n\\n    modifier onlyPaymaster() {\\n        require(_isPaymaster(msg.sender), \\\"Only paymaster allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthorised() {\\n        SecurityFacet sf = SecurityFacet(LibVaultStorage.ds().voyage);\\n        require(\\n            sf.isAuthorised(msg.sender, address(this), msg.sig),\\n            \\\"unauthorised\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(\\n        address _voyage,\\n        address _user,\\n        address _paymaster,\\n        address _weth\\n    ) public initializer {\\n        LibVaultStorage.ds().voyage = _voyage;\\n        LibVaultStorage.ds().user = _user;\\n        LibVaultStorage.ds().paymaster = _paymaster;\\n        LibVaultStorage.ds().weth = _weth;\\n    }\\n\\n    function execute(bytes calldata _data) external onlyAuthorised {\\n        (address target, bytes memory data) = abi.decode(\\n            _data,\\n            (address, bytes)\\n        );\\n        (bool success, bytes memory ret) = target.call(data);\\n        if (!success) {\\n            revert();\\n        }\\n        emit Execute(address(this), target, data);\\n    }\\n\\n    function refundGas(uint256 _amount, address _dst) external onlyPaymaster {\\n        uint256 amountRefundable = _amount;\\n        uint256 ethBal = address(this).balance;\\n        // we need to unwrap some WETH in this case.\\n        if (ethBal < _amount) {\\n            IWETH9 weth9 = IWETH9(LibVaultStorage.ds().weth);\\n            uint256 balanceWETH9 = weth9.balanceOf(address(this));\\n            uint256 toUnwrap = _amount - ethBal;\\n            // this should not happen, but if it does, we should take what we can instead of reverting\\n            if (toUnwrap > balanceWETH9) {\\n                weth9.withdraw(balanceWETH9);\\n                amountRefundable = amountRefundable - toUnwrap - balanceWETH9;\\n            } else {\\n                weth9.withdraw(toUnwrap);\\n            }\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory result) = _dst.call{\\n            value: amountRefundable\\n        }(EMPTY_BYTES);\\n        if (!success) {\\n            revert GasRefundFailed(_dst);\\n        }\\n        emit GasRefunded(\\n            LibVaultStorage.ds().paymaster,\\n            _dst,\\n            amountRefundable,\\n            _amount - amountRefundable,\\n            result\\n        );\\n    }\\n\\n    function callSubVault(\\n        address _subvault,\\n        address _target,\\n        bytes calldata _data\\n    ) external onlyAuthorised {\\n        SecurityFacet sf = SecurityFacet(LibVaultStorage.ds().voyage);\\n        if (\\n            !sf.isAuthorised(\\n                msg.sender,\\n                _subvault,\\n                ISubvault(address(0)).execute.selector\\n            )\\n        ) {\\n            revert UnAuthorised();\\n        }\\n\\n        ISubvault(_subvault).execute(_target, _data);\\n    }\\n\\n    function collectionInitialized(address _collection)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        VaultFacet vf = VaultFacet(LibVaultStorage.ds().voyage);\\n        return vf.collectionInitialized(_collection);\\n    }\\n\\n    /// @notice Update subvault's owner\\n    /// @param _subvault The address of the subvaault\\n    /// @param _newOwner The address of the new owner\\n    function updateSubvaultOwner(address _subvault, address _newOwner)\\n        external\\n        onlyAuthorised\\n    {\\n        address oldOwner = LibVaultStorage.ds().subvaultOwnerIndex[_subvault];\\n        if (oldOwner == address(0)) {\\n            revert InvalidSubvaultAddress(_subvault);\\n        }\\n        ISubvault(_subvault).updateOwner(_newOwner);\\n        LibVaultStorage.ds().subvaultOwnerIndex[_subvault] = _newOwner;\\n        LibVaultStorage.ds().ownerSubvaultIndex[_newOwner] = _subvault;\\n        delete LibVaultStorage.ds().ownerSubvaultIndex[oldOwner];\\n    }\\n\\n    /// @notice Pause sub vault\\n    /// @param _subvault The address of the subvault\\n    function pauseSubvault(address _subvault) external {\\n        if (LibVaultStorage.ds().subvaultOwnerIndex[_subvault] == address(0)) {\\n            revert InvalidSubvaultAddress(_subvault);\\n        }\\n        LibVaultStorage.ds().subvaultStatusIndex[_subvault] = true;\\n    }\\n\\n    /// @notice Uppause the sub vault\\n    /// @param _subvault The address of the subvault\\n    function unpauseSubvault(address _subvault) external {\\n        if (LibVaultStorage.ds().subvaultOwnerIndex[_subvault] == address(0)) {\\n            revert InvalidSubvaultAddress(_subvault);\\n        }\\n        LibVaultStorage.ds().subvaultStatusIndex[_subvault] = false;\\n    }\\n\\n    function onERC721Transferred(\\n        address _collection,\\n        uint256 _tokenId,\\n        address _src,\\n        address _dst\\n    ) external {\\n        if (\\n            msg.sender != address(this) &&\\n            LibVaultStorage.ds().subvaultOwnerIndex[msg.sender] == address(0)\\n        ) {\\n            revert InvalidTransfer(\\\"invalid sender\\\");\\n        }\\n        if (\\n            LibVaultStorage.ds().custodyIndex[_collection][_tokenId].owner !=\\n            address(0)\\n        ) {\\n            revert InvalidTransfer(\\\"invalid token id\\\");\\n        }\\n        LibVaultStorage.ds().custodyIndex[_collection][_tokenId].owner = _src;\\n        LibVaultStorage.ds().tokenSet[_collection].push(_tokenId);\\n    }\\n\\n    /// @notice Called by erc721 contract or sub vaults\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4 ret) {\\n        VaultFacet vf = VaultFacet(LibVaultStorage.ds().voyage);\\n        // todo\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @notice Should return whether the signature provided is valid for the provided data\\n    /// @param hash      Hash of the data to be signed\\n    /// @param signature Signature byte array associated with _data\\n    function isValidSignature(bytes32 hash, bytes memory signature)\\n        external\\n        view\\n        returns (bytes4 magicValue)\\n    {\\n        address sender = recoverSigner(hash, signature);\\n        if (LibVaultStorage.ds().user == sender) {\\n            return 0x1626ba7e;\\n        }\\n        return 0xffffffff;\\n    }\\n\\n    /// @notice Recover the signer of hash, assuming it's an EOA account\\n    /// @dev Only for EthSign signatures\\n    /// @param _hash       Hash of message that was signed\\n    /// @param _signature  Signature encoded as (bytes32 r, bytes32 s, uint8 v)\\n    function recoverSigner(bytes32 _hash, bytes memory _signature)\\n        internal\\n        pure\\n        returns (address signer)\\n    {\\n        require(\\n            _signature.length == 65,\\n            \\\"SignatureValidator#recoverSigner: invalid signature length\\\"\\n        );\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(_signature, 32))\\n            s := mload(add(_signature, 64))\\n            v := byte(0, mload(add(_signature, 96)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        //\\n        // Source OpenZeppelin\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol\\n\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            revert(\\n                \\\"SignatureValidator#recoverSigner: invalid signature 's' value\\\"\\n            );\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\n                \\\"SignatureValidator#recoverSigner: invalid signature 'v' value\\\"\\n            );\\n        }\\n\\n        // Recover ECDSA signer\\n        signer = ecrecover(_hash, v, r, s);\\n\\n        // Prevent signer from being 0x0\\n        require(\\n            signer != address(0x0),\\n            \\\"SignatureValidator#recoverSigner: INVALID_SIGNER\\\"\\n        );\\n\\n        return signer;\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice Get sub vault address of a specific user\\n    /// @param _owner The address of the user\\n    function getSubvaultOf(address _owner) public view returns (address) {\\n        return LibVaultStorage.ds().ownerSubvaultIndex[_owner];\\n    }\\n\\n    /// @notice Get sub vault's address\\n    /// @param _subvault The address of the subvault\\n    function getSubvaultStatus(address _subvault) public view returns (bool) {\\n        return LibVaultStorage.ds().subvaultStatusIndex[_subvault];\\n    }\\n\\n    /// @notice Get token status\\n    /// @param _collection The address of the ERC721 contract\\n    /// @param _tokenId Token id\\n    function getTokenStatus(address _collection, uint256 _tokenId)\\n        public\\n        view\\n        returns (CustodyData memory)\\n    {\\n        return LibVaultStorage.ds().custodyIndex[_collection][_tokenId];\\n    }\\n\\n    /// @notice Get token list owned by this vault\\n    /// @param _collection The address of the ERC721 contract\\n    function getTokensOwned(address _collection)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return LibVaultStorage.ds().tokenSet[_collection];\\n    }\\n\\n    function _isPaymaster(address _src) internal view returns (bool) {\\n        return _src == LibVaultStorage.ds().paymaster;\\n    }\\n\\n    error GasRefundFailed(address _paymaster);\\n    error UnAuthorised();\\n    error InvalidSubvaultAddress(address subvault);\\n    error InvalidTransfer(string reason);\\n}\\n\",\"keccak256\":\"0xb35fb49d0cfae397485fb551335c8f5f8a393892c828a7dd4a253f6963f2bfdf\",\"license\":\"GPL-3.0\"},\"contracts/voyage/auth/DSAuth.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// lifted from: https://github.com/dapphub/ds-auth/blob/a51e7caa1f03eeffed66d67f3b38605e0f1f881d/src/auth.sol\\n\\npragma solidity ^0.8.9;\\n\\ninterface DSAuthority {\\n    function canCall(\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) external view returns (bool);\\n}\\n\\ncontract DSAuthEvents {\\n    event LogSetAuthority(address indexed authority);\\n    event LogSetOwner(address indexed owner);\\n}\\n\\ncontract DSAuth is DSAuthEvents {\\n    DSAuthority public authority;\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n        emit LogSetOwner(msg.sender);\\n    }\\n\\n    function setOwner(address owner_) public auth {\\n        owner = owner_;\\n        emit LogSetOwner(owner);\\n    }\\n\\n    function setAuthority(DSAuthority authority_) public auth {\\n        authority = authority_;\\n        emit LogSetAuthority(address(authority));\\n    }\\n\\n    modifier auth() {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"ds-auth-unauthorized\\\");\\n        _;\\n    }\\n\\n    function isAuthorized(address src, bytes4 sig)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (src == address(this)) {\\n            return true;\\n        } else if (src == owner) {\\n            return true;\\n        } else if (authority == DSAuthority(address(0))) {\\n            return false;\\n        } else {\\n            return authority.canCall(src, address(this), sig);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb069264548df428fc3c0489dd970632c1a0b85a8a26bbf7a5b0c01f00d88b75\",\"license\":\"GNU-3\"},\"contracts/voyage/auth/DSGuard.sol\":{\"content\":\"// guard.sol -- simple whitelist implementation of DSAuthority\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// lifted from: https://github.com/dapphub/ds-guard/blob/af05632249f98bf3942b9482c5bf69e8bd45284e/src/guard.sol\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./DSAuth.sol\\\";\\n\\ncontract DSGuardEvents {\\n    event LogPermit(\\n        bytes32 indexed src,\\n        bytes32 indexed dst,\\n        bytes32 indexed sig\\n    );\\n\\n    event LogForbid(\\n        bytes32 indexed src,\\n        bytes32 indexed dst,\\n        bytes32 indexed sig\\n    );\\n}\\n\\ncontract DSGuard is DSAuth, DSAuthority, DSGuardEvents {\\n    bytes32 public constant ANY = bytes32(type(uint256).max);\\n\\n    mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => bool))) acl;\\n\\n    function canCall(\\n        address src_,\\n        address dst_,\\n        bytes4 sig\\n    ) public view returns (bool) {\\n        bytes32 src = bytes32(bytes20(src_));\\n        bytes32 dst = bytes32(bytes20(dst_));\\n\\n        return\\n            acl[src][dst][sig] ||\\n            acl[src][dst][ANY] ||\\n            acl[src][ANY][sig] ||\\n            acl[src][ANY][ANY] ||\\n            acl[ANY][dst][sig] ||\\n            acl[ANY][dst][ANY] ||\\n            acl[ANY][ANY][sig] ||\\n            acl[ANY][ANY][ANY];\\n    }\\n\\n    function permit(\\n        bytes32 src,\\n        bytes32 dst,\\n        bytes32 sig\\n    ) public auth {\\n        acl[src][dst][sig] = true;\\n        emit LogPermit(src, dst, sig);\\n    }\\n\\n    function forbid(\\n        bytes32 src,\\n        bytes32 dst,\\n        bytes32 sig\\n    ) public auth {\\n        acl[src][dst][sig] = false;\\n        emit LogForbid(src, dst, sig);\\n    }\\n\\n    function permit(\\n        address src,\\n        address dst,\\n        bytes32 sig\\n    ) public {\\n        permit(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\\n    }\\n\\n    function forbid(\\n        address src,\\n        address dst,\\n        bytes32 sig\\n    ) public {\\n        forbid(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\\n    }\\n}\\n\\ncontract DSGuardFactory {\\n    mapping(address => bool) public isGuard;\\n\\n    function newGuard() public returns (DSGuard guard) {\\n        guard = new DSGuard();\\n        guard.setOwner(msg.sender);\\n        isGuard[address(guard)] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x1c08eb21a713823b838ceed6275d138a6e62fd425094d3d089980697cd94264a\"},\"contracts/voyage/auth/DSRoles.sol\":{\"content\":\"// roles.sol - roled based authentication\\n\\n// Copyright (C) 2017  DappHub, LLC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// forked from: https://github.com/dapphub/ds-roles/blob/53d56949c0f98c9b5909df9c0d95025b67f3bb75/src/roles.sol\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./DSAuth.sol\\\";\\n\\ncontract DSRoles is DSAuth, DSAuthority {\\n    mapping(address => bool) _root_users;\\n    mapping(address => bytes32) _user_roles;\\n    mapping(address => mapping(bytes4 => bytes32)) _capability_roles;\\n    mapping(address => mapping(bytes4 => bool)) _public_capabilities;\\n\\n    function getUserRoles(address who) public view returns (bytes32) {\\n        return _user_roles[who];\\n    }\\n\\n    function getCapabilityRoles(address code, bytes4 sig)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _capability_roles[code][sig];\\n    }\\n\\n    function isUserRoot(address who) public view returns (bool) {\\n        return _root_users[who];\\n    }\\n\\n    function isCapabilityPublic(address code, bytes4 sig)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _public_capabilities[code][sig];\\n    }\\n\\n    function hasUserRole(address who, uint8 role) public view returns (bool) {\\n        bytes32 roles = getUserRoles(who);\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        return bytes32(0) != roles & shifted;\\n    }\\n\\n    function canCall(\\n        address caller,\\n        address code,\\n        bytes4 sig\\n    ) public view returns (bool) {\\n        if (isUserRoot(caller) || isCapabilityPublic(code, sig)) {\\n            return true;\\n        } else {\\n            bytes32 has_roles = getUserRoles(caller);\\n            bytes32 needs_one_of = getCapabilityRoles(code, sig);\\n            return bytes32(0) != has_roles & needs_one_of;\\n        }\\n    }\\n\\n    function BITNOT(bytes32 input) internal pure returns (bytes32 output) {\\n        return (input ^ bytes32(type(uint256).max));\\n    }\\n\\n    function setRootUser(address who, bool enabled) public auth {\\n        _root_users[who] = enabled;\\n    }\\n\\n    function setUserRole(\\n        address who,\\n        uint8 role,\\n        bool enabled\\n    ) public auth {\\n        bytes32 last_roles = _user_roles[who];\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        if (enabled) {\\n            _user_roles[who] = last_roles | shifted;\\n        } else {\\n            _user_roles[who] = last_roles & BITNOT(shifted);\\n        }\\n    }\\n\\n    function setPublicCapability(\\n        address code,\\n        bytes4 sig,\\n        bool enabled\\n    ) public auth {\\n        _public_capabilities[code][sig] = enabled;\\n    }\\n\\n    function setRoleCapability(\\n        uint8 role,\\n        address code,\\n        bytes4 sig,\\n        bool enabled\\n    ) public auth {\\n        bytes32 last_roles = _capability_roles[code][sig];\\n        bytes32 shifted = bytes32(uint256(uint256(2)**uint256(role)));\\n        if (enabled) {\\n            _capability_roles[code][sig] = last_roles | shifted;\\n        } else {\\n            _capability_roles[code][sig] = last_roles & BITNOT(shifted);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x854b2fe5dcb2ab5277a1a1c3a2f97367c4c00f8076f746a88cfbde1eb43b2f15\"},\"contracts/voyage/facets/LiquidityFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IVToken} from \\\"../interfaces/IVToken.sol\\\";\\nimport {JuniorDepositToken} from \\\"../tokenization/JuniorDepositToken.sol\\\";\\nimport {SeniorDepositToken} from \\\"../tokenization/SeniorDepositToken.sol\\\";\\nimport {LibAppStorage, AppStorage, Storage, Tranche, ReserveData, BorrowState, ReserveConfigurationMap} from \\\"../libraries/LibAppStorage.sol\\\";\\nimport {LibReserveConfiguration} from \\\"../libraries/LibReserveConfiguration.sol\\\";\\nimport {LibLiquidity} from \\\"../libraries/LibLiquidity.sol\\\";\\nimport {WadRayMath} from \\\"../../shared/libraries/WadRayMath.sol\\\";\\nimport {PaymentsFacet} from \\\"../../shared/facets/PaymentsFacet.sol\\\";\\n\\ncontract LiquidityFacet is Storage, ReentrancyGuard {\\n    using LibLiquidity for ReserveData;\\n    using LibReserveConfiguration for ReserveConfigurationMap;\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event ReserveInitialized(\\n        address indexed _collection,\\n        address indexed _currency,\\n        address _juniorDepositTokenAddress,\\n        address _seniorDepositTokenAddress,\\n        address _interestRateStrategyAddress\\n    );\\n    event ReserveActivated(address indexed _collection);\\n    event ReserveInactived(address indexed _collection);\\n    event Deposit(\\n        address indexed _collection,\\n        address indexed _currency,\\n        address indexed _user,\\n        Tranche _tranche,\\n        uint256 amount\\n    );\\n    event Withdraw(\\n        address indexed _collection,\\n        address indexed _currency,\\n        address indexed _user,\\n        Tranche _tranche,\\n        uint256 amount\\n    );\\n\\n    /* ----------------------------- admin interface ---------------------------- */\\n    function initReserve(\\n        address _collection,\\n        address _currency,\\n        address _interestRateStrategyAddress,\\n        address _priceOracle\\n    ) external authorised {\\n        if (\\n            !Address.isContract(_collection) || !Address.isContract(_currency)\\n        ) {\\n            revert InvalidContract();\\n        }\\n        ReserveData storage reserveData = LibLiquidity.getReserveData(\\n            _collection\\n        );\\n        if (reserveData.initialized) {\\n            revert InvalidInitialize();\\n        }\\n        reserveData.init(_currency, _interestRateStrategyAddress, _priceOracle);\\n        LibAppStorage.ds()._reserveList[\\n            LibAppStorage.ds()._reservesCount\\n        ] = _collection;\\n        LibAppStorage.ds()._reservesCount++;\\n        emit ReserveInitialized(\\n            _collection,\\n            _currency,\\n            reserveData.juniorDepositTokenAddress,\\n            reserveData.seniorDepositTokenAddress,\\n            _interestRateStrategyAddress\\n        );\\n    }\\n\\n    function activateReserve(address _collection) external authorised {\\n        modifyReserveStatus(_collection, true);\\n        emit ReserveActivated(_collection);\\n    }\\n\\n    function deactivateReserve(address _collection) external authorised {\\n        modifyReserveStatus(_collection, false);\\n        emit ReserveInactived(_collection);\\n    }\\n\\n    function modifyReserveStatus(address _collection, bool active) internal {\\n        if (!Address.isContract(_collection)) {\\n            revert InvalidContract();\\n        }\\n        ReserveConfigurationMap memory config = LibReserveConfiguration\\n            .getConfiguration(_collection);\\n        config.setActive(active);\\n        LibReserveConfiguration.saveConfiguration(_collection, config);\\n    }\\n\\n    function updateProtocolFee(address _treasuryAddr, uint40 _cutRatio)\\n        external\\n        authorised\\n    {\\n        LibLiquidity.updateProtocolFee(_treasuryAddr, _cutRatio);\\n    }\\n\\n    function upgradePriceOracleImpl(address _collection, address _priceOracle)\\n        external\\n        authorised\\n    {\\n        ReserveData storage reserveData = LibLiquidity.getReserveData(\\n            _collection\\n        );\\n        reserveData.priceOracle.upgradeTo(_priceOracle);\\n    }\\n\\n    function updateWETH9(address _weth9) external authorised {\\n        LibLiquidity.updateWETH9(_weth9);\\n    }\\n\\n    /* ----------------------------- user interface ----------------------------- */\\n\\n    function deposit(\\n        address _collection,\\n        Tranche _tranche,\\n        uint256 _amount\\n    ) external nonReentrant {\\n        ReserveData memory reserve = LibAppStorage.ds()._reserveData[\\n            _collection\\n        ];\\n\\n        IVToken vToken = _tranche == Tranche.JUNIOR\\n            ? IVToken(reserve.juniorDepositTokenAddress)\\n            : IVToken(reserve.seniorDepositTokenAddress);\\n        // transfer the underlying tokens to liquidity manager, then do deposit.\\n        PaymentsFacet(address(this)).pullToken(\\n            vToken.asset(),\\n            _amount,\\n            msg.sender,\\n            address(this)\\n        );\\n        vToken.deposit(_amount, msg.sender);\\n        emit Deposit(\\n            _collection,\\n            reserve.currency,\\n            msg.sender,\\n            _tranche,\\n            _amount\\n        );\\n    }\\n\\n    function withdraw(\\n        address _collection,\\n        Tranche _tranche,\\n        uint256 _amount\\n    ) external nonReentrant {\\n        ReserveData memory reserve = LibAppStorage.ds()._reserveData[\\n            _collection\\n        ];\\n        IVToken vToken = Tranche.JUNIOR == _tranche\\n            ? IVToken(reserve.juniorDepositTokenAddress)\\n            : IVToken(reserve.seniorDepositTokenAddress);\\n        uint256 userBalance = vToken.maxWithdraw(msg.sender);\\n        uint256 amountToWithdraw = _amount;\\n        if (_amount == type(uint256).max) {\\n            amountToWithdraw = userBalance;\\n        }\\n        require(amountToWithdraw <= userBalance, \\\"InvalidWithdrawal\\\");\\n        BorrowState storage borrowState = LibAppStorage.ds()._borrowState[\\n            _collection\\n        ][reserve.currency];\\n        uint256 totalDebt = borrowState.totalDebt + borrowState.totalInterest;\\n        uint256 avgBorrowRate = borrowState.avgBorrowRate;\\n        IVToken(vToken).withdraw(amountToWithdraw, msg.sender, msg.sender);\\n\\n        emit Withdraw(\\n            _collection,\\n            reserve.currency,\\n            msg.sender,\\n            _tranche,\\n            amountToWithdraw\\n        );\\n    }\\n\\n    /* ---------------------------------- views --------------------------------- */\\n\\n    function getReserveStatus(address _collection)\\n        public\\n        view\\n        returns (bool initialized, bool activated)\\n    {\\n        initialized = LibLiquidity.getReserveData(_collection).initialized;\\n        (activated, , ) = LibReserveConfiguration\\n            .getConfiguration(_collection)\\n            .getFlags();\\n    }\\n\\n    function balance(\\n        address _collection,\\n        address _user,\\n        Tranche _tranche\\n    ) public view returns (uint256) {\\n        return LibLiquidity.balance(_collection, _user, _tranche);\\n    }\\n\\n    function unbonding(\\n        address _collection,\\n        address _user,\\n        Tranche _tranche\\n    ) public view returns (uint256) {\\n        return LibLiquidity.unbonding(_collection, _user, _tranche);\\n    }\\n\\n    function utilizationRate(address _collection, address _currency)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        ReserveData memory reserve = LibLiquidity.getReserveData(_currency);\\n        BorrowState storage borrowState = LibAppStorage.ds()._borrowState[\\n            _collection\\n        ][_currency];\\n        uint256 totalDebt = borrowState.totalDebt + borrowState.totalInterest;\\n\\n        uint256 totalPendingWithdrawal = IVToken(\\n            reserve.seniorDepositTokenAddress\\n        ).totalUnbonding();\\n\\n        uint256 availableLiquidity = IERC20(_currency).balanceOf(\\n            reserve.seniorDepositTokenAddress\\n        ) - totalPendingWithdrawal;\\n\\n        return\\n            totalDebt == 0\\n                ? 0\\n                : totalDebt.rayDiv(availableLiquidity + totalDebt);\\n    }\\n\\n    function getReserveFlags(address _currency)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return LibReserveConfiguration.getConfiguration(_currency).getFlags();\\n    }\\n}\\n\\n/* --------------------------------- errors -------------------------------- */\\nerror InvalidInitialize();\\nerror InvalidContract();\\nerror InvalidWithdrawal();\\n\",\"keccak256\":\"0x67bb6e1c278ad38b6a5341eb5ce75b16d05dcaaffa0e66378dc1a7c71c7deb2e\",\"license\":\"GPL-3.0\"},\"contracts/voyage/facets/LoanFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {ERC4626} from \\\"@rari-capital/solmate/src/mixins/ERC4626.sol\\\";\\nimport {LibLiquidity} from \\\"../libraries/LibLiquidity.sol\\\";\\nimport {LibLoan, ExecuteBuyNowParams, ExecuteLiquidateParams} from \\\"../libraries/LibLoan.sol\\\";\\nimport {LibVault} from \\\"../libraries/LibVault.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {IVToken} from \\\"../interfaces/IVToken.sol\\\";\\nimport {AssetInfo} from \\\"../interfaces/IMarketPlaceAdapter.sol\\\";\\nimport {IPriceOracle} from \\\"../interfaces/IPriceOracle.sol\\\";\\nimport {LibAppStorage, AppStorage, Storage, BorrowData, BorrowState, Loan, ReserveConfigurationMap, ReserveData, PMT} from \\\"../libraries/LibAppStorage.sol\\\";\\nimport {LibReserveConfiguration} from \\\"../libraries/LibReserveConfiguration.sol\\\";\\nimport {WadRayMath} from \\\"../../shared/libraries/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../../shared/libraries/PercentageMath.sol\\\";\\nimport {PaymentsFacet} from \\\"../../shared/facets/PaymentsFacet.sol\\\";\\nimport {SafeTransferLib} from \\\"../../shared/libraries/SafeTransferLib.sol\\\";\\nimport {IVault} from \\\"../../vault/Vault.sol\\\";\\nimport {MarketplaceAdapterFacet} from \\\"./MarketplaceAdapterFacet.sol\\\";\\n\\ncontract LoanFacet is Storage, ReentrancyGuard {\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using PercentageMath for uint256;\\n    using LibReserveConfiguration for ReserveConfigurationMap;\\n\\n    uint256 public immutable TEN_THOUSANDS = 10000;\\n\\n    struct ExecuteRepayParams {\\n        uint256 principal;\\n        uint256 interest;\\n        uint256 total;\\n        uint256 totalDebt;\\n    }\\n\\n    event Borrow(\\n        address indexed _vault,\\n        address indexed _collection,\\n        address indexed _currency,\\n        uint256 _tokenId,\\n        uint256 _loanId,\\n        uint256 _principal,\\n        uint256 _interest,\\n        uint256 _apr\\n    );\\n\\n    event Repayment(\\n        address indexed _user,\\n        address indexed _vault,\\n        address indexed _collection,\\n        address _currency,\\n        uint256 _loanId,\\n        uint256 _repaymentId,\\n        uint256 _amount,\\n        bool isFinal\\n    );\\n\\n    event Liquidate(\\n        address indexed _liquidator,\\n        address indexed _vault,\\n        address indexed _collection,\\n        uint256 _drowDownId,\\n        uint256 _repaymentId,\\n        uint256 _debt,\\n        uint256 _fromJuniorTranche,\\n        uint256 _amountToWriteDown\\n    );\\n\\n    event CollateralTransferred(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256[] collaterals\\n    );\\n\\n    function previewBuyNowParams(address _collection)\\n        public\\n        view\\n        returns (ExecuteBuyNowParams memory)\\n    {\\n        ExecuteBuyNowParams memory params;\\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\\n            _collection\\n        );\\n        ReserveConfigurationMap memory reserveConf = LibReserveConfiguration\\n            .getConfiguration(_collection);\\n\\n        (params.epoch, params.term) = reserveConf.getBorrowParams();\\n        params.nper = params.term / params.epoch;\\n\\n        params.outstandingPrincipal =\\n            params.totalPrincipal -\\n            params.totalPrincipal /\\n            params.nper;\\n\\n        BorrowState storage borrowState = LibLoan.getBorrowState(\\n            _collection,\\n            reserveData.currency\\n        );\\n\\n        (params.borrowRate) = IReserveInterestRateStrategy(\\n            reserveData.interestRateStrategyAddress\\n        ).calculateBorrowRate(\\n                reserveData.currency,\\n                reserveData.seniorDepositTokenAddress,\\n                0,\\n                params.outstandingPrincipal,\\n                borrowState.totalDebt\\n            );\\n\\n        return params;\\n    }\\n\\n    function buyNow(\\n        address _collection,\\n        uint256 _tokenId,\\n        address payable _vault,\\n        address _marketplace,\\n        bytes calldata _data\\n    ) external payable whenNotPaused nonReentrant {\\n        ExecuteBuyNowParams memory params;\\n        params.collection = _collection;\\n        params.tokenId = _tokenId;\\n        params.vault = _vault;\\n        params.marketplace = _marketplace;\\n\\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\\n            params.collection\\n        );\\n\\n        params.currency = reserveData.currency;\\n\\n        BorrowState storage borrowState = LibLoan.getBorrowState(\\n            params.collection,\\n            reserveData.currency\\n        );\\n\\n        BorrowData storage borrowData = LibLoan.getBorrowData(\\n            params.collection,\\n            params.currency,\\n            params.vault\\n        );\\n\\n        // 0. check if the user owns the vault\\n        if (LibVault.getVaultAddress(_msgSender()) != params.vault) {\\n            revert Unauthorised();\\n        }\\n\\n        // 1. get price for params.tokenId  and floor price pv\\n        params.assetInfo = MarketplaceAdapterFacet(address(this))\\n            .extractAssetInfo(_marketplace, _data);\\n        params.totalPrincipal = params.assetInfo.assetPrice;\\n        if (params.tokenId != params.assetInfo.tokenId) {\\n            revert InvalidTokenid();\\n        }\\n        (params.fv, params.timestamp) = IPriceOracle(\\n            reserveData.priceOracle.implementation()\\n        ).getTwap(params.collection);\\n\\n        if (params.fv == 0) {\\n            revert InvalidFloorPrice();\\n        }\\n\\n        if (params.fv < params.totalPrincipal) {\\n            revert InvalidPrincipal();\\n        }\\n\\n        // 2. get borrow params and borrow rate\\n        ReserveConfigurationMap memory reserveConf = LibReserveConfiguration\\n            .getConfiguration(params.collection);\\n        (params.epoch, params.term) = reserveConf.getBorrowParams();\\n        params.nper = params.term / params.epoch;\\n        params.outstandingPrincipal =\\n            params.totalPrincipal -\\n            params.totalPrincipal /\\n            params.nper;\\n\\n        // 3. check if available liquidity sufficient\\n        params.totalPending = IVToken(reserveData.seniorDepositTokenAddress)\\n            .totalUnbonding();\\n        params.totalBalance = IERC20(reserveData.currency).balanceOf(\\n            reserveData.seniorDepositTokenAddress\\n        );\\n        if (params.totalBalance > params.totalPending) {\\n            params.availableLiquidity =\\n                params.totalBalance -\\n                params.totalPending;\\n        }\\n\\n        if (params.availableLiquidity < params.outstandingPrincipal) {\\n            revert InsufficientLiquidity();\\n        }\\n\\n        (params.borrowRate) = IReserveInterestRateStrategy(\\n            reserveData.interestRateStrategyAddress\\n        ).calculateBorrowRate(\\n                reserveData.currency,\\n                reserveData.seniorDepositTokenAddress,\\n                0,\\n                params.outstandingPrincipal,\\n                borrowState.totalDebt\\n            );\\n\\n        // 4. insert debt, get total interest and PMT\\n        (params.loanId, params.pmt, params.totalInterest) = LibLoan.initDebt(\\n            borrowState,\\n            borrowData,\\n            params\\n        );\\n\\n        // 5. calculate downpayment and outstanding interest and debt\\n        params.downpayment = params.pmt.pmt;\\n        params.outstandingInterest = params.totalInterest - params.pmt.interest;\\n        params.outstandingDebt =\\n            params.outstandingPrincipal +\\n            params.outstandingInterest;\\n\\n        // 6. check credit limit against with outstanding debt\\n        uint256 availableCreditLimit = LibVault.getCreditLimit(\\n            params.vault,\\n            params.collection,\\n            reserveData.currency,\\n            params.fv\\n        );\\n        if (availableCreditLimit < params.outstandingDebt) {\\n            revert InsufficientCreditLimit();\\n        }\\n\\n        // 7.1 receive downpayment\\n        if (params.downpayment > msg.value) {\\n            IERC20(reserveData.currency).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                (params.downpayment - msg.value)\\n            );\\n        } else {\\n            if (params.downpayment != msg.value) {\\n                revert InvalidValueTransfered();\\n            }\\n        }\\n\\n        // 7.2 protocol fee\\n        uint256 protocolFee = params.totalPrincipal.percentMul(\\n            LibAppStorage.ds().protocolFee.cutRatio\\n        );\\n        IERC20(reserveData.currency).safeTransferFrom(\\n            msg.sender,\\n            LibAppStorage.ds().protocolFee.treasuryAddress,\\n            protocolFee\\n        );\\n\\n        // 8.1 transfer money to this\\n        IVToken(reserveData.seniorDepositTokenAddress).transferUnderlyingTo(\\n            address(this),\\n            params.outstandingPrincipal\\n        );\\n\\n        // 8.2 distrubute interest before unwrap weth to eth\\n        LibLoan.distributeInterest(\\n            reserveData,\\n            params.pmt.interest,\\n            address(this)\\n        );\\n\\n        // 8.3 unwrap weth\\n        PaymentsFacet(address(this)).unwrapWETH9(\\n            params.outstandingPrincipal,\\n            address(this)\\n        );\\n\\n        // 8.4 transfer eth to vault\\n        SafeTransferLib.safeTransferETH(params.vault, params.totalPrincipal);\\n\\n        // 9. purchase nft\\n        (params.pmt.principal, params.pmt.interest) = LibLoan.getPMT(\\n            params.collection,\\n            reserveData.currency,\\n            params.vault,\\n            params.loanId\\n        );\\n        MarketplaceAdapterFacet(address(this)).purchase(\\n            params.marketplace,\\n            params.vault,\\n            _data\\n        );\\n\\n        // 10. first payment\\n        BorrowData storage debtData = LibLoan.getBorrowData(\\n            params.collection,\\n            reserveData.currency,\\n            params.vault\\n        );\\n        LibLoan.firstRepay(borrowState, debtData, params.loanId);\\n\\n        emit Borrow(\\n            params.vault,\\n            params.collection,\\n            reserveData.currency,\\n            params.tokenId,\\n            params.loanId,\\n            params.totalPrincipal,\\n            params.totalInterest,\\n            params.borrowRate\\n        );\\n    }\\n\\n    function repay(\\n        address _collection,\\n        uint256 _loan,\\n        address payable _vault\\n    ) external whenNotPaused nonReentrant {\\n        ExecuteRepayParams memory params;\\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\\n            _collection\\n        );\\n\\n        // 0. check if the user owns the vault\\n        if (LibVault.getVaultAddress(_msgSender()) != _vault) {\\n            revert Unauthorised();\\n        }\\n\\n        // 1. check draw down to get principal and interest\\n        (params.principal, params.interest) = LibLoan.getPMT(\\n            _collection,\\n            reserveData.currency,\\n            _vault,\\n            _loan\\n        );\\n        if (params.principal + params.interest == 0) {\\n            revert InvalidDebt();\\n        }\\n\\n        params.total = params.principal + params.interest;\\n\\n        // 2. update repay data\\n        (uint256 repaymentId, bool isFinal) = LibLoan.repay(\\n            _collection,\\n            reserveData.currency,\\n            _vault,\\n            _loan\\n        );\\n\\n        // 3. distribute interest\\n        LibLoan.distributeInterest(reserveData, params.interest, _msgSender());\\n\\n        IERC20(reserveData.currency).safeTransferFrom(\\n            _msgSender(),\\n            reserveData.seniorDepositTokenAddress,\\n            params.principal\\n        );\\n\\n        emit Repayment(\\n            _msgSender(),\\n            _vault,\\n            _collection,\\n            reserveData.currency,\\n            _loan,\\n            repaymentId,\\n            params.total,\\n            isFinal\\n        );\\n    }\\n\\n    function liquidate(\\n        address _collection,\\n        address _vault,\\n        uint256 _loanId\\n    ) external whenNotPaused nonReentrant {\\n        ExecuteLiquidateParams memory param;\\n        param.collection = _collection;\\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\\n            param.collection\\n        );\\n        param.currency = reserveData.currency;\\n        ReserveConfigurationMap memory reserveConf = LibReserveConfiguration\\n            .getConfiguration(param.collection);\\n\\n        // 1. prepare basic info and some strategy parameters\\n        param.vault = _vault;\\n        param.loanId = _loanId;\\n        param.liquidator = _msgSender();\\n        (param.liquidationBonus, param.gracePeriod) = reserveConf\\n            .getLiquidationParams();\\n\\n        LibLoan.LoanDetail memory loanDetail = LibLoan.getLoanDetail(\\n            param.collection,\\n            param.currency,\\n            param.vault,\\n            param.loanId\\n        );\\n\\n        // 2. check if the debt is qualified to be liquidated\\n        if (\\n            block.timestamp <= loanDetail.nextPaymentDue ||\\n            block.timestamp - loanDetail.nextPaymentDue <=\\n            param.gracePeriod * LibLoan.SECOND_PER_DAY\\n        ) {\\n            revert InvalidLiquidate();\\n        }\\n\\n        // 3 get floor price from oracle contract\\n        IPriceOracle priceOracle = IPriceOracle(\\n            reserveData.priceOracle.implementation()\\n        );\\n        (param.floorPrice, param.floorPriceTime) = priceOracle.getTwap(\\n            param.collection\\n        );\\n\\n        if (param.floorPrice == 0) {\\n            revert InvalidFloorPrice();\\n        }\\n\\n        // 3 get pmt info\\n        (param.principal, param.interest) = LibLoan.getPMT(\\n            param.collection,\\n            param.currency,\\n            param.vault,\\n            param.loanId\\n        );\\n        param.totalDebt = param.principal;\\n        if (param.totalDebt == 0) {\\n            revert InvalidDebt();\\n        }\\n        param.remaningDebt = param.totalDebt;\\n        param.discount = getDiscount(param.floorPrice, param.liquidationBonus);\\n        param.discountedFloorPrice = param.floorPrice - param.discount;\\n\\n        // 4 transfer all nfts to liquidator\\n        uint256[] memory collaterals = LibLoan.releaseLien(\\n            param.collection,\\n            param.currency,\\n            param.vault,\\n            param.loanId\\n        );\\n\\n        uint256 discountedFloorPriceInTotal = param.discountedFloorPrice *\\n            collaterals.length;\\n        IERC20(param.currency).safeTransferFrom(\\n            param.liquidator,\\n            address(this),\\n            discountedFloorPriceInTotal\\n        );\\n        param.receivedAmount += discountedFloorPriceInTotal;\\n\\n        for (uint256 i = 0; i < collaterals.length; i++) {\\n            bytes4 selector = IERC721(param.collection).transferFrom.selector;\\n            bytes memory data = abi.encodePacked(\\n                selector,\\n                abi.encode(param.vault, param.liquidator, collaterals[i])\\n            );\\n            bytes memory encodedData = abi.encode(param.collection, data);\\n            IVault(_vault).execute(encodedData);\\n        }\\n\\n        emit CollateralTransferred(\\n            param.collection,\\n            param.vault,\\n            param.liquidator,\\n            collaterals\\n        );\\n\\n        if (param.totalDebt > discountedFloorPriceInTotal) {\\n            param.remaningDebt = param.totalDebt - discountedFloorPriceInTotal;\\n        } else {\\n            uint256 refundAmount = discountedFloorPriceInTotal -\\n                param.totalDebt;\\n            IERC20(param.currency).transfer(param.vault, refundAmount);\\n            param.receivedAmount -= refundAmount;\\n        }\\n\\n        // 5. transfer from junior tranche if there is still remaning debt\\n        if (param.remaningDebt > 0) {\\n            param.totalAssetFromJuniorTranche = ERC4626(\\n                reserveData.juniorDepositTokenAddress\\n            ).totalAssets();\\n\\n            if (param.totalAssetFromJuniorTranche >= param.remaningDebt) {\\n                IVToken(reserveData.juniorDepositTokenAddress)\\n                    .transferUnderlyingTo(address(this), param.remaningDebt);\\n                param.juniorTrancheAmount = param.remaningDebt;\\n                param.receivedAmount += param.remaningDebt;\\n            } else {\\n                IVToken(reserveData.juniorDepositTokenAddress)\\n                    .transferUnderlyingTo(\\n                        address(this),\\n                        param.totalAssetFromJuniorTranche\\n                    );\\n                param.juniorTrancheAmount = param.totalAssetFromJuniorTranche;\\n                param.receivedAmount += param.totalAssetFromJuniorTranche;\\n                param.writeDownAmount =\\n                    param.remaningDebt -\\n                    param.totalAssetFromJuniorTranche;\\n            }\\n        }\\n\\n        // 6. record repay info\\n        (param.repaymentId, param.isFinal) = LibLoan.repay(\\n            param.collection,\\n            param.currency,\\n            param.vault,\\n            param.loanId\\n        );\\n\\n        emit Repayment(\\n            _msgSender(),\\n            param.vault,\\n            param.collection,\\n            param.currency,\\n            param.loanId,\\n            param.repaymentId,\\n            param.totalDebt,\\n            param.isFinal\\n        );\\n\\n        // 7. transfer to senior deposit token\\n        IERC20(param.currency).safeTransfer(\\n            reserveData.seniorDepositTokenAddress,\\n            param.receivedAmount\\n        );\\n\\n        emit Liquidate(\\n            _msgSender(),\\n            _vault,\\n            param.currency,\\n            param.loanId,\\n            param.repaymentId,\\n            param.totalDebt,\\n            param.juniorTrancheAmount,\\n            param.writeDownAmount\\n        );\\n    }\\n\\n    function getVaultDebt(address _collection, address _vault)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\\n            _collection\\n        );\\n        return LibVault.getVaultDebt(_collection, reserveData.currency, _vault);\\n    }\\n\\n    /// @notice Returns the total outstanding principal debt for a particular underlying asset pool\\n    /// @param _collection the address of the underlying nft collection.\\n    /// @return The total outstanding principal owed to depositors.\\n    function principalBalance(address _collection)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\\n            _collection\\n        );\\n        BorrowState storage borrowState = LibLoan.getBorrowState(\\n            _collection,\\n            reserveData.currency\\n        );\\n        return borrowState.totalDebt;\\n    }\\n\\n    /// @notice Returns the total outstanding interest debt for a particular underlying asset pool\\n    /// @param _collection the address of the underlying nft collection.\\n    /// @return The total outstanding interest owed to depositors.\\n    function interestBalance(address _collection)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        ReserveData memory reserveData = LibLiquidity.getReserveData(\\n            _collection\\n        );\\n        BorrowState storage borrowState = LibLoan.getBorrowState(\\n            _collection,\\n            reserveData.currency\\n        );\\n        return borrowState.totalInterest;\\n    }\\n\\n    function getDiscount(uint256 _value, uint256 _liquidationBonus)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 withBonus = _value.percentMul(_liquidationBonus);\\n        return withBonus - _value;\\n    }\\n}\\n\\n/* --------------------------------- errors -------------------------------- */\\nerror Unauthorised();\\nerror InsufficientLiquidity();\\nerror InsufficientCreditLimit();\\nerror InvalidDebt();\\nerror InvalidLiquidate();\\nerror InvalidFloorPrice();\\nerror InvalidTokenid();\\nerror InvalidPrincipal();\\nerror InvalidValueTransfered();\\n\",\"keccak256\":\"0xc39a01e369cac85a31403357b88a5866f8c06546d9c1c49c71f67653b5440330\",\"license\":\"GPL-3.0\"},\"contracts/voyage/facets/MarketplaceAdapterFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {IVault} from \\\"../../vault/Vault.sol\\\";\\nimport {IMarketPlaceAdapter, AssetInfo} from \\\"../interfaces/IMarketPlaceAdapter.sol\\\";\\nimport {Storage, LibAppStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\n\\ncontract MarketplaceAdapterFacet is Storage {\\n    event MarketplaceAdapterUpdated(\\n        address indexed _marketplace,\\n        address _strategy\\n    );\\n\\n    function purchase(\\n        address _marketplace,\\n        address _vault,\\n        bytes calldata _data\\n    ) external {\\n        if (msg.sender != address(this)) {\\n            revert InvalidCaller();\\n        }\\n        address adapterAddr = LibAppStorage\\n            .ds()\\n            .marketPlaceData[_marketplace]\\n            .adapterAddr;\\n        bytes memory data = IMarketPlaceAdapter(adapterAddr).execute(_data);\\n        bytes memory encodedData = abi.encode(_marketplace, data);\\n        IVault(_vault).execute(encodedData);\\n    }\\n\\n    function extractAssetInfo(address _marketplace, bytes calldata _data)\\n        external\\n        view\\n        returns (AssetInfo memory)\\n    {\\n        address adapterAddr = LibAppStorage\\n            .ds()\\n            .marketPlaceData[_marketplace]\\n            .adapterAddr;\\n\\n        return IMarketPlaceAdapter(adapterAddr).extractAssetInfo(_data);\\n    }\\n\\n    function updateMarketPlaceData(address _marketplace, address _strategy)\\n        external\\n        authorised\\n    {\\n        LibAppStorage\\n            .ds()\\n            .marketPlaceData[_marketplace]\\n            .adapterAddr = _strategy;\\n        emit MarketplaceAdapterUpdated(_marketplace, _strategy);\\n    }\\n\\n    error InvalidCaller();\\n}\\n\",\"keccak256\":\"0x201d2f39929095d0cee532b3bc23a512b5c73977c1157d6a0957a380d4e187ca\",\"license\":\"GPL-3.0\"},\"contracts/voyage/facets/SecurityFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {Storage, Authorisation, LibAppStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\nimport {LibSecurity} from \\\"../libraries/LibSecurity.sol\\\";\\nimport {VaultFacet} from \\\"./VaultFacet.sol\\\";\\n\\ncontract SecurityFacet is Storage {\\n    using LibSecurity for Authorisation;\\n\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    function paused() public view returns (bool) {\\n        return LibAppStorage.ds()._paused;\\n    }\\n\\n    function pause() public authorised {\\n        LibAppStorage.ds()._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    function unpause() public authorised {\\n        LibAppStorage.ds()._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    function grantRole(\\n        address user,\\n        uint8 role,\\n        bool enabled\\n    ) public authorised {\\n        LibSecurity.grantRole(LibAppStorage.ds().auth, user, role, enabled);\\n    }\\n\\n    function grantRolePermission(\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) public authorised {\\n        LibSecurity.grantRolePermission(\\n            LibAppStorage.ds().auth,\\n            role,\\n            target,\\n            sig\\n        );\\n    }\\n\\n    function revokeRolePermission(\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) public authorised {\\n        LibSecurity.revokeRolePermission(\\n            LibAppStorage.ds().auth,\\n            role,\\n            target,\\n            sig\\n        );\\n    }\\n\\n    function grantPermission(\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) public authorised {\\n        LibSecurity.grantPermission(LibAppStorage.ds().auth, src, dst, sig);\\n    }\\n\\n    function revokePermission(\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) public authorised {\\n        LibSecurity.revokePermission(LibAppStorage.ds().auth, src, dst, sig);\\n    }\\n\\n    function isAuthorisedInbound(address src, bytes4 sig)\\n        public\\n        returns (bool)\\n    {\\n        return\\n            LibSecurity.isAuthorisedInbound(LibAppStorage.ds().auth, src, sig);\\n    }\\n\\n    function isAuthorisedOutbound(address dst, bytes4 sig)\\n        public\\n        returns (bool)\\n    {\\n        return\\n            LibSecurity.isAuthorisedOutbound(LibAppStorage.ds().auth, dst, sig);\\n    }\\n\\n    function isAuthorised(\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) public returns (bool) {\\n        return LibSecurity.isAuthorised(LibAppStorage.ds().auth, src, dst, sig);\\n    }\\n\\n    function isTrustedForwarder(address _forwarder) public view returns (bool) {\\n        return LibSecurity.isTrustedForwarder(_forwarder);\\n    }\\n}\\n\",\"keccak256\":\"0x707a24ea7a51b505658e786810804d26d3d75d2945c7e195a6cb2f27a9e04b3a\",\"license\":\"GPL-3.0\"},\"contracts/voyage/facets/VaultFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {BeaconProxy} from \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport {LibAppStorage, AppStorage, Storage, NFTInfo, DiamondFacet, ReserveConfigurationMap} from \\\"../libraries/LibAppStorage.sol\\\";\\nimport {LibVault} from \\\"../libraries/LibVault.sol\\\";\\nimport {LibSecurity} from \\\"../libraries/LibSecurity.sol\\\";\\nimport {LibReserveConfiguration} from \\\"../libraries/LibReserveConfiguration.sol\\\";\\nimport {IVault} from \\\"../../vault/Vault.sol\\\";\\nimport {IDiamondCut} from \\\"../../shared/diamond/interfaces/IDiamondCut.sol\\\";\\nimport {DiamondCutFacet} from \\\"../../shared/diamond/facets/DiamondCutFacet.sol\\\";\\n\\ncontract VaultFacet is Storage, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using LibReserveConfiguration for ReserveConfigurationMap;\\n    /* --------------------------------- events --------------------------------- */\\n    event VaultCreated(address _vault, address _owner, uint256 _numVaults);\\n    event VaultMarginCredited(\\n        address indexed _vault,\\n        address indexed _asset,\\n        address _sponsor,\\n        uint256 _amount\\n    );\\n    event VaultMarginRedeemed(\\n        address indexed _vault,\\n        address indexed _asset,\\n        address _sponsor,\\n        uint256 _amount\\n    );\\n\\n    /* ----------------------------- admin interface ---------------------------- */\\n    function createVault(address _user, bytes20 _salt) external authorised {\\n        bytes memory data = getEncodedVaultInitData(_user);\\n        bytes32 newsalt = newSalt(_salt, _user);\\n        address vaultBeaconProxy;\\n        bytes memory initCode = abi.encodePacked(\\n            type(BeaconProxy).creationCode,\\n            abi.encode(vaultBeacon(), data)\\n        );\\n        assembly {\\n            vaultBeaconProxy := create2(\\n                0,\\n                add(initCode, 0x20),\\n                mload(initCode),\\n                newsalt\\n            )\\n        }\\n        if (vaultBeaconProxy == address(0)) {\\n            revert FailedDeployVault();\\n        }\\n        uint256 numVaults = LibVault.recordVault(_user, vaultBeaconProxy);\\n        emit VaultCreated(vaultBeaconProxy, _user, numVaults);\\n    }\\n\\n    /* ---------------------- vault configuration interface --------------------- */\\n    function getVaultImpl() external view returns (address) {\\n        return LibVault.getVaultImpl();\\n    }\\n\\n    function setVaultImpl(address _impl) external authorised {\\n        if (_impl == address(0) || !Address.isContract(_impl)) {\\n            revert InvalidVaultImpl();\\n        }\\n        LibVault.setVaultImpl(_impl);\\n    }\\n\\n    /* ---------------------- user interface --------------------- */\\n    function withdrawNFT(\\n        address _vault,\\n        address _collection,\\n        uint256 _tokenId\\n    ) external nonReentrant {\\n        checkVaultAddr(_vault);\\n        checkCollectionAddr(_collection);\\n        if (LibAppStorage.ds().nftIndex[_collection][_tokenId].isCollateral) {\\n            revert InvalidWithdrawal();\\n        }\\n        delete LibAppStorage.ds().nftIndex[_collection][_tokenId];\\n        bytes4 selector = IERC721(_collection).transferFrom.selector;\\n        bytes memory param = abi.encode(_vault, _msgSender(), _tokenId);\\n        bytes memory data = abi.encodePacked(selector, param);\\n        bytes memory encodedData = abi.encode(_collection, data);\\n        IVault(_vault).execute(encodedData);\\n    }\\n\\n    function transferReserve(\\n        address _vault,\\n        address _currency,\\n        address _to,\\n        uint256 _amount\\n    ) external nonReentrant {\\n        checkVaultAddr(_vault);\\n        checkCurrencyAddr(_currency);\\n        bytes4 selector = IERC20(_currency).transferFrom.selector;\\n        bytes memory param = abi.encode(_vault, _to, _amount);\\n        bytes memory data = abi.encodePacked(selector, param);\\n        bytes memory encodedData = abi.encode(_currency, data);\\n        IVault(_vault).execute(encodedData);\\n    }\\n\\n    /* ---------------------- view functions --------------------- */\\n    function computeCounterfactualAddress(address _user, bytes20 _salt)\\n        external\\n        view\\n        returns (address)\\n    {\\n        bytes memory data = getEncodedVaultInitData(_user);\\n        bytes memory initCode = abi.encodePacked(\\n            type(BeaconProxy).creationCode,\\n            abi.encode(vaultBeacon(), data)\\n        );\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0xff),\\n                address(this),\\n                newSalt(_salt, _user),\\n                keccak256(initCode)\\n            )\\n        );\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    function collectionInitialized(address _collection)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return LibAppStorage.ds()._reserveData[_collection].initialized;\\n    }\\n\\n    function newSalt(bytes20 _salt, address _owner)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(keccak256(abi.encodePacked(_owner)), _salt)\\n            );\\n    }\\n\\n    function vaultBeacon() public view returns (address) {\\n        return LibVault.vaultBeacon();\\n    }\\n\\n    function subVaultBeacon() public view returns (address) {\\n        return LibVault.subVaultBeacon();\\n    }\\n\\n    function getVaultAddr(address _user) external view returns (address) {\\n        return LibVault.getVaultAddress(_user);\\n    }\\n\\n    function getEncodedVaultInitData(address _user)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        bytes memory data = abi.encodeWithSelector(\\n            IVault(address(0)).initialize.selector,\\n            address(this),\\n            _user,\\n            LibAppStorage.ds().paymaster,\\n            LibAppStorage.ds().WETH9\\n        );\\n        return data;\\n    }\\n\\n    function checkVaultAddr(address _vault) internal view {\\n        if (!Address.isContract(_vault)) {\\n            revert InvalidVaultAddress();\\n        }\\n        if (LibVault.getVaultAddress(_msgSender()) != _vault) {\\n            revert InvalidVaultCall();\\n        }\\n    }\\n\\n    function checkCollectionAddr(address _collection) internal view {\\n        if (!Address.isContract(_collection)) {\\n            revert InvalidCollectionAddress();\\n        }\\n    }\\n\\n    function checkCurrencyAddr(address _currency) internal view {\\n        if (!Address.isContract(_currency)) {\\n            revert InvalidCurrencyAddress();\\n        }\\n    }\\n}\\n\\n/* --------------------------------- errors -------------------------------- */\\nerror InvalidVaultImpl();\\nerror InvalidVaultCall();\\nerror InvalidVaultAddress();\\nerror InvalidCollectionAddress();\\nerror InvalidCurrencyAddress();\\nerror FailedDeployVault();\\nerror InvalidWithdrawal();\\n\",\"keccak256\":\"0x674a46324aa017c36593f6eb74b2811ef468f46270e55607e76210bf65a86943\",\"license\":\"GPL-3.0\"},\"contracts/voyage/interfaces/IMarketPlaceAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nstruct AssetInfo {\\n    uint256 tokenId;\\n    uint256 assetPrice;\\n}\\n\\ninterface IMarketPlaceAdapter {\\n    function extractAssetInfo(bytes calldata _data)\\n        external\\n        pure\\n        returns (AssetInfo memory);\\n\\n    function validate(bytes calldata _data) external view returns (bool);\\n\\n    function execute(bytes calldata _data) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x02dbc2e2ea68e0b2f3db8a69314e436551aae2e947720d4a764162e70d515090\",\"license\":\"GPL-3.0\"},\"contracts/voyage/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IPriceOracle {\\n    function getTwap(address _asset) external view returns (uint256, uint256);\\n\\n    function updateTwap(address _asset, uint256 _priceAverage) external;\\n}\\n\",\"keccak256\":\"0x661ab66a9f15aaa2177bfcf52a626293315a2caf216e703531368494d1974d87\",\"license\":\"GPL-3.0\"},\"contracts/voyage/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\n/**\\n@title IReserveInterestRateStrategyInterface interface\\n@notice Interface for the calculation of the interest rates.\\n*/\\n\\ninterface IReserveInterestRateStrategy {\\n    function calculateBorrowRate(\\n        address reserve,\\n        address seniorDepositTokenAddress,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x28e51bab4ee02aa740b52525bdba6488d8b9f1d8f71cb8993fad259a13fc3143\",\"license\":\"GPL-3.0\"},\"contracts/voyage/interfaces/IVToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC4626} from \\\"../../shared/interfaces/IERC4626.sol\\\";\\n\\ninterface IVToken is IERC4626 {\\n    function transferUnderlyingTo(address _target, uint256 _amount) external;\\n\\n    function claim() external;\\n\\n    function unbonding(address _user) external view returns (uint256);\\n\\n    function totalUnbonding() external view returns (uint256);\\n\\n    function maximumClaimable(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2c3c43f6e29ced244760b904f0e52409e3434bfd2bbb9db801fa3a37b5e9f181\",\"license\":\"MIT\"},\"contracts/voyage/interfaces/IVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IVaultFactory {\\n    function createVault(\\n        address owner,\\n        address voyage,\\n        uint256 version,\\n        bytes32 checksum,\\n        bytes32 salt\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xf63dca9d9d7b27ab560a723d559df3339d7cfcc30cc3f9e6dd46a22009cef7a4\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {DSRoles} from \\\"../auth/DSRoles.sol\\\";\\nimport {DSGuard} from \\\"../auth/DSGuard.sol\\\";\\nimport {LibSecurity} from \\\"./LibSecurity.sol\\\";\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {IVaultFactory} from \\\"../interfaces/IVaultFactory.sol\\\";\\nimport {IDiamondCut} from \\\"../../shared/diamond/interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../../shared/diamond/interfaces/IDiamondLoupe.sol\\\";\\nimport {DiamondCutFacet} from \\\"../../shared/diamond/facets/DiamondCutFacet.sol\\\";\\nimport {IWETH9} from \\\"../../shared/facets/PaymentsFacet.sol\\\";\\n\\nenum Tranche {\\n    JUNIOR,\\n    SENIOR\\n}\\n\\nstruct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    uint256 currentBorrowRate;\\n    //the decimals of the reserve asset\\n    uint256 decimals;\\n    address interestRateStrategyAddress;\\n    address juniorDepositTokenAddress;\\n    address seniorDepositTokenAddress;\\n    uint40 juniorLastUpdateTimestamp;\\n    uint40 seniorLastUpdateTimestamp;\\n    address currency;\\n    UpgradeableBeacon priceOracle;\\n    bool initialized;\\n}\\n\\nstruct ReserveConfigurationMap {\\n    //bit 0-15: liquidation bonus (uint16)\\n    //bit 16-23: decimals (uint8)\\n    //bit 24: reserve is active\\n    //bit 25: reserve is frozen\\n    //bit 26: borrowing is enabled\\n    //bit 27: reserved\\n    //bit 28-63: min margin (uint36)\\n    //bit 64-99: max margin (uint36)\\n    //bit 100-115: margin requirement (uint16)\\n    //bit 116-131: income ratio (uint16)\\n    //bit 132-139: instalment interval (uint8)\\n    //bit 140-155: loan term (uint16)\\n    //bit 156-163: repayment grace period (uint8)\\n    //bit 164-255: unused\\n    uint256 data;\\n}\\n\\nstruct PMT {\\n    uint256 principal;\\n    uint256 interest;\\n    uint256 pmt;\\n}\\n\\nstruct RepaymentData {\\n    uint256 principal;\\n    uint256 interest;\\n    // principal + interest\\n    uint256 total;\\n    uint40 paidAt;\\n    bool isLiquidated;\\n}\\n\\nstruct Loan {\\n    uint256 principal;\\n    uint256 interest;\\n    // the total intended length of the loan in seconds - e.g., 90 days\\n    uint40 term;\\n    // the repayment interval - e.g., 30 days\\n    uint40 epoch;\\n    // number of instalments, term / epoch\\n    uint40 nper;\\n    // the amount to be repaid per instalment (principal + interest)\\n    PMT pmt;\\n    // the borrow rate of this loan\\n    uint256 apr;\\n    uint40 borrowAt;\\n    // next due data\\n    uint40 nextPaymentDue;\\n    // principal paid\\n    uint256 totalPrincipalPaid;\\n    // interest paid\\n    uint256 totalInterestPaid;\\n    RepaymentData[] repayments;\\n    // size pf repayments\\n    uint40 paidTimes;\\n    uint256[] collateral;\\n}\\n\\nstruct LoanList {\\n    uint40 head;\\n    uint40 tail;\\n}\\n\\nstruct BorrowData {\\n    uint40 paidLoanNumber;\\n    // next draw down number\\n    uint40 nextLoanNumber;\\n    uint256 totalPrincipal;\\n    uint256 totalInterest;\\n    uint256 mapSize;\\n    mapping(uint256 => Loan) loans;\\n}\\n\\nstruct BorrowState {\\n    uint256 totalDebt;\\n    uint256 totalInterest;\\n    uint256 avgBorrowRate;\\n    mapping(address => uint256) repaidTimes;\\n}\\n\\nstruct ProtocolFee {\\n    address treasuryAddress;\\n    uint40 cutRatio; // express in Ray\\n}\\n\\nstruct Authorisation {\\n    DSRoles rbac;\\n    DSGuard acl;\\n}\\n\\nstruct NFTInfo {\\n    bool isCollateral; // this determines whether the NFT can be transferred out of the Vault.\\n    address collection;\\n    uint256 tokenId;\\n    address currency; // record what currency was used to pay\\n    uint256 price; // price in ETH\\n}\\n\\nstruct ERC721AssetInfo {\\n    address marketplace;\\n    address erc20Addr;\\n}\\n\\nstruct UpgradeParam {\\n    mapping(address => mapping(bytes4 => address)) existingSelectorFacetMap;\\n    mapping(address => bytes4[]) existingSelectors;\\n    mapping(address => mapping(bytes4 => bool)) newSelectorSet;\\n    mapping(address => bytes4[]) newSelectors;\\n    mapping(address => IDiamondCut.FacetCut[]) facetCuts;\\n    mapping(address => uint256) facetCutSize;\\n    mapping(uint256 => bytes4[]) selectorsAdded;\\n    mapping(uint256 => bytes4[]) selectorsReplaced;\\n    mapping(uint256 => bytes4[]) selectorsRemoved;\\n}\\n\\nstruct DiamondFacet {\\n    address diamondCutFacet;\\n    address diamondLoupeFacet;\\n    address ownershipFacet;\\n}\\n\\nstruct MarketPlaceData {\\n    address adapterAddr;\\n}\\n\\nstruct AppStorage {\\n    /* -------------------------------- plumbing -------------------------------- */\\n    mapping(bytes32 => address) _addresses;\\n    /* -------------------------------- liquidity ------------------------------- */\\n    UpgradeableBeacon seniorDepositTokenBeacon;\\n    UpgradeableBeacon juniorDepositTokenBeacon;\\n    // mapping of collection address to reserve data\\n    mapping(address => ReserveData) _reserveData;\\n    // List of reserves as a map (reserveId => reserve)\\n    mapping(uint256 => address) _reserveList;\\n    uint16 _reservesCount;\\n    IWETH9 WETH9;\\n    /* ---------------------------------- debt ---------------------------------- */\\n    // collection => currency => vault => data\\n    mapping(address => mapping(address => mapping(address => BorrowData))) _borrowData;\\n    mapping(address => mapping(address => BorrowState)) _borrowState;\\n    bool _paused;\\n    /* ---------------------------------- vault --------------------------------- */\\n    UpgradeableBeacon subVaultBeacon;\\n    UpgradeableBeacon vaultBeacon;\\n    DiamondFacet diamondFacet;\\n    IVaultFactory vaultFactory;\\n    address[] vaults;\\n    // mapping of vault owner to vault instance address\\n    mapping(address => address) vaultMap;\\n    // marketplace address => marketplace type\\n    mapping(address => MarketPlaceData) marketPlaceData;\\n    // collection => tokenId => info\\n    mapping(address => mapping(uint256 => NFTInfo)) nftIndex;\\n    /* ---------------------------------- security --------------------------------- */\\n    Authorisation auth;\\n    address trustedForwarder; // GSN IERC2771 receiver\\n    address paymaster; // VoyagePaymaster address\\n    /* --------------------------------- protocol fee ------------------------------ */\\n    ProtocolFee protocolFee;\\n    /* ---------------------------------- helper --------------------------------- */\\n    // mapping of sender address to helper maps, need to clear after computing\\n    UpgradeParam upgradeParam;\\n}\\n\\nlibrary LibAppStorage {\\n    function ds() internal pure returns (AppStorage storage ds) {\\n        bytes32 storagePosition = keccak256(\\\"diamond.storage.voyage\\\");\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n\\n    function cleanUpgradeParam() internal {\\n        UpgradeParam storage s = ds().upgradeParam;\\n        for (uint256 i = 0; i < s.existingSelectors[msg.sender].length; ) {\\n            delete s.existingSelectorFacetMap[msg.sender][\\n                s.existingSelectors[msg.sender][i]\\n            ];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        delete s.existingSelectors[msg.sender];\\n\\n        for (uint256 i = 0; i < s.newSelectors[msg.sender].length; ) {\\n            delete s.newSelectorSet[msg.sender][s.newSelectors[msg.sender][i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        delete s.newSelectors[msg.sender];\\n\\n        delete s.facetCuts[msg.sender];\\n        delete s.facetCutSize[msg.sender];\\n    }\\n}\\n\\ncontract Storage {\\n    modifier whenPaused() {\\n        require(LibAppStorage.ds()._paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!LibAppStorage.ds()._paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier authorised() {\\n        require(auth(), \\\"call is not authorised\\\");\\n        _;\\n    }\\n\\n    function auth() internal view returns (bool) {\\n        return\\n            LibSecurity.isAuthorisedInbound(\\n                LibAppStorage.ds().auth,\\n                _msgSender(),\\n                msg.sig\\n            );\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal view virtual returns (address ret) {\\n        if (\\n            msg.data.length >= 20 && LibSecurity.isTrustedForwarder(msg.sender)\\n        ) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal view virtual returns (bytes calldata ret) {\\n        if (\\n            msg.data.length >= 20 && LibSecurity.isTrustedForwarder(msg.sender)\\n        ) {\\n            return msg.data[0:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b3eefc2381b8a7793c88198fc7d6d42bda235bbc95726e873d359e9142c41ad\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {BeaconProxy} from \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {LibReserveConfiguration} from \\\"./LibReserveConfiguration.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {LibAppStorage, AppStorage, ReserveData, ReserveConfigurationMap, BorrowData, BorrowState, Tranche} from \\\"./LibAppStorage.sol\\\";\\nimport {IVToken} from \\\"../interfaces/IVToken.sol\\\";\\nimport {IWETH9} from \\\"../../shared/facets/PaymentsFacet.sol\\\";\\nimport {VToken} from \\\"../tokenization/VToken.sol\\\";\\nimport {WadRayMath} from \\\"../../shared/libraries/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../../shared/libraries/PercentageMath.sol\\\";\\n\\nlibrary LibLiquidity {\\n    using WadRayMath for uint256;\\n    using PercentageMath for uint256;\\n    using LibReserveConfiguration for ReserveConfigurationMap;\\n\\n    event ReserveDataUpdated(\\n        address indexed asset,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate\\n    );\\n\\n    struct DepositAndDebt {\\n        address currency;\\n        uint256 juniorDepositAmount;\\n        uint256 seniorDepositAmount;\\n        uint256 totalDebt;\\n        uint256 totalInterest;\\n        uint256 avgBorrowRate;\\n    }\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant UINT256_MAX = type(uint256).max;\\n\\n    /* --------------------------- reserve management --------------------------- */\\n    function init(\\n        ReserveData storage reserve,\\n        address _currency,\\n        address _interestRateStrategyAddress,\\n        address _priceOracle\\n    ) internal {\\n        require(\\n            reserve.seniorDepositTokenAddress == address(0) &&\\n                reserve.juniorDepositTokenAddress == address(0),\\n            \\\"deposit tokens already deployed\\\"\\n        );\\n        AppStorage storage s = LibAppStorage.ds();\\n        IERC20Metadata token = IERC20Metadata(_currency);\\n        ReserveConfigurationMap memory config = reserve.configuration;\\n        config.setDecimals(token.decimals());\\n        reserve.configuration = config;\\n        bytes memory data = abi.encodeWithSelector(\\n            VToken.initialize.selector,\\n            address(this),\\n            _currency\\n        );\\n        reserve.seniorDepositTokenAddress = deployBeaconProxy(\\n            address(s.seniorDepositTokenBeacon),\\n            data\\n        );\\n        token.approve(reserve.seniorDepositTokenAddress, UINT256_MAX);\\n        reserve.juniorDepositTokenAddress = deployBeaconProxy(\\n            address(s.juniorDepositTokenBeacon),\\n            data\\n        );\\n        token.approve(reserve.juniorDepositTokenAddress, UINT256_MAX);\\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\\n        reserve.initialized = true;\\n        reserve.priceOracle = new UpgradeableBeacon(_priceOracle);\\n        reserve.currency = _currency;\\n    }\\n\\n    function deployBeaconProxy(address _impl, bytes memory _data)\\n        internal\\n        returns (address)\\n    {\\n        return address(new BeaconProxy(_impl, _data));\\n    }\\n\\n    /* --------------------------- fee management --------------------------- */\\n    function updateProtocolFee(address _treasuryAddr, uint40 _cutRatio)\\n        internal\\n    {\\n        AppStorage storage s = LibAppStorage.ds();\\n        s.protocolFee.treasuryAddress = _treasuryAddr;\\n        s.protocolFee.cutRatio = _cutRatio;\\n    }\\n\\n    /* ------------------------ state mutation functions ------------------------ */\\n\\n    function updateWETH9(address _weth9) internal {\\n        AppStorage storage s = LibAppStorage.ds();\\n        s.WETH9 = IWETH9(_weth9);\\n    }\\n\\n    /* ----------------------------- view functions ----------------------------- */\\n    function getProtocolFee() internal view returns (address, uint256) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        return (s.protocolFee.treasuryAddress, s.protocolFee.cutRatio);\\n    }\\n\\n    function getReserveData(address _collection)\\n        internal\\n        view\\n        returns (ReserveData storage)\\n    {\\n        AppStorage storage s = LibAppStorage.ds();\\n        return s._reserveData[_collection];\\n    }\\n\\n    function getReserveList() internal view returns (address[] memory) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        address[] memory reserveList = new address[](s._reservesCount);\\n        for (uint256 i = 0; i < s._reservesCount; ) {\\n            reserveList[i] = s._reserveList[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return reserveList;\\n    }\\n\\n    function balance(\\n        address _collection,\\n        address _user,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        ReserveData memory reserve = getReserveData(_collection);\\n        address vToken;\\n        if (Tranche.JUNIOR == _tranche) {\\n            vToken = reserve.juniorDepositTokenAddress;\\n        } else {\\n            vToken = reserve.seniorDepositTokenAddress;\\n        }\\n        return IVToken(vToken).maxWithdraw(_user);\\n    }\\n\\n    function unbonding(\\n        address _collection,\\n        address _user,\\n        Tranche _tranche\\n    ) internal view returns (uint256) {\\n        ReserveData memory reserve = getReserveData(_collection);\\n        address vToken;\\n        if (Tranche.JUNIOR == _tranche) {\\n            vToken = reserve.juniorDepositTokenAddress;\\n        } else {\\n            vToken = reserve.seniorDepositTokenAddress;\\n        }\\n        return IVToken(vToken).unbonding(_user);\\n    }\\n\\n    function getDepositAndDebt(address _collection)\\n        internal\\n        view\\n        returns (DepositAndDebt memory)\\n    {\\n        AppStorage storage s = LibAppStorage.ds();\\n        ReserveData storage reserve = s._reserveData[_collection];\\n        BorrowState storage borrowState = s._borrowState[_collection][\\n            reserve.currency\\n        ];\\n\\n        DepositAndDebt memory res;\\n        res.currency = reserve.currency;\\n        res.juniorDepositAmount = IVToken(reserve.juniorDepositTokenAddress)\\n            .totalAssets();\\n        res.seniorDepositAmount = IVToken(reserve.seniorDepositTokenAddress)\\n            .totalAssets();\\n        (res.totalDebt, res.totalInterest, res.avgBorrowRate) = (\\n            borrowState.totalDebt,\\n            borrowState.totalInterest,\\n            borrowState.avgBorrowRate\\n        );\\n        return res;\\n    }\\n\\n    function utilizationRate(address _collection)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        AppStorage storage s = LibAppStorage.ds();\\n        ReserveData memory reserve = getReserveData(_collection);\\n        BorrowState storage borrowState = s._borrowState[_collection][\\n            reserve.currency\\n        ];\\n        uint256 totalDebt = borrowState.totalDebt + borrowState.totalInterest;\\n\\n        uint256 totalPendingWithdrawal = IVToken(\\n            reserve.seniorDepositTokenAddress\\n        ).totalUnbonding();\\n\\n        uint256 availableLiquidity = IERC20Metadata(reserve.currency).balanceOf(\\n            reserve.seniorDepositTokenAddress\\n        ) - totalPendingWithdrawal;\\n\\n        return\\n            totalDebt == 0\\n                ? 0\\n                : totalDebt.rayDiv(availableLiquidity + totalDebt);\\n    }\\n}\\n\",\"keccak256\":\"0x0788390d25b3e7fda01b943af1c07fe34485976ff64a6ea19049da362ca1b5a4\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibLoan.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AssetInfo} from \\\"../interfaces/IMarketPlaceAdapter.sol\\\";\\nimport {LibAppStorage, AppStorage, BorrowData, BorrowState, Loan, PMT, RepaymentData, ReserveData, RepaymentData, NFTInfo, ReserveConfigurationMap} from \\\"./LibAppStorage.sol\\\";\\nimport {LibLiquidity} from \\\"./LibLiquidity.sol\\\";\\nimport {LibReserveConfiguration} from \\\"./LibReserveConfiguration.sol\\\";\\nimport {WadRayMath} from \\\"../../shared/libraries/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../../shared/libraries/PercentageMath.sol\\\";\\n\\nstruct ExecuteBuyNowParams {\\n    address collection;\\n    address currency;\\n    address marketplace;\\n    uint256 tokenId;\\n    address vault;\\n    uint256 totalPrincipal;\\n    uint256 totalInterest;\\n    uint256 totalDebt;\\n    uint256 outstandingPrincipal;\\n    uint256 outstandingInterest;\\n    uint256 outstandingDebt;\\n    uint256 fv;\\n    uint256 timestamp;\\n    uint40 term;\\n    uint40 epoch;\\n    uint40 nper;\\n    uint256 downpayment;\\n    uint256 borrowRate;\\n    uint256 availableLiquidity;\\n    uint256 totalBalance;\\n    uint256 totalPending;\\n    uint256 loanId;\\n    PMT pmt;\\n    AssetInfo assetInfo;\\n}\\n\\nstruct ExecuteLiquidateParams {\\n    address collection;\\n    address currency;\\n    address vault;\\n    uint256 loanId;\\n    uint256 repaymentId;\\n    uint256 principal;\\n    uint256 interest;\\n    uint256 totalDebt;\\n    uint256 remaningDebt;\\n    uint256 discount;\\n    uint256 discountedFloorPrice;\\n    uint256 amountNeedExtra;\\n    uint256 juniorTrancheAmount;\\n    uint256 receivedAmount;\\n    address liquidator;\\n    uint256 floorPrice;\\n    uint256 floorPriceTime;\\n    uint256 gracePeriod;\\n    uint256 liquidationBonus;\\n    uint256 marginRequirement;\\n    uint256 writeDownAmount;\\n    uint256 totalAssetFromJuniorTranche;\\n    bool isFinal;\\n}\\n\\nlibrary LibLoan {\\n    using WadRayMath for uint256;\\n    using PercentageMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using LibReserveConfiguration for ReserveConfigurationMap;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant SECOND_PER_DAY = 1 days;\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    struct LoanDetail {\\n        uint256 principal;\\n        uint256 interest;\\n        uint256 term;\\n        uint256 epoch;\\n        uint256 nper;\\n        address reserve;\\n        PMT pmt;\\n        uint256 apr;\\n        uint256 borrowAt;\\n        uint256 nextPaymentDue;\\n        uint256 totalPrincipalPaid;\\n        uint256 totalInterestPaid;\\n        uint256 paidTimes;\\n    }\\n\\n    struct ExecuteDebtParam {\\n        address collection;\\n        address currency;\\n        uint256 tokenId;\\n        address vault;\\n        uint256 principal;\\n        uint256 interest;\\n        uint40 term;\\n        uint40 epoch;\\n        uint256 apr;\\n        uint256 loanNumber;\\n    }\\n\\n    /* ----------------------------- state mutations ---------------------------- */\\n\\n    function releaseLien(\\n        address _collection,\\n        address _currency,\\n        address _vault,\\n        uint256 _loanId\\n    ) internal returns (uint256[] memory ret) {\\n        BorrowData storage borrowData = getBorrowData(\\n            _collection,\\n            _currency,\\n            _vault\\n        );\\n\\n        Loan storage loan = borrowData.loans[_loanId];\\n        uint256[] storage collaterals = loan.collateral;\\n        ret = collaterals;\\n        for (uint256 i = 0; i < collaterals.length; i++) {\\n            delete LibAppStorage.ds().nftIndex[_collection][collaterals[i]];\\n        }\\n        delete borrowData.loans[_loanId];\\n        return ret;\\n    }\\n\\n    function calculateInterest(\\n        address _collection,\\n        address _currency,\\n        uint256 _collateral,\\n        address _vault,\\n        uint256 _principal,\\n        uint40 _term,\\n        uint40 _epoch,\\n        uint256 _apr\\n    ) internal {\\n        ExecuteDebtParam memory param = composeExecuteDebtParam(\\n            _collection,\\n            _currency,\\n            _collateral,\\n            _vault,\\n            _principal,\\n            _term,\\n            _epoch,\\n            _apr\\n        );\\n        BorrowData storage borrowData = getBorrowData(\\n            param.collection,\\n            param.currency,\\n            param.vault\\n        );\\n        uint256 currentLoanNumber = borrowData.nextLoanNumber;\\n        Loan storage loan = borrowData.loans[currentLoanNumber];\\n        loan.principal = param.principal;\\n        loan.term = param.term;\\n        loan.epoch = param.epoch;\\n        loan.apr = param.apr;\\n        loan.nper = uint40(\\n            (_term * SECOND_PER_DAY) / (_epoch * SECOND_PER_DAY)\\n        );\\n        loan.borrowAt = uint40(block.timestamp);\\n        uint256 periodsPerYear = SECONDS_PER_YEAR /\\n            (loan.epoch * SECOND_PER_DAY);\\n        uint256 effectiveInterestRate = (loan.apr * loan.nper) / periodsPerYear;\\n        loan.interest = loan.principal.rayMul(effectiveInterestRate);\\n\\n        PMT memory pmt;\\n        pmt.principal = loan.principal / loan.nper;\\n        pmt.interest = loan.interest / loan.nper;\\n        pmt.pmt = pmt.principal + pmt.interest;\\n        loan.pmt = pmt;\\n    }\\n\\n    function initDebt(\\n        BorrowState storage borrowState,\\n        BorrowData storage borrowData,\\n        ExecuteBuyNowParams memory param\\n    )\\n        internal\\n        returns (\\n            uint256 loanId,\\n            PMT memory pmt,\\n            uint256 totalInterest\\n        )\\n    {\\n        uint256 currentLoanNumber = borrowData.nextLoanNumber;\\n        Loan storage loan = borrowData.loans[currentLoanNumber];\\n        updateLoan(loan, param);\\n\\n        pmt = calculatePMT(loan);\\n        loan.pmt = pmt;\\n\\n        loan.collateral.push(param.tokenId);\\n        LibAppStorage.ds().nftIndex[param.collection][\\n            param.tokenId\\n        ] = composeNFTInfo(param);\\n        loan.nextPaymentDue =\\n            loan.borrowAt +\\n            (loan.paidTimes + 1) *\\n            loan.epoch *\\n            uint40(SECOND_PER_DAY);\\n\\n        updateBorrowData(borrowState, loan, borrowData, param.totalPrincipal);\\n\\n        return (currentLoanNumber, pmt, loan.interest);\\n    }\\n\\n    function firstRepay(\\n        BorrowState storage borrowState,\\n        BorrowData storage debtData,\\n        uint256 _loanNumber\\n    ) internal {\\n        Loan storage loan = debtData.loans[_loanNumber];\\n        loan.paidTimes += 1;\\n        insertLoan(loan);\\n        updateDebtData(debtData, loan);\\n        uint256 numer = borrowState.totalDebt.rayMul(\\n            borrowState.avgBorrowRate\\n        ) - loan.pmt.principal.rayMul(loan.apr);\\n        uint256 denom = borrowState.totalDebt - loan.pmt.principal;\\n        borrowState.avgBorrowRate = numer.rayDiv(denom);\\n        borrowState.totalDebt = borrowState.totalDebt - loan.pmt.principal;\\n        borrowState.totalInterest =\\n            borrowState.totalInterest -\\n            loan.pmt.interest;\\n    }\\n\\n    function repay(\\n        address _collection,\\n        address _currency,\\n        address _vault,\\n        uint256 _loanNumber\\n    ) internal returns (uint256, bool) {\\n        ExecuteDebtParam memory param;\\n        param.collection = _collection;\\n        param.currency = _currency;\\n        param.vault = _vault;\\n        param.loanNumber = _loanNumber;\\n        bool isFinal = false;\\n\\n        (\\n            BorrowState storage borrowState,\\n            BorrowData storage debtData\\n        ) = getBorrowDataAndState(\\n                param.collection,\\n                param.currency,\\n                param.vault\\n            );\\n        Loan storage loan = debtData.loans[_loanNumber];\\n        debtData.paidLoanNumber += 1;\\n        loan.paidTimes += 1;\\n        if (loan.paidTimes == loan.nper) {\\n            isFinal = true;\\n            clearLoan(debtData, borrowState, loan, param);\\n        } else {\\n            insertLoan(loan);\\n        }\\n\\n        updateDebtData(debtData, loan);\\n        updateBorrowState(borrowState, loan);\\n\\n        return (\\n            loan.repayments.length == 0 ? 0 : loan.repayments.length - 1,\\n            isFinal\\n        );\\n    }\\n\\n    function updateDebtData(BorrowData storage debtData, Loan storage loan)\\n        internal\\n    {\\n        debtData.totalPrincipal = debtData.totalPrincipal - loan.pmt.principal;\\n        debtData.totalInterest = debtData.totalInterest - loan.pmt.interest;\\n    }\\n\\n    function updateBorrowState(\\n        BorrowState storage borrowState,\\n        Loan storage loan\\n    ) internal {\\n        if (borrowState.totalDebt == loan.pmt.principal) {\\n            borrowState.avgBorrowRate = 0;\\n        } else {\\n            uint256 numer = borrowState.totalDebt.rayMul(\\n                borrowState.avgBorrowRate\\n            ) - loan.pmt.principal.rayMul(loan.apr);\\n            uint256 denom = borrowState.totalDebt - loan.pmt.principal;\\n            borrowState.avgBorrowRate = numer.rayDiv(denom);\\n        }\\n        borrowState.totalDebt = borrowState.totalDebt - loan.pmt.principal;\\n        borrowState.totalInterest =\\n            borrowState.totalInterest -\\n            loan.pmt.interest;\\n    }\\n\\n    function insertLoan(Loan storage loan) internal {\\n        loan.totalPrincipalPaid = loan.totalPrincipalPaid + loan.pmt.principal;\\n        loan.totalInterestPaid = loan.totalInterestPaid + loan.pmt.interest;\\n        RepaymentData memory repayment;\\n        repayment.interest = loan.pmt.interest;\\n        repayment.principal = loan.pmt.principal;\\n        repayment.total = loan.pmt.principal + loan.pmt.interest;\\n        repayment.paidAt = uint40(block.timestamp);\\n        loan.repayments.push(repayment);\\n        // t, t+1, t+2\\n        loan.nextPaymentDue =\\n            loan.borrowAt +\\n            loan.paidTimes *\\n            loan.epoch *\\n            uint40(SECOND_PER_DAY);\\n    }\\n\\n    function clearLoan(\\n        BorrowData storage debtData,\\n        BorrowState storage borrowState,\\n        Loan storage loan,\\n        ExecuteDebtParam memory param\\n    ) internal {\\n        uint256[] storage collaterals = loan.collateral;\\n        for (uint256 i = 0; i < collaterals.length; i++) {\\n            LibAppStorage\\n            .ds()\\n            .nftIndex[param.collection][collaterals[i]].isCollateral = false;\\n        }\\n        delete debtData.loans[param.loanNumber];\\n        borrowState.repaidTimes[param.vault] =\\n            borrowState.repaidTimes[param.vault] +\\n            1;\\n    }\\n\\n    function getBorrowDataAndState(\\n        address collection,\\n        address currency,\\n        address vault\\n    )\\n        internal\\n        view\\n        returns (BorrowState storage borrowState, BorrowData storage borrowData)\\n    {\\n        borrowState = getBorrowState(collection, currency);\\n        borrowData = getBorrowData(collection, currency, vault);\\n        return (borrowState, borrowData);\\n    }\\n\\n    function updateLoan(Loan storage loan, ExecuteBuyNowParams memory param)\\n        internal\\n    {\\n        loan.principal = param.totalPrincipal;\\n        loan.term = param.term;\\n        loan.epoch = param.epoch;\\n        loan.apr = param.borrowRate;\\n        loan.nper = uint40(\\n            (param.term * SECOND_PER_DAY) / (param.epoch * SECOND_PER_DAY)\\n        );\\n        loan.borrowAt = uint40(block.timestamp);\\n        uint256 periodsPerYear = SECONDS_PER_YEAR /\\n            (loan.epoch * SECOND_PER_DAY);\\n        uint256 effectiveInterestRate = (loan.apr * loan.nper) / periodsPerYear;\\n        loan.interest = loan.principal.rayMul(effectiveInterestRate);\\n    }\\n\\n    function calculatePMT(Loan storage loan)\\n        internal\\n        view\\n        returns (PMT memory)\\n    {\\n        PMT memory pmt;\\n        pmt.principal = loan.principal / loan.nper;\\n        pmt.interest = loan.interest / loan.nper;\\n        pmt.pmt = pmt.principal + pmt.interest;\\n        return pmt;\\n    }\\n\\n    function composeExecuteDebtParam(\\n        address _collection,\\n        address _currency,\\n        uint256 _collateral,\\n        address _vault,\\n        uint256 _principal,\\n        uint40 _term,\\n        uint40 _epoch,\\n        uint256 _apr\\n    ) internal pure returns (ExecuteDebtParam memory param) {\\n        param.collection = _collection;\\n        param.currency = _currency;\\n        param.tokenId = _collateral;\\n        param.vault = _vault;\\n        param.principal = _principal;\\n        param.term = _term;\\n        param.epoch = _epoch;\\n        param.apr = _apr;\\n        return param;\\n    }\\n\\n    function composeNFTInfo(ExecuteBuyNowParams memory param)\\n        internal\\n        pure\\n        returns (NFTInfo memory nftInfo)\\n    {\\n        nftInfo.collection = param.collection;\\n        nftInfo.tokenId = param.tokenId;\\n        nftInfo.currency = param.currency;\\n        nftInfo.price = param.totalPrincipal;\\n        nftInfo.isCollateral = true;\\n        return nftInfo;\\n    }\\n\\n    function updateBorrowData(\\n        BorrowState storage borrowState,\\n        Loan storage loan,\\n        BorrowData storage borrowData,\\n        uint256 principal\\n    ) internal {\\n        borrowData.nextLoanNumber++;\\n        borrowData.mapSize++;\\n        borrowData.totalPrincipal = borrowData.totalPrincipal + principal;\\n        borrowData.totalInterest = borrowData.totalInterest + loan.interest;\\n\\n        /// @dev most of the time, principal and totalDebt are denominated in wad\\n        /// we use ray operations as we are seeking avgBorrowRate, which is supposed to be epxressed in ray.\\n        /// in the vast majority of cases, as the underlying asset has 18 DPs, we end up just padding the LSBs with 0 to make avgBorrowRate a ray.\\n        ///  formula: ((debt * avgBorrowRate) + (principal*apr)) / (debt + principal)\\n        uint256 numer = (\\n            borrowState.totalDebt.rayMul(borrowState.avgBorrowRate)\\n        ) + (loan.principal.rayMul(loan.apr));\\n        uint256 denom = borrowState.totalDebt + loan.principal;\\n        borrowState.avgBorrowRate = numer.rayDiv(denom);\\n        borrowState.totalDebt = borrowState.totalDebt + loan.principal;\\n        borrowState.totalInterest = borrowState.totalInterest + loan.interest;\\n    }\\n\\n    function distributeInterest(\\n        ReserveData memory reserveData,\\n        uint256 interest,\\n        address sender\\n    ) internal {\\n        uint256 incomeRatio = LibReserveConfiguration\\n            .getConfiguration(reserveData.currency)\\n            .getIncomeRatio();\\n        uint256 seniorInterest = interest.percentMul(incomeRatio);\\n        IERC20(reserveData.currency).safeTransferFrom(\\n            sender,\\n            reserveData.seniorDepositTokenAddress,\\n            seniorInterest\\n        );\\n\\n        IERC20(reserveData.currency).safeTransferFrom(\\n            sender,\\n            reserveData.juniorDepositTokenAddress,\\n            interest - seniorInterest\\n        );\\n    }\\n\\n    /* ----------------------------- view functions ----------------------------- */\\n\\n    function getBorrowState(address _collection, address _currency)\\n        internal\\n        view\\n        returns (BorrowState storage)\\n    {\\n        AppStorage storage s = LibAppStorage.ds();\\n        return s._borrowState[_collection][_currency];\\n    }\\n\\n    function getBorrowData(\\n        address _collection,\\n        address _currency,\\n        address _vault\\n    ) internal view returns (BorrowData storage) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        return s._borrowData[_collection][_currency][_vault];\\n    }\\n\\n    function getLoanDetail(\\n        address _collection,\\n        address _currency,\\n        address _vault,\\n        uint256 _loanId\\n    ) internal view returns (LoanDetail memory) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        BorrowData storage borrowData = s._borrowData[_collection][_currency][\\n            _vault\\n        ];\\n        Loan storage loan = borrowData.loans[_loanId];\\n        LoanDetail memory loanDetail;\\n        loanDetail.principal = loan.principal;\\n        loanDetail.interest = loan.interest;\\n        loanDetail.term = loan.term;\\n        loanDetail.epoch = loan.epoch;\\n        loanDetail.nper = loan.nper;\\n        loanDetail.pmt = loan.pmt;\\n        loanDetail.apr = loan.apr;\\n        loanDetail.borrowAt = loan.borrowAt;\\n        loanDetail.nextPaymentDue = loan.nextPaymentDue;\\n        loanDetail.totalInterestPaid = loan.totalInterestPaid;\\n        loanDetail.totalPrincipalPaid = loan.totalPrincipalPaid;\\n        loanDetail.paidTimes = loan.paidTimes;\\n        loanDetail.reserve = _currency;\\n        return loanDetail;\\n    }\\n\\n    function getRepayment(\\n        address _collection,\\n        address _currency,\\n        address _vault,\\n        uint256 _loanId\\n    ) internal view returns (RepaymentData[] memory) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        BorrowData storage borrowData = s._borrowData[_collection][_currency][\\n            _vault\\n        ];\\n        Loan storage loan = borrowData.loans[_loanId];\\n        return loan.repayments;\\n    }\\n\\n    function getLoanList(\\n        address _collection,\\n        address _currency,\\n        address _vault\\n    ) internal view returns (uint40, uint40) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        BorrowData storage borrowData = s._borrowData[_collection][_currency][\\n            _vault\\n        ];\\n        return (borrowData.paidLoanNumber, borrowData.nextLoanNumber);\\n    }\\n\\n    function getPMT(\\n        address _collection,\\n        address _currency,\\n        address _vault,\\n        uint256 _loan\\n    ) internal view returns (uint256, uint256) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        Loan storage loan = s._borrowData[_collection][_currency][_vault].loans[\\n            _loan\\n        ];\\n        return (loan.pmt.principal, loan.pmt.interest);\\n    }\\n}\\n\",\"keccak256\":\"0xea4d7ba20832ee0c8cfe02dafcfd28b11dd91d7595f59dfc86b798f1e79073e0\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {ReserveData, ReserveConfigurationMap, AppStorage, LibAppStorage} from \\\"./LibAppStorage.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Voyage\\n * @notice Implements the bitmap logic to handle the reserve configuration, inspired by Aave\\n **/\\nlibrary LibReserveConfiguration {\\n    uint256 constant internal LIQUIDATION_BONUS_MASK =  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 constant internal DECIMAL_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFF; // prettier-ignore\\n    uint256 constant internal ACTIVE_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFF; // prettier-ignore\\n    uint256 constant internal FROZEN_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFF; // prettier-ignore\\n    uint256 constant internal BORROWING_ENABLE_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFF; // prettier-ignore\\n    uint256 constant internal INCOME_RATIO_MASK =       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant internal LOAN_INTERVAL_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant internal LOAN_TERM_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant internal GRACE_PERIOD_MASK =       0xFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n    uint256 internal constant DECIMAL_MASK_BIT_POSITION = 16;\\n    uint256 internal constant ACTIVE_MASK_BIT_POSITION = 24;\\n    uint256 internal constant FROZEN_MASK_BIT_POSITION = 25;\\n    uint256 internal constant BORROWING_ENABLE_MASK_POSITION = 26;\\n    /// @dev bit 27 reserved\\n    uint256 internal constant INCOME_RATIO_MASK_BIT_POSITION = 116;\\n    uint256 internal constant LOAN_INTERVAL_MASK_BIT_POSITION = 132;\\n    uint256 internal constant LOAN_TERM_MASK_BIT_POSITION = 140;\\n    uint256 internal constant GRACE_PERIOD_MASK_BIT_POSITION = 156;\\n\\n    uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535; // percentage\\n    uint256 internal constant MAX_VALID_DECIMALS = 255;\\n    uint256 internal constant MAX_VALID_INCOME_RATIO = 10000; // percentage, max 100%/10000 bps\\n    uint256 internal constant MAX_VALID_LOAN_INTERVAL = 255; // days\\n    uint256 internal constant MAX_VALID_LOAN_TERM = 65535; // days\\n    uint256 internal constant MAX_VALID_GRACE_PERIOD = 255; // days\\n\\n    error InvalidLiquidationBonus();\\n    error InvalidDecimals();\\n    error InvalidIncomeRatio();\\n    error InvalidLoanInterval();\\n    error InvalidLoanTerm();\\n    error InvalidGracePeriod();\\n\\n    event LiquidationConfigurationUpdated(\\n        address indexed _asset,\\n        uint256 _liquidationBonus\\n    );\\n\\n    /* --------------------------- receiver functions --------------------------- */\\n\\n    /**\\n     * Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flags representing active, frozen, borrowing enabled\\n     **/\\n    function getFlags(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_ENABLE_MASK) != 0\\n        );\\n    }\\n\\n    function setLiquidationBonus(\\n        ReserveConfigurationMap memory self,\\n        uint256 liquidationBonus\\n    ) internal pure {\\n        if (liquidationBonus > MAX_VALID_LIQUIDATION_BONUS) {\\n            revert InvalidLiquidationBonus();\\n        }\\n        self.data = (self.data & LIQUIDATION_BONUS_MASK) | liquidationBonus;\\n    }\\n\\n    function getLiquidationBonus(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return self.data & ~LIQUIDATION_BONUS_MASK;\\n    }\\n\\n    function setDecimals(ReserveConfigurationMap memory self, uint256 _decimals)\\n        internal\\n        pure\\n    {\\n        if (_decimals > MAX_VALID_DECIMALS) {\\n            revert InvalidDecimals();\\n        }\\n        self.data =\\n            (self.data & DECIMAL_MASK) |\\n            (_decimals << DECIMAL_MASK_BIT_POSITION);\\n    }\\n\\n    function getDecimals(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (self.data & ~DECIMAL_MASK) >> DECIMAL_MASK_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     **/\\n    function setActive(ReserveConfigurationMap memory self, bool active)\\n        internal\\n        pure\\n    {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << ACTIVE_MASK_BIT_POSITION);\\n    }\\n\\n    function getActive(ReserveConfigurationMap storage self)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n\\n    function setIncomeRatio(ReserveConfigurationMap memory self, uint256 ratio)\\n        internal\\n        pure\\n    {\\n        if (ratio > MAX_VALID_INCOME_RATIO) {\\n            revert InvalidIncomeRatio();\\n        }\\n\\n        self.data =\\n            (self.data & INCOME_RATIO_MASK) |\\n            (ratio << INCOME_RATIO_MASK_BIT_POSITION);\\n    }\\n\\n    function getIncomeRatio(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            (self.data & ~INCOME_RATIO_MASK) >> INCOME_RATIO_MASK_BIT_POSITION;\\n    }\\n\\n    function setLoanInterval(\\n        ReserveConfigurationMap memory self,\\n        uint256 interval\\n    ) internal pure {\\n        if (interval > MAX_VALID_LOAN_INTERVAL) {\\n            revert InvalidLoanInterval();\\n        }\\n        self.data =\\n            (self.data & LOAN_INTERVAL_MASK) |\\n            (interval << LOAN_INTERVAL_MASK_BIT_POSITION);\\n    }\\n\\n    function setLoanTerm(ReserveConfigurationMap memory self, uint256 term)\\n        internal\\n        pure\\n    {\\n        if (term > MAX_VALID_LOAN_TERM) {\\n            revert InvalidLoanTerm();\\n        }\\n        self.data =\\n            (self.data & LOAN_TERM_MASK) |\\n            (term << LOAN_TERM_MASK_BIT_POSITION);\\n    }\\n\\n    function setGracePeriod(\\n        ReserveConfigurationMap memory self,\\n        uint256 numDays\\n    ) internal pure {\\n        if (numDays > MAX_VALID_GRACE_PERIOD) {\\n            revert InvalidGracePeriod();\\n        }\\n        self.data =\\n            (self.data & GRACE_PERIOD_MASK) |\\n            (numDays << GRACE_PERIOD_MASK_BIT_POSITION);\\n    }\\n\\n    function getBorrowParams(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint40, uint40)\\n    {\\n        uint256 localData = self.data;\\n        return (\\n            uint40(\\n                (localData & ~LOAN_INTERVAL_MASK) >>\\n                    LOAN_INTERVAL_MASK_BIT_POSITION\\n            ),\\n            uint40((localData & ~LOAN_TERM_MASK) >> LOAN_TERM_MASK_BIT_POSITION)\\n        );\\n    }\\n\\n    function getLiquidationParams(ReserveConfigurationMap memory self)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 localData = self.data;\\n        return (\\n            (localData & ~LIQUIDATION_BONUS_MASK),\\n            (localData & ~GRACE_PERIOD_MASK) >> GRACE_PERIOD_MASK_BIT_POSITION\\n        );\\n    }\\n\\n    function getConfiguration(address _collection)\\n        internal\\n        view\\n        returns (ReserveConfigurationMap memory)\\n    {\\n        AppStorage storage s = LibAppStorage.ds();\\n        return s._reserveData[_collection].configuration;\\n    }\\n\\n    function saveConfiguration(\\n        address _collection,\\n        ReserveConfigurationMap memory _conf\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.ds();\\n        s._reserveData[_collection].configuration = _conf;\\n    }\\n}\\n\",\"keccak256\":\"0x4cdfc88656b96cd169838e9e2c6fd1d3f53f399eee28397b9a5f76401ff3f450\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibSecurity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {LibAppStorage, AppStorage, Authorisation} from \\\"./LibAppStorage.sol\\\";\\n\\nlibrary LibSecurity {\\n    function isAuthorised(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        return\\n            auth.rbac.canCall(src, dst, selector) ||\\n            auth.acl.canCall(src, dst, selector);\\n    }\\n\\n    function isAuthorisedInbound(\\n        Authorisation storage auth,\\n        address src,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        // s.security.acl/rbac is an instance ds-roles and implements DSAuthority interface\\n        return\\n            auth.rbac.canCall(src, address(this), selector) ||\\n            auth.acl.canCall(src, address(this), selector);\\n    }\\n\\n    function isAuthorisedOutbound(\\n        Authorisation storage auth,\\n        address dst,\\n        bytes4 selector\\n    ) internal view returns (bool) {\\n        // s.security.acl/rbac is an instance ds-guard and implements DSAuthority interface\\n        return\\n            auth.rbac.canCall(msg.sender, dst, selector) ||\\n            auth.acl.canCall(msg.sender, dst, selector);\\n    }\\n\\n    // role can be a enum, but cast to uint8 before calling grantRole\\n    function grantRole(\\n        Authorisation storage auth,\\n        address user,\\n        uint8 role,\\n        bool enabled\\n    ) internal {\\n        // grant role\\n        auth.rbac.setUserRole(user, role, enabled);\\n    }\\n\\n    function grantRolePermission(\\n        Authorisation storage auth,\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) internal {\\n        // give a role a permission\\n        auth.rbac.setRoleCapability(role, target, sig, true);\\n    }\\n\\n    function revokeRolePermission(\\n        Authorisation storage auth,\\n        uint8 role,\\n        address target,\\n        bytes4 sig\\n    ) internal {\\n        // revoke a role permission\\n        auth.rbac.setRoleCapability(role, target, sig, false);\\n    }\\n\\n    function grantPermissions(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4[] memory sig\\n    ) internal {\\n        for (uint256 i = 0; i < sig.length; i++) {\\n            grantPermission(auth, src, dst, sig[i]);\\n        }\\n    }\\n\\n    function grantPermission(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) internal {\\n        // allow src to call dst.sig\\n        auth.acl.permit(src, dst, sig);\\n    }\\n\\n    function revokePermission(\\n        Authorisation storage auth,\\n        address src,\\n        address dst,\\n        bytes4 sig\\n    ) internal {\\n        auth.acl.forbid(src, dst, sig);\\n    }\\n\\n    function getTrustedForwarder() internal view returns (address) {\\n        return LibAppStorage.ds().trustedForwarder;\\n    }\\n\\n    function setTrustedForwarder(address _forwarder) internal {\\n        LibAppStorage.ds().trustedForwarder = _forwarder;\\n    }\\n\\n    function isTrustedForwarder(address _forwarder)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return LibAppStorage.ds().trustedForwarder == _forwarder;\\n    }\\n}\\n\",\"keccak256\":\"0xe90107e670b8f4543de72033a19b46beadc761462f83e4d4331edbe654dffb0d\",\"license\":\"GPL-3.0\"},\"contracts/voyage/libraries/LibVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {BeaconProxy} from \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport {UpgradeableBeacon} from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {LibAppStorage, AppStorage, BorrowData, NFTInfo, DiamondFacet, ReserveConfigurationMap} from \\\"./LibAppStorage.sol\\\";\\nimport {LibReserveConfiguration} from \\\"./LibReserveConfiguration.sol\\\";\\nimport {WadRayMath} from \\\"../../shared/libraries/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../../shared/libraries/PercentageMath.sol\\\";\\nimport {LogarithmMath} from \\\"../../shared/libraries/LogarithmMath.sol\\\";\\n\\nlibrary LibVault {\\n    using WadRayMath for uint256;\\n    using PercentageMath for uint256;\\n    using LibReserveConfiguration for ReserveConfigurationMap;\\n\\n    function recordVault(address _owner, address _vault)\\n        internal\\n        returns (uint256)\\n    {\\n        AppStorage storage s = LibAppStorage.ds();\\n        require(s.vaultMap[_owner] == address(0), \\\"one vault per owner\\\");\\n        s.vaults.push(_vault);\\n        LibAppStorage.ds().vaultMap[_owner] = _vault;\\n        return (s.vaults.length);\\n    }\\n\\n    function setVaultImpl(address _impl) internal {\\n        LibAppStorage.ds().vaultBeacon.upgradeTo(_impl);\\n    }\\n\\n    /* ----------------------------- view functions ----------------------------- */\\n    function vaultBeacon() internal view returns (address) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        return address(s.vaultBeacon);\\n    }\\n\\n    function getVaultImpl() internal view returns (address) {\\n        return LibAppStorage.ds().vaultBeacon.implementation();\\n    }\\n\\n    function subVaultBeacon() internal view returns (address) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        return address(s.subVaultBeacon);\\n    }\\n\\n    function getVaultAddress(address _owner) internal view returns (address) {\\n        return LibAppStorage.ds().vaultMap[_owner];\\n    }\\n\\n    function getVaultDebt(\\n        address _collection,\\n        address _currency,\\n        address _vault\\n    ) internal view returns (uint256, uint256) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        BorrowData storage borrowData = s._borrowData[_collection][_currency][\\n            _vault\\n        ];\\n        return (borrowData.totalPrincipal, borrowData.totalInterest);\\n    }\\n\\n    function getDiamondFacets() internal view returns (DiamondFacet memory) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        return s.diamondFacet;\\n    }\\n\\n    /**\\n     * @dev Get credit limit for a specific reserve\\n     * @param _vault vault address\\n     * @return _collection collection address\\n     **/\\n    function getCreditLimit(\\n        address _vault,\\n        address _collection,\\n        address _currency,\\n        uint256 _fv\\n    ) internal view returns (uint256) {\\n        AppStorage storage s = LibAppStorage.ds();\\n        uint256 rep = s._borrowState[_collection][_currency].repaidTimes[\\n            _vault\\n        ];\\n        uint256 scaledRep = (rep + 1) * 1e18;\\n        uint256 multiplier = LogarithmMath.log2(scaledRep) + 1;\\n        return _fv * multiplier;\\n    }\\n}\\n\",\"keccak256\":\"0x2816aa1a76b0afdb0fb41830be2d1f58c0739184f6a46102b97ffa72e23ffa82\",\"license\":\"GPL-3.0\"},\"contracts/voyage/tokenization/JuniorDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {VToken} from \\\"./VToken.sol\\\";\\n\\ncontract JuniorDepositToken is VToken {\\n    function totalAssets() public view override returns (uint256) {\\n        return asset.balanceOf(address(this)) - totalUnbonding;\\n    }\\n}\\n\",\"keccak256\":\"0xb3a06c39acb2e5808bbbafd27722db74f6ed7e6fbf64e93a09b89dfc2bf78ac5\",\"license\":\"GPL-3.0\"},\"contracts/voyage/tokenization/SeniorDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {LoanFacet} from \\\"../facets/LoanFacet.sol\\\";\\nimport {VToken} from \\\"./VToken.sol\\\";\\n\\ncontract SeniorDepositToken is VToken {\\n    function totalAssets() public view override returns (uint256) {\\n        uint256 underlyingBalance = asset.balanceOf(address(this));\\n        uint256 outstandingPrincipal = LoanFacet(voyage).principalBalance(\\n            address(asset)\\n        );\\n        return underlyingBalance + outstandingPrincipal - totalUnbonding;\\n    }\\n}\\n\",\"keccak256\":\"0x9f898e809a606065cea581cad21c1f344349a22dd2ac156c884c0a083b0a7fdb\",\"license\":\"GPL-3.0\"},\"contracts/voyage/tokenization/VToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC4626, IERC4626} from \\\"../../shared/tokenization/ERC4626.sol\\\";\\nimport {IVToken} from \\\"../interfaces/IVToken.sol\\\";\\n\\nstruct Unbonding {\\n    uint256 shares;\\n    uint256 maxUnderlying;\\n}\\n\\nabstract contract VToken is Initializable, ERC4626, IVToken {\\n    using SafeERC20 for IERC20Metadata;\\n\\n    address internal voyage;\\n    mapping(address => Unbonding) public unbondings;\\n\\n    uint256 public totalUnbonding;\\n\\n    uint256 public cooldown = 7 days;\\n\\n    event Claim(address receiver, uint256 amount, uint256 shares);\\n\\n    modifier onlyAdmin() {\\n        require(_msgSender() == voyage, \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    function initialize(address _voyage, address _asset) public initializer {\\n        IERC20Metadata underlying = IERC20Metadata(_asset);\\n        voyage = _voyage;\\n        __ERC20_init(underlying.name(), underlying.symbol());\\n        __ERC20Permit_init(underlying.name());\\n        __ERC4626_init(underlying);\\n    }\\n\\n    function withdraw(\\n        uint256 _amount,\\n        address _receiver,\\n        address _owner\\n    ) public override(ERC4626, IERC4626) returns (uint256 shares) {\\n        shares = previewWithdraw(_amount); // No need to check for rounding error, previewWithdraw rounds up.\\n        if (msg.sender != _owner) {\\n            _spendAllowance(_owner, msg.sender, shares);\\n        }\\n\\n        beforeWithdraw(_amount, shares);\\n\\n        _burn(_owner, shares);\\n        pushWithdraw(_owner, shares);\\n\\n        emit Withdraw(msg.sender, _receiver, _owner, _amount, shares);\\n    }\\n\\n    function transferUnderlyingTo(address _target, uint256 _amount)\\n        public\\n        onlyAdmin\\n    {\\n        asset.safeTransfer(_target, _amount);\\n    }\\n\\n    function totalUnbondingAsset() public view returns (uint256) {\\n        return convertToAssets(totalUnbonding);\\n    }\\n\\n    function pushWithdraw(address _user, uint256 _shares) internal {\\n        unbondings[_user].shares += _shares;\\n        unbondings[_user].maxUnderlying += convertToAssets(_shares);\\n        totalUnbonding += _shares;\\n    }\\n\\n    function resetUnbondingPosition(address _user) internal {\\n        unbondings[_user].shares = 0;\\n        unbondings[_user].maxUnderlying = 0;\\n    }\\n\\n    function reduceUnbondingPosition(uint256 _shares, uint256 _asset) internal {\\n        if (_shares > unbondings[msg.sender].shares) {\\n            unbondings[msg.sender].shares == 0;\\n            unbondings[msg.sender].maxUnderlying = 0;\\n            return;\\n        }\\n        unbondings[msg.sender].maxUnderlying -= _asset;\\n        unbondings[msg.sender].shares -= _shares;\\n    }\\n\\n    function claim() external {\\n        uint256 maxClaimable = unbondings[msg.sender].maxUnderlying;\\n        uint256 availableLiquidity = asset.balanceOf(address(this));\\n        uint256 transferredShares;\\n        uint256 transferredAsset;\\n        if (availableLiquidity > maxClaimable) {\\n            transferredAsset = maxClaimable;\\n            transferredShares = unbondings[msg.sender].shares;\\n            resetUnbondingPosition(msg.sender);\\n        } else {\\n            transferredAsset = availableLiquidity;\\n            uint256 shares = convertToShares(availableLiquidity);\\n            reduceUnbondingPosition(shares, transferredAsset);\\n            transferredShares = shares;\\n        }\\n        totalUnbonding -= transferredShares;\\n        asset.safeTransfer(msg.sender, transferredAsset);\\n        emit Claim(msg.sender, transferredAsset, transferredShares);\\n    }\\n\\n    function unbonding(address _user) external view returns (uint256) {\\n        return convertToAssets(unbondings[_user].shares);\\n    }\\n\\n    function maximumClaimable(address _user) external view returns (uint256) {\\n        uint256 underlyingUnbonding = unbondings[_user].maxUnderlying;\\n        uint256 underlyingNow = convertToAssets(unbondings[_user].shares);\\n        return\\n            underlyingUnbonding < underlyingNow\\n                ? underlyingUnbonding\\n                : underlyingNow;\\n    }\\n}\\n\\n/* --------------------------------- errors -------------------------------- */\\nerror InsufficientLiquidity();\\nerror InvalidIndex();\\nerror CollDownError();\\n\",\"keccak256\":\"0xebad7cdc403ad42a6e299512432d49ef2ade27e56b5900dca8e57739b78212fb\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055613335806100256000396000f3fe60806040523480156200001157600080fd5b5060043610620000f15760003560e01c80638bd256771162000097578063c800ac38116200006e578063c800ac3814620001fa578063ca545abf1462000211578063d0e2c9a11462000240578063e8484a0f146200025757600080fd5b80638bd256771462000195578063b36484d814620001ac578063b75d6f3414620001e357600080fd5b80633e72a45411620000cc5780633e72a45414620001505780634f71c59714620001675780638b46b812146200017e57600080fd5b8063044641eb14620000f657806308d0c6db146200010f57806321b3aad31462000126575b600080fd5b6200010d6200010736600462001ff7565b6200026e565b005b6200010d620001203660046200203a565b6200064e565b6200013d6200013736600462002078565b62000760565b6040519081526020015b60405180910390f35b6200010d62000161366004620020c6565b62000777565b6200013d6200017836600462002078565b62000813565b6200010d6200018f366004620020c6565b62000822565b6200010d620001a6366004620020ed565b620008d9565b620001c3620001bd366004620020c6565b62000b26565b604080519315158452911515602084015215159082015260600162000147565b6200010d620001f4366004620020c6565b62000bb4565b6200010d6200020b36600462002152565b62000c50565b6200022862000222366004620020c6565b62000d0f565b60408051921515835290151560208301520162000147565b6200013d620002513660046200203a565b62000d8b565b6200010d6200026836600462001ff7565b6200103c565b60026000541415620002c75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260008181556001600160a01b0385811682527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519660209081526040808420815161018081018352815461016082019081528152600180830154948201949094529581015491860191909152600381015483166060860152600481015483166080860152600581015480841660a087015264ffffffffff600160a01b808304821660c0890152600160c81b9092041660e08701526006820154841661010087015260079091015492831661012086015260ff92049190911615156101408401528490811115620003bb57620003bb6200218e565b15620003cc578160a00151620003d2565b81608001515b6040517fce96cb770000000000000000000000000000000000000000000000000000000081523360048201529091506000906001600160a01b0383169063ce96cb779060240160206040518083038186803b1580156200043157600080fd5b505afa15801562000446573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200046c9190620021a4565b9050836000198114156200047d5750805b81811115620004cf5760405162461bcd60e51b815260206004820152601160248201527f496e76616c69645769746864726177616c0000000000000000000000000000006044820152606401620002be565b6001600160a01b0387811660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519a60209081526040808320610100890151909416835292905290812060018101548154919291620005319190620021d4565b60028301546040517fb460af940000000000000000000000000000000000000000000000000000000081526004810186905233602482018190526044820152919250906001600160a01b0387169063b460af9490606401602060405180830381600087803b158015620005a357600080fd5b505af1158015620005b8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005de9190620021a4565b50336001600160a01b03168761010001516001600160a01b03168b6001600160a01b03167fa8a123ea5cae0711547d46a3a035a38367ccf85323682b495033ff8157d2a43c8c8860405162000635929190620021ef565b60405180910390a4505060016000555050505050505050565b62000658620013b2565b620006a65760405162461bcd60e51b815260206004820152601660248201527f63616c6c206973206e6f7420617574686f7269736564000000000000000000006044820152606401620002be565b6001600160a01b03821660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51966020526040812060078101546040517f3659cfe60000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152929350911690633659cfe690602401600060405180830381600087803b1580156200074257600080fd5b505af115801562000757573d6000803e3d6000fd5b50505050505050565b60006200076f84848462001413565b949350505050565b62000781620013b2565b620007cf5760405162461bcd60e51b815260206004820152601660248201527f63616c6c206973206e6f7420617574686f7269736564000000000000000000006044820152606401620002be565b620007dc816000620015cb565b6040516001600160a01b038216907f16558600916d62e970a75f9036efe19866e5adb68839668f0d8b0c54f062bda790600090a250565b60006200076f848484620016a9565b6200082c620013b2565b6200087a5760405162461bcd60e51b815260206004820152601660248201527f63616c6c206973206e6f7420617574686f7269736564000000000000000000006044820152606401620002be565b7fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519880546001600160a01b03831662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff90911617905550565b50565b620008e3620013b2565b620009315760405162461bcd60e51b815260206004820152601660248201527f63616c6c206973206e6f7420617574686f7269736564000000000000000000006044820152606401620002be565b6001600160a01b0384163b15806200095157506001600160a01b0383163b155b1562000989576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03841660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c5196602052604090206007810154600160a01b900460ff161562000a07576040517fcfebf28e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62000a158185858562001808565b7fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c5198805461ffff90811660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519760205260408120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a161790558254909116919062000aa3836200221c565b825461ffff9182166101009390930a92830291909202199091161790555060048101546005820154604080516001600160a01b039384168152918316602083015285831690820152858216918716907f3a0ca721fc364424566385a1aa271ed508cc2c0949c2272575fb3013a163a45f9060600160405180910390a35050505050565b600080600062000ba762000b878560408051602080820183526000918290526001600160a01b039390931681527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51968352819020815192830190915254815290565b516301000000811615159163020000008216151591630400000016151590565b9250925092509193909250565b62000bbe620013b2565b62000c0c5760405162461bcd60e51b815260206004820152601660248201527f63616c6c206973206e6f7420617574686f7269736564000000000000000000006044820152606401620002be565b62000c19816001620015cb565b6040516001600160a01b038216907f35b80cd8ea3440e9a8454f116fa658b858da1b64c86c48451f4559cefcdfb56c90600090a250565b62000c5a620013b2565b62000ca85760405162461bcd60e51b815260206004820152601660248201527f63616c6c206973206e6f7420617574686f7269736564000000000000000000006044820152606401620002be565b7fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51a9805464ffffffffff8316600160a01b027fffffffffffffff000000000000000000000000000000000000000000000000009091166001600160a01b038516171790555050565b6001600160a01b03811660008181527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c5196602081815260408084206007810154825180850184528690529585529282528051918201905290548152600160a01b90920460ff169162000d809062000b87565b509294909350915050565b6001600160a01b03811660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519660205260408120819060408051610180810182528254610160820190815281526001830154602082015260028301549181019190915260038201546001600160a01b039081166060830152600483015481166080830152600583015480821660a084015264ffffffffff600160a01b808304821660c0860152600160c81b9092041660e08401526006840154821661010084015260079093015490811661012083015260ff9290049190911615156101408201529050600062000e9b7fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519390565b6001600160a01b03808716600090815260079290920160209081526040808420928816845291905281206001810154815491935062000eda91620021d4565b905060008360a001516001600160a01b031663350fd0be6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f1c57600080fd5b505afa15801562000f31573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f579190620021a4565b60a08501516040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291925060009183918916906370a082319060240160206040518083038186803b15801562000fbf57600080fd5b505afa15801562000fd4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ffa9190620021a4565b62001006919062002241565b905082156200102d57620010276200101f8483620021d4565b849062001c6b565b62001030565b60005b98975050505050505050565b60026000541415620010915760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620002be565b600260008181556001600160a01b0385811682527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519660209081526040808420815161018081018352815461016082019081528152600180830154948201949094529581015491860191909152600381015483166060860152600481015483166080860152600581015480841660a087015264ffffffffff600160a01b808304821660c0890152600160c81b9092041660e08701526006820154841661010087015260079091015492831661012086015260ff9204919091161515610140840152819085908111156200118757620011876200218e565b1462001198578160a001516200119e565b81608001515b9050306001600160a01b031663d26aaa3e826001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015620011e957600080fd5b505afa158015620011fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200122491906200225b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260248101869052336044820152306064820152608401600060405180830381600087803b1580156200129157600080fd5b505af1158015620012a6573d6000803e3d6000fd5b50506040517f6e553f65000000000000000000000000000000000000000000000000000000008152600481018690523360248201526001600160a01b0384169250636e553f659150604401602060405180830381600087803b1580156200130c57600080fd5b505af115801562001321573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013479190620021a4565b50336001600160a01b03168261010001516001600160a01b0316866001600160a01b03167fc552204986f9c40c2e06fbb236c412914b65880d2047ca21ff2b3b5a28d5357387876040516200139e929190620021ef565b60405180910390a450506001600055505050565b60006200140e7fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51a5620013e362001cae565b6000357fffffffff000000000000000000000000000000000000000000000000000000001662001d21565b905090565b6001600160a01b03831660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51966020526040812081906040805161018081018252825461016082019081528152600180840154602083015260028401549282019290925260038301546001600160a01b039081166060830152600484015481166080830152600584015480821660a084015264ffffffffff600160a01b808304821660c0860152600160c81b9092041660e08401526006850154821661010084015260079094015490811661012083015260ff93900492909216151561014083015290915060009084908111156200151257620015126200218e565b62001523575060808101516200152a565b5060a08101515b6040517fced4cd2e0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015282169063ced4cd2e906024015b60206040518083038186803b1580156200158657600080fd5b505afa1580156200159b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015c19190620021a4565b9695505050505050565b6001600160a01b0382163b6200160d576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051602080820183526000918290526001600160a01b03851682527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519681528282208351918201909352915482525062001669818362001eba565b6001600160a01b03831660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51966020526040902081519055505050565b6001600160a01b03831660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51966020526040812081906040805161018081018252825461016082019081528152600180840154602083015260028401549282019290925260038301546001600160a01b039081166060830152600484015481166080830152600584015480821660a084015264ffffffffff600160a01b808304821660c0860152600160c81b9092041660e08401526006850154821661010084015260079094015490811661012083015260ff9390049290921615156101408301529091506000908490811115620017a857620017a86200218e565b620017b957506080810151620017c0565b5060a08101515b6040517fce96cb770000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015282169063ce96cb77906024016200156d565b60058401546001600160a01b03161580156200182f575060048401546001600160a01b0316155b6200187d5760405162461bcd60e51b815260206004820152601f60248201527f6465706f73697420746f6b656e7320616c7265616479206465706c6f796564006044820152606401620002be565b60408051602080820183528654825282517f313ce56700000000000000000000000000000000000000000000000000000000815292517fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51939387939262001951926001600160a01b0386169263313ce567926004808301939192829003018186803b1580156200190b57600080fd5b505afa15801562001920573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200194691906200227b565b829060ff1662001f01565b80518755604080513060248201526001600160a01b038881166044808401919091528351808403909101815260649092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f485cc9550000000000000000000000000000000000000000000000000000000017905260018501549091620019e191168262001f6c565b60058901805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283169081179091556040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600481019190915260001960248201529084169063095ea7b390604401602060405180830381600087803b15801562001a6d57600080fd5b505af115801562001a82573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001aa89190620022a0565b50600284015462001ac3906001600160a01b03168262001f6c565b6004898101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039384169081179091556040517f095ea7b30000000000000000000000000000000000000000000000000000000081529182015260001960248201529084169063095ea7b390604401602060405180830381600087803b15801562001b4c57600080fd5b505af115801562001b61573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b879190620022a0565b506003880180546001600160a01b03881673ffffffffffffffffffffffffffffffffffffffff199091161790556007880180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055604051859062001bf49062001fb0565b6001600160a01b039091168152602001604051809103906000f08015801562001c21573d6000803e3d6000fd5b5060078901805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039384161790915560069099018054909916971696909617909655505050505050565b60008062001c7b600284620022c4565b90508262001c966b033b2e3c9fd0803ce800000086620022e7565b62001ca29083620021d4565b6200076f9190620022c4565b60006014361080159062001ceb57507fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51a7546001600160a01b031633145b1562001d1c57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b82546040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301523060248301527fffffffff0000000000000000000000000000000000000000000000000000000084166044830152600092169063b70096139060640160206040518083038186803b15801562001dae57600080fd5b505afa15801562001dc3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001de99190620022a0565b806200076f575060018401546040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000851660448301529091169063b70096139060640160206040518083038186803b15801562001e7f57600080fd5b505afa15801562001e94573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200076f9190620022a0565b60188162001eca57600062001ecd565b60015b83517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffff1660ff9190911690911b1790915250565b60ff81111562001f3d576040517fd25598a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff1660109190911b179052565b6000828260405162001f7e9062001fbe565b62001f8b92919062002309565b604051809103906000f08015801562001fa8573d6000803e3d6000fd5b509392505050565b610545806200239183390190565b610a2a80620028d683390190565b6001600160a01b0381168114620008d657600080fd5b80356002811062001ff257600080fd5b919050565b6000806000606084860312156200200d57600080fd5b83356200201a8162001fcc565b92506200202a6020850162001fe2565b9150604084013590509250925092565b600080604083850312156200204e57600080fd5b82356200205b8162001fcc565b915060208301356200206d8162001fcc565b809150509250929050565b6000806000606084860312156200208e57600080fd5b83356200209b8162001fcc565b92506020840135620020ad8162001fcc565b9150620020bd6040850162001fe2565b90509250925092565b600060208284031215620020d957600080fd5b8135620020e68162001fcc565b9392505050565b600080600080608085870312156200210457600080fd5b8435620021118162001fcc565b93506020850135620021238162001fcc565b92506040850135620021358162001fcc565b91506060850135620021478162001fcc565b939692955090935050565b600080604083850312156200216657600080fd5b8235620021738162001fcc565b9150602083013564ffffffffff811681146200206d57600080fd5b634e487b7160e01b600052602160045260246000fd5b600060208284031215620021b757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115620021ea57620021ea620021be565b500190565b60408101600284106200221257634e487b7160e01b600052602160045260246000fd5b9281526020015290565b600061ffff80831681811415620022375762002237620021be565b6001019392505050565b600082821015620022565762002256620021be565b500390565b6000602082840312156200226e57600080fd5b8151620020e68162001fcc565b6000602082840312156200228e57600080fd5b815160ff81168114620020e657600080fd5b600060208284031215620022b357600080fd5b81518015158114620020e657600080fd5b600082620022e257634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615620023045762002304620021be565b500290565b6001600160a01b038316815260006020604081840152835180604085015260005b8181101562002348578581018301518582016060015282016200232a565b818111156200235b576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160600194935050505056fe608060405234801561001057600080fd5b5060405161054538038061054583398101604081905261002f91610151565b61003833610047565b61004181610097565b50610181565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100aa8161014260201b6101c71760201c565b6101205760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000606482015260840160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03163b151590565b60006020828403121561016357600080fd5b81516001600160a01b038116811461017a57600080fd5b9392505050565b6103b5806101906000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063715018a611610050578063715018a6146100aa5780638da5cb5b146100b2578063f2fde38b146100c357600080fd5b80633659cfe61461006c5780635c60da1b14610081575b600080fd5b61007f61007a36600461034f565b6100d6565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61007f61011e565b6000546001600160a01b031661008e565b61007f6100d136600461034f565b610132565b6100de6101d6565b6100e781610230565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6101266101d6565b61013060006102e7565b565b61013a6101d6565b6001600160a01b0381166101bb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6101c4816102e7565b50565b6001600160a01b03163b151590565b6000546001600160a01b031633146101305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101b2565b6001600160a01b0381163b6102ad5760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e74726163740000000000000000000000000060648201526084016101b2565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561036157600080fd5b81356001600160a01b038116811461037857600080fd5b939250505056fea264697066735822122003faeb45c60cd8360d42695011766d23e632697ebba2f40c230eb0bd2e6784b064736f6c63430008090033608060405260405162000a2a38038062000a2a8339810160408190526200002691620004aa565b62000034828260006200003c565b5050620005e9565b620000478362000121565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a2600082511180620000895750805b156200011c576200011a836001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620000cd57600080fd5b505afa158015620000e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000108919062000578565b83620002e360201b620000291760201c565b505b505050565b62000137816200031260201b620000551760201c565b620001975760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b62000221816001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620001d557600080fd5b505afa158015620001ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000210919062000578565b6200031260201b620000551760201c565b620002885760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b60648201526084016200018e565b80620002c27fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6200032160201b620000711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606200030b838360405180606001604052806027815260200162000a036027913962000324565b9392505050565b6001600160a01b03163b151590565b90565b60606001600160a01b0384163b6200038e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200018e565b600080856001600160a01b031685604051620003ab919062000596565b600060405180830381855af49150503d8060008114620003e8576040519150601f19603f3d011682016040523d82523d6000602084013e620003ed565b606091505b509092509050620004008282866200040a565b9695505050505050565b606083156200041b5750816200030b565b8251156200042c5782518084602001fd5b8160405162461bcd60e51b81526004016200018e9190620005b4565b80516001600160a01b03811681146200046057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004985781810151838201526020016200047e565b838111156200011a5750506000910152565b60008060408385031215620004be57600080fd5b620004c98362000448565b60208401519092506001600160401b0380821115620004e757600080fd5b818501915085601f830112620004fc57600080fd5b81518181111562000511576200051162000465565b604051601f8201601f19908116603f011681019083821181831017156200053c576200053c62000465565b816040528281528860208487010111156200055657600080fd5b620005698360208301602088016200047b565b80955050505050509250929050565b6000602082840312156200058b57600080fd5b6200030b8262000448565b60008251620005aa8184602087016200047b565b9190910192915050565b6020815260008251806020840152620005d58160408501602087016200047b565b601f01601f19169190910160400192915050565b61040a80620005f96000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b610136565b565b606061004e83836040518060600160405280602781526020016103ae6027913961015a565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100f957600080fd5b505afa15801561010d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013191906102da565b905090565b3660008037600080366000845af43d6000803e808015610155573d6000f35b3d6000fd5b606073ffffffffffffffffffffffffffffffffffffffff84163b610205576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161022d9190610340565b600060405180830381855af49150503d8060008114610268576040519150601f19603f3d011682016040523d82523d6000602084013e61026d565b606091505b509150915061027d828286610287565b9695505050505050565b6060831561029657508161004e565b8251156102a65782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc919061035c565b6000602082840312156102ec57600080fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461004e57600080fd5b60005b8381101561032b578181015183820152602001610313565b8381111561033a576000848401525b50505050565b60008251610352818460208701610310565b9190910192915050565b602081526000825180602084015261037b816040850160208701610310565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220be28ef223eef64e5fa547e5d5c9cd8eabe825cdda9ccb4118360c3fe9929523b64736f6c63430008090033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aac29ddb49d6382f06bcf4eb99c1e3d9ed8093a7e7a41ff1737eafe585b2671264736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000f15760003560e01c80638bd256771162000097578063c800ac38116200006e578063c800ac3814620001fa578063ca545abf1462000211578063d0e2c9a11462000240578063e8484a0f146200025757600080fd5b80638bd256771462000195578063b36484d814620001ac578063b75d6f3414620001e357600080fd5b80633e72a45411620000cc5780633e72a45414620001505780634f71c59714620001675780638b46b812146200017e57600080fd5b8063044641eb14620000f657806308d0c6db146200010f57806321b3aad31462000126575b600080fd5b6200010d6200010736600462001ff7565b6200026e565b005b6200010d620001203660046200203a565b6200064e565b6200013d6200013736600462002078565b62000760565b6040519081526020015b60405180910390f35b6200010d62000161366004620020c6565b62000777565b6200013d6200017836600462002078565b62000813565b6200010d6200018f366004620020c6565b62000822565b6200010d620001a6366004620020ed565b620008d9565b620001c3620001bd366004620020c6565b62000b26565b604080519315158452911515602084015215159082015260600162000147565b6200010d620001f4366004620020c6565b62000bb4565b6200010d6200020b36600462002152565b62000c50565b6200022862000222366004620020c6565b62000d0f565b60408051921515835290151560208301520162000147565b6200013d620002513660046200203a565b62000d8b565b6200010d6200026836600462001ff7565b6200103c565b60026000541415620002c75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260008181556001600160a01b0385811682527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519660209081526040808420815161018081018352815461016082019081528152600180830154948201949094529581015491860191909152600381015483166060860152600481015483166080860152600581015480841660a087015264ffffffffff600160a01b808304821660c0890152600160c81b9092041660e08701526006820154841661010087015260079091015492831661012086015260ff92049190911615156101408401528490811115620003bb57620003bb6200218e565b15620003cc578160a00151620003d2565b81608001515b6040517fce96cb770000000000000000000000000000000000000000000000000000000081523360048201529091506000906001600160a01b0383169063ce96cb779060240160206040518083038186803b1580156200043157600080fd5b505afa15801562000446573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200046c9190620021a4565b9050836000198114156200047d5750805b81811115620004cf5760405162461bcd60e51b815260206004820152601160248201527f496e76616c69645769746864726177616c0000000000000000000000000000006044820152606401620002be565b6001600160a01b0387811660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519a60209081526040808320610100890151909416835292905290812060018101548154919291620005319190620021d4565b60028301546040517fb460af940000000000000000000000000000000000000000000000000000000081526004810186905233602482018190526044820152919250906001600160a01b0387169063b460af9490606401602060405180830381600087803b158015620005a357600080fd5b505af1158015620005b8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005de9190620021a4565b50336001600160a01b03168761010001516001600160a01b03168b6001600160a01b03167fa8a123ea5cae0711547d46a3a035a38367ccf85323682b495033ff8157d2a43c8c8860405162000635929190620021ef565b60405180910390a4505060016000555050505050505050565b62000658620013b2565b620006a65760405162461bcd60e51b815260206004820152601660248201527f63616c6c206973206e6f7420617574686f7269736564000000000000000000006044820152606401620002be565b6001600160a01b03821660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51966020526040812060078101546040517f3659cfe60000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152929350911690633659cfe690602401600060405180830381600087803b1580156200074257600080fd5b505af115801562000757573d6000803e3d6000fd5b50505050505050565b60006200076f84848462001413565b949350505050565b62000781620013b2565b620007cf5760405162461bcd60e51b815260206004820152601660248201527f63616c6c206973206e6f7420617574686f7269736564000000000000000000006044820152606401620002be565b620007dc816000620015cb565b6040516001600160a01b038216907f16558600916d62e970a75f9036efe19866e5adb68839668f0d8b0c54f062bda790600090a250565b60006200076f848484620016a9565b6200082c620013b2565b6200087a5760405162461bcd60e51b815260206004820152601660248201527f63616c6c206973206e6f7420617574686f7269736564000000000000000000006044820152606401620002be565b7fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519880546001600160a01b03831662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff90911617905550565b50565b620008e3620013b2565b620009315760405162461bcd60e51b815260206004820152601660248201527f63616c6c206973206e6f7420617574686f7269736564000000000000000000006044820152606401620002be565b6001600160a01b0384163b15806200095157506001600160a01b0383163b155b1562000989576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03841660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c5196602052604090206007810154600160a01b900460ff161562000a07576040517fcfebf28e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62000a158185858562001808565b7fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c5198805461ffff90811660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519760205260408120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a161790558254909116919062000aa3836200221c565b825461ffff9182166101009390930a92830291909202199091161790555060048101546005820154604080516001600160a01b039384168152918316602083015285831690820152858216918716907f3a0ca721fc364424566385a1aa271ed508cc2c0949c2272575fb3013a163a45f9060600160405180910390a35050505050565b600080600062000ba762000b878560408051602080820183526000918290526001600160a01b039390931681527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51968352819020815192830190915254815290565b516301000000811615159163020000008216151591630400000016151590565b9250925092509193909250565b62000bbe620013b2565b62000c0c5760405162461bcd60e51b815260206004820152601660248201527f63616c6c206973206e6f7420617574686f7269736564000000000000000000006044820152606401620002be565b62000c19816001620015cb565b6040516001600160a01b038216907f35b80cd8ea3440e9a8454f116fa658b858da1b64c86c48451f4559cefcdfb56c90600090a250565b62000c5a620013b2565b62000ca85760405162461bcd60e51b815260206004820152601660248201527f63616c6c206973206e6f7420617574686f7269736564000000000000000000006044820152606401620002be565b7fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51a9805464ffffffffff8316600160a01b027fffffffffffffff000000000000000000000000000000000000000000000000009091166001600160a01b038516171790555050565b6001600160a01b03811660008181527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c5196602081815260408084206007810154825180850184528690529585529282528051918201905290548152600160a01b90920460ff169162000d809062000b87565b509294909350915050565b6001600160a01b03811660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519660205260408120819060408051610180810182528254610160820190815281526001830154602082015260028301549181019190915260038201546001600160a01b039081166060830152600483015481166080830152600583015480821660a084015264ffffffffff600160a01b808304821660c0860152600160c81b9092041660e08401526006840154821661010084015260079093015490811661012083015260ff9290049190911615156101408201529050600062000e9b7fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519390565b6001600160a01b03808716600090815260079290920160209081526040808420928816845291905281206001810154815491935062000eda91620021d4565b905060008360a001516001600160a01b031663350fd0be6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f1c57600080fd5b505afa15801562000f31573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f579190620021a4565b60a08501516040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291925060009183918916906370a082319060240160206040518083038186803b15801562000fbf57600080fd5b505afa15801562000fd4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ffa9190620021a4565b62001006919062002241565b905082156200102d57620010276200101f8483620021d4565b849062001c6b565b62001030565b60005b98975050505050505050565b60026000541415620010915760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620002be565b600260008181556001600160a01b0385811682527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519660209081526040808420815161018081018352815461016082019081528152600180830154948201949094529581015491860191909152600381015483166060860152600481015483166080860152600581015480841660a087015264ffffffffff600160a01b808304821660c0890152600160c81b9092041660e08701526006820154841661010087015260079091015492831661012086015260ff9204919091161515610140840152819085908111156200118757620011876200218e565b1462001198578160a001516200119e565b81608001515b9050306001600160a01b031663d26aaa3e826001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015620011e957600080fd5b505afa158015620011fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200122491906200225b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260248101869052336044820152306064820152608401600060405180830381600087803b1580156200129157600080fd5b505af1158015620012a6573d6000803e3d6000fd5b50506040517f6e553f65000000000000000000000000000000000000000000000000000000008152600481018690523360248201526001600160a01b0384169250636e553f659150604401602060405180830381600087803b1580156200130c57600080fd5b505af115801562001321573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013479190620021a4565b50336001600160a01b03168261010001516001600160a01b0316866001600160a01b03167fc552204986f9c40c2e06fbb236c412914b65880d2047ca21ff2b3b5a28d5357387876040516200139e929190620021ef565b60405180910390a450506001600055505050565b60006200140e7fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51a5620013e362001cae565b6000357fffffffff000000000000000000000000000000000000000000000000000000001662001d21565b905090565b6001600160a01b03831660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51966020526040812081906040805161018081018252825461016082019081528152600180840154602083015260028401549282019290925260038301546001600160a01b039081166060830152600484015481166080830152600584015480821660a084015264ffffffffff600160a01b808304821660c0860152600160c81b9092041660e08401526006850154821661010084015260079094015490811661012083015260ff93900492909216151561014083015290915060009084908111156200151257620015126200218e565b62001523575060808101516200152a565b5060a08101515b6040517fced4cd2e0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015282169063ced4cd2e906024015b60206040518083038186803b1580156200158657600080fd5b505afa1580156200159b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015c19190620021a4565b9695505050505050565b6001600160a01b0382163b6200160d576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051602080820183526000918290526001600160a01b03851682527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c519681528282208351918201909352915482525062001669818362001eba565b6001600160a01b03831660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51966020526040902081519055505050565b6001600160a01b03831660009081527fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51966020526040812081906040805161018081018252825461016082019081528152600180840154602083015260028401549282019290925260038301546001600160a01b039081166060830152600484015481166080830152600584015480821660a084015264ffffffffff600160a01b808304821660c0860152600160c81b9092041660e08401526006850154821661010084015260079094015490811661012083015260ff9390049290921615156101408301529091506000908490811115620017a857620017a86200218e565b620017b957506080810151620017c0565b5060a08101515b6040517fce96cb770000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015282169063ce96cb77906024016200156d565b60058401546001600160a01b03161580156200182f575060048401546001600160a01b0316155b6200187d5760405162461bcd60e51b815260206004820152601f60248201527f6465706f73697420746f6b656e7320616c7265616479206465706c6f796564006044820152606401620002be565b60408051602080820183528654825282517f313ce56700000000000000000000000000000000000000000000000000000000815292517fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51939387939262001951926001600160a01b0386169263313ce567926004808301939192829003018186803b1580156200190b57600080fd5b505afa15801562001920573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200194691906200227b565b829060ff1662001f01565b80518755604080513060248201526001600160a01b038881166044808401919091528351808403909101815260649092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f485cc9550000000000000000000000000000000000000000000000000000000017905260018501549091620019e191168262001f6c565b60058901805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283169081179091556040517f095ea7b3000000000000000000000000000000000000000000000000000000008152600481019190915260001960248201529084169063095ea7b390604401602060405180830381600087803b15801562001a6d57600080fd5b505af115801562001a82573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001aa89190620022a0565b50600284015462001ac3906001600160a01b03168262001f6c565b6004898101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039384169081179091556040517f095ea7b30000000000000000000000000000000000000000000000000000000081529182015260001960248201529084169063095ea7b390604401602060405180830381600087803b15801562001b4c57600080fd5b505af115801562001b61573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b879190620022a0565b506003880180546001600160a01b03881673ffffffffffffffffffffffffffffffffffffffff199091161790556007880180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055604051859062001bf49062001fb0565b6001600160a01b039091168152602001604051809103906000f08015801562001c21573d6000803e3d6000fd5b5060078901805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b039384161790915560069099018054909916971696909617909655505050505050565b60008062001c7b600284620022c4565b90508262001c966b033b2e3c9fd0803ce800000086620022e7565b62001ca29083620021d4565b6200076f9190620022c4565b60006014361080159062001ceb57507fcefae263aa054db53617928bc915f31f052caa2df6a635924d36f37f8c9c51a7546001600160a01b031633145b1562001d1c57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b82546040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301523060248301527fffffffff0000000000000000000000000000000000000000000000000000000084166044830152600092169063b70096139060640160206040518083038186803b15801562001dae57600080fd5b505afa15801562001dc3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001de99190620022a0565b806200076f575060018401546040517fb70096130000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301523060248301527fffffffff00000000000000000000000000000000000000000000000000000000851660448301529091169063b70096139060640160206040518083038186803b15801562001e7f57600080fd5b505afa15801562001e94573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200076f9190620022a0565b60188162001eca57600062001ecd565b60015b83517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffff1660ff9190911690911b1790915250565b60ff81111562001f3d576040517fd25598a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff1660109190911b179052565b6000828260405162001f7e9062001fbe565b62001f8b92919062002309565b604051809103906000f08015801562001fa8573d6000803e3d6000fd5b509392505050565b610545806200239183390190565b610a2a80620028d683390190565b6001600160a01b0381168114620008d657600080fd5b80356002811062001ff257600080fd5b919050565b6000806000606084860312156200200d57600080fd5b83356200201a8162001fcc565b92506200202a6020850162001fe2565b9150604084013590509250925092565b600080604083850312156200204e57600080fd5b82356200205b8162001fcc565b915060208301356200206d8162001fcc565b809150509250929050565b6000806000606084860312156200208e57600080fd5b83356200209b8162001fcc565b92506020840135620020ad8162001fcc565b9150620020bd6040850162001fe2565b90509250925092565b600060208284031215620020d957600080fd5b8135620020e68162001fcc565b9392505050565b600080600080608085870312156200210457600080fd5b8435620021118162001fcc565b93506020850135620021238162001fcc565b92506040850135620021358162001fcc565b91506060850135620021478162001fcc565b939692955090935050565b600080604083850312156200216657600080fd5b8235620021738162001fcc565b9150602083013564ffffffffff811681146200206d57600080fd5b634e487b7160e01b600052602160045260246000fd5b600060208284031215620021b757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115620021ea57620021ea620021be565b500190565b60408101600284106200221257634e487b7160e01b600052602160045260246000fd5b9281526020015290565b600061ffff80831681811415620022375762002237620021be565b6001019392505050565b600082821015620022565762002256620021be565b500390565b6000602082840312156200226e57600080fd5b8151620020e68162001fcc565b6000602082840312156200228e57600080fd5b815160ff81168114620020e657600080fd5b600060208284031215620022b357600080fd5b81518015158114620020e657600080fd5b600082620022e257634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615620023045762002304620021be565b500290565b6001600160a01b038316815260006020604081840152835180604085015260005b8181101562002348578581018301518582016060015282016200232a565b818111156200235b576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160600194935050505056fe608060405234801561001057600080fd5b5060405161054538038061054583398101604081905261002f91610151565b61003833610047565b61004181610097565b50610181565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100aa8161014260201b6101c71760201c565b6101205760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000606482015260840160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03163b151590565b60006020828403121561016357600080fd5b81516001600160a01b038116811461017a57600080fd5b9392505050565b6103b5806101906000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063715018a611610050578063715018a6146100aa5780638da5cb5b146100b2578063f2fde38b146100c357600080fd5b80633659cfe61461006c5780635c60da1b14610081575b600080fd5b61007f61007a36600461034f565b6100d6565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61007f61011e565b6000546001600160a01b031661008e565b61007f6100d136600461034f565b610132565b6100de6101d6565b6100e781610230565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6101266101d6565b61013060006102e7565b565b61013a6101d6565b6001600160a01b0381166101bb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6101c4816102e7565b50565b6001600160a01b03163b151590565b6000546001600160a01b031633146101305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101b2565b6001600160a01b0381163b6102ad5760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e74726163740000000000000000000000000060648201526084016101b2565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561036157600080fd5b81356001600160a01b038116811461037857600080fd5b939250505056fea264697066735822122003faeb45c60cd8360d42695011766d23e632697ebba2f40c230eb0bd2e6784b064736f6c63430008090033608060405260405162000a2a38038062000a2a8339810160408190526200002691620004aa565b62000034828260006200003c565b5050620005e9565b620000478362000121565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a2600082511180620000895750805b156200011c576200011a836001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620000cd57600080fd5b505afa158015620000e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000108919062000578565b83620002e360201b620000291760201c565b505b505050565b62000137816200031260201b620000551760201c565b620001975760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b62000221816001600160a01b0316635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620001d557600080fd5b505afa158015620001ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000210919062000578565b6200031260201b620000551760201c565b620002885760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b60648201526084016200018e565b80620002c27fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6200032160201b620000711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606200030b838360405180606001604052806027815260200162000a036027913962000324565b9392505050565b6001600160a01b03163b151590565b90565b60606001600160a01b0384163b6200038e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200018e565b600080856001600160a01b031685604051620003ab919062000596565b600060405180830381855af49150503d8060008114620003e8576040519150601f19603f3d011682016040523d82523d6000602084013e620003ed565b606091505b509092509050620004008282866200040a565b9695505050505050565b606083156200041b5750816200030b565b8251156200042c5782518084602001fd5b8160405162461bcd60e51b81526004016200018e9190620005b4565b80516001600160a01b03811681146200046057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004985781810151838201526020016200047e565b838111156200011a5750506000910152565b60008060408385031215620004be57600080fd5b620004c98362000448565b60208401519092506001600160401b0380821115620004e757600080fd5b818501915085601f830112620004fc57600080fd5b81518181111562000511576200051162000465565b604051601f8201601f19908116603f011681019083821181831017156200053c576200053c62000465565b816040528281528860208487010111156200055657600080fd5b620005698360208301602088016200047b565b80955050505050509250929050565b6000602082840312156200058b57600080fd5b6200030b8262000448565b60008251620005aa8184602087016200047b565b9190910192915050565b6020815260008251806020840152620005d58160408501602087016200047b565b601f01601f19169190910160400192915050565b61040a80620005f96000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b610136565b565b606061004e83836040518060600160405280602781526020016103ae6027913961015a565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d505473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100f957600080fd5b505afa15801561010d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013191906102da565b905090565b3660008037600080366000845af43d6000803e808015610155573d6000f35b3d6000fd5b606073ffffffffffffffffffffffffffffffffffffffff84163b610205576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161022d9190610340565b600060405180830381855af49150503d8060008114610268576040519150601f19603f3d011682016040523d82523d6000602084013e61026d565b606091505b509150915061027d828286610287565b9695505050505050565b6060831561029657508161004e565b8251156102a65782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc919061035c565b6000602082840312156102ec57600080fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461004e57600080fd5b60005b8381101561032b578181015183820152602001610313565b8381111561033a576000848401525b50505050565b60008251610352818460208701610310565b9190910192915050565b602081526000825180602084015261037b816040850160208701610310565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220be28ef223eef64e5fa547e5d5c9cd8eabe825cdda9ccb4118360c3fe9929523b64736f6c63430008090033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aac29ddb49d6382f06bcf4eb99c1e3d9ed8093a7e7a41ff1737eafe585b2671264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4557,
        "contract": "contracts/voyage/facets/LiquidityFacet.sol:LiquidityFacet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}