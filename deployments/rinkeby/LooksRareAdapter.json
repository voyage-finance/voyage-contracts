{
  "address": "0xB8b1aA24F96ec84a4e6D5c31B1ee04E0031e5857",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "extractAssetInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetInfo",
          "name": "assetInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "validate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f2ab7c9896bbf7d9f8f41c3053775084542409e50f4989ef13f7ff641d51d0c",
  "receipt": {
    "to": null,
    "from": "0x7bB17c9401110D05ec39894334cC9d7721E90688",
    "contractAddress": "0xB8b1aA24F96ec84a4e6D5c31B1ee04E0031e5857",
    "transactionIndex": 14,
    "gasUsed": "496029",
    "logsBloom": "0x
    "blockHash": "0x04b437b79bf7da62a9681fab8b438481bc34ad36ef7bfe0e5d561b09610d2487",
    "transactionHash": "0x1f2ab7c9896bbf7d9f8f41c3053775084542409e50f4989ef13f7ff641d51d0c",
    "logs": [],
    "blockNumber": 11291916,
    "cumulativeGasUsed": "6242609",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "41a06cd71375a3553501e1e8085a4a59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"extractAssetInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetInfo\",\"name\":\"assetInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/voyage/adapter/LooksRareAdapter.sol\":\"LooksRareAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/voyage/adapter/LooksRareAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {IMarketPlaceAdapter, AssetInfo} from \\\"../interfaces/IMarketPlaceAdapter.sol\\\";\\n\\nstruct MakerOrder {\\n    bool isOrderAsk; // true --> ask / false --> bid\\n    address signer; // signer of the maker order\\n    address collection; // collection address\\n    uint256 price; // price (used as )\\n    uint256 tokenId; // id of the token\\n    uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\n    address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\n    address currency; // currency (e.g., WETH)\\n    uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n    uint256 startTime; // startTime in timestamp\\n    uint256 endTime; // endTime in timestamp\\n    uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n    bytes params; // additional parameters\\n    uint8 v; // v: parameter (27 or 28)\\n    bytes32 r; // r: parameter\\n    bytes32 s; // s: parameter\\n}\\n\\nstruct TakerOrder {\\n    bool isOrderAsk; // true --> ask / false --> bid\\n    address taker; // msg.sender\\n    uint256 price; // final price for the purchase\\n    uint256 tokenId;\\n    uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n    bytes params; // other params (e.g., tokenId)\\n}\\n\\ninterface ILooksRareExchange {\\n    function matchAskWithTakerBidUsingETHAndWETH(\\n        TakerOrder calldata takerBid,\\n        MakerOrder calldata makerAsk\\n    ) external payable;\\n\\n    function matchAskWithTakerBid(\\n        TakerOrder calldata takerBid,\\n        MakerOrder calldata makerAsk\\n    ) external;\\n\\n    function matchBidWithTakerAsk(\\n        TakerOrder calldata takerAsk,\\n        MakerOrder calldata makerBid\\n    ) external;\\n}\\n\\ncontract LooksRareAdapter is IMarketPlaceAdapter {\\n    // keccak256(\\\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\\\")\\n    bytes32 internal constant MAKER_ORDER_HASH =\\n        0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\\n\\n    function hash(MakerOrder memory makerOrder)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MAKER_ORDER_HASH,\\n                    makerOrder.isOrderAsk,\\n                    makerOrder.signer,\\n                    makerOrder.collection,\\n                    makerOrder.price,\\n                    makerOrder.tokenId,\\n                    makerOrder.amount,\\n                    makerOrder.strategy,\\n                    makerOrder.currency,\\n                    makerOrder.nonce,\\n                    makerOrder.startTime,\\n                    makerOrder.endTime,\\n                    makerOrder.minPercentageToAsk,\\n                    keccak256(makerOrder.params)\\n                )\\n            );\\n    }\\n\\n    struct PurchaseParam {\\n        address marketplace;\\n        bytes4 selector;\\n        bytes makerOrder;\\n        bytes takerOrder;\\n    }\\n\\n    function extractAssetInfo(bytes calldata _data)\\n        external\\n        pure\\n        returns (AssetInfo memory assetInfo)\\n    {\\n        PurchaseParam memory param;\\n        (\\n            param.marketplace,\\n            param.selector,\\n            param.makerOrder,\\n            param.takerOrder\\n        ) = abi.decode(_data, (address, bytes4, bytes, bytes));\\n\\n        TakerOrder memory takerOrder;\\n        (\\n            takerOrder.isOrderAsk,\\n            takerOrder.taker,\\n            takerOrder.price,\\n            takerOrder.tokenId,\\n            takerOrder.minPercentageToAsk,\\n            takerOrder.params\\n        ) = abi.decode(\\n            param.takerOrder,\\n            (bool, address, uint256, uint256, uint256, bytes)\\n        );\\n\\n        assetInfo.assetPrice = takerOrder.price;\\n        assetInfo.tokenId = takerOrder.tokenId;\\n\\n        return assetInfo;\\n    }\\n\\n    function validate(bytes calldata _data) external pure returns (bool) {\\n        return _validate(_data);\\n    }\\n\\n    function execute(bytes calldata _data)\\n        external\\n        pure\\n        returns (bytes memory)\\n    {\\n        if (_validate(_data)) {\\n            PurchaseParam memory param;\\n            (\\n                param.marketplace,\\n                param.selector,\\n                param.makerOrder,\\n                param.takerOrder\\n            ) = abi.decode(_data, (address, bytes4, bytes, bytes));\\n            bytes memory data = abi.encode(param.takerOrder, param.makerOrder);\\n            data = abi.encodePacked(param.selector, data);\\n            return data;\\n        }\\n        // use native error type here cause an ABI issue\\n        revert(\\\"invalid data\\\");\\n    }\\n\\n    function _validate(bytes calldata _data) private pure returns (bool) {\\n        PurchaseParam memory param;\\n        (\\n            param.marketplace,\\n            param.selector,\\n            param.makerOrder,\\n            param.takerOrder\\n        ) = abi.decode(_data, (address, bytes4, bytes, bytes));\\n\\n        // bytes4(keccak256(matchAskWithTakerBidUsingETHAndWETH()))\\n        // 0xb4e4b296\\n        if (\\n            param.selector !=\\n            ILooksRareExchange(address(0))\\n                .matchAskWithTakerBidUsingETHAndWETH\\n                .selector\\n        ) {\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x363304899dc50e435dfd4f4b27d21eecc117c6cf9c6a959c49cad0c4b8e4f840\",\"license\":\"GPL-3.0\"},\"contracts/voyage/interfaces/IMarketPlaceAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nstruct AssetInfo {\\n    uint256 tokenId;\\n    uint256 assetPrice;\\n}\\n\\ninterface IMarketPlaceAdapter {\\n    function extractAssetInfo(bytes calldata _data)\\n        external\\n        pure\\n        returns (AssetInfo memory);\\n\\n    function validate(bytes calldata _data) external view returns (bool);\\n\\n    function execute(bytes calldata _data) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x02dbc2e2ea68e0b2f3db8a69314e436551aae2e947720d4a764162e70d515090\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610810806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806309c5eabe146100465780630cfe386f1461006f578063c16e50ef1461009d575b600080fd5b610059610054366004610410565b6100c0565b60405161006691906104de565b60405180910390f35b61008261007d366004610410565b610215565b60408051825181526020928301519281019290925201610066565b6100b06100ab366004610410565b610345565b6040519015158152602001610066565b60606100cc8383610358565b156101a9576040805160808101825260008082526020820152606091810182905281810191909152610100838501856105f4565b6060850181905260408086018390527fffffffff0000000000000000000000000000000000000000000000000000000090931660208087019190915273ffffffffffffffffffffffffffffffffffffffff90941685529151600093610167939291016106a2565b604051602081830303815290604052905081602001518160405160200161018f9291906106d0565b60408051601f19818403018152919052925061020f915050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c696420646174610000000000000000000000000000000000000000604482015260640160405180910390fd5b92915050565b60408051808201909152600080825260208201526040805160808101825260008082526020820152606091810182905281810191909152610258838501856105f4565b6060808601919091526040808601929092527fffffffff0000000000000000000000000000000000000000000000000000000090921660208086019190915273ffffffffffffffffffffffffffffffffffffffff9093168452805160c0810182526000808252938101849052908101839052808201839052608081019290925260a082015281606001518060200190518101906102f59190610718565b60a08701526080860152606085019081526040850182905273ffffffffffffffffffffffffffffffffffffffff909216602080860191909152921515909352908401919091525182525092915050565b60006103518383610358565b9392505050565b60408051608081018252600080825260208201819052606092820183905282820192909252610389838501856105f4565b606085015260408401527fffffffff00000000000000000000000000000000000000000000000000000000166020830181905273ffffffffffffffffffffffffffffffffffffffff90911682527fb4e4b296000000000000000000000000000000000000000000000000000000001461040657600091505061020f565b5060019392505050565b6000806020838503121561042357600080fd5b823567ffffffffffffffff8082111561043b57600080fd5b818501915085601f83011261044f57600080fd5b81358181111561045e57600080fd5b86602082850101111561047057600080fd5b60209290920196919550909350505050565b60005b8381101561049d578181015183820152602001610485565b838111156104ac576000848401525b50505050565b600081518084526104ca816020860160208601610482565b601f01601f19169290920160200192915050565b60208152600061035160208301846104b2565b73ffffffffffffffffffffffffffffffffffffffff8116811461051357600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561056e5761056e610516565b604052919050565b600067ffffffffffffffff82111561059057610590610516565b50601f01601f191660200190565b600082601f8301126105af57600080fd5b81356105c26105bd82610576565b610545565b8181528460208386010111156105d757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561060a57600080fd5b8435610615816104f1565b935060208501357fffffffff000000000000000000000000000000000000000000000000000000008116811461064a57600080fd5b9250604085013567ffffffffffffffff8082111561066757600080fd5b6106738883890161059e565b9350606087013591508082111561068957600080fd5b506106968782880161059e565b91505092959194509250565b6040815260006106b560408301856104b2565b82810360208401526106c781856104b2565b95945050505050565b7fffffffff00000000000000000000000000000000000000000000000000000000831681526000825161070a816004850160208701610482565b919091016004019392505050565b60008060008060008060c0878903121561073157600080fd5b8651801515811461074157600080fd5b6020880151909650610752816104f1565b8095505060408701519350606087015192506080870151915060a087015167ffffffffffffffff81111561078557600080fd5b8701601f8101891361079657600080fd5b80516107a46105bd82610576565b8181528a60208385010111156107b957600080fd5b6107ca826020830160208601610482565b809350505050929550929550929556fea2646970667358221220938c4da65054509043a58a76b76131d78bac6132b7e269450341c1e85f0f040264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806309c5eabe146100465780630cfe386f1461006f578063c16e50ef1461009d575b600080fd5b610059610054366004610410565b6100c0565b60405161006691906104de565b60405180910390f35b61008261007d366004610410565b610215565b60408051825181526020928301519281019290925201610066565b6100b06100ab366004610410565b610345565b6040519015158152602001610066565b60606100cc8383610358565b156101a9576040805160808101825260008082526020820152606091810182905281810191909152610100838501856105f4565b6060850181905260408086018390527fffffffff0000000000000000000000000000000000000000000000000000000090931660208087019190915273ffffffffffffffffffffffffffffffffffffffff90941685529151600093610167939291016106a2565b604051602081830303815290604052905081602001518160405160200161018f9291906106d0565b60408051601f19818403018152919052925061020f915050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c696420646174610000000000000000000000000000000000000000604482015260640160405180910390fd5b92915050565b60408051808201909152600080825260208201526040805160808101825260008082526020820152606091810182905281810191909152610258838501856105f4565b6060808601919091526040808601929092527fffffffff0000000000000000000000000000000000000000000000000000000090921660208086019190915273ffffffffffffffffffffffffffffffffffffffff9093168452805160c0810182526000808252938101849052908101839052808201839052608081019290925260a082015281606001518060200190518101906102f59190610718565b60a08701526080860152606085019081526040850182905273ffffffffffffffffffffffffffffffffffffffff909216602080860191909152921515909352908401919091525182525092915050565b60006103518383610358565b9392505050565b60408051608081018252600080825260208201819052606092820183905282820192909252610389838501856105f4565b606085015260408401527fffffffff00000000000000000000000000000000000000000000000000000000166020830181905273ffffffffffffffffffffffffffffffffffffffff90911682527fb4e4b296000000000000000000000000000000000000000000000000000000001461040657600091505061020f565b5060019392505050565b6000806020838503121561042357600080fd5b823567ffffffffffffffff8082111561043b57600080fd5b818501915085601f83011261044f57600080fd5b81358181111561045e57600080fd5b86602082850101111561047057600080fd5b60209290920196919550909350505050565b60005b8381101561049d578181015183820152602001610485565b838111156104ac576000848401525b50505050565b600081518084526104ca816020860160208601610482565b601f01601f19169290920160200192915050565b60208152600061035160208301846104b2565b73ffffffffffffffffffffffffffffffffffffffff8116811461051357600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561056e5761056e610516565b604052919050565b600067ffffffffffffffff82111561059057610590610516565b50601f01601f191660200190565b600082601f8301126105af57600080fd5b81356105c26105bd82610576565b610545565b8181528460208386010111156105d757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561060a57600080fd5b8435610615816104f1565b935060208501357fffffffff000000000000000000000000000000000000000000000000000000008116811461064a57600080fd5b9250604085013567ffffffffffffffff8082111561066757600080fd5b6106738883890161059e565b9350606087013591508082111561068957600080fd5b506106968782880161059e565b91505092959194509250565b6040815260006106b560408301856104b2565b82810360208401526106c781856104b2565b95945050505050565b7fffffffff00000000000000000000000000000000000000000000000000000000831681526000825161070a816004850160208701610482565b919091016004019392505050565b60008060008060008060c0878903121561073157600080fd5b8651801515811461074157600080fd5b6020880151909650610752816104f1565b8095505060408701519350606087015192506080870151915060a087015167ffffffffffffffff81111561078557600080fd5b8701601f8101891361079657600080fd5b80516107a46105bd82610576565b8181528a60208385010111156107b957600080fd5b6107ca826020830160208601610482565b809350505050929550929550929556fea2646970667358221220938c4da65054509043a58a76b76131d78bac6132b7e269450341c1e85f0f040264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}